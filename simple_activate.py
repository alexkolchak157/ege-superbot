#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ä—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç telegram –±–æ—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ aiosqlite –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É.

Usage: python3 simple_activate.py <order_id>
"""

import sys
import asyncio
import aiosqlite
import json
from datetime import datetime, timedelta
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATABASE_PATH = 'quiz_async.db'


async def activate_subscription_simple(order_id: str):
    """–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""

    async with aiosqlite.connect(DATABASE_PATH, timeout=30.0) as conn:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        cursor = await conn.execute(
            """
            SELECT user_id, plan_id, metadata, status
            FROM payments
            WHERE order_id = ?
            """,
            (order_id,)
        )
        payment_info = await cursor.fetchone()

        if not payment_info:
            logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è order_id: {order_id}")
            return False

        user_id, plan_id, metadata_str, current_status = payment_info

        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: user_id={user_id}, plan_id={plan_id}, status={current_status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        cursor = await conn.execute(
            """
            SELECT COUNT(*) FROM module_subscriptions
            WHERE user_id = ? AND is_active = 1
            """,
            (user_id,)
        )
        count = await cursor.fetchone()

        if count and count[0] > 0:
            logger.info(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å {count[0]} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é? (yes/no): ")
            if response.lower() != 'yes':
                return False

        # –ü–∞—Ä—Å–∏–º metadata
        try:
            metadata = json.loads(metadata_str) if metadata_str else {}
        except:
            metadata = {}

        duration_months = metadata.get('duration_months', 1)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        plan_config = get_plan_config(plan_id)

        if not plan_config:
            logger.error(f"‚ùå –ü–ª–∞–Ω {plan_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False

        logger.info(f"–ü–ª–∞–Ω: {plan_config['name']}")
        logger.info(f"–ú–æ–¥—É–ª–∏: {plan_config['modules']}")
        logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_months} –º–µ—Å.")

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if plan_id == 'trial_7days':
            expires_at = datetime.now() + timedelta(days=7)
        else:
            expires_at = datetime.now() + timedelta(days=duration_months * 30)

        expires_at_str = expires_at.strftime('%Y-%m-%d %H:%M:%S')

        # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
        for module_code in plan_config['modules']:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å
                cursor = await conn.execute(
                    """
                    SELECT id, is_active, expires_at FROM module_subscriptions
                    WHERE user_id = ? AND module_code = ?
                    """,
                    (user_id, module_code)
                )
                existing = await cursor.fetchone()

                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    logger.info(f"  –û–±–Ω–æ–≤–ª—è—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–æ–¥—É–ª—å {module_code}")
                    await conn.execute(
                        """
                        UPDATE module_subscriptions
                        SET expires_at = ?, is_active = 1, plan_id = ?
                        WHERE user_id = ? AND module_code = ?
                        """,
                        (expires_at_str, plan_id, user_id, module_code)
                    )
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    logger.info(f"  –°–æ–∑–¥–∞—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–æ–¥—É–ª—å {module_code}")
                    await conn.execute(
                        """
                        INSERT INTO module_subscriptions
                        (user_id, module_code, plan_id, expires_at, is_active)
                        VALUES (?, ?, ?, ?, 1)
                        """,
                        (user_id, module_code, plan_id, expires_at_str)
                    )
            except Exception as e:
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {module_code}: {e}")
                return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        await conn.execute(
            """
            UPDATE payments
            SET status = 'completed',
                completed_at = CURRENT_TIMESTAMP
            WHERE order_id = ?
            """,
            (order_id,)
        )

        # –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–∏–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∏–∞–ª–∞
        if plan_id == 'trial_7days':
            await conn.execute(
                """
                INSERT OR REPLACE INTO trial_history
                (user_id, trial_activated_at, trial_expires_at)
                VALUES (?, CURRENT_TIMESTAMP, ?)
                """,
                (user_id, expires_at_str)
            )

        await conn.commit()

        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        logger.info(f"   User ID: {user_id}")
        logger.info(f"   –ü–ª–∞–Ω: {plan_id}")
        logger.info(f"   –ú–æ–¥—É–ª–µ–π: {len(plan_config['modules'])}")
        logger.info(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at_str}")

        return True


def get_plan_config(plan_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞."""
    plans = {
        'trial_7days': {
            'name': 'üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
            'modules': ['test_part', 'task19', 'task20', 'task24', 'task25'],
            'duration_days': 7
        },
        'month_1': {
            'name': 'üìÖ 1 –º–µ—Å—è—Ü',
            'modules': ['test_part', 'task19', 'task20', 'task24', 'task25'],
            'duration_days': 30
        },
        'month_3': {
            'name': 'üìÖ 3 –º–µ—Å—è—Ü–∞',
            'modules': ['test_part', 'task19', 'task20', 'task24', 'task25'],
            'duration_days': 90
        },
        'year_1': {
            'name': 'üìÖ 1 –≥–æ–¥',
            'modules': ['test_part', 'task19', 'task20', 'task24', 'task25'],
            'duration_days': 365
        }
    }

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    if plan_id.startswith('custom_'):
        return {
            'name': '–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–Ω',
            'modules': ['test_part', 'task19', 'task20', 'task24', 'task25'],
            'duration_days': 30
        }

    return plans.get(plan_id)


async def main():
    if len(sys.argv) < 2:
        print("Usage: python3 simple_activate.py <order_id>")
        print()
        print("Example:")
        print("  python3 simple_activate.py order_6258384661_1761646304_2017e6a6")
        sys.exit(1)

    order_id = sys.argv[1]

    print()
    print("="*80)
    print("–†–£–ß–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–î–ü–ò–°–ö–ò")
    print("="*80)
    print()
    print(f"Order ID: {order_id}")
    print()
    print("–í–ù–ò–ú–ê–ù–ò–ï! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ Tinkoff!")
    print()

    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if response.lower() != 'yes':
        print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        sys.exit(0)

    print()
    success = await activate_subscription_simple(order_id)

    if success:
        print()
        print("="*80)
        print("‚úÖ –ì–û–¢–û–í–û!")
        print("="*80)
        print()
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  python3 check_payment_details.py {order_id}")
        print()
        sys.exit(0)
    else:
        print()
        print("="*80)
        print("‚ùå –û–®–ò–ë–ö–ê!")
        print("="*80)
        print()
        print("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())

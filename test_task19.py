#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ task19
"""

import asyncio
import logging
import sys
import os
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

@pytest.mark.asyncio
async def test_task19():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ task19"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ task19...\n")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞...")
    try:
        from task19.plugin import plugin
        print(f"‚úÖ –ü–ª–∞–≥–∏–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {plugin.title} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {plugin.menu_priority})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from task19 import handlers
        await handlers.init_task19_data()
        topics_count = len(handlers.task19_data.get('topics', []))
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ–º: {topics_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
        for topic in handlers.task19_data.get('topics', []):
            print(f"   - {topic['title']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ AI evaluator
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI evaluator...")
    try:
        from task19.evaluator import Task19AIEvaluator
        evaluator = Task19AIEvaluator()
        print(f"‚úÖ AI evaluator —Å–æ–∑–¥–∞–Ω")
        print(f"   –ú–∞–∫—Å. –±–∞–ª–ª–æ–≤: {evaluator.requirements.max_score}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {evaluator.requirements.task_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è evaluator: {e}")
        return
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
    try:
        prompt = evaluator.get_system_prompt()
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—É—á–µ–Ω ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"   –ù–∞—á–∞–ª–æ: {prompt[:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤...")
    try:
        from core.plugin_loader import discover_plugins, PLUGINS
        discover_plugins()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(PLUGINS)}")
        for p in PLUGINS:
            print(f"   - {p.title} (–∫–æ–¥: {p.code}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {p.menu_priority})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_task19())

# find_real_error.py - –ù–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç–æ—è—â—É—é –ø—Ä–∏—á–∏–Ω—É 502

import sys
import os
import traceback
import asyncio

print("üîç –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–û–ô –û–®–ò–ë–ö–ò WEBHOOK")
print("=" * 60)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
try:
    from payment.config import DATABASE_PATH, TINKOFF_TERMINAL_KEY, TINKOFF_SECRET_KEY
    print(f"‚úÖ DATABASE_PATH: {DATABASE_PATH}")
    print(f"‚úÖ TINKOFF_TERMINAL_KEY: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TINKOFF_TERMINAL_KEY else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    print(f"‚úÖ TINKOFF_SECRET_KEY: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TINKOFF_SECRET_KEY else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ë–î
    if os.path.exists(DATABASE_PATH):
        print(f"‚úÖ –§–∞–π–ª –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.getsize(DATABASE_PATH):,} –±–∞–π—Ç")
    else:
        print(f"‚ùå –§–∞–π–ª –ë–î –ù–ï –ù–ê–ô–î–ï–ù: {DATABASE_PATH}")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ webhook —Å –æ—Ç–ª–∞–¥–∫–æ–π
print("\n2Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ webhook...")

class FakeRequest:
    async def json(self):
        return {
            "TerminalKey": "TEST",
            "OrderId": "test-order",
            "Status": "CONFIRMED", 
            "Token": "test",
            "PaymentId": "123",
            "Amount": 100000
        }
    
    class app:
        @staticmethod
        def get(key):
            return None

async def test_webhook_detailed():
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º webhook
        print("\nüîç –ò–º–ø–æ—Ä—Ç webhook –º–æ–¥—É–ª—è...")
        from payment import webhook
        print("‚úÖ –ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        if hasattr(webhook, 'handle_webhook'):
            print("‚úÖ handle_webhook –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå handle_webhook –ù–ï –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º verify_tinkoff_signature
        if hasattr(webhook, 'verify_tinkoff_signature'):
            print("‚úÖ verify_tinkoff_signature –Ω–∞–π–¥–µ–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏
            test_data = {"test": "data"}
            try:
                result = webhook.verify_tinkoff_signature(
                    test_data, "token", "terminal", "secret"
                )
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ verify_tinkoff_signature: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π request
        fake_request = FakeRequest()
        fake_request.app = FakeRequest.app
        
        print("\nüîç –í—ã–∑–æ–≤ handle_webhook...")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        original_verify = None
        if hasattr(webhook, 'verify_tinkoff_signature'):
            original_verify = webhook.verify_tinkoff_signature
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False
            webhook.verify_tinkoff_signature = lambda *args, **kwargs: False
            print("   –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏")
        
        try:
            response = await webhook.handle_webhook(fake_request)
            print(f"‚úÖ Webhook –≤–µ—Ä–Ω—É–ª: HTTP {response.status}")
            print(f"   –¢–µ–∫—Å—Ç: {response.text}")
            
            if response.status == 502:
                print("\n‚ùå –í–°–ï –ï–©–ï 502!")
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í handle_webhook:")
            print(f"–¢–∏–ø: {type(e).__name__}")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            print("\n–ü–æ–ª–Ω—ã–π traceback:")
            traceback.print_exc()
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            error_str = str(e).lower()
            if "subscriptionmanager" in error_str:
                print("\nüí° –ü—Ä–æ–±–ª–µ–º–∞ —Å SubscriptionManager")
                print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ payment/subscription_manager.py")
            elif "no such table" in error_str:
                print("\nüí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –≤ –ë–î")
                print(f"–û—à–∏–±–∫–∞: {e}")
            elif "getenv" in error_str:
                print("\nüí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ os.getenv() –≤—ã–∑–æ–≤—ã")
                
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            if original_verify:
                webhook.verify_tinkoff_signature = original_verify
                
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:")
        traceback.print_exc()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º SubscriptionManager –æ—Ç–¥–µ–ª—å–Ω–æ
print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ SubscriptionManager...")
try:
    from payment.subscription_manager import SubscriptionManager
    print("‚úÖ SubscriptionManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
    sm = SubscriptionManager()
    print("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
    methods = ['activate_subscription', 'update_payment_status', 'get_payment_by_order_id']
    for method in methods:
        if hasattr(sm, method):
            print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –ù–ï –ù–ê–ô–î–ï–ù")
            
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ SubscriptionManager: {e}")
    traceback.print_exc()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
print("\n" + "=" * 60)
asyncio.run(test_webhook_detailed())

print("\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
print("1. –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –≤—ã—à–µ - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –µ—ë")
print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞")
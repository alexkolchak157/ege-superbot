#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
–ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏.
"""

import os
import re
from typing import List, Tuple

def fix_indentation(file_path: str, error_lines: List[int] = None):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –≤ —Ñ–∞–π–ª–µ.
    """
    print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –≤ {file_path}")
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    fixed_lines = []
    changes_made = 0
    
    for i, line in enumerate(lines, 1):
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±—ã –Ω–∞ 4 –ø—Ä–æ–±–µ–ª–∞
        if '\t' in line:
            fixed_line = line.replace('\t', '    ')
            if fixed_line != line:
                changes_made += 1
                print(f"  –°—Ç—Ä–æ–∫–∞ {i}: –∑–∞–º–µ–Ω–µ–Ω—ã —Ç–∞–±—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã")
            fixed_lines.append(fixed_line)
        else:
            fixed_lines.append(line)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    if error_lines:
        for line_num in error_lines:
            if 0 < line_num <= len(fixed_lines):
                line = fixed_lines[line_num - 1]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—Å—Ç—É–ø –∫—Ä–∞—Ç–µ–Ω 4
                indent_match = re.match(r'^(\s*)', line)
                if indent_match:
                    indent = indent_match.group(1)
                    indent_len = len(indent)
                    if indent_len % 4 != 0:
                        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 4
                        new_indent_len = round(indent_len / 4) * 4
                        new_indent = ' ' * new_indent_len
                        fixed_lines[line_num - 1] = new_indent + line.lstrip()
                        changes_made += 1
                        print(f"  –°—Ç—Ä–æ–∫–∞ {line_num}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø ({indent_len} -> {new_indent_len} –ø—Ä–æ–±–µ–ª–æ–≤)")
    
    if changes_made > 0:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = file_path + '.indent_backup'
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(fixed_lines)
        print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changes_made}")
    else:
        print(f"  ‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")


def fix_decorator_syntax(file_path: str):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    """
    print(f"\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ {file_path}")
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    pattern = r'(@validate_state_transition[^\n]+)\n(\s*)(@safe_handler\(\))'
    
    matches = list(re.finditer(pattern, content))
    
    if matches:
        print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(matches)} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ—Ä—è–¥–∫–æ–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ (safe_handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º)
        for match in reversed(matches):  # –í –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
            validation_decorator = match.group(1)
            indent = match.group(2)
            safe_decorator = match.group(3)
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            correct_order = f"{safe_decorator}\n{indent}{validation_decorator}"
            
            content = content[:match.start()] + correct_order + content[match.end():]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤")
    else:
        print(f"  ‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")


def add_missing_function(file_path: str, function_name: str, function_code: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ñ–∞–π–ª.
    """
    print(f"\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ {function_name} –≤ {file_path}")
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    if f"def {function_name}" in content or f"async def {function_name}" in content:
        print(f"  ‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è {function_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏)
    last_function_match = None
    for match in re.finditer(r'\n(async def \w+|def \w+)[^\n]*:\n(?:(?:\s{4,}|\n).*\n)*', content):
        last_function_match = match
    
    if last_function_match:
        insert_pos = last_function_match.end()
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        content = content[:insert_pos] + "\n\n" + function_code + content[insert_pos:]
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"  ‚úÖ –§—É–Ω–∫—Ü–∏—è {function_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    print("üöÄ –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫\n")
    
    # –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –æ—Ç—Å—Ç—É–ø–æ–≤
    indent_errors = [
        ('task19/handlers.py', [787]),
        ('task20/handlers.py', [939]),
        ('task24/handlers.py', [1375]),
        ('test_part/handlers.py', [689]),
    ]
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    for file_path, error_lines in indent_errors:
        fix_indentation(file_path, error_lines)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –≤–æ –≤—Å–µ—Ö handlers
    handler_files = [
        'test_part/handlers.py',
        'test_part/missing_handlers.py',
        'task19/handlers.py',
        'task20/handlers.py',
        'task24/handlers.py',
        'task25/handlers.py',
    ]
    
    for file_path in handler_files:
        fix_decorator_syntax(file_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é show_theory –≤ task25
    show_theory_code = '''@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def show_theory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—é 25."""
    query = update.callback_query
    
    text = """üìö <b>–¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é 25</b>

<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:</b>

1Ô∏è‚É£ <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ö1 - 2 –±–∞–ª–ª–∞)</b>
‚Ä¢ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–∑–∏—Å–∞
‚Ä¢ –û–ø–æ—Ä–∞ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è
‚Ä¢ –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å —Å –≤–æ–ø—Ä–æ—Å–æ–º

2Ô∏è‚É£ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–ö2 - 1 –±–∞–ª–ª)</b>
‚Ä¢ –ß–µ—Ç–∫–∏–π –∏ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É

3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä—ã (–ö3 - 3 –±–∞–ª–ª–∞)</b>
‚Ä¢ –¢—Ä–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞
‚Ä¢ –ò–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —Å –¥–µ—Ç–∞–ª—è–º–∏

<b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>
‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
‚ùå –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä—ã
‚ùå –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–µ–∑–∏—Å—É"""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("üéØ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", callback_data="t25_practice"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE'''
    
    add_missing_function('task25/handlers.py', 'show_theory', show_theory_code)
    
    print("\n‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python -m core.app")
    print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏, –∑–∞–ø–∏—à–∏—Ç–µ –∏—Ö")
    print("3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    critical_imports = [
        "from core.state_validator import validate_state_transition, state_validator",
        "from telegram.ext import ConversationHandler"
    ]
    
    for file_path in handler_files:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            missing = []
            for imp in critical_imports:
                if imp not in content:
                    missing.append(imp)
            
            if missing:
                print(f"\n‚ö†Ô∏è {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–º–ø–æ—Ä—Ç—ã:")
                for m in missing:
                    print(f"   {m}")


if __name__ == "__main__":
    main()
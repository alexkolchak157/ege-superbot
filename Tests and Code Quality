name: Tests and Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, "3.10", 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov flake8 mypy black isort
    
    - name: Check code formatting with Black
      run: |
        black --check .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        # Stop if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports --no-strict-optional .
      continue-on-error: true
    
    - name: Run critical security tests
      run: |
        python test_fixes.py
    
    - name: Run pytest
      env:
        TELEGRAM_BOT_TOKEN: test_token
        YANDEX_GPT_API_KEY: test_key
        YANDEX_GPT_FOLDER_ID: test_folder
      run: |
        pytest -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Check for SQL injection vulnerabilities
      run: |
        # Проверка на использование f-строк в SQL запросах
        ! grep -r "f\".*SELECT\|INSERT\|UPDATE\|DELETE.*{" --include="*.py" .
    
    - name: Check for hardcoded secrets
      run: |
        # Проверка на захардкоженные ключи
        ! grep -r "api_key\s*=\s*[\"'][A-Za-z0-9]\{20,\}" --include="*.py" .
        ! grep -r "token\s*=\s*[\"'][A-Za-z0-9]\{20,\}" --include="*.py" .
    
    - name: Security audit with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          python -c "import json; data=json.load(open('bandit-report.json')); exit(1 if data['results'] else 0)"
        fi
      continue-on-error: true

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        pip install pylint radon xenon
    
    - name: Analyze code complexity
      run: |
        radon cc . -a -nb
        xenon . --max-absolute B --max-modules B --max-average A
    
    - name: Run pylint
      run: |
        pylint --exit-zero --disable=C,R,W --enable=E,F **/*.py
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t ege-superbot:${{ github.sha }} .
    
    - name: Run security scan on Docker image
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image ege-superbot:${{ github.sha }}
      continue-on-error: true

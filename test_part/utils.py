import random
import re
import logging
import csv
from io import StringIO, BytesIO
from datetime import datetime
from typing import List, Tuple, Dict, Any, Optional, Set

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.error import BadRequest

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from core.config import REQUIRED_CHANNEL  # –∏–∑ core
from core import db  # –∏–∑ core

try:
    from .topic_data import TOPIC_NAMES
except ImportError:
    logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª topic_data.py –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å TOPIC_NAMES –≤ –Ω–µ–º.")
    TOPIC_NAMES = {}

from .loader import QUESTIONS_DATA

logger = logging.getLogger(__name__)

# –ü—É–ª–ª —Ñ—Ä–∞–∑ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
CORRECT_PHRASES = [
    "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!",
    "‚úÖ –û—Ç–ª–∏—á–Ω–æ!",
    "‚úÖ –í–µ—Ä–Ω–æ!",
    "‚úÖ –¢–æ—á–Ω–æ!",
    "‚úÖ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!",
    "‚úÖ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "‚úÖ –ú–æ–ª–æ–¥–µ—Ü!",
    "‚úÖ –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!",
    "‚úÖ –ò–º–µ–Ω–Ω–æ —Ç–∞–∫!",
    "‚úÖ –ë–µ–∑—É–ø—Ä–µ—á–Ω–æ!",
    "‚úÖ –°—É–ø–µ—Ä!",
    "‚úÖ –ë–ª–µ—Å—Ç—è—â–µ!",
    "‚úÖ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!",
    "‚úÖ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!",
    "‚úÖ –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!",
]

# –ü—É–ª–ª —Ñ—Ä–∞–∑ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
INCORRECT_PHRASES = [
    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!",
    "‚ùå –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫!",
    "‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
    "‚ùå –û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞!",
    "‚ùå –ù–µ —É–≥–∞–¥–∞–ª–∏!",
    "‚ùå –ü—Ä–æ–º–∞—Ö!",
    "‚ùå –ú–∏–º–æ!",
    "‚ùå –ù–µ —Ç–æ!",
    "‚ùå –£–≤—ã, –Ω–µ—Ç!",
    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ!",
]

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–∫–æ–≤
STREAK_MILESTONE_PHRASES = {
    5: "üî• –ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è!",
    10: "üöÄ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–µ—Ä–∏—è!",
    15: "üíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤–∞—è —Å–µ—Ä–∏—è!",
    20: "‚≠ê –ó–≤–µ–∑–¥–Ω–∞—è —Å–µ—Ä–∏—è!",
    25: "üèÜ –ß–µ–º–ø–∏–æ–Ω—Å–∫–∞—è —Å–µ—Ä–∏—è!",
    30: "üëë –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è —Å–µ—Ä–∏—è!",
    50: "üåü –õ–ï–ì–ï–ù–î–ê–†–ù–ê–Ø –°–ï–†–ò–Ø!",
    100: "üí´ –ú–ò–§–ò–ß–ï–°–ö–ê–Ø –°–ï–†–ò–Ø!"
}

def get_random_correct_phrase() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
    return random.choice(CORRECT_PHRASES)

def get_random_incorrect_phrase() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
    return random.choice(INCORRECT_PHRASES)

def get_streak_milestone_phrase(streak: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞."""
    for milestone in sorted(STREAK_MILESTONE_PHRASES.keys(), reverse=True):
        if streak >= milestone:
            return STREAK_MILESTONE_PHRASES[milestone]
    return ""

async def safe_edit_message(
    update: Update, 
    new_text: str, 
    reply_markup=None, 
    parse_mode=None
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫—É "–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ".
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    """
    query = update.callback_query
    if not query:
        return False
        
    try:
        await query.edit_message_text(
            new_text, 
            reply_markup=reply_markup, 
            parse_mode=parse_mode
        )
        return True
    except BadRequest as e:
        if "message is not modified" in str(e).lower():
            logger.debug(f"Message not modified for user {query.from_user.id}")
            return False
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
            raise

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def choose_question(user_id: int, questions: list) -> dict:
    """–í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö."""
    if not questions:
        return None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ
        answered_ids = await db.get_answered_question_ids(user_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º
        available = [q for q in questions if q['id'] not in answered_ids]
        
        # –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–≤–µ—á–µ–Ω—ã - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        if not available:
            await db.reset_answered_questions(user_id)
            available = questions
        
        return random.choice(available) if available else None
    
    except Exception as e:
        logger.error(f"Error choosing question for user {user_id}: {e}")
        return random.choice(questions) if questions else None

async def safe_answer_callback(update: Update, text: str = None, show_alert: bool = False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query."""
    if update.callback_query:
        try:
            await update.callback_query.answer(text, show_alert=show_alert)
        except Exception as e:
            logger.warning(f"Failed to answer callback query: {e}")

def create_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])

async def check_subscription(user_id: int, bot, channel: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."""
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return True
    
    # –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ:
    """
    if not channel:
        channel = REQUIRED_CHANNEL
        
    if not channel:
        logger.warning("–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return True
    
    try:
        from telegram.constants import ChatMemberStatus
        
        member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if hasattr(member, 'status'):
            return member.status in [
                ChatMemberStatus.MEMBER,
                ChatMemberStatus.ADMINISTRATOR,
                ChatMemberStatus.OWNER,
                ChatMemberStatus.CREATOR
            ]
        
        # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        status = getattr(member, 'status', None)
        if status:
            return status.lower() in ['member', 'administrator', 'creator', 'owner']
            
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    """

async def send_subscription_required(update_or_query, channel: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel.lstrip('@')}")],
        [InlineKeyboardButton("üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])
    
    text = f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {channel}"
    
    try:
        if hasattr(update_or_query, 'message'):
            # –≠—Ç–æ Update
            await update_or_query.message.reply_text(text, reply_markup=kb)
        else:
            # –≠—Ç–æ CallbackQuery
            await update_or_query.edit_message_text(text, reply_markup=kb)
    except Exception as e:
        logger.error(f"Error sending subscription required message: {e}")

def normalize_answer(answer: str, question_type: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    if not answer:
        return ""
    
    processed = answer.strip().replace(" ", "").replace(",", "")
    
    if question_type == "multiple_choice":
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä—ã
        digits = "".join(filter(str.isdigit, processed))
        return "".join(sorted(set(digits)))
    elif question_type in ["matching", "sequence", "single_choice"]:
        # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–≤–æ–¥–∞
        return "".join(filter(str.isdigit, processed))
    else:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return processed.lower()

def format_question_text(question_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    if not question_data:
        return "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    
    q_type = question_data.get('type')
    block = question_data.get('block', 'N/A')
    topic = question_data.get('topic', 'N/A')
    exam_num = question_data.get('exam_number')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
    text = f"üìö <b>–ë–ª–æ–∫:</b> {block}\n"
    text += f"üìñ <b>–¢–µ–º–∞:</b> {topic}\n"
    if exam_num:
        text += f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ –ï–ì–≠:</b> ‚Ññ{exam_num}\n"
    text += "‚îÅ" * 30 + "\n\n"
    
    # –í–æ–ø—Ä–æ—Å
    if q_type == "matching":
        text += f"‚ùì <b>{question_data.get('instruction', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ')}</b>\n\n"
        
        # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        col1_header = question_data.get('column1_header', '–°–¢–û–õ–ë–ï–¶ 1')
        col1_options = question_data.get('column1_options', {})
        text += f"<b>{col1_header}:</b>\n"
        for letter, option in sorted(col1_options.items()):
            text += f"<b>{letter})</b> {option}\n"
        
        # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞
        text += "\n"
        col2_header = question_data.get('column2_header', '–°–¢–û–õ–ë–ï–¶ 2')
        col2_options = question_data.get('column2_options', {})
        text += f"<b>{col2_header}:</b>\n"
        for digit, option in sorted(col2_options.items(), key=lambda x: int(x[0])):
            text += f"<b>{digit}.</b> {option}\n"
        
        text += f"\n‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ {len(col1_options)} —Ü–∏—Ñ—Ä –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</i>"
    
    else:
        question_text = question_data.get('question', '')
        question_text = md_to_html(question_text)
        parts = question_text.split('\n', 1)
        instruction = parts[0]
        options = parts[1] if len(parts) > 1 else ''
        
        text += f"‚ùì <b>{instruction}</b>\n\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        if options:
            lines = options.split('\n')
            for line in lines:
                line = line.strip()
                if not line:
                    text += "\n"
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —Ü–∏—Ñ—Ä—ã –∏ —Å–∫–æ–±–∫–∏/—Ç–æ—á–∫–∏
                if re.match(r'^\*?\*?\d+[).]', line):
                    # –≠—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
                    line = md_to_html(line)
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    text += f"  {line}\n"
                else:
                    # –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                    text += f"{line}\n"
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –≤–≤–æ–¥—É
        text += "\n"
        if q_type == "multiple_choice":
            text += "‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</i>"
        elif q_type == "single_choice":
            text += "‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</i>"
        elif q_type == "sequence":
            text += "‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</i>"
        else:
            text += "‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç</i>"
    
    return text

def format_plan_with_emojis(plan_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å —ç–º–æ–¥–∑–∏."""
    if not plan_text:
        return ""
    
    lines = plan_text.split('\n')
    formatted = []
    digit_emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
    
    for line in lines:
        stripped = line.strip()
        if not stripped:
            formatted.append("")
            continue
        
        # –ü—É–Ω–∫—Ç—ã
        point_match = re.match(r'^(\d+)[.)]\s*(.*)', stripped)
        if point_match:
            num = int(point_match.group(1))
            text = point_match.group(2)
            emoji = digit_emojis[num-1] if 0 < num <= len(digit_emojis) else f"{num}."
            formatted.append(f"{emoji} {text}")
            continue
        
        # –ü–æ–¥–ø—É–Ω–∫—Ç—ã
        subpoint_match = re.match(r'^[–∞-—èa-z][.)]\s*(.*)', stripped)
        if subpoint_match:
            text = subpoint_match.group(1)
            formatted.append(f"  üî∏ {text}")
            continue
        
        # –ú–∞—Ä–∫–µ—Ä—ã
        if stripped.startswith(('-', '*')):
            text = stripped[1:].strip()
            formatted.append(f"  üîπ {text}")
            continue
        
        formatted.append(line)
    
    return "\n".join(formatted)

def format_progress_bar(current: int, total: int, width: int = 10) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
    if total == 0:
        return f"[{'‚ñë' * width}] 0% (0/0)"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –¥–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if total <= 10 and width == 10:
        width = 15
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º round –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    filled = round(width * current / total)
    bar = "‚ñà" * filled + "‚ñë" * (width - filled)
    percentage = round(100 * current / total)
    
    return f"[{bar}] {percentage}% ({current}/{total})"

def find_question_by_id(question_id: str) -> Optional[Dict[str, Any]]:
    """–ò—â–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ ID –∏—Å–ø–æ–ª—å–∑—É—è –∫–µ—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω."""
    if not question_id:
        return None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        from .cache import questions_cache
        if questions_cache:
            cached_question = questions_cache.get_by_id(question_id)
            if cached_question:
                return cached_question
    except ImportError:
        pass
    
    # –ï—Å–ª–∏ –∫–µ—à –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω, –∏—â–µ–º –ø–æ-—Å—Ç–∞—Ä–æ–º—É
    if not QUESTIONS_DATA:
        return None
        
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                if isinstance(question, dict) and question.get("id") == question_id:
                    return question
    
    logging.warning(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None

async def export_user_stats_csv(user_id: int) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV."""
    try:
        stats = await db.get_user_stats(user_id)
        mistake_ids = await db.get_mistake_ids(user_id)
        streaks = await db.get_user_streaks(user_id)
        
        output = StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(["–¢–µ–º–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", "–í—Å–µ–≥–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç", "–ë–ª–æ–∫"])
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–∞–º
        total_correct = 0
        total_answered = 0
        
        for topic, correct, total in stats:
            percentage = (correct / total * 100) if total > 0 else 0
            topic_name = TOPIC_NAMES.get(topic, topic)
            
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –¥–ª—è —Ç–µ–º—ã
            block_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            for block, topics in QUESTIONS_DATA.items():
                if topic in topics:
                    block_name = block
                    break
            
            writer.writerow([topic, topic_name, correct, total, f"{percentage:.1f}%", block_name])
            total_correct += correct
            total_answered += total
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        writer.writerow([])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        writer.writerow(["–ò–¢–û–ì–û", "", total_correct, total_answered, 
                        f"{(total_correct/total_answered*100 if total_answered > 0 else 0):.1f}%", ""])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
        writer.writerow([])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        writer.writerow(["=== –°–í–û–î–ö–ê ==="])
        writer.writerow(["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
        writer.writerow(["–î–Ω–µ–π –ø–æ–¥—Ä—è–¥", streaks.get('current_daily', 0)])
        writer.writerow(["–†–µ–∫–æ—Ä–¥ –¥–Ω–µ–π", streaks.get('max_daily', 0)])
        writer.writerow(["–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥", streaks.get('current_correct', 0)])
        writer.writerow(["–†–µ–∫–æ—Ä–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", streaks.get('max_correct', 0)])
        writer.writerow(["–û—à–∏–±–æ–∫ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é", len(mistake_ids)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        if mistake_ids:
            writer.writerow([])
            writer.writerow(["=== –í–û–ü–†–û–°–´ –° –û–®–ò–ë–ö–ê–ú–ò ==="])
            writer.writerow(["ID –≤–æ–ø—Ä–æ—Å–∞", "–ë–ª–æ–∫", "–¢–µ–º–∞", "–ù–æ–º–µ—Ä –ï–ì–≠"])
            
            for mistake_id in mistake_ids:
                question = find_question_by_id(mistake_id)
                if question:
                    writer.writerow([
                        mistake_id,
                        question.get('block', 'N/A'),
                        question.get('topic', 'N/A'),
                        question.get('exam_number', 'N/A')
                    ])
        
        return output.getvalue()
    
    except Exception as e:
        logger.error(f"Error exporting stats for user {user_id}: {e}")
        raise

async def generate_detailed_report(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
    try:
        stats = await db.get_user_stats(user_id)
        mistake_ids = await db.get_mistake_ids(user_id)
        streaks = await db.get_user_streaks(user_id)
        
        report = "üìä <b>–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –ü–†–û–ì–†–ï–°–°–ï</b>\n"
        report += "‚îÅ" * 30 + "\n\n"
        
        # –°—Ç—Ä–∏–∫–∏
        report += "üî• <b>–°—Ç—Ä–∏–∫–∏:</b>\n"
        report += f"üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streaks.get('current_daily', 0)} (—Ä–µ–∫–æ—Ä–¥: {streaks.get('max_daily', 0)})\n"
        report += f"‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {streaks.get('current_correct', 0)} (—Ä–µ–∫–æ—Ä–¥: {streaks.get('max_correct', 0)})\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º
        if stats:
            report += "üìö <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º:</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º
            blocks_stats = {}
            for topic, correct, total in stats:
                block_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫"
                for block, topics in QUESTIONS_DATA.items():
                    if topic in topics:
                        block_name = block
                        break
                
                if block_name not in blocks_stats:
                    blocks_stats[block_name] = {
                        'correct': 0, 
                        'total': 0,
                        'topics': []
                    }
                
                blocks_stats[block_name]['correct'] += correct
                blocks_stats[block_name]['total'] += total
                
                percentage = (correct / total * 100) if total > 0 else 0
                topic_name = TOPIC_NAMES.get(topic, topic)
                
                emoji = "üü¢" if percentage >= 80 else "üü°" if percentage >= 50 else "üî¥"
                blocks_stats[block_name]['topics'].append(
                    f"{emoji} {topic}: {topic_name} - {correct}/{total} ({percentage:.0f}%)"
                )
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ –±–ª–æ–∫–∞–º
            for block_name, data in sorted(blocks_stats.items()):
                block_percentage = (data['correct'] / data['total'] * 100) if data['total'] > 0 else 0
                block_bar = format_progress_bar(data['correct'], data['total'], width=15)
                
                report += f"<b>{block_name}</b>\n"
                report += f"{block_bar}\n"
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É (–æ—Ç —Ö—É–¥—à–∏—Ö –∫ –ª—É—á—à–∏–º)
                sorted_topics = sorted(data['topics'], key=lambda x: float(x.split('(')[-1].rstrip('%)').strip()))
                for topic_line in sorted_topics[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ö—É–¥—à–∏—Ö
                    report += f"  {topic_line}\n"
                
                if len(sorted_topics) > 5:
                    report += f"  <i>... –∏ –µ—â–µ {len(sorted_topics) - 5} —Ç–µ–º</i>\n"
                report += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        
        if mistake_ids:
            report += f"‚Ä¢ –£ –≤–∞—Å {len(mistake_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mistakes –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –Ω–∏–º–∏\n"
        
        if stats:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ —Å–ª–∞–±—ã–µ —Ç–µ–º—ã
            weak_topics = []
            for topic, correct, total in stats:
                percentage = (correct / total * 100) if total > 0 else 0
                if percentage < 50 and total >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    topic_name = TOPIC_NAMES.get(topic, topic)
                    weak_topics.append((topic_name, percentage))
            
            if weak_topics:
                weak_topics.sort(key=lambda x: x[1])
                report += f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—ã: {', '.join([t[0] for t in weak_topics[:3]])}\n"
        
        if streaks.get('current_daily', 0) == 0:
            report += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –Ω–∞–≤—ã–∫–∏\n"
        elif streaks.get('current_daily', 0) < 7:
            report += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π\n"
        else:
            report += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\n"
        
        return report
    
    except Exception as e:
        logger.error(f"Error generating report for user {user_id}: {e}")
        raise

async def purge_old_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int, keep_id: Optional[int] = None):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        keep_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ù–ï –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, loading message)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ bot instance
    if not hasattr(context, 'bot') or not context.bot:
        logger.warning("Bot instance not available for message deletion")
        return
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π
    message_keys = [
        'current_question_message_id',
        'answer_message_id', 
        'feedback_message_id'
    ]
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    messages_to_delete = []
    
    for key in message_keys:
        msg_id = context.user_data.get(key)
        if msg_id and msg_id != keep_id:
            messages_to_delete.append(msg_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—è—Å–Ω–µ–Ω–∏—è –∏ —Ç.–¥.)
    extra_messages = context.user_data.get('extra_messages_to_delete', [])
    messages_to_delete.extend([msg_id for msg_id in extra_messages if msg_id != keep_id])
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg_id in messages_to_delete:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            logger.debug(f"Deleted message {msg_id}")
        except Exception as e:
            logger.warning(f"Failed to delete message {msg_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    for key in message_keys:
        context.user_data.pop(key, None)
    context.user_data['extra_messages_to_delete'] = []

def md_to_html(text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç markdown-–ø–æ–¥–æ–±–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É –≤ HTML.
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
        
    Returns:
        –¢–µ–∫—Å—Ç —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
    """
    if not text:
        return ""
    
    import re
    
    # –ó–∞–º–µ–Ω—è–µ–º **—Ç–µ–∫—Å—Ç** –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
    text = re.sub(r'\*\*([^*]+)\*\*', r'<b>\1</b>', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º *—Ç–µ–∫—Å—Ç* –Ω–∞ <i>—Ç–µ–∫—Å—Ç</i>
    text = re.sub(r'\*([^*]+)\*', r'<i>\1</i>', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
    text = re.sub(r'^[\*\-]\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    
    # –ó–∞–º–µ–Ω—è–µ–º _—Ç–µ–∫—Å—Ç_ –Ω–∞ <u>—Ç–µ–∫—Å—Ç</u>
    text = re.sub(r'_([^_]+)_', r'<u>\1</u>', text)
    
    return text

def get_plugin_keyboard_pattern(plugin_code: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è callback_data –ø–ª–∞–≥–∏–Ω–∞."""
    return f"^choose_{plugin_code}$"

class TestPartCallbackData:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ callback_data –¥–ª—è test_part –ø–ª–∞–≥–∏–Ω–∞."""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    TEST_TO_MAIN_MENU = "to_main_menu"
    TEST_TO_MENU = "to_menu"
    TEST_CANCEL = "cancel"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∂–∏–º–∞–º
    TEST_MODE_RANDOM = "mode:random"
    TEST_MODE_TOPIC = "mode:choose_topic"
    TEST_MODE_EXAM_NUM = "mode:choose_exam_num"
    
    # –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    TEST_NEXT_RANDOM = "next_random"
    TEST_NEXT_TOPIC = "next_topic"
    TEST_CHANGE_TOPIC = "change_topic"
    
    # –†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏
    TEST_SHOW_EXPLANATION = "show_explanation"
    TEST_NEXT_MISTAKE = "next_mistake"
    TEST_SKIP_MISTAKE = "skip_mistake"
    TEST_EXIT_MISTAKES = "exit_mistakes"
    
    @classmethod
    def get_plugin_entry(cls, plugin_code: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback_data –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–ª–∞–≥–∏–Ω."""
        return f"choose_{plugin_code}"

# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è CallbackData)
CallbackData = TestPartCallbackData

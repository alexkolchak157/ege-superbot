# test_part/missing_handlers.py
"""
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏.
"""

import logging
import io
import csv
from datetime import datetime
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

from core import states
from core.error_handler import safe_handler
from core.state_validator import validate_state_transition
from core import db
from core.universal_ui import UniversalUIComponents, AdaptiveKeyboards, MessageFormatter
from .utils import get_user_mistakes, format_mistake_stats

logger = logging.getLogger(__name__)


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def detailed_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mistakes = await get_user_mistakes(user_id)
    
    if not mistakes:
        text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_progress")
        ]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return states.CHOOSING_MODE
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–º–∞–º
    mistakes_by_topic = {}
    for mistake in mistakes:
        topic = mistake.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
        if topic not in mistakes_by_topic:
            mistakes_by_topic[topic] = []
        mistakes_by_topic[topic].append(mistake)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫</b>\n\n"
    
    for topic, topic_mistakes in mistakes_by_topic.items():
        text += f"üìå <b>{topic}</b>\n"
        text += f"   –û—à–∏–±–æ–∫: {len(topic_mistakes)}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        error_types = {}
        for m in topic_mistakes:
            error_type = m.get('error_type', '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')
            error_types[error_type] = error_types.get(error_type, 0) + 1
        
        for error_type, count in error_types.items():
            text += f"   ‚Ä¢ {error_type}: {count}\n"
        text += "\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    if len(mistakes_by_topic) > 3:
        text += "‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ 2-3 —Ç–µ–º–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫\n"
    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏' –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
    text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Ç–µ–º–∞–º\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")],
        [InlineKeyboardButton("üîÑ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="work_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_progress")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—à–∏–±–∫–∏ –≤ CSV —Ñ–∞–π–ª."""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    mistakes = await get_user_mistakes(user_id)
    stats = await db.get_user_stats(user_id)
    
    # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    writer = csv.writer(output)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    writer.writerow(['–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}', f'–î–∞—Ç–∞: {datetime.now().strftime("%Y-%m-%d %H:%M")}'])
    writer.writerow([])
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    writer.writerow(['–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
    writer.writerow(['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
    writer.writerow(['–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤', stats.get('total', 0)])
    writer.writerow(['–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', stats.get('correct', 0)])
    writer.writerow(['–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', stats.get('incorrect', 0)])
    
    if stats.get('total', 0) > 0:
        accuracy = (stats.get('correct', 0) / stats['total']) * 100
        writer.writerow(['–¢–æ—á–Ω–æ—Å—Ç—å (%)', f'{accuracy:.1f}'])
    
    writer.writerow(['–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è', stats.get('streak', 0)])
    writer.writerow(['–†–µ–∫–æ—Ä–¥ —Å–µ—Ä–∏–∏', stats.get('max_streak', 0)])
    writer.writerow([])
    
    # –û—à–∏–±–∫–∏ –ø–æ —Ç–µ–º–∞–º
    if mistakes:
        writer.writerow(['–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫'])
        writer.writerow(['–¢–µ–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫', '–¢–∏–ø –æ—à–∏–±–∫–∏'])
        
        mistakes_by_topic = {}
        for mistake in mistakes:
            topic = mistake.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
            if topic not in mistakes_by_topic:
                mistakes_by_topic[topic] = []
            mistakes_by_topic[topic].append(mistake)
        
        for topic, topic_mistakes in mistakes_by_topic.items():
            error_types = {}
            for m in topic_mistakes:
                error_type = m.get('error_type', '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')
                error_types[error_type] = error_types.get(error_type, 0) + 1
            
            for error_type, count in error_types.items():
                writer.writerow([topic, count, error_type])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    output.seek(0)
    csv_content = output.getvalue()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    bio = io.BytesIO()
    bio.write(csv_content.encode('utf-8-sig'))  # UTF-8 with BOM –¥–ª—è Excel
    bio.seek(0)
    bio.name = f'statistics_{user_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await query.message.reply_document(
        bio,
        caption="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ CSV —Ñ–∞–π–ª",
        filename=bio.name
    )
    
    return states.CHOOSING_MODE


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def work_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        text = "üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏!"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="to_test_part_menu")
        ]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –∏ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    context.user_data['mode'] = 'mistakes'
    context.user_data['mistake_queue'] = list(mistake_ids)
    context.user_data['mistakes_total'] = len(mistake_ids)
    context.user_data['mistakes_completed'] = 0
    context.user_data['current_mistake_index'] = 0
    
    text = f"""üîÑ <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>

–£ –≤–∞—Å {len(mistake_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏.

–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–Ω–æ–≤–æ. 
–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å", callback_data="test_start_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="to_test_part_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    user_data = await db.get_user_status(user_id)
    is_subscribed = user_data.get('is_subscribed', False)
    
    if is_subscribed:
        text = """‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>

–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    else:
        text = """‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>

–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ –î–æ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="to_test_part_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_start_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
    from .handlers import send_mistake_question
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
    await send_mistake_question(query.message, context)
    
    return states.REVIEWING_MISTAKES
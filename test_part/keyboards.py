# test_part/keyboards.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

from typing import List, Optional
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã
from .utils import TestPartCallbackData as CallbackData

try:
    from .topic_data import TOPIC_NAMES
except ImportError:
    logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª topic_data.py –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å TOPIC_NAMES –≤ –Ω—ë–º.")
    TOPIC_NAMES: dict = {}

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–ª–∞–≥–∏–Ω–æ–≤."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å", callback_data=CallbackData.get_plugin_entry("test_part")),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 24", callback_data=CallbackData.get_plugin_entry("task24")),
        ]
    ])

def get_initial_choice_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –≤—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî¢ –ü–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠", callback_data="initial:select_exam_num")],
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫—É —Ç–µ–º", callback_data="initial:select_block")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≤—Å–µ)", callback_data="initial:select_random_all")],
        [InlineKeyboardButton("üîß –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="initial:select_mistakes")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])

def get_blocks_keyboard(blocks: List[str]) -> Optional[InlineKeyboardMarkup]:
    if not blocks:
        return None
    
    buttons = []
    row = []
    
    for i, block in enumerate(blocks, 1):
        button = InlineKeyboardButton(
            text=block, 
            callback_data=f"block:select:{block}"
        )
        row.append(button)
        
        if i % 2 == 0:
            buttons.append(row)
            row = []
    
    if row:
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
        callback_data="block:back_to_initial"
    )])
    
    return InlineKeyboardMarkup(buttons) 

def get_mode_keyboard(block_name: str) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ *–≤–Ω—É—Ç—Ä–∏* –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –±–ª–æ–∫–∞", callback_data="mode:random")],
        [InlineKeyboardButton("üìö –ü–æ —Ç–µ–º–µ –±–ª–æ–∫–∞", callback_data="mode:choose_topic")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –±–ª–æ–∫–∞–º", callback_data="to_blocks")],
        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞", callback_data="to_test_part_menu")]
    ])

def get_topics_keyboard(block_name: str, topics: List[str]) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    if not topics:
        return None
    
    buttons = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º
    for topic in topics:
        topic_display = TOPIC_NAMES.get(topic, topic)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if len(topic_display) > 35:
            topic_display = topic_display[:32] + "..."
        
        buttons.append([InlineKeyboardButton(
            topic_display, 
            callback_data=f"topic:{topic}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∂–∏–º—É", callback_data="to_mode")])
    buttons.append([InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞", callback_data="to_test_part_menu")])
    
    return InlineKeyboardMarkup(buttons)

def get_exam_number_keyboard(numbers: List[int]) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠."""
    if not numbers:
        return None
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (1-27 –¥–ª—è –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é)
    valid_numbers = [n for n in numbers if 1 <= n <= 27]
    
    if not valid_numbers:
        return None
    
    buttons = []
    row = []
    
    for i, number in enumerate(sorted(valid_numbers), 1):
        button = InlineKeyboardButton(
            text=str(number),
            callback_data=f"exam_number:select:{number}"
        )
        row.append(button)
        
        # –ü–æ 6 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
        if i % 6 == 0:
            buttons.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if row:
        buttons.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="exam_number:back_to_initial"
    )])
    
    return InlineKeyboardMarkup(buttons)

def get_after_answer_keyboard(last_mode: str = "random") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞."""
    
    if last_mode == "topic":
        main_button = InlineKeyboardButton("‚û°Ô∏è –ï—â—ë –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ", callback_data=CallbackData.TEST_NEXT_TOPIC)
    elif last_mode == "exam_num":
        main_button = InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä", callback_data=CallbackData.TEST_NEXT_RANDOM)
    else:  # random
        main_button = InlineKeyboardButton("‚û°Ô∏è –ï—â—ë —Å–ª—É—á–∞–π–Ω—ã–π", callback_data=CallbackData.TEST_NEXT_RANDOM)

    return InlineKeyboardMarkup([
        [main_button],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É / —Ä–µ–∂–∏–º", callback_data=CallbackData.TEST_CHANGE_TOPIC)],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CallbackData.TEST_TO_MAIN_MENU)],
    ])

def get_mistakes_nav_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞",
                callback_data="test_next_continue",
            )
        ],
        [
            InlineKeyboardButton(
                "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="test_mistake_skip",
            )
        ],
        [
            InlineKeyboardButton(
                "üö™ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä",
                callback_data="test_mistake_finish",
            )
        ],
        [
            InlineKeyboardButton(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="test_next_change_block"
            )
        ],
    ])

def get_next_action_keyboard(last_mode: str, has_explanation: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ (–û–°–ù–û–í–ù–ê–Ø –í–ï–†–°–ò–Ø)."""
    keyboard = []
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    first_row = []
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
    if last_mode == "topic":
        next_text = "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ"
    elif last_mode == "exam_num":
        next_text = "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Ññ"
    elif last_mode == "block":
        next_text = "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∏–∑ –±–ª–æ–∫–∞"
    elif last_mode == "mistakes":
        next_text = "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞"
    else:  # random_all
        next_text = "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Å–ª—É—á–∞–π–Ω—ã–π"
    
    first_row.append(
        InlineKeyboardButton(
            next_text, callback_data=CallbackData.TEST_NEXT_CONTINUE
        )
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—è—Å–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å (–≤–æ –≤—Ç–æ—Ä–æ–π —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
    keyboard.append(first_row)
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if has_explanation:
        keyboard.append([
            InlineKeyboardButton(
                "üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ",
                callback_data=CallbackData.TEST_NEXT_SHOW_EXPLANATION,
            )
        ])
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    
    if last_mode in ["topic", "exam_num", "block"]:
        nav_row.append(
            InlineKeyboardButton(
                "üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=CallbackData.TEST_NEXT_CHANGE_TOPIC
            )
        )
    else:
        nav_row.append(
            InlineKeyboardButton(
                "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data=CallbackData.TEST_NEXT_CHANGE_TOPIC
            )
        )
    
    keyboard.append(nav_row)
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CallbackData.TEST_NEXT_CHANGE_BLOCK
        )
    ])
    
    return InlineKeyboardMarkup(keyboard)

def get_subscription_keyboard(channel: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel.lstrip('@')}")],
        [InlineKeyboardButton("üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])

def get_error_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—à–∏–±–æ–∫."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="to_test_part_menu")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])

def get_stats_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="detailed_report"),
            InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv")
        ],
        [InlineKeyboardButton("üîß –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="work_mistakes")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])

# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_mistakes_nav_keyboard:
def get_mistakes_nav_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–∞–º."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞",
                callback_data="test_next_continue",
            )
        ],
        [
            InlineKeyboardButton(
                "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="test_mistake_skip",
            )
        ],
        [
            InlineKeyboardButton(
                "üö™ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä",
                callback_data="test_mistake_finish",
            )
        ],
        [
            InlineKeyboardButton(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="test_next_change_block",
            )
        ],
    ])
# test_new_features.py
# –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

import asyncio
import logging
from unittest.mock import Mock, AsyncMock, patch
from telegram import Update, CallbackQuery, Message, User, Chat
from telegram.ext import ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_skip_question_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...")
    
    # –ú–æ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
    update = Mock(spec=Update)
    context = Mock(spec=ContextTypes.DEFAULT_TYPE)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback_query
    query = Mock(spec=CallbackQuery)
    query.data = "skip_question:random_all"
    query.answer = AsyncMock()
    query.message = Mock(spec=Message)
    query.message.reply_text = AsyncMock()
    update.callback_query = query
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º user_data
    context.user_data = {
        'current_question_id': 'test_q_1',
        'question_test_q_1': {
            'id': 'test_q_1',
            'question_text': 'Test question',
            'answer': 'Test answer',
            'type': 'text'
        },
        'last_mode': 'random_all'
    }
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    from test_part.handlers import skip_question
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        result = await skip_question(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert query.answer.called, "query.answer –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω"
        assert 'question_test_q_1' not in context.user_data, "–í–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return False

async def test_exam_mode_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞...")
    
    update = Mock(spec=Update)
    context = Mock(spec=ContextTypes.DEFAULT_TYPE)
    
    query = Mock(spec=CallbackQuery)
    query.from_user = Mock(spec=User)
    query.from_user.id = 12345
    query.edit_message_text = AsyncMock()
    query.message = Mock(spec=Message)
    query.message.edit_text = AsyncMock()
    update.callback_query = query
    
    context.user_data = {}
    
    from test_part.handlers import start_exam_mode
    
    try:
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        with patch('test_part.handlers.safe_cache_get_by_exam_num') as mock_get_questions:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            mock_get_questions.side_effect = lambda num: [
                {
                    'id': f'exam_q_{num}',
                    'question_text': f'Question for exam number {num}',
                    'answer': f'Answer {num}',
                    'type': 'text',
                    'exam_number': num
                }
            ] if num <= 16 else []
            
            # –ú–æ–∫–∞–µ–º choose_question
            with patch('test_part.utils.choose_question') as mock_choose:
                mock_choose.side_effect = lambda user_id, questions: questions[0] if questions else None
                
                # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                result = await start_exam_mode(update, context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                assert context.user_data.get('exam_mode') == True, "–†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                assert 'exam_questions' in context.user_data, "–í–æ–ø—Ä–æ—Å—ã —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
                assert 'exam_answers' in context.user_data, "–û—Ç–≤–µ—Ç—ã —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
                assert 'exam_current' in context.user_data, "–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                
                print("‚úÖ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞: {e}")
        return False

async def test_exam_answer_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —ç–∫–∑–∞–º–µ–Ω–∞."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —ç–∫–∑–∞–º–µ–Ω–∞...")
    
    update = Mock(spec=Update)
    context = Mock(spec=ContextTypes.DEFAULT_TYPE)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    message = Mock(spec=Message)
    message.text = "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
    message.reply_text = AsyncMock()
    update.message = message
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–∫–∑–∞–º–µ–Ω–∞
    context.user_data = {
        'exam_mode': True,
        'current_question_id': 'exam_q_1',
        'question_exam_q_1': {
            'id': 'exam_q_1',
            'answer': '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
            'type': 'text',
            'exam_position': 1
        },
        'exam_current': 1,
        'exam_questions': [
            {'id': 'exam_q_1', 'exam_position': 1}
        ],
        'exam_answers': {}
    }
    
    from test_part.handlers import check_exam_answer
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        result = await check_exam_answer(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        assert 'exam_q_1' in context.user_data['exam_answers'], "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        assert context.user_data['exam_answers']['exam_q_1']['is_correct'] == True, "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"
        assert context.user_data['exam_answers']['exam_q_1']['user_answer'] == "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        
        print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —ç–∫–∑–∞–º–µ–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False

async def test_exam_results_calculation():
    """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞...")
    
    message = Mock(spec=Message)
    message.reply_text = AsyncMock()
    
    context = Mock(spec=ContextTypes.DEFAULT_TYPE)
    context.user_data = {
        'user_id': 12345,
        'exam_questions': [
            {'id': f'q_{i}', 'exam_position': i} for i in range(1, 17)
        ],
        'exam_answers': {
            'q_1': {'is_correct': True, 'question_num': 1},
            'q_2': {'is_correct': False, 'question_num': 2},
            'q_3': {'is_correct': True, 'question_num': 3},
            'q_4': {'is_correct': True, 'question_num': 4},
            'q_5': {'is_correct': False, 'question_num': 5},
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã
        },
        'exam_skipped': ['q_6', 'q_7', 'q_8', 'q_9', 'q_10', 'q_11', 'q_12', 'q_13', 'q_14', 'q_15', 'q_16']
    }
    
    from test_part.handlers import show_exam_results
    
    try:
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
        with patch('test_part.db.add_mistake') as mock_add_mistake:
            with patch('test_part.db.update_progress') as mock_update_progress:
                mock_add_mistake.return_value = AsyncMock()
                mock_update_progress.return_value = AsyncMock()
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                result = await show_exam_results(message, context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ reply_text
                assert message.reply_text.called, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                call_args = message.reply_text.call_args
                result_text = call_args[0][0] if call_args else ""
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                assert "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–ó–ê–ú–ï–ù–ê" in result_text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                assert "3/" in result_text, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"  # 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
                assert "–û—Ç–≤–µ—á–µ–Ω–æ: 5" in result_text, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö"
                assert "–ü—Ä–æ–ø—É—â–µ–Ω–æ: 11" in result_text, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö"
                
                print("‚úÖ –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è test_part\n")
    
    tests = [
        test_skip_question_functionality,
        test_exam_mode_initialization,
        test_exam_answer_processing,
        test_exam_results_calculation
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    passed = sum(results)
    total = len(results)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}")
    
    return passed == total

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(run_all_tests())
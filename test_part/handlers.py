# test_part/handlers.py
import logging
import random
from datetime import datetime

import aiosqlite
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from core.plugin_loader import build_main_menu
from core import db, states
from core.admin_tools import admin_manager
from core.config import DATABASE_FILE, REQUIRED_CHANNEL
from core.ui_helpers import (create_visual_progress, get_motivational_message,
                             get_personalized_greeting,
                             show_streak_notification, show_thinking_animation)
from core.universal_ui import (AdaptiveKeyboards, MessageFormatter,
                               UniversalUIComponents)
from core.error_handler import safe_handler, auto_answer_callback
from core.state_validator import validate_state_transition, state_validator
from . import keyboards, utils
from .loader import AVAILABLE_BLOCKS, QUESTIONS_DATA, QUESTIONS_DICT_FLAT
from .missing_handlers import (
    detailed_report,
    export_csv,
    work_mistakes,
    check_subscription,
)

try:
    from .cache import questions_cache
except ImportError:
    logging.warning("–ú–æ–¥—É–ª—å cache –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    questions_cache = None

logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º
def safe_cache_get_by_exam_num(exam_number):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠."""
    if questions_cache:
        return questions_cache.get_by_exam_num(exam_number)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_with_num = []
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                if question.get("exam_number") == exam_number:
                    questions_with_num.append(question)
    return questions_with_num

def safe_cache_get_by_topic(topic):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ."""
    if questions_cache:
        return questions_cache.get_by_topic(topic)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_in_topic = []
    for block_data in QUESTIONS_DATA.values():
        for topic_name, topic_questions in block_data.items():
            if topic_name == topic:
                questions_in_topic.extend(topic_questions)
    return questions_in_topic

def safe_cache_get_by_block(block):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª–æ–∫—É."""
    if questions_cache:
        return questions_cache.get_by_block(block)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_in_block = []
    for topic_questions in QUESTIONS_DATA.get(block, {}).values():
        questions_in_block.extend(topic_questions)
    return questions_in_block

def safe_cache_get_all_exam_numbers():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –ï–ì–≠."""
    if questions_cache:
        return questions_cache.get_all_exam_numbers()
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    exam_numbers = set()
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                exam_num = question.get("exam_number")
                if isinstance(exam_num, int):
                    exam_numbers.add(exam_num)
    return sorted(list(exam_numbers))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def init_data():
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    global QUESTIONS_DATA, AVAILABLE_BLOCKS
    from .loader import get_questions_data
    QUESTIONS_DATA = get_questions_data()
    AVAILABLE_BLOCKS = list(QUESTIONS_DATA.keys()) if QUESTIONS_DATA else []


async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
    messages_to_delete = [
        'thinking_message_id',      # "–ò—â—É –≤–æ–ø—Ä–æ—Å..."
        'checking_message_id',      # "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
        'question_message_id',      # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        'feedback_message_id'       # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    ]
    
    for msg_key in messages_to_delete:
        msg_id = context.user_data.pop(msg_key, None)
        if msg_id:
            try:
                await update.effective_message.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=msg_id
                )
            except Exception as e:
                logger.debug(f"Failed to delete {msg_key}: {e}")


@safe_handler()
@validate_state_transition({ConversationHandler.END, None})
async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º utils –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await utils.check_subscription(query.from_user.id, context.bot):
        await utils.send_subscription_required(query, REQUIRED_CHANNEL)
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = await db.get_user_stats(query.from_user.id)
    mistake_ids = await db.get_mistake_ids(query.from_user.id)
    mistake_count = len(mistake_ids)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
    stats_for_menu = {
        'streak': user_stats.get('streak', 0),
        'total_attempts': user_stats.get('total', 0),
        'progress_percent': int((user_stats.get('correct', 0) / user_stats.get('total', 1)) * 100) if user_stats.get('total', 0) > 0 else 0,
        'mistakes_count': mistake_count
    }

    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    kb = AdaptiveKeyboards.create_menu_keyboard(
        user_stats=stats_for_menu,
        module_code="test"
    )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    is_new = user_stats.get('total', 0) == 0
    welcome_text = MessageFormatter.format_welcome_message(
        module_name="–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠",
        is_new_user=is_new
    )

    await query.edit_message_text(
        welcome_text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({ConversationHandler.END, None})
async def cmd_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /quiz - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π utils
    if not await utils.check_subscription(update.effective_user.id, context.bot, REQUIRED_CHANNEL):
        await utils.send_subscription_required(update, REQUIRED_CHANNEL)
        return ConversationHandler.END
    
    kb = keyboards.get_initial_choice_keyboard()
    await update.message.reply_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_exam_num_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠."""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    exam_numbers = safe_cache_get_all_exam_numbers()
    
    if not exam_numbers:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", show_alert=True)
        return states.CHOOSING_MODE
    
    kb = keyboards.get_exam_num_keyboard(exam_numbers)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=kb
    )
    return states.CHOOSING_EXAM_NUMBER

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_block_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±–ª–æ–∫–∞ —Ç–µ–º."""
    query = update.callback_query
    
    if not AVAILABLE_BLOCKS:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤", show_alert=True)
        return states.CHOOSING_MODE
    
    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:",
        reply_markup=kb
    )
    return states.CHOOSING_BLOCK

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_random_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—Å–µ—Ö."""
    query = update.callback_query
    
    if not QUESTIONS_DICT_FLAT:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        return states.CHOOSING_MODE
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
    
    all_questions = list(QUESTIONS_DICT_FLAT.values())
    question_data = await utils.choose_question(query.from_user.id, all_questions)
    
    if question_data:
        await send_question(query.message, context, question_data, "random_all")
        return states.ANSWERING
    else:
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.edit_text(
            "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        text = "üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏!"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="to_test_part_menu")
        ]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return states.CHOOSING_MODE
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
    context.user_data['mode'] = 'mistakes'
    context.user_data['mistake_queue'] = list(mistake_ids)
    context.user_data['mistakes_total'] = len(mistake_ids)
    context.user_data['mistakes_completed'] = 0
    context.user_data['current_mistake_index'] = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(query.message, context)
    return states.REVIEWING_MISTAKES

@safe_handler()
@validate_state_transition({states.CHOOSING_BLOCK})
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    
    try:
        selected_block = query.data.split(":", 2)[2]
    except IndexError:
        return states.CHOOSING_BLOCK
    
    if selected_block not in QUESTIONS_DATA:
        await query.answer("–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return states.CHOOSING_BLOCK
    
    context.user_data['selected_block'] = selected_block
    
    kb = keyboards.get_mode_keyboard(selected_block)
    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω –±–ª–æ–∫: {selected_block}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_EXAM_NUMBER})
async def select_exam_num(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è."""
    query = update.callback_query
    
    try:
        exam_number = int(query.data.split(":", 2)[2])
    except (ValueError, IndexError):
        return states.CHOOSING_EXAM_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    context.user_data['current_exam_number'] = exam_number
    context.user_data['mode'] = 'exam_num'
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
    questions_with_num = safe_cache_get_by_exam_num(exam_number)
    
    if not questions_with_num:
        await query.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞", show_alert=True)
        return states.CHOOSING_EXAM_NUMBER
    
    await query.edit_message_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}...")
    
    # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = await utils.choose_question(query.from_user.id, questions_with_num)
    if question_data:
        await send_question(query.message, context, question_data, "exam_num")
        return states.ANSWERING
    else:
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mode_random_in_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        return states.CHOOSING_BLOCK
    
    context.user_data['mode'] = 'block'
    questions_in_block = safe_cache_get_by_block(selected_block)
    
    if not questions_in_block:
        await query.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ", show_alert=True)
        return states.CHOOSING_MODE
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–ª–æ–∫–∞...")
    
    question_data = await utils.choose_question(query.from_user.id, questions_in_block)
    if question_data:
        await send_question(query.message, context, question_data, "block")
        return states.ANSWERING
    else:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
            reply_markup=kb
        )
        return states.CHOOSING_BLOCK

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mode_topic_in_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –≤ –±–ª–æ–∫–µ."""
    query = update.callback_query
    
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        return states.CHOOSING_BLOCK
    
    topics = list(QUESTIONS_DATA[selected_block].keys())
    if not topics:
        await query.answer("–ù–µ—Ç —Ç–µ–º –≤ –±–ª–æ–∫–µ", show_alert=True)
        return states.CHOOSING_MODE
    
    kb = keyboards.get_topics_keyboard(selected_block, topics)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=kb
    )
    return states.CHOOSING_TOPIC

@safe_handler()
@validate_state_transition({states.CHOOSING_TOPIC})
async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    
    selected_topic = query.data.replace("topic:", "")
    selected_block = context.user_data.get('selected_block')
    
    if not selected_block or not selected_topic:
        return states.CHOOSING_TOPIC
    
    questions_in_topic = safe_cache_get_by_topic(selected_topic)
    if not questions_in_topic:
        await query.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ", show_alert=True)
        return states.CHOOSING_TOPIC
    
    context.user_data['selected_topic'] = selected_topic
    context.user_data['mode'] = 'topic'
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ...")
    
    question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
    if question_data:
        await send_question(query.message, context, question_data, "topic")
        return states.ANSWERING
    else:
        topics = list(QUESTIONS_DATA[selected_block].keys())
        kb = keyboards.get_topics_keyboard(selected_block, topics)
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
            reply_markup=kb
        )
        return states.CHOOSING_TOPIC

@safe_handler()
@validate_state_transition({states.ANSWERING})
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
    thinking_msg = await update.message.reply_text("ü§î –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç...")
    context.user_data['thinking_message_id'] = thinking_msg.message_id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_id = context.user_data.get('current_question_id')
    if not current_question_id:
        logger.error(f"No current question ID for user {user_id}")
        await thinking_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å")
        return ConversationHandler.END
    
    question_data = context.user_data.get(f'question_{current_question_id}')
    if not question_data:
        logger.error(f"No question data for ID {current_question_id}")
        await thinking_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    correct_answer = str(question_data.get('answer', '')).strip()
    last_mode = context.user_data.get('last_mode', 'random')
    
    is_correct = utils.check_answer(user_answer, correct_answer)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await db.update_user_answer(
        user_id=user_id,
        question_id=current_question_id,
        is_correct=is_correct,
        user_answer=user_answer
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∏–∫–∞
    correct_streak = await db.get_correct_streak(user_id)
    correct_max = await db.get_correct_max(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    if is_correct:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏
        score_visual = UniversalUIComponents.create_score_visual(1, 1)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        feedback = MessageFormatter.format_result_message(
            score=1,
            max_score=1,
            topic=question_data.get('topic', '–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å'),
            details={
                '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥': f"üî• {correct_streak}" if correct_streak > 1 else None,
                '–†–µ–∫–æ—Ä–¥': f"üèÜ {correct_max}" if correct_streak > correct_max else None
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º milestone –µ—Å–ª–∏ –µ—Å—Ç—å
        milestone_phrase = utils.get_streak_milestone_phrase(correct_streak)
        if milestone_phrase:
            feedback += f"\n\n{milestone_phrase}"
    else:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
        motivational_phrase = utils.get_motivational_message()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ utils
        
        # –î–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        feedback = MessageFormatter.format_result_message(
            score=0,
            max_score=1,
            topic=question_data.get('topic', '–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å'),
            details={
                '–í–∞—à –æ—Ç–≤–µ—Ç': user_answer,
                '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç': f"<b>{correct_answer}</b>"
            }
        )
        
        feedback += f"\n\n{motivational_phrase}"
        
        if correct_streak > 0:
            feedback += f"\nüíî –°–µ—Ä–∏—è –∏–∑ {correct_streak} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞"
        if correct_max > 0:
            feedback += f"\nüìà –í–∞—à —Ä–µ–∫–æ—Ä–¥: {correct_max}"
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    kb = AdaptiveKeyboards.create_result_keyboard(
        score=1 if is_correct else 0,
        max_score=1,
        module_code="test"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await thinking_msg.edit_text(feedback, reply_markup=kb, parse_mode='HTML')
    
    return states.ANSWERING

@safe_handler()
@validate_state_transition({states.CHOOSING_NEXT_ACTION})
async def handle_next_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞."""
    query = update.callback_query
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç..." –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    checking_msg_id = context.user_data.pop('checking_message_id', None)
    if checking_msg_id:
        try:
            await query.message.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=checking_msg_id
            )
        except Exception as e:
            logger.debug(f"Failed to delete checking message: {e}")
    
    action = query.data
    
    if action == "test_next_show_explanation":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        current_question_id = context.user_data.get('current_question_id')
        if current_question_id:
            question_data = context.user_data.get(f'question_{current_question_id}')
            if question_data and question_data.get('explanation'):
                explanation_text = question_data['explanation']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
                explanation_text = utils.md_to_html(explanation_text)
                
                formatted_text = f"üí° <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É</b>\n\n{explanation_text}"
                
                try:
                    sent_msg = await query.message.reply_text(
                        formatted_text,
                        parse_mode=ParseMode.HTML
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    context.user_data.setdefault('extra_messages_to_delete', []).append(sent_msg.message_id)
                except Exception as e:
                    logger.error(f"Error sending explanation: {e}")
        return states.CHOOSING_NEXT_ACTION
    
    elif action == "test_next_continue":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∂–∞—é..."
        try:
            loading_msg = await query.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
        except Exception as e:
            logger.error(f"Error sending loading message: {e}")
            return states.CHOOSING_NEXT_ACTION
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await utils.purge_old_messages(context, query.message.chat_id, keep_id=loading_msg.message_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        last_mode = context.user_data.get('last_mode', 'random')
        
        if last_mode == 'random_all':
            # –°–ª—É—á–∞–π–Ω—ã–π –∏–∑ –≤—Å–µ—Ö
            all_questions = list(QUESTIONS_DICT_FLAT.values())
            question_data = await utils.choose_question(query.from_user.id, all_questions)
            if question_data:
                await send_question(loading_msg, context, question_data, "random_all")
                return states.ANSWERING
            else:
                kb = keyboards.get_initial_choice_keyboard()
                await loading_msg.edit_text(
                    "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                    reply_markup=kb
                )
                return states.CHOOSING_MODE
        
        elif last_mode == 'exam_num':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º
            exam_number = context.user_data.get('current_exam_number')
            if exam_number:
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                
                question_data = await utils.choose_question(query.from_user.id, questions_with_num)
                if question_data:
                    await send_question(loading_msg, context, question_data, "exam_num")
                    return states.ANSWERING
                else:
                    kb = keyboards.get_initial_choice_keyboard()
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_MODE
        
        elif last_mode == 'block':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –±–ª–æ–∫–æ–º
            selected_block = context.user_data.get('selected_block')
            if selected_block:
                questions_in_block = safe_cache_get_by_block(selected_block)
                
                question_data = await utils.choose_question(query.from_user.id, questions_in_block)
                if question_data:
                    await send_question(loading_msg, context, question_data, "block")
                    return states.ANSWERING
                else:
                    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_BLOCK
        
        elif last_mode == 'topic':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–π –∂–µ —Ç–µ–º–æ–π
            selected_topic = context.user_data.get('selected_topic')
            selected_block = context.user_data.get('selected_block')
            
            if selected_topic and selected_block:
                questions_in_topic = safe_cache_get_by_topic(selected_topic)
                
                question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
                if question_data:
                    await send_question(loading_msg, context, question_data, "topic")
                    return states.ANSWERING
                else:
                    topics = list(QUESTIONS_DATA.get(selected_block, {}).keys())
                    kb = keyboards.get_topics_keyboard(selected_block, topics)
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_TOPIC
        
        elif last_mode == 'mistakes':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
            context.user_data['current_mistake_index'] = context.user_data.get('current_mistake_index', 0) + 1
            await send_mistake_question(loading_msg, context)
            return states.REVIEWING_MISTAKES
        
    elif action == "test_next_change_topic":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
        await utils.purge_old_messages(context, query.message.chat_id)
        
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.reply_text(
            "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    elif action == "test_next_change_block":
        # –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await utils.purge_old_messages(context, query.message.chat_id)
        
        kb = build_main_menu()
        
        await query.message.reply_text(
            "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=kb
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        return states.CHOOSING_NEXT_ACTION

@safe_handler()
@validate_state_transition({states.REVIEWING_MISTAKES})
async def handle_mistake_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
    thinking_msg = await update.message.reply_text("ü§î –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç...")
    context.user_data['thinking_message_id'] = thinking_msg.message_id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_id = context.user_data.get('current_question_id')
    if not current_question_id:
        await thinking_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å")
        return ConversationHandler.END
    
    question_data = context.user_data.get(f'question_{current_question_id}')
    if not question_data:
        await thinking_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    correct_answer = str(question_data.get('answer', '')).strip()
    is_correct = utils.check_answer(user_answer, correct_answer)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await db.update_user_answer(
        user_id=user_id,
        question_id=current_question_id,
        is_correct=is_correct,
        user_answer=user_answer
    )
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—à–∏–±–æ–∫
    if is_correct:
        await db.remove_from_mistakes(user_id, current_question_id)
        feedback = f"{utils.get_random_correct_phrase()}\n\n"
        feedback += "‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫!"
    else:
        feedback = f"{utils.get_random_incorrect_phrase()}\n\n"
        feedback += f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n"
        feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    mistake_queue = context.user_data.get('mistake_queue', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    kb_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if question_data.get('explanation'):
        kb_buttons.append([
            InlineKeyboardButton(
                "üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ",
                callback_data="test_next_show_explanation",
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if current_index < len(mistake_queue) - 1:
        kb_buttons.append([
            InlineKeyboardButton(
                "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞",
                callback_data="test_next_continue",
            )
        ])
    else:
        kb_buttons.append([
            InlineKeyboardButton(
                "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data="test_mistake_finish",
            )
        ])
    
    kb_buttons.append([
        InlineKeyboardButton(
            "üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞",
            callback_data="test_next_change_topic",
        )
    ])
    
    kb = InlineKeyboardMarkup(kb_buttons)
    
    sent_msg = await update.message.reply_text(
        feedback,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    await thinking_msg.delete()
    
    context.user_data['feedback_message_id'] = sent_msg.message_id
    context.user_data['last_mode'] = 'mistakes'
    
    return states.CHOOSING_NEXT_ACTION

@safe_handler()
@validate_state_transition({states.REVIEWING_MISTAKES, states.CHOOSING_MODE})
async def mistake_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—à–∏–±–∫–∞–º."""
    query = update.callback_query
    
    action = query.data

    if action == "test_mistake_finish":
        kb = keyboards.get_initial_choice_keyboard()
        await query.edit_message_text(
            "‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    return states.REVIEWING_MISTAKES

@safe_handler()
@validate_state_transition({
    states.CHOOSING_MODE, 
    states.CHOOSING_BLOCK, 
    states.CHOOSING_TOPIC, 
    states.CHOOSING_EXAM_NUMBER,
    states.CHOOSING_NEXT_ACTION,
    states.ANSWERING
})
async def back_to_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏."""
    query = update.callback_query
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE, states.CHOOSING_BLOCK, states.CHOOSING_TOPIC, states.ANSWERING})
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    query = update.callback_query
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    kb = keyboards.get_initial_choice_keyboard()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    return states.CHOOSING_MODE

@safe_handler()
async def cmd_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mistakes - —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    user_id = update.effective_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        await update.message.reply_text("üëç –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
        return ConversationHandler.END
    
    context.user_data['mistake_queue'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['mode'] = 'mistakes'
    
    await update.message.reply_text(
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏. –í—Å–µ–≥–æ: {len(mistake_ids)}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(update.message, context)
    return states.REVIEWING_MISTAKES

@safe_handler()
async def cmd_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /score - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_id = update.effective_user.id
    
    stats = await db.get_user_stats(user_id)
    mistake_ids = await db.get_mistake_ids(user_id)
    mistake_count = len(mistake_ids)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    text = MessageFormatter.format_progress_message(
        stats={
            'completed': stats.get('correct', 0),
            'total': stats.get('total', 0),
            'average_score': stats.get('correct', 0) / max(stats.get('total', 1), 1),
            'total_attempts': stats.get('total', 0),
            'current_average': accuracy / 100,  # –¢–µ–ø–µ—Ä—å accuracy –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            'streak': stats.get('streak', 0),
            'max_streak': stats.get('max_streak', 0),
            'mistakes_count': mistake_count
        },
        module_name="–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    if stats.get('total', 0) > 0:
        progress_bar = UniversalUIComponents.create_progress_bar(
            current=stats.get('correct', 0),
            total=stats.get('total', 0),
            width=15
        )
        text += f"\n\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>\n{progress_bar}"
    
    text += f"\nüî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {stats.get('streak', 0)}\n"
    text += f"üèÜ –†–µ–∫–æ—Ä–¥ —Å–µ—Ä–∏–∏: {stats.get('max_streak', 0)}\n"
    
    if mistake_count > 0:
        text += f"\nüìö –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {mistake_count}\n"
    else:
        text += "\nüëç –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –æ—à–∏–±–æ–∫ –Ω–µ—Ç!"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

async def send_question(message, context: ContextTypes.DEFAULT_TYPE,
                       question_data: dict, last_mode: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['id', 'answer', 'type']
    missing_fields = [field for field in required_fields if not question_data.get(field)]
    
    if missing_fields:
        logger.error(f"Question missing required fields: {missing_fields}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞"
        
        if hasattr(message, 'edit_text'):
            await message.edit_text(error_msg)
        else:
            await message.reply_text(error_msg)
        return ConversationHandler.END
    
    question_id = question_data.get('id')
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    logger.info(f"Clearing old question data before sending new question {question_id}")
    keys_to_remove = []
    for key in context.user_data.keys():
        if key.startswith('question_') and key != f'question_{question_id}':
            keys_to_remove.append(key)
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥ –µ–≥–æ ID
    context.user_data[f'question_{question_id}'] = question_data
    context.user_data['current_question_id'] = question_id
    context.user_data['last_mode'] = last_mode
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_type = question_data.get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    question_text = question_data.get('content', question_data.get('question', '–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))
    topic = question_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    fancy_header = UniversalUIComponents.create_fancy_header(
        title=f"–í–æ–ø—Ä–æ—Å ‚Ññ{context.user_data.get('question_number', 1)}",
        subtitle=f"–¢–µ–º–∞: {topic}"
    )

    full_text = fancy_header + "\n\n" + question_text

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if question_data.get('difficulty'):
        difficulty_indicator = UniversalUIComponents.get_color_for_score(
            score=question_data['difficulty'],
            max_score=5
        )
        full_text += f"\n\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_indicator}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ –∑–∞–¥–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    exam_number = question_data.get('exam_number')
    if exam_number:
        header = f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{exam_number}</b>\n"
    else:
        header = f"üìù <b>–í–æ–ø—Ä–æ—Å</b>\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É
    header += f"üìö –¢–µ–º–∞: {topic}\n"
    header += f"üî§ –¢–∏–ø: {question_type}\n\n"
    
    full_text = header + question_text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if hasattr(message, 'edit_text'):
            await message.edit_text(full_text, parse_mode=ParseMode.HTML)
        else:
            sent_msg = await message.reply_text(full_text, parse_mode=ParseMode.HTML)
            context.user_data['question_message_id'] = sent_msg.message_id
    except Exception as e:
        logger.error(f"Error sending question: {e}")
        if hasattr(message, 'edit_text'):
            await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
        else:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞")

async def send_mistake_question(message, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫."""
    mistake_queue = context.user_data.get('mistake_queue', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    if current_index >= len(mistake_queue):
        # –í—Å–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        kb = keyboards.get_initial_choice_keyboard()
        
        if hasattr(message, 'edit_text'):
            await message.edit_text(
                "‚úÖ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                reply_markup=kb
            )
        else:
            await message.reply_text(
                "‚úÖ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                reply_markup=kb
            )
        return states.CHOOSING_MODE
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
    question_id = mistake_queue[current_index]
    
    # –ò—â–µ–º –≤–æ–ø—Ä–æ—Å –≤ QUESTIONS_DICT_FLAT
    question_data = QUESTIONS_DICT_FLAT.get(question_id)
    
    if not question_data:
        logger.error(f"Question {question_id} not found in QUESTIONS_DICT_FLAT")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        context.user_data['current_mistake_index'] = current_index + 1
        await send_mistake_question(message, context)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    await send_question(message, context, question_data, "mistakes")

@safe_handler()
@validate_state_transition({
    states.CHOOSING_MODE,
    states.CHOOSING_BLOCK,
    states.CHOOSING_TOPIC,
    states.ANSWERING,
    states.CHOOSING_NEXT_ACTION,
    None,
    ConversationHandler.END
})
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    from core.plugin_loader import build_main_menu
    
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.clear()
    
    kb = build_main_menu()
    await query.edit_message_text(
        "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=kb
    )
    
    return ConversationHandler.END
import logging
import random
from datetime import datetime
from core.state_validator import validate_state_transition, state_validator
import aiosqlite
import os
import io
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from core.plugin_loader import build_main_menu
from core import db, states
from core.admin_tools import admin_manager
from core.config import DATABASE_FILE, REQUIRED_CHANNEL
from core.ui_helpers import show_thinking_animation
from core.ui_helpers import (create_visual_progress, get_motivational_message,
                             get_personalized_greeting,
                             show_streak_notification, show_thinking_animation)
from core.universal_ui import (AdaptiveKeyboards, MessageFormatter,
                               UniversalUIComponents)
from core.error_handler import safe_handler, auto_answer_callback
from core.utils import check_subscription, send_subscription_required
from . import keyboards, utils
from .loader import AVAILABLE_BLOCKS, QUESTIONS_DATA, QUESTIONS_DICT_FLAT

try:
    from .topic_data import TOPIC_NAMES
except ImportError:
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TOPIC_NAMES –∏–∑ topic_data.py")
    TOPIC_NAMES = {}

try:
    from .cache import questions_cache
except ImportError:
    logging.warning("–ú–æ–¥—É–ª—å cache –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    questions_cache = None

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ (–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏):
def safe_cache_get_by_exam_num(exam_number):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠."""
    if questions_cache:
        return questions_cache.get_by_exam_num(exam_number)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_with_num = []
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                if question.get("exam_number") == exam_number:
                    questions_with_num.append(question)
    return questions_with_num

def safe_cache_get_by_topic(topic):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ."""
    if questions_cache:
        return questions_cache.get_by_topic(topic)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_in_topic = []
    for block_data in QUESTIONS_DATA.values():
        for topic_name, topic_questions in block_data.items():
            if topic_name == topic:
                questions_in_topic.extend(topic_questions)
    return questions_in_topic

def safe_cache_get_by_block(block):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª–æ–∫—É."""
    if questions_cache:
        return questions_cache.get_by_block(block)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_in_block = []
    for topic_questions in QUESTIONS_DATA.get(block, {}).values():
        questions_in_block.extend(topic_questions)
    return questions_in_block

def safe_cache_get_all_exam_numbers():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –ï–ì–≠."""
    if questions_cache:
        return questions_cache.get_all_exam_numbers()
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    exam_numbers = set()
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                exam_num = question.get("exam_number")
                if isinstance(exam_num, int):
                    exam_numbers.add(exam_num)
    return sorted(list(exam_numbers))

def init_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    global QUESTIONS_DATA, AVAILABLE_BLOCKS, QUESTIONS_LIST
    try:
        from .loader import get_questions_data, get_questions_list_flat, get_available_blocks
        
        QUESTIONS_DATA = get_questions_data()
        if QUESTIONS_DATA:
            AVAILABLE_BLOCKS = get_available_blocks()
            QUESTIONS_LIST = get_questions_list_flat() or []
            logger.info(f"Loaded {len(AVAILABLE_BLOCKS)} blocks with questions")
            logger.info(f"Total questions: {len(QUESTIONS_LIST)}")
        else:
            logger.warning("get_questions_data() returned None or empty")
            QUESTIONS_DATA = {}
            AVAILABLE_BLOCKS = []
            QUESTIONS_LIST = []
            
    except ImportError as e:
        logger.error(f"Import error loading questions data: {e}")
        QUESTIONS_DATA = {}
        AVAILABLE_BLOCKS = []
        QUESTIONS_LIST = []
    except Exception as e:
        logger.error(f"Error loading questions data: {e}")
        QUESTIONS_DATA = {}
        AVAILABLE_BLOCKS = []
        QUESTIONS_LIST = []

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_data()

# –î–æ–±–∞–≤—å—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ init_data()
def check_data_loaded():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ."""
    global QUESTIONS_DATA, AVAILABLE_BLOCKS, QUESTIONS_LIST  # –û–±—ä—è–≤–ª—è–µ–º global –≤ –Ω–∞—á–∞–ª–µ
    
    if not QUESTIONS_DATA:
        logger.error("CRITICAL: QUESTIONS_DATA is empty after init!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        questions_file_path = os.path.join(
            os.path.dirname(os.path.dirname(__file__)), 
            'data', 
            'questions.json'
        )
        logger.error(f"QUESTIONS_FILE path: {questions_file_path}")
        logger.error(f"File exists: {os.path.exists(questions_file_path)}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        try:
            from .loader import load_questions, get_stats
            data, flat_list = load_questions()
            if data:
                QUESTIONS_DATA = data
                AVAILABLE_BLOCKS = list(data.keys())
                QUESTIONS_LIST = flat_list or []
                logger.info("Successfully loaded questions directly")
                stats = get_stats()
                logger.info(f"Questions stats: {stats}")
            else:
                logger.error("load_questions() returned empty data")
        except Exception as e:
            logger.error(f"Error during direct load: {e}")
            import traceback
            logger.error(traceback.format_exc())
    else:
        logger.info(f"Data loaded successfully: {len(AVAILABLE_BLOCKS)} blocks, {len(QUESTIONS_LIST)} questions")

# –í—ã–∑–æ–≤–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
check_data_loaded()

async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
    messages_to_delete = [
        'thinking_message_id',      # "–ò—â—É –≤–æ–ø—Ä–æ—Å..."
        'checking_message_id',      # "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
        'question_message_id',      # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        'feedback_message_id'       # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    ]
    
    for msg_key in messages_to_delete:
        msg_id = context.user_data.pop(msg_key, None)
        if msg_id:
            try:
                await update.effective_message.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=msg_id
                )
            except Exception as e:
                logger.debug(f"Failed to delete {msg_key}: {e}")


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    keys_to_remove = [
        'current_topic',
        'task19_current_topic', 
        'task20_current_topic',
        'task25_current_topic',
        'task24_current_topic'
    ]
    
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    context.user_data['active_module'] = 'test_part'
    
    # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–≥–æ –±–æ—Ç–∞
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /quiz - –≤—Ö–æ–¥ –≤ —Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å."""
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    keys_to_remove = [
        'current_topic',
        'task19_current_topic', 
        'task20_current_topic',
        'task25_current_topic',
        'task24_current_topic'
    ]
    
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–≥–æ –±–æ—Ç–∞
    
    kb = keyboards.get_initial_choice_keyboard()
    await update.message.reply_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫."""
    context.user_data['conversation_state'] = states.CHOOSING_MODE
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mistakes = await utils.get_user_mistakes(user_id)
    
    if not mistakes:
        text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_part_progress")
        ]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return states.CHOOSING_MODE
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–º–∞–º
    mistakes_by_topic = {}
    for mistake in mistakes:
        topic = mistake.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
        if topic not in mistakes_by_topic:
            mistakes_by_topic[topic] = []
        mistakes_by_topic[topic].append(mistake)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫</b>\n\n"
    
    for topic, topic_mistakes in mistakes_by_topic.items():
        text += f"üìå <b>{topic}</b>\n"
        text += f"   –û—à–∏–±–æ–∫: {len(topic_mistakes)}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        error_types = {}
        for m in topic_mistakes:
            error_type = m.get('error_type', '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')
            error_types[error_type] = error_types.get(error_type, 0) + 1
        
        for error_type, count in error_types.items():
            text += f"   ‚Ä¢ {error_type}: {count}\n"
        text += "\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    if len(mistakes_by_topic) > 3:
        text += "‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ 2-3 —Ç–µ–º–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫\n"
    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏' –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
    text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Ç–µ–º–∞–º\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="test_export_csv")],
        [InlineKeyboardButton("üîÑ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="test_work_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_part_progress")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_exam_num_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
    all_nums = safe_cache_get_all_exam_numbers()
    
    if not all_nums:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", show_alert=True)
        return states.CHOOSING_MODE
    
    kb = keyboards.get_exam_num_keyboard(all_nums)
    await query.edit_message_text(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠:</b>",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    context.user_data['mode'] = 'exam_num'
    return states.CHOOSING_EXAM_NUMBER

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_block_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ –±–ª–æ–∫–∞–º."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    if not AVAILABLE_BLOCKS:
        await query.answer("–ë–ª–æ–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        return states.CHOOSING_MODE
    
    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
    await query.edit_message_text(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:</b>",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    context.user_data['mode'] = 'block'
    return states.CHOOSING_BLOCK

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_random_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—Å–µ–π –±–∞–∑—ã."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not QUESTIONS_DATA:
        logger.error("QUESTIONS_DATA is empty!")
        await query.answer("‚ùå –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", show_alert=True)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await query.edit_message_text(
            "‚ùå <b>–ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboards.get_initial_choice_keyboard()
        )
        return states.CHOOSING_MODE
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    all_questions = []
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            all_questions.extend(topic_questions)
    
    if not all_questions:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        await query.edit_message_text(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n"
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboards.get_initial_choice_keyboard()
        )
        return states.CHOOSING_MODE
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
    
    # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = await utils.choose_question(query.from_user.id, all_questions)
    if question_data:
        await send_question(query.message, context, question_data, "random_all")
        # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, states.ANSWERING)
        return states.ANSWERING
    else:
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.edit_text(
            "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_BLOCK})
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    
    block_name = query.data.split(":", 2)[2]
    if block_name not in AVAILABLE_BLOCKS:
        return states.CHOOSING_BLOCK
    
    context.user_data['selected_block'] = block_name
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
    kb = keyboards.get_mode_keyboard(block_name)
    await query.edit_message_text(
        f"–ë–ª–æ–∫: {block_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    return states.CHOOSING_MODE

@safe_handler()
async def show_progress_enhanced(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    stats = await db.get_user_stats(user_id)
    streaks = await db.get_user_streaks(user_id)
    
    if not stats:
        greeting = get_personalized_greeting({'total_attempts': 0, 'streak': streaks.get('current_daily', 0)})
        text = greeting + MessageFormatter.format_welcome_message(
            "—Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –ï–ì–≠",
            is_new_user=True
        )
    else:
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_correct = sum(correct for _, correct, _ in stats)
        total_answered = sum(total for _, _, total in stats)
        overall_percentage = (total_correct / total_answered * 100) if total_answered > 0 else 0
        
        # –¢–æ–ø —Ç–µ–º—ã
        top_results = []
        for topic, correct, total in sorted(stats, key=lambda x: x[1]/x[2] if x[2] > 0 else 0, reverse=True)[:3]:
            percentage = (correct / total * 100) if total > 0 else 0
            topic_name = TOPIC_NAMES.get(topic, topic)
            top_results.append({
                'topic': topic_name,
                'score': correct,
                'max_score': total
            })
        
        greeting = get_personalized_greeting({'total_attempts': total_answered, 'streak': streaks.get('current_daily', 0)})
        text = greeting + MessageFormatter.format_progress_message({
            'total_attempts': total_answered,
            'average_score': overall_percentage / 100 * 3,  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —à–∫–∞–ª—É 0-3
            'completed': len(stats),
            'total': len(TOPIC_NAMES),
            'total_time': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            'top_results': top_results,
            'current_average': overall_percentage,
            'previous_average': overall_percentage - 5  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–∞
        }, "—Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏
        if streaks:
            text += f"\n\n<b>üî• –°–µ—Ä–∏–∏:</b>\n"
            text += UniversalUIComponents.format_statistics_tree({
                '–î–Ω–µ–π –ø–æ–¥—Ä—è–¥': streaks.get('current_daily', 0),
                '–†–µ–∫–æ—Ä–¥ –¥–Ω–µ–π': streaks.get('max_daily', 0),
                '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥': streaks.get('current_correct', 0),
                '–†–µ–∫–æ—Ä–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö': streaks.get('max_correct', 0)
            })
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = AdaptiveKeyboards.create_progress_keyboard(
        has_detailed_stats=bool(stats),
        can_export=bool(stats),
        module_code="test"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

@safe_handler()
@validate_state_transition({states.ANSWERING})
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    if context.user_data.get('active_module') != 'test_part':
        return states.ANSWERING
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    from core.state_validator import state_validator
    user_id = update.effective_user.id
    current_state = state_validator.get_current_state(user_id)
    
    if current_state != states.ANSWERING:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        state_validator.set_state(user_id, states.ANSWERING)
    
    # –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–†–û–í–ï–†–ö–ò
    thinking_msg = await show_thinking_animation(
        update.message,
        text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['checking_message_id'] = thinking_msg.message_id
    
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    context.user_data['user_answer_message_id'] = update.message.message_id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question_id = context.user_data.get('current_question_id')
    
    if not current_question_id:
        try:
            await thinking_msg.delete()
        except Exception:
            pass
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    question_data = context.user_data.get(f'question_{current_question_id}')
    
    if not question_data:
        try:
            await thinking_msg.delete()
        except Exception:
            pass
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    try:
        correct_answer = question_data.get('answer', '').strip()
        is_correct = user_answer.lower() == correct_answer.lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        question_id = question_data.get('id')
        topic = question_data.get('topic')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        if topic and topic != "N/A":
            await db.update_progress(user_id, topic, is_correct)
        
        if question_id:
            await db.record_answered(user_id, question_id)
        
        if not is_correct and question_id:
            await db.record_mistake(user_id, question_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏
        daily_current, daily_max = await db.update_daily_streak(user_id)
        
        if is_correct:
            correct_current, correct_max = await db.update_correct_streak(user_id)
        else:
            await db.reset_correct_streak(user_id)
            correct_current = 0
            streaks = await db.get_user_streaks(user_id)
            correct_max = streaks.get('max_correct', 0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–∏–∫
        old_correct_streak = context.user_data.get('correct_streak', 0)
        context.user_data['correct_streak'] = correct_current
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        last_mode = context.user_data.get('last_mode', 'random')
        exam_number = context.user_data.get('current_exam_number')
        selected_topic = context.user_data.get('selected_topic')
        selected_block = context.user_data.get('selected_block')
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
        motivational_phrase = None
        try:
            if not is_correct:
                motivational_phrase = await utils.get_random_motivational_phrase()
        except Exception:
            pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await db.get_user_stats(user_id)
        total_correct = sum(correct for _, correct, _ in stats) if stats else 0
        total_answered = sum(total for _, _, total in stats) if stats else 0
        
        # –§–û–†–ú–ò–†–£–ï–ú –ö–†–ê–°–ò–í–´–ô –§–ò–î–ë–ï–ö
        if is_correct:
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢
            feedback = f"<b>{utils.get_random_correct_phrase()}</b>\n"
            feedback += "‚îÄ" * 30 + "\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
            if last_mode == 'exam_num' and exam_number:
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                total_in_mode = len(questions_with_num)
                # –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏
                exam_correct = 0
                for t, c, total in stats:
                    for q in questions_with_num:
                        if q.get('topic') == t:
                            exam_correct += c
                            break
                progress_bar = create_visual_progress(exam_correct, total_in_mode)
                feedback += f"üìä <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{exam_number}:</b>\n"
                feedback += f"{progress_bar}\n"
                feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {exam_correct}/{total_in_mode}\n\n"
            elif last_mode == 'topic' and selected_topic:
                for t, c, total in stats:
                    if t == selected_topic:
                        progress_bar = create_visual_progress(c, total)
                        topic_name = TOPIC_NAMES.get(selected_topic, selected_topic)
                        feedback += f"üìä <b>{topic_name}:</b>\n"
                        feedback += f"{progress_bar}\n"
                        feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {c}/{total}\n\n"
                        break
            else:
                progress_bar = create_visual_progress(total_correct, total_answered)
                feedback += f"üìä <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
                feedback += f"{progress_bar}\n"
                feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {total_correct}/{total_answered}\n\n"
            
            # –°—Ç—Ä–∏–∫–∏ —Å –¥–µ—Ä–µ–≤–æ–º
            feedback += f"üî• <b>–°–µ—Ä–∏–∏:</b>\n"
            feedback += f"‚îú üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: <b>{daily_current}</b>"
            if daily_current == daily_max and daily_max > 1:
                feedback += " üèÜ"
            feedback += "\n"
            
            feedback += f"‚îî ‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: <b>{correct_current}</b>"
            if correct_current == correct_max and correct_max > 1:
                feedback += " üèÜ"
            feedback += "\n"
            
            # Milestone
            milestone_phrase = utils.get_streak_milestone_phrase(correct_current)
            if milestone_phrase and correct_current > old_correct_streak:
                feedback += "\n" + "‚îÄ" * 30 + "\n"
                feedback += f"{milestone_phrase}"
            
            # –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
            if correct_current > old_correct_streak and correct_current == correct_max and correct_max > 1:
                feedback += "\n\nüéä üéâ <b>–ù–û–í–´–ô –õ–ò–ß–ù–´–ô –†–ï–ö–û–†–î!</b> üéâ üéä"
            
            if motivational_phrase:
                feedback += "\n\n" + "‚îÄ" * 30 + "\n"
                feedback += f"üí´ <i>{motivational_phrase}</i>"
                
        else:
            # –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢
            feedback = f"<b>{utils.get_random_incorrect_phrase()}</b>\n"
            feedback += "‚îÄ" * 30 + "\n\n"
            
            feedback += f"‚ùå –í–∞—à –æ—Ç–≤–µ—Ç: <code>{user_answer}</code>\n"
            feedback += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if last_mode == 'exam_num' and exam_number:
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                total_in_mode = len(questions_with_num)
                exam_correct = 0
                for t, c, total in stats:
                    for q in questions_with_num:
                        if q.get('topic') == t:
                            exam_correct += c
                            break
                progress_bar = create_visual_progress(exam_correct, total_in_mode)
                feedback += f"üìä <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{exam_number}:</b>\n"
                feedback += f"{progress_bar}\n\n"
            elif last_mode == 'topic' and selected_topic:
                for t, c, total in stats:
                    if t == selected_topic:
                        progress_bar = create_visual_progress(c, total)
                        topic_name = TOPIC_NAMES.get(selected_topic, selected_topic)
                        feedback += f"üìä <b>{topic_name}:</b>\n"
                        feedback += f"{progress_bar}\n\n"
                        break
            else:
                progress_bar = create_visual_progress(total_correct, total_answered)
                feedback += f"üìä <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
                feedback += f"{progress_bar}\n\n"
            
            # –°—Ç—Ä–∏–∫–∏
            feedback += f"üî• <b>–°–µ—Ä–∏–∏:</b>\n"
            feedback += f"‚îú üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: <b>{daily_current}</b>\n"
            
            if old_correct_streak > 0:
                feedback += f"‚îî ‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: <b>0</b> "
                feedback += f"(–±—ã–ª–æ {old_correct_streak})\n"
                feedback += f"\nüíî <i>–°–µ—Ä–∏—è –∏–∑ {old_correct_streak} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞!</i>"
                if correct_max > 0:
                    feedback += f"\nüìà <i>–í–∞—à —Ä–µ–∫–æ—Ä–¥: {correct_max}</i>"
            else:
                feedback += f"‚îî ‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: <b>0</b>"
            
            if motivational_phrase:
                feedback += "\n\n" + "‚îÄ" * 30 + "\n"
                feedback += f"üí™ <i>{motivational_phrase}</i>"
        
        # –ö–Ω–æ–ø–∫–∏
        has_explanation = bool(question_data.get('explanation'))
        kb = keyboards.get_next_action_keyboard(last_mode, has_explanation=has_explanation)
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        try:
            await thinking_msg.delete()
        except Exception as e:
            logger.debug(f"Failed to delete checking message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫
        sent_msg = await update.message.reply_text(
            feedback,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        context.user_data['feedback_message_id'] = sent_msg.message_id
        context.user_data['last_answer_correct'] = is_correct
        
        return states.CHOOSING_NEXT_ACTION
        
    except Exception as e:
        logger.error(f"Error in check_answer: {e}")
        
        try:
            await thinking_msg.delete()
        except Exception:
            pass
            
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞")
        return ConversationHandler.END

@safe_handler()
@validate_state_transition({states.CHOOSING_NEXT_ACTION, states.ANSWERING})
async def handle_next_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞."""
    query = update.callback_query
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –≤ –Ω–∞—á–∞–ª–µ
    await query.answer()
    action = query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ action –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if not action.startswith("test_"):
        logger.warning(f"Unexpected action in handle_next_action: {action}")
        return states.CHOOSING_NEXT_ACTION
    
    if action == "test_next_show_explanation":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_question_id = context.user_data.get('current_question_id')
        if current_question_id:
            question_data = context.user_data.get(f'question_{current_question_id}')
            if question_data and question_data.get('explanation'):
                explanation_text = question_data['explanation']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ markdown
                explanation_text = utils.md_to_html(explanation_text)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π
                formatted_text = f"üí° <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É</b>\n\n"
                formatted_text += explanation_text
                
                try:
                    sent_msg = await query.message.reply_text(
                        formatted_text,
                        parse_mode=ParseMode.HTML
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    context.user_data.setdefault('extra_messages_to_delete', []).append(sent_msg.message_id)
                except Exception as e:
                    logger.error(f"Error sending explanation: {e}")
            else:
                await query.answer("–ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
        else:
            await query.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
        # –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await query.answer()
        return states.CHOOSING_NEXT_ACTION
    
    elif action == "test_next_continue":
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∂–∞—é..."
        try:
            loading_msg = await query.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
        except Exception as e:
            logger.error(f"Error sending loading message: {e}")
            return states.CHOOSING_NEXT_ACTION
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await utils.purge_old_messages(context, query.message.chat_id, keep_id=loading_msg.message_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        logger.info("Clearing all question data before loading next question")
        keys_to_remove = []
        for key in context.user_data.keys():
            if key.startswith('question_'):
                keys_to_remove.append(key)
        for key in keys_to_remove:
            context.user_data.pop(key, None)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ä–µ–∂–∏–º–µ
        last_mode = context.user_data.get('last_mode')
        
        if last_mode == 'random_all':
            all_questions = []
            for block_data in QUESTIONS_DATA.values():
                for topic_questions in block_data.values():
                    all_questions.extend(topic_questions)
            
            question_data = await utils.choose_question(query.from_user.id, all_questions)
            if question_data:
                await send_question(loading_msg, context, question_data, "random_all")
                return states.ANSWERING
            else:
                kb = keyboards.get_initial_choice_keyboard()
                await loading_msg.edit_text(
                    "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                    reply_markup=kb
                )
                return states.CHOOSING_MODE
        
        elif last_mode == 'exam_num':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º –ï–ì–≠
            exam_number = context.user_data.get('current_exam_number')
            if exam_number:
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                
                question_data = await utils.choose_question(query.from_user.id, questions_with_num)
                if question_data:
                    await send_question(loading_msg, context, question_data, "exam_num")
                    return states.ANSWERING
                else:
                    kb = keyboards.get_initial_choice_keyboard()
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_MODE
        
        elif last_mode == 'block':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –±–ª–æ–∫–æ–º
            selected_block = context.user_data.get('selected_block')
            if selected_block:
                questions_in_block = safe_cache_get_by_block(selected_block)
                
                question_data = await utils.choose_question(query.from_user.id, questions_in_block)
                if question_data:
                    await send_question(loading_msg, context, question_data, "block")
                    return states.ANSWERING
                else:
                    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_BLOCK
        
        elif last_mode == 'topic':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–π –∂–µ —Ç–µ–º–æ–π
            selected_topic = context.user_data.get('selected_topic')
            selected_block = context.user_data.get('selected_block')
            
            if selected_topic and selected_block:
                questions_in_topic = safe_cache_get_by_topic(selected_topic)
                
                question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
                if question_data:
                    await send_question(loading_msg, context, question_data, "topic")
                    return states.ANSWERING
                else:
                    topics = list(QUESTIONS_DATA.get(selected_block, {}).keys())
                    kb = keyboards.get_topics_keyboard(selected_block, topics)
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_TOPIC
        
        elif last_mode == 'mistakes':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
            context.user_data['current_mistake_index'] = context.user_data.get('current_mistake_index', 0) + 1
            await send_mistake_question(loading_msg, context)
            return states.REVIEWING_MISTAKES
        
    elif action == "test_next_change_topic":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await utils.purge_old_messages(context, query.message.chat_id)
        
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.reply_text(
            "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    elif action == "test_next_change_block":
        # –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await utils.purge_old_messages(context, query.message.chat_id)
        
        kb = build_main_menu()
        
        await query.message.reply_text(
            "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=kb
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        return states.CHOOSING_NEXT_ACTION

async def cmd_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mistakes - —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    user_id = update.effective_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        await update.message.reply_text("üëç –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
        return ConversationHandler.END
    
    context.user_data['mistake_ids'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['user_id'] = user_id
    
    await update.message.reply_text(
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏. –í—Å–µ–≥–æ: {len(mistake_ids)}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(update.message, context)
    return states.REVIEWING_MISTAKES

async def cmd_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /score - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    stats_raw = await db.get_user_stats(user_id)
    mistake_ids = await db.get_mistake_ids(user_id)
    streaks = await db.get_user_streaks(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    
    if stats_raw:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º
        scores_by_block = {}
        for topic, correct, total in stats_raw:
            block_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫"
            for block, topics in QUESTIONS_DATA.items():
                if topic in topics:
                    block_name = block
                    break
            
            if block_name not in scores_by_block:
                scores_by_block[block_name] = {
                    'correct': 0, 'total': 0, 'topics': []
                }
            
            scores_by_block[block_name]['correct'] += correct
            scores_by_block[block_name]['total'] += total
            
            percentage = (correct / total * 100) if total > 0 else 0
            indicator = "‚úÖ" if percentage >= 80 else "üü°" if percentage >= 50 else "üî¥"
            scores_by_block[block_name]['topics'].append(
                f"  {indicator} –¢–µ–º–∞ {topic}: {correct}/{total} ({percentage:.1f}%)"
            )
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –±–ª–æ–∫–∞–º
        for block_name, data in sorted(scores_by_block.items()):
            block_perc = (data['correct'] / data['total'] * 100) if data['total'] > 0 else 0
            text += f"üìå <b>{block_name}</b> ({block_perc:.1f}%)\n"
            text += "\n".join(data['topics']) + "\n\n"
    
    # –°—Ç—Ä–∏–∫–∏
    text += "‚ú® <b>–°—Ç—Ä–∏–∫–∏:</b>\n"
    text += f"  üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streaks.get('current_daily', 0)} (–º–∞–∫—Å: {streaks.get('max_daily', 0)})\n"
    text += f"  üöÄ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {streaks.get('current_correct', 0)} (–º–∞–∫—Å: {streaks.get('max_correct', 0)})\n\n"
    
    # –û—à–∏–±–∫–∏
    if mistake_ids:
        text += f"‚ùóÔ∏è –£ –≤–∞—Å {len(mistake_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏.\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mistakes –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –Ω–∏–º–∏."
    else:
        text += "üëç –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –æ—à–∏–±–æ–∫ –Ω–µ—Ç!"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE, states.CHOOSING_BLOCK, states.CHOOSING_TOPIC, states.CHOOSING_EXAM_NUMBER})
async def back_to_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏."""
    query = update.callback_query
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    query = update.callback_query
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from core.state_validator import state_validator
    state_validator.clear_state(query.from_user.id)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
    context.user_data['active_module'] = None
    
    await query.edit_message_text(
        "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=build_main_menu()
    )
    
    return ConversationHandler.END

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE, states.CHOOSING_BLOCK, states.CHOOSING_TOPIC, states.ANSWERING})
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    query = update.callback_query
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    kb = keyboards.get_initial_choice_keyboard()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    return states.CHOOSING_MODE

async def send_question(message, context: ContextTypes.DEFAULT_TYPE,
                       question_data: dict, last_mode: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ë–ï–ó –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞."""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–ø—Ä–æ—Å–µ
    question_id = question_data.get('id')
    context.user_data['current_question_id'] = question_id
    context.user_data[f'question_{question_id}'] = question_data
    context.user_data['last_mode'] = last_mode
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['id', 'answer', 'type']
    missing_fields = [field for field in required_fields if not question_data.get(field)]
    
    if missing_fields:
        logger.error(f"Question missing required fields: {missing_fields}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞"
        
        if hasattr(message, 'edit_text'):
            await message.edit_text(error_msg)
        else:
            await message.reply_text(error_msg)
        return ConversationHandler.END
    
    question_id = question_data.get('id')
    
    # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    logger.info(f"Clearing old question data before sending new question {question_id}")
    keys_to_remove = []
    for key in context.user_data.keys():
        if key.startswith('question_') and key != f'question_{question_id}':
            keys_to_remove.append(key)
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥ –µ–≥–æ ID
    context.user_data[f'question_{question_id}'] = question_data.copy()
    context.user_data['current_question_id'] = question_id
    context.user_data['last_mode'] = last_mode
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"SENDING QUESTION: ID={question_id}, "
                f"Answer={question_data.get('answer')}, "
                f"Type={question_data.get('type')}, "
                f"Topic={question_data.get('topic')}")
   
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ –∏ —Ç–µ–º–µ
    if 'block' not in question_data and context.user_data.get('selected_block'):
        question_data['block'] = context.user_data['selected_block']
    if 'topic' not in question_data and context.user_data.get('selected_topic'):
        question_data['topic'] = context.user_data['selected_topic']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠ –¥–ª—è —Ä–µ–∂–∏–º–∞ exam_num
    if last_mode == 'exam_num' and 'exam_number' in question_data:
        context.user_data['current_exam_number'] = question_data['exam_number']
    
    # –ü–æ–ª—É—á–∞–µ–º user_id
    if hasattr(message, 'from_user'):
        user_id = message.from_user.id
    elif hasattr(message, 'chat_id'):
        user_id = message.chat_id
    else:
        user_id = message.message.chat_id
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ë–ï–ó –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    text = utils.format_question_text(question_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if hasattr(message, 'edit_text'):
            # –≠—Ç–æ CallbackQuery - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(text, parse_mode=ParseMode.HTML)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['current_question_message_id'] = message.message_id
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_msg = await message.reply_text(text, parse_mode=ParseMode.HTML)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if sent_msg:
                context.user_data['current_question_message_id'] = sent_msg.message_id
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        try:
            if hasattr(message, 'edit_text'):
                await message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                await message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass
        return ConversationHandler.END
    from core.state_validator import state_validator
    state_validator.set_state(user_id, states.ANSWERING)
    
    return states.ANSWERING

@safe_handler()
async def handle_unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data –≤ test_part."""
    query = update.callback_query
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –≤ test_part: {query.data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à–∏ –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∏
    if query.data in ["test_export_csv", "test_work_mistakes"]:
        logger.error(f"–í–ù–ò–ú–ê–ù–ò–ï: callback {query.data} –ø–æ–ø–∞–ª –≤ handle_unknown_callback!")
    
    await query.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return states.CHOOSING_MODE

async def cmd_export_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export - —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV —Ñ–∞–π–ª."""
    user_id = update.effective_user.id
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
        csv_content = await utils.export_user_stats_csv(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        from io import BytesIO
        file_data = BytesIO(csv_content.encode('utf-8-sig'))  # utf-8-sig –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        file_data.name = f"statistics_{user_id}.csv"
        
        await update.message.reply_document(
            document=file_data,
            filename=f"statistics_{user_id}_{datetime.now().strftime('%Y%m%d')}.csv",
            caption="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV\n\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ Google Sheets –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user {user_id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cmd_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /report - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
    user_id = update.effective_user.id
    
    try:
        report = await utils.generate_detailed_report(user_id)
        await update.message.reply_text(report, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è user {user_id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_mistake_question(message, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫."""
    mistake_ids = context.user_data.get('mistake_ids', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    if current_index >= len(mistake_ids):
        # –í—Å–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        kb = keyboards.get_mistakes_finish_keyboard()
        
        text = "‚úÖ <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        text += f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: {context.user_data.get('mistakes_corrected', 0)}\n"
        text += f"–û—Å—Ç–∞–ª–æ—Å—å –æ—à–∏–±–æ–∫: {len(mistake_ids)}"
        
        if hasattr(message, 'edit_text'):
            await message.edit_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        else:
            await message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        
        return states.CHOOSING_MODE
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_id = mistake_ids[current_index]
    question_data = utils.find_question_by_id(question_id)
    
    if not question_data:
        # –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        context.user_data['current_mistake_index'] = current_index + 1
        return await send_mistake_question(message, context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    await send_question(message, context, question_data, "mistakes")
    
    # –î–û–ë–ê–í–ò–¢–¨: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_id = context.user_data.get('user_id')
    if user_id:
        from core.state_validator import state_validator
        state_validator.set_state(user_id, states.REVIEWING_MISTAKES)
    
    return states.REVIEWING_MISTAKES

@safe_handler()
@validate_state_transition({states.REVIEWING_MISTAKES})
async def handle_mistake_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—à–∏–±–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π."""
    
    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    checking_msg = await show_thinking_animation(
        update.message,
        text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç"
    )
    
    user_answer = update.message.text.strip()
    current_question_id = context.user_data.get('current_question_id')
    user_id = update.effective_user.id
    context.user_data['user_answer_message_id'] = update.message.message_id
    if not current_question_id:
        await checking_msg.delete()
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return states.CHOOSING_MODE
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    question_data = context.user_data.get(f'question_{current_question_id}')
    
    if not question_data:
        await checking_msg.delete()
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return states.CHOOSING_MODE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    correct_answer = str(question_data.get('answer', ''))
    question_type = question_data.get('type', 'multiple_choice')
    topic = question_data.get('topic')
    
    is_correct = utils.normalize_answer(user_answer, question_type) == \
                 utils.normalize_answer(correct_answer, question_type)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await db.update_progress(user_id, topic, is_correct)
    
    # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - —É–¥–∞–ª—è–µ–º –∏–∑ –æ—à–∏–±–æ–∫
    if is_correct:
        await db.delete_mistake(user_id, current_question_id)
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        mistake_ids = context.user_data.get('mistake_ids', [])
        current_index = context.user_data.get('current_mistake_index', 0)
        if 0 <= current_index < len(mistake_ids):
            mistake_ids.pop(current_index)
            context.user_data['mistake_ids'] = mistake_ids
    else:
        # –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ—à–∏–±–∫–µ
        context.user_data['current_mistake_index'] = context.user_data.get('current_mistake_index', 0) + 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        feedback = f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞."
    else:
        feedback = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
        feedback += f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n"
        feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    mistake_ids = context.user_data.get('mistake_ids', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    kb_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if question_data.get('explanation'):
        kb_buttons.append([
            InlineKeyboardButton(
                "üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ",
                callback_data="test_next_show_explanation",
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if current_index < len(mistake_ids):
        kb_buttons.append([
            InlineKeyboardButton(
                "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞",
                callback_data="test_next_continue",
            )
        ])
    else:
        kb_buttons.append([
            InlineKeyboardButton(
                "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data="test_mistake_finish",
            )
        ])
    
    kb_buttons.append([
        InlineKeyboardButton(
            "üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞",
            callback_data="test_next_change_topic",
        )
    ])
    
    kb = InlineKeyboardMarkup(kb_buttons)
    
    # –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–µ—Ä—è—é..." –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–¥–±–µ–∫–∞
    try:
        await checking_msg.delete()
    except Exception:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫
    sent_msg = await update.message.reply_text(
        feedback,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    context.user_data['feedback_message_id'] = sent_msg.message_id
    context.user_data['last_mode'] = 'mistakes'
    
    return states.CHOOSING_NEXT_ACTION

@safe_handler()
@validate_state_transition({states.REVIEWING_MISTAKES, states.CHOOSING_MODE})
async def mistake_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—à–∏–±–∫–∞–º."""
    query = update.callback_query
    
    action = query.data

    if action == "test_mistake_finish":
        kb = keyboards.get_initial_choice_keyboard()
        await query.edit_message_text(
            "‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    return states.REVIEWING_MISTAKES
    
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE, states.CHOOSING_EXAM_NUMBER})
async def select_exam_num(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è."""
    query = update.callback_query
    
    try:
        exam_number = int(query.data.split(":", 2)[2])
    except (ValueError, IndexError):
        return states.CHOOSING_EXAM_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    context.user_data['current_exam_number'] = exam_number
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
    questions_with_num = safe_cache_get_by_exam_num(exam_number)
    
    if not questions_with_num:
        return states.CHOOSING_EXAM_NUMBER
    
    await query.edit_message_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}...")
    
    # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = await utils.choose_question(query.from_user.id, questions_with_num)
    if question_data:
        await send_question(query.message, context, question_data, "exam_num")
        # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, states.ANSWERING)
        return states.ANSWERING
    else:
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return states.CHOOSING_MODE
        
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mode_random_in_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        await query.answer("‚ùå –ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
        return states.CHOOSING_BLOCK
    
    questions_in_block = safe_cache_get_by_block(selected_block)
    
    if not questions_in_block:
        await query.answer("‚ùå –í –±–ª–æ–∫–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.edit_message_text(
            f"‚ùå –í –±–ª–æ–∫–µ '{selected_block}' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_BLOCK
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–ª–æ–∫–∞...")
    
    question_data = await utils.choose_question(query.from_user.id, questions_in_block)
    if question_data:
        await send_question(query.message, context, question_data, "block")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, states.ANSWERING)
        return states.ANSWERING
    else:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
            reply_markup=kb
        )
        return states.CHOOSING_BLOCK

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mode_topic_in_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –≤ –±–ª–æ–∫–µ."""
    query = update.callback_query
    
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        return states.CHOOSING_BLOCK
    
    topics = list(QUESTIONS_DATA[selected_block].keys())
    if not topics:
        return states.CHOOSING_MODE
    
    kb = keyboards.get_topics_keyboard(selected_block, topics)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=kb
    )
    return states.CHOOSING_TOPIC

@safe_handler()
@validate_state_transition({states.CHOOSING_TOPIC})
async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    
    selected_topic = query.data.replace("topic:", "")
    selected_block = context.user_data.get('selected_block')
    
    if not selected_block or not selected_topic:
        return states.CHOOSING_TOPIC
    
    questions_in_topic = safe_cache_get_by_topic(selected_topic)
    if not questions_in_topic:
        return states.CHOOSING_TOPIC
    
    context.user_data['selected_topic'] = selected_topic
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ...")
    
    question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
    if question_data:
        await send_question(query.message, context, question_data, "topic")
        # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, states.ANSWERING)
        return states.ANSWERING
    else:
        topics = list(QUESTIONS_DATA[selected_block].keys())
        kb = keyboards.get_topics_keyboard(selected_block, topics)
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
            reply_markup=kb
        )
        return states.CHOOSING_TOPIC

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    user_id = query.from_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        return states.CHOOSING_MODE
    
    context.user_data['mistake_ids'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['user_id'] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è send_mistake_question
    
    await query.edit_message_text(
        f"üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(mistake_ids)}\n"
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É...",
        parse_mode=ParseMode.HTML
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(query.message, context)
    return states.REVIEWING_MISTAKES
    
async def cmd_debug_streaks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug_streaks - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–∫–∞—Ö."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–∫–∏
    streaks = await db.get_user_streaks(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        async with aiosqlite.connect(DATABASE_FILE) as conn:
            cursor = await conn.execute(
                """SELECT current_daily_streak, max_daily_streak, 
                          current_correct_streak, max_correct_streak,
                          last_activity_date
                   FROM users WHERE user_id = ?""",
                (user_id,)
            )
            row = await cursor.fetchone()
            
            if row:
                text = f"üîç <b>–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä–∏–∫–æ–≤ –¥–ª—è user {user_id}:</b>\n\n"
                text += f"<b>–ò–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_streaks:</b>\n"
                text += f"  current_daily: {streaks.get('current_daily', 'None')}\n"
                text += f"  max_daily: {streaks.get('max_daily', 'None')}\n"
                text += f"  current_correct: {streaks.get('current_correct', 'None')}\n"
                text += f"  max_correct: {streaks.get('max_correct', 'None')}\n\n"
                
                text += f"<b>–ü—Ä—è–º–æ –∏–∑ –ë–î:</b>\n"
                text += f"  current_daily_streak: {row[0]}\n"
                text += f"  max_daily_streak: {row[1]}\n"
                text += f"  current_correct_streak: {row[2]}\n"
                text += f"  max_correct_streak: {row[3]}\n"
                text += f"  last_activity_date: {row[4]}\n"
            else:
                text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î: {e}"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é cmd_score
    await cmd_score(query, context)
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    stats = await db.get_user_stats(user_id)
    mistakes = await utils.get_user_mistakes(user_id)
    
    if not stats:
        await query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
        return states.CHOOSING_MODE
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º</b>\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    topics_analysis = []
    for topic, correct, total in stats:
        if total > 0:
            percentage = (correct / total * 100)
            topic_name = TOPIC_NAMES.get(topic, topic)
            topics_analysis.append((topic_name, correct, total, percentage))
    
    topics_analysis.sort(key=lambda x: x[3], reverse=True)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    excellent = [t for t in topics_analysis if t[3] >= 90]
    good = [t for t in topics_analysis if 70 <= t[3] < 90]
    average = [t for t in topics_analysis if 50 <= t[3] < 70]
    weak = [t for t in topics_analysis if t[3] < 50]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
    if excellent:
        text += "üåü <b>–û—Ç–ª–∏—á–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ:</b>\n"
        for topic_name, correct, total, percentage in excellent:
            text += f"‚Ä¢ {topic_name}: {correct}/{total} ({percentage:.0f}%)\n"
        text += "\n"
    
    if good:
        text += "‚úÖ <b>–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å:</b>\n"
        for topic_name, correct, total, percentage in good:
            text += f"‚Ä¢ {topic_name}: {correct}/{total} ({percentage:.0f}%)\n"
        text += "\n"
    
    if average:
        text += "üìù <b>–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å:</b>\n"
        for topic_name, correct, total, percentage in average:
            text += f"‚Ä¢ {topic_name}: {correct}/{total} ({percentage:.0f}%)\n"
        text += "\n"
    
    if weak:
        text += "‚ùó <b>–¢—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:</b>\n"
        for topic_name, correct, total, percentage in weak:
            text += f"‚Ä¢ {topic_name}: {correct}/{total} ({percentage:.0f}%)\n"
        text += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
    if mistakes:
        mistakes_by_topic = {}
        for mistake in mistakes:
            topic = mistake.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
            if topic not in mistakes_by_topic:
                mistakes_by_topic[topic] = []
            mistakes_by_topic[topic].append(mistake)
        
        text += "üìå <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:</b>\n"
        for topic, topic_mistakes in sorted(mistakes_by_topic.items(), 
                                          key=lambda x: len(x[1]), reverse=True)[:5]:
            text += f"‚Ä¢ {topic}: {len(topic_mistakes)} –æ—à–∏–±–æ–∫\n"
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += "\nüí° <b>–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
    if weak:
        text += f"1. –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ —Ç–µ–º–∞–º: {', '.join([t[0] for t in weak[:3]])}\n"
    if len(mistakes) > 5:
        text += "2. –ü—Ä–æ–π–¥–∏—Ç–µ ¬´–†–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏¬ª\n"
    text += "3. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="test_export_csv")],
        [InlineKeyboardButton("üîß –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="test_work_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_part_progress")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
    
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def detailed_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –Ω–∞–≥–ª—è–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['conversation_state'] = states.CHOOSING_MODE
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    stats = await db.get_user_stats(user_id)
    mistakes = await db.get_mistake_ids(user_id)
    streaks = await db.get_user_streaks(user_id)
    
    if not stats:
        # –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text = MessageFormatter.format_welcome_message(
            "—Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –ï–ì–≠",
            is_new_user=True
        )
        kb = keyboards.get_initial_choice_keyboard()
    else:
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_correct = sum(correct for _, correct, _ in stats)
        total_answered = sum(total for _, _, total in stats)
        overall_percentage = (total_correct / total_answered * 100) if total_answered > 0 else 0
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–º—ã (–º–µ–Ω—å—à–µ 60% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö)
        weak_topics = []
        for topic, correct, total in stats:
            if total > 0 and (correct / total) < 0.6:
                topic_name = TOPIC_NAMES.get(topic, topic)
                percentage = (correct / total * 100)
                weak_topics.append((topic_name, percentage))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–º—ã –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
        weak_topics.sort(key=lambda x: x[1])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = f"üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        
        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = UniversalUIComponents.create_progress_bar(
            total_correct, total_answered, width=15, show_percentage=True
        )
        text += f"<b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress_bar}\n"
        text += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {total_correct} –∏–∑ {total_answered}\n\n"
        
        # –°—Ç—Ä–∏–∫–∏
        if streaks:
            text += f"<b>üî• –°–µ—Ä–∏–∏:</b>\n"
            if streaks.get('current_daily', 0) > 0:
                text += f"‚Ä¢ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streaks['current_daily']} (—Ä–µ–∫–æ—Ä–¥: {streaks.get('max_daily', 0)})\n"
            if streaks.get('current_correct', 0) > 0:
                text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {streaks['current_correct']} (—Ä–µ–∫–æ—Ä–¥: {streaks.get('max_correct', 0)})\n"
            text += "\n"
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–º—ã (–º–∞–∫—Å–∏–º—É–º 5)
        if weak_topics:
            text += "<b>üìç –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:</b>\n"
            for topic_name, percentage in weak_topics[:5]:
                color = UniversalUIComponents.get_color_for_score(percentage, 100)
                text += f"{color} {topic_name}: {percentage:.0f}%\n"
            text += "\n"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        if len(mistakes) > 0:
            text += f"<b>‚ùó –û—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏:</b> {len(mistakes)}\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        if len(mistakes) > 10:
            text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º ¬´–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏¬ª\n"
        if weak_topics:
            text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Ç–µ–º–∞–º\n"
        if overall_percentage > 80:
            text += "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã\n"
        elif overall_percentage < 60:
            text += "‚Ä¢ –£–¥–µ–ª–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∞–∫—Ç–∏–∫–æ–π\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = keyboards.get_progress_keyboard()
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_work_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    logger.info(f"test_work_mistakes –≤—ã–∑–≤–∞–Ω —Å callback_data: {query.data}")
    return await work_mistakes(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV."""
    query = update.callback_query
    logger.info(f"test_export_csv –≤—ã–∑–≤–∞–Ω —Å callback_data: {query.data}")
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
    user_id = query.from_user.id
    
    await query.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        mistakes = await utils.get_user_mistakes(user_id)
        stats = await db.get_user_stats(user_id)
        
        if not stats:
            await query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return states.CHOOSING_MODE
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        writer.writerow(['–û—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏ –ï–ì–≠'])
        writer.writerow([f'–î–∞—Ç–∞: {datetime.now().strftime("%d.%m.%Y %H:%M")}'])
        writer.writerow([])
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        writer.writerow(['–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê'])
        writer.writerow(['–¢–µ–º–∞', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', '–í—Å–µ–≥–æ –æ—Ç–≤–µ—á–µ–Ω–æ', '–ü—Ä–æ—Ü–µ–Ω—Ç'])
        
        total_correct = 0
        total_answered = 0
        
        for topic, correct, answered in stats:
            percentage = (correct / answered * 100) if answered > 0 else 0
            topic_name = TOPIC_NAMES.get(topic, topic)
            writer.writerow([topic_name, correct, answered, f'{percentage:.1f}%'])
            total_correct += correct
            total_answered += answered
        
        writer.writerow([])
        writer.writerow(['–ò–¢–û–ì–û', total_correct, total_answered, 
                        f'{(total_correct/total_answered*100 if total_answered > 0 else 0):.1f}%'])
        
        # –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        if mistakes:
            writer.writerow([])
            writer.writerow(['–ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö'])
            writer.writerow(['ID –≤–æ–ø—Ä–æ—Å–∞', '–¢–µ–º–∞', '–¢–∏–ø –æ—à–∏–±–∫–∏'])
            
            for mistake in mistakes:
                writer.writerow([
                    mistake.get('question_id', 'N/A'),
                    mistake.get('topic', '–ë–µ–∑ —Ç–µ–º—ã'),
                    mistake.get('error_type', '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')
                ])
        
        # –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        output.seek(0)
        bio = io.BytesIO(output.getvalue().encode('utf-8-sig'))
        bio.name = f'test_statistics_{user_id}_{datetime.now().strftime("%Y%m%d")}.csv'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await query.message.reply_document(
            document=bio,
            caption="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏ –ï–ì–≠\n\n"
                    "–§–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ Excel –∏–ª–∏ Google Sheets",
            filename=bio.name
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_part_progress")
        ]])
        
        await query.message.reply_text(
            "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=kb
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ", show_alert=True)
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def work_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        text = "üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏!"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="test_back_to_mode")
        ]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –∏ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    context.user_data['mode'] = 'mistakes'
    context.user_data['mistake_queue'] = mistake_ids.copy()
    context.user_data['mistakes_total'] = len(mistake_ids)
    context.user_data['mistakes_completed'] = 0
    
    text = f"""üîÑ <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>

–£ –≤–∞—Å {len(mistake_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏.

–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–Ω–æ–≤–æ. 
–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å", callback_data="test_start_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_back_to_mode")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    return await work_mistakes(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    return await select_random_all(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_start_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
    await send_mistake_question(query.message, context)
    
    return states.REVIEWING_MISTAKES

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    user_data = await db.get_user_status(user_id)
    is_subscribed = user_data.get('is_subscribed', False)
    
    if is_subscribed:
        text = """‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>

–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    else:
        text = """‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>

–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ –î–æ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."""
    
    kb_buttons = []
    if not is_subscribed:
        kb_buttons.append([
            InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url="https://example.com/subscribe")
        ])
    
    kb_buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_back_to_mode")
    ])
    
    kb = InlineKeyboardMarkup(kb_buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def test_back_to_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    return await back_to_mode(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    
    user_id = query.from_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        await query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—à–∏–±–æ–∫! üéâ", show_alert=True)
        return states.CHOOSING_MODE
    
    context.user_data['mistake_ids'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['user_id'] = user_id
    
    await query.edit_message_text(
        f"üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(mistake_ids)}\n"
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É...",
        parse_mode=ParseMode.HTML
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(query.message, context)
    return states.REVIEWING_MISTAKES

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏ - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã."""
    return await select_random_all(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def reset_progress_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="test_reset_do"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="to_test_part_menu")
        ]
    ])
    
    await query.edit_message_text(
        "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤–µ—Å—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å, –≤–∫–ª—é—á–∞—è:\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫\n"
        "‚Ä¢ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç—Ä–∏–∫–∏\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ test_part/handlers.py:

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def reset_progress_do(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.reset_user_progress(user_id)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞—Ç–Ω–æ
        context.user_data['active_module'] = 'test_part'
        
        kb = keyboards.get_initial_choice_keyboard()
        await query.edit_message_text(
            "‚úÖ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error resetting progress for user {user_id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="to_test_part_menu")
            ]])
        )
    
    return states.CHOOSING_MODE

@safe_handler()
async def back_to_test_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
import logging
import random
from datetime import datetime

import aiosqlite
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

from core import db, states
from core.admin_tools import admin_manager
from core.config import DATABASE_FILE, REQUIRED_CHANNEL
from core.ui_helpers import (create_visual_progress, get_motivational_message,
                             get_personalized_greeting,
                             show_streak_notification, show_thinking_animation)
from core.universal_ui import (AdaptiveKeyboards, MessageFormatter,
                               UniversalUIComponents)
from core.error_handler import safe_handler, auto_answer_callback
from core.state_validator import validate_state_transition, state_validator
from . import keyboards, utils
from .loader import AVAILABLE_BLOCKS, QUESTIONS_DATA, QUESTIONS_DICT_FLAT

try:
    from .cache import questions_cache
except ImportError:
    logging.warning("–ú–æ–¥—É–ª—å cache –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    questions_cache = None

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ (–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏):
def safe_cache_get_by_exam_num(exam_number):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠."""
    if questions_cache:
        return questions_cache.get_by_exam_num(exam_number)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_with_num = []
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                if question.get("exam_number") == exam_number:
                    questions_with_num.append(question)
    return questions_with_num

def safe_cache_get_by_topic(topic):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ."""
    if questions_cache:
        return questions_cache.get_by_topic(topic)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_in_topic = []
    for block_data in QUESTIONS_DATA.values():
        for topic_name, topic_questions in block_data.items():
            if topic_name == topic:
                questions_in_topic.extend(topic_questions)
    return questions_in_topic

def safe_cache_get_by_block(block):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª–æ–∫—É."""
    if questions_cache:
        return questions_cache.get_by_block(block)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_in_block = []
    for topic_questions in QUESTIONS_DATA.get(block, {}).values():
        questions_in_block.extend(topic_questions)
    return questions_in_block

def safe_cache_get_all_exam_numbers():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –ï–ì–≠."""
    if questions_cache:
        return questions_cache.get_all_exam_numbers()
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    exam_numbers = set()
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                exam_num = question.get("exam_number")
                if isinstance(exam_num, int):
                    exam_numbers.add(exam_num)
    return sorted(list(exam_numbers))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def init_data():
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    global QUESTIONS_DATA, AVAILABLE_BLOCKS
    from .loader import get_questions_data
    QUESTIONS_DATA = get_questions_data()
    AVAILABLE_BLOCKS = list(QUESTIONS_DATA.keys()) if QUESTIONS_DATA else []

@safe_handler()
async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º utils –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await utils.check_subscription(query.from_user.id, context.bot):
        await utils.send_subscription_required(query, REQUIRED_CHANNEL)
        return ConversationHandler.END
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π utils
    if not await utils.check_subscription(update.effective_user.id, context.bot, REQUIRED_CHANNEL):
        await utils.send_subscription_required(update, REQUIRED_CHANNEL)
        return ConversationHandler.END
    
    kb = keyboards.get_initial_choice_keyboard()
    await update.message.reply_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_exam_num_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠."""
    query = update.callback_query
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
    all_nums = safe_cache_get_all_exam_numbers()
    
    if not all_nums:
        return states.CHOOSING_MODE
    
    kb = keyboards.get_exam_number_keyboard(all_nums)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠:",
        reply_markup=kb
    )
    context.user_data['mode'] = 'exam_num'
    return states.CHOOSING_EXAM_NUMBER

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_block_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ –±–ª–æ–∫–∞–º."""
    query = update.callback_query
    
    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:",
        reply_markup=kb
    )
    context.user_data['mode'] = 'block'
    return states.CHOOSING_BLOCK

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_random_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—Å–µ–π –±–∞–∑—ã."""
    query = update.callback_query
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    all_questions = []
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            all_questions.extend(topic_questions)
    
    if not all_questions:
        return states.CHOOSING_MODE
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
    
    # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = await utils.choose_question(query.from_user.id, all_questions)
    if question_data:
        await send_question(query.message, context, question_data, "random_all")
        return states.ANSWERING
    else:
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.edit_text(
            "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_BLOCK})
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    
    block_name = query.data.split(":", 2)[2]
    if block_name not in AVAILABLE_BLOCKS:
        return states.CHOOSING_BLOCK
    
    context.user_data['selected_block'] = block_name
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
    kb = keyboards.get_mode_keyboard(block_name)
    await query.edit_message_text(
        f"–ë–ª–æ–∫: {block_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def show_progress_enhanced(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    stats = await db.get_user_stats(user_id)
    streaks = await db.get_user_streaks(user_id)
    
    if not stats:
        greeting = get_personalized_greeting({'total_attempts': 0, 'streak': streaks.get('current_daily', 0)})
        text = greeting + MessageFormatter.format_welcome_message(
            "—Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –ï–ì–≠",
            is_new_user=True
        )
    else:
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_correct = sum(correct for _, correct, _ in stats)
        total_answered = sum(total for _, _, total in stats)
        overall_percentage = (total_correct / total_answered * 100) if total_answered > 0 else 0
        
        # –¢–æ–ø —Ç–µ–º—ã
        top_results = []
        for topic, correct, total in sorted(stats, key=lambda x: x[1]/x[2] if x[2] > 0 else 0, reverse=True)[:3]:
            percentage = (correct / total * 100) if total > 0 else 0
            topic_name = TOPIC_NAMES.get(topic, topic)
            top_results.append({
                'topic': topic_name,
                'score': correct,
                'max_score': total
            })
        
        greeting = get_personalized_greeting({'total_attempts': total_answered, 'streak': streaks.get('current_daily', 0)})
        text = greeting + MessageFormatter.format_progress_message({
            'total_attempts': total_answered,
            'average_score': overall_percentage / 100 * 3,  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —à–∫–∞–ª—É 0-3
            'completed': len(stats),
            'total': len(TOPIC_NAMES),
            'total_time': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            'top_results': top_results,
            'current_average': overall_percentage,
            'previous_average': overall_percentage - 5  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–∞
        }, "—Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏
        if streaks:
            text += f"\n\n<b>üî• –°–µ—Ä–∏–∏:</b>\n"
            text += UniversalUIComponents.format_statistics_tree({
                '–î–Ω–µ–π –ø–æ–¥—Ä—è–¥': streaks.get('current_daily', 0),
                '–†–µ–∫–æ—Ä–¥ –¥–Ω–µ–π': streaks.get('max_daily', 0),
                '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥': streaks.get('current_correct', 0),
                '–†–µ–∫–æ—Ä–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö': streaks.get('max_correct', 0)
            })
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = AdaptiveKeyboards.create_progress_keyboard(
        has_detailed_stats=bool(stats),
        can_export=bool(stats),
        module_code="test"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['answer_message_id'] = update.message.message_id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    thinking_msg = await show_thinking_animation(update.message, "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç")
    context.user_data['thinking_message_id'] = thinking_msg.message_id
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_id = context.user_data.get('current_question_id')
    if not current_question_id:
        logger.error(f"No current_question_id for user {user_id}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –µ–≥–æ ID
    question_data = context.user_data.get(f'question_{current_question_id}')
    if not question_data:
        logger.error(f"No question data for ID {current_question_id}, user {user_id}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        return ConversationHandler.END
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ question_data
    correct_answer = str(question_data.get('answer', ''))
    question_type = question_data.get('type', 'multiple_choice')
    topic = question_data.get('topic')
    question_id = question_data.get('id')
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    normalized_user = utils.normalize_answer(user_answer, question_type)
    normalized_correct = utils.normalize_answer(correct_answer, question_type)
    is_correct = normalized_user == normalized_correct
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"User {user_id} answered question {question_id}: {is_correct}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        await db.update_progress(user_id, topic, is_correct)
        await db.record_answered(user_id, question_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π —Å—Ç—Ä–∏–∫ (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏ –ª—é–±–æ–º –æ—Ç–≤–µ—Ç–µ)
        daily_current, daily_max = await db.update_daily_streak(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–∫–∏ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_correct_streak = context.user_data.get('last_correct_streak', 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if is_correct:
            correct_current, correct_max = await db.update_correct_streak(user_id)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
            context.user_data['last_correct_streak'] = correct_current
            context.user_data['correct_streak'] = context.user_data.get('correct_streak', 0) + 1
            await show_streak_notification(update, context, 'correct', context.user_data['correct_streak'])
        else:
            await db.reset_correct_streak(user_id)
            correct_current = 0
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
            streaks = await db.get_user_streaks(user_id)
            correct_max = streaks.get('max_correct', 0)
            await db.record_mistake(user_id, question_id)
            context.user_data['last_correct_streak'] = 0
            context.user_data['correct_streak'] = 0
    
    except Exception as e:
        logger.error(f"Failed to update progress for user {user_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¢–û–õ–¨–ö–û –ü–†–ê–í–ò–õ–¨–ù–´–• –æ—Ç–≤–µ—Ç–æ–≤
    progress_text = ""
    last_mode = context.user_data.get('last_mode', 'random_all')
    
    try:
        if last_mode == 'exam_num':
            exam_number = context.user_data.get('current_exam_number')
            if exam_number:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                total_questions = len(questions_with_num)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                stats = await db.get_user_stats(user_id)
                correct_count = 0
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                for topic_stat, correct, total in stats:
                    # –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–π —Ç–µ–º—ã –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏
                    topic_questions_in_exam = [q for q in questions_with_num if q.get('topic') == topic_stat]
                    if topic_questions_in_exam:
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ
                        correct_count += correct
                
                progress_bar = create_visual_progress(correct_count, total_questions)
                progress_text = f"‚úÖ –†–µ—à–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–∏—é ‚Ññ{exam_number}: {progress_bar}"
        
        elif last_mode == 'topic':
            selected_topic = context.user_data.get('selected_topic')
            if selected_topic:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–º—ã
                questions_in_topic = safe_cache_get_by_topic(selected_topic)
                total_questions = len(questions_in_topic)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ
                stats = await db.get_user_stats(user_id)
                correct_count = 0
                
                for topic_stat, correct, total in stats:
                    if topic_stat == selected_topic:
                        correct_count = correct
                        break
                
                progress_bar = create_visual_progress(correct_count, total_questions)
                topic_name = utils.TOPIC_NAMES.get(selected_topic, selected_topic)
                progress_text = f"‚úÖ –†–µ—à–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ —Ç–µ–º–µ \"{topic_name}\": {progress_bar}"
        
        elif last_mode == 'block':
            selected_block = context.user_data.get('selected_block')
            if selected_block:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±–ª–æ–∫–∞
                questions_in_block = safe_cache_get_by_block(selected_block)
                total_questions = len(questions_in_block)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º –±–ª–æ–∫–∞
                stats = await db.get_user_stats(user_id)
                correct_count = 0
                
                for topic_stat, correct, total in stats:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ç–µ–º–∞ –∫ —ç—Ç–æ–º—É –±–ª–æ–∫—É
                    if selected_block in QUESTIONS_DATA and topic_stat in QUESTIONS_DATA[selected_block]:
                        correct_count += correct
                
                progress_bar = create_visual_progress(correct_count, total_questions)
                progress_text = f"‚úÖ –†–µ—à–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ –±–ª–æ–∫—É \"{selected_block}\": {progress_bar}"
    
    except Exception as e:
        logger.error(f"Error calculating progress for user {user_id}: {e}")
        progress_text = ""

    motivational_phrase = ""
    try:
        motivational_phrase = get_motivational_message(correct_count, total_questions)
    except Exception:
        pass
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    if is_correct:
        # –°–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        feedback = f"<b>{utils.get_random_correct_phrase()}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if progress_text:
            feedback += f"{progress_text}\n\n"
        
        # –°—Ç—Ä–∏–∫–∏
        feedback += f"üî• <b>–°—Ç—Ä–∏–∫–∏:</b>\n"
        feedback += f"üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {daily_current}\n"
        feedback += f"‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {correct_current}"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è milestone
        milestone_phrase = utils.get_streak_milestone_phrase(correct_current)
        if milestone_phrase and correct_current > old_correct_streak:
            feedback += f"\n\n{milestone_phrase}"

        # –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
        if correct_current > old_correct_streak and correct_current == correct_max and correct_max > 1:
            feedback += f"\n\nüéâ <b>–ù–û–í–´–ô –†–ï–ö–û–†–î!</b>"

        if motivational_phrase:
            feedback += f"\n\n{motivational_phrase}"

    else:
        # –°–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        feedback = f"<b>{utils.get_random_incorrect_phrase()}</b>\n\n"
        feedback += f"–í–∞—à –æ—Ç–≤–µ—Ç: <code>{user_answer}</code>\n"
        feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º)
        if progress_text:
            feedback += f"{progress_text}\n\n"
        
        # –°—Ç—Ä–∏–∫–∏
        feedback += f"üî• <b>–°—Ç—Ä–∏–∫–∏:</b>\n"
        feedback += f"üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {daily_current}\n"
        
        # –ü—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç—Ä–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ—Ä–¥
        if old_correct_streak > 0:
            feedback += f"‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: 0\n"
            feedback += f"\nüíî –°–µ—Ä–∏—è –∏–∑ {old_correct_streak} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞!"
            if correct_max > 0:
                feedback += f"\nüìà –í–∞—à —Ä–µ–∫–æ—Ä–¥: {correct_max}"
        else:
            feedback += f"‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: 0"

    if motivational_phrase and not is_correct:
        feedback += f"\n\n{motivational_phrase}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "—á—Ç–æ –¥–∞–ª—å—à–µ"
    has_explanation = bool(question_data.get('explanation'))
    kb = keyboards.get_next_action_keyboard(last_mode, has_explanation=has_explanation)
    
    try:
        sent_msg = await update.message.reply_text(
            feedback,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–∂–∏–¥–∞–Ω–∏—è
        thinking_id = context.user_data.pop('thinking_message_id', None)
        if thinking_id:
            try:
                await update.message.bot.delete_message(update.message.chat_id, thinking_id)
            except Exception:
                pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∏–¥–±–µ–∫–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['feedback_message_id'] = sent_msg.message_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è
        context.user_data['last_answer_correct'] = is_correct
        
        return states.CHOOSING_NEXT_ACTION
    
    except Exception as e:
        logger.error(f"Error sending feedback to user {user_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
        thinking_id = context.user_data.pop('thinking_message_id', None)
        if thinking_id:
            try:
                await update.message.bot.delete_message(update.message.chat_id, thinking_id)
            except Exception:
                pass
        return ConversationHandler.END

@safe_handler()
async def handle_next_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)."""
    query = update.callback_query
    
    action = query.data
    
    if action == "test_next_show_explanation":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_question_id = context.user_data.get('current_question_id')
        if current_question_id:
            question_data = context.user_data.get(f'question_{current_question_id}')
            if question_data and question_data.get('explanation'):
                explanation_text = question_data['explanation']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ markdown
                explanation_text = utils.md_to_html(explanation_text)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π
                formatted_text = f"üí° <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É</b>\n\n"
                formatted_text += explanation_text
                
                try:
                    sent_msg = await query.message.reply_text(
                        formatted_text,
                        parse_mode=ParseMode.HTML
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    context.user_data.setdefault('extra_messages_to_delete', []).append(sent_msg.message_id)
                except Exception as e:
                    logger.error(f"Error sending explanation: {e}")
        return states.CHOOSING_NEXT_ACTION
    
    elif action == "test_next_continue":
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∂–∞—é..."
        try:
            loading_msg = await query.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
        except Exception as e:
            logger.error(f"Error sending loading message: {e}")
            return states.CHOOSING_NEXT_ACTION
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await utils.purge_old_messages(context, query.message.chat_id, keep_id=loading_msg.message_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        logger.info("Clearing all question data before loading next question")
        keys_to_remove = []
        for key in context.user_data.keys():
            if key.startswith('question_'):
                keys_to_remove.append(key)
        for key in keys_to_remove:
            context.user_data.pop(key, None)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ä–µ–∂–∏–º–µ
        last_mode = context.user_data.get('last_mode')
        
        if last_mode == 'random_all':
            all_questions = []
            for block_data in QUESTIONS_DATA.values():
                for topic_questions in block_data.values():
                    all_questions.extend(topic_questions)
            
            question_data = await utils.choose_question(query.from_user.id, all_questions)
            if question_data:
                await send_question(loading_msg, context, question_data, "random_all")
                return states.ANSWERING
            else:
                kb = keyboards.get_initial_choice_keyboard()
                await loading_msg.edit_text(
                    "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                    reply_markup=kb
                )
                return states.CHOOSING_MODE
        
        elif last_mode == 'exam_num':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º –ï–ì–≠
            exam_number = context.user_data.get('current_exam_number')
            if exam_number:
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                
                question_data = await utils.choose_question(query.from_user.id, questions_with_num)
                if question_data:
                    await send_question(loading_msg, context, question_data, "exam_num")
                    return states.ANSWERING
                else:
                    kb = keyboards.get_initial_choice_keyboard()
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_MODE
        
        elif last_mode == 'block':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –±–ª–æ–∫–æ–º
            selected_block = context.user_data.get('selected_block')
            if selected_block:
                questions_in_block = safe_cache_get_by_block(selected_block)
                
                question_data = await utils.choose_question(query.from_user.id, questions_in_block)
                if question_data:
                    await send_question(loading_msg, context, question_data, "block")
                    return states.ANSWERING
                else:
                    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_BLOCK
        
        elif last_mode == 'topic':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–π –∂–µ —Ç–µ–º–æ–π
            selected_topic = context.user_data.get('selected_topic')
            selected_block = context.user_data.get('selected_block')
            
            if selected_topic and selected_block:
                questions_in_topic = safe_cache_get_by_topic(selected_topic)
                
                question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
                if question_data:
                    await send_question(loading_msg, context, question_data, "topic")
                    return states.ANSWERING
                else:
                    topics = list(QUESTIONS_DATA.get(selected_block, {}).keys())
                    kb = keyboards.get_topics_keyboard(selected_block, topics)
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_TOPIC
        
        elif last_mode == 'mistakes':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
            context.user_data['current_mistake_index'] = context.user_data.get('current_mistake_index', 0) + 1
            await send_mistake_question(loading_msg, context)
            return states.REVIEWING_MISTAKES
        
    elif action == "test_next_change_topic":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await utils.purge_old_messages(context, query.message.chat_id)
        
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.reply_text(
            "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    elif action == "test_next_change_block":
        # –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await utils.purge_old_messages(context, query.message.chat_id)
        
        from core.plugin_loader import build_main_menu
        kb = build_main_menu()
        
        await query.message.reply_text(
            "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=kb
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        return states.CHOOSING_NEXT_ACTION

async def cmd_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mistakes - —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    user_id = update.effective_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        await update.message.reply_text("üëç –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
        return ConversationHandler.END
    
    context.user_data['mistake_ids'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['user_id'] = user_id
    
    await update.message.reply_text(
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏. –í—Å–µ–≥–æ: {len(mistake_ids)}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(update.message, context)
    return states.REVIEWING_MISTAKES

async def cmd_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /score - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    stats_raw = await db.get_user_stats(user_id)
    mistake_ids = await db.get_mistake_ids(user_id)
    streaks = await db.get_user_streaks(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    
    if stats_raw:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º
        scores_by_block = {}
        for topic, correct, total in stats_raw:
            block_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫"
            for block, topics in QUESTIONS_DATA.items():
                if topic in topics:
                    block_name = block
                    break
            
            if block_name not in scores_by_block:
                scores_by_block[block_name] = {
                    'correct': 0, 'total': 0, 'topics': []
                }
            
            scores_by_block[block_name]['correct'] += correct
            scores_by_block[block_name]['total'] += total
            
            percentage = (correct / total * 100) if total > 0 else 0
            indicator = "‚úÖ" if percentage >= 80 else "üü°" if percentage >= 50 else "üî¥"
            scores_by_block[block_name]['topics'].append(
                f"  {indicator} –¢–µ–º–∞ {topic}: {correct}/{total} ({percentage:.1f}%)"
            )
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –±–ª–æ–∫–∞–º
        for block_name, data in sorted(scores_by_block.items()):
            block_perc = (data['correct'] / data['total'] * 100) if data['total'] > 0 else 0
            text += f"üìå <b>{block_name}</b> ({block_perc:.1f}%)\n"
            text += "\n".join(data['topics']) + "\n\n"
    
    # –°—Ç—Ä–∏–∫–∏
    text += "‚ú® <b>–°—Ç—Ä–∏–∫–∏:</b>\n"
    text += f"  üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streaks.get('current_daily', 0)} (–º–∞–∫—Å: {streaks.get('max_daily', 0)})\n"
    text += f"  üöÄ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {streaks.get('current_correct', 0)} (–º–∞–∫—Å: {streaks.get('max_correct', 0)})\n\n"
    
    # –û—à–∏–±–∫–∏
    if mistake_ids:
        text += f"‚ùóÔ∏è –£ –≤–∞—Å {len(mistake_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏.\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mistakes –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –Ω–∏–º–∏."
    else:
        text += "üëç –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –æ—à–∏–±–æ–∫ –Ω–µ—Ç!"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@safe_handler()
async def back_to_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏."""
    query = update.callback_query
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    query = update.callback_query
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    kb = keyboards.get_initial_choice_keyboard()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    return states.CHOOSING_MODE

async def send_question(message, context: ContextTypes.DEFAULT_TYPE,
                       question_data: dict, last_mode: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ë–ï–ó –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['id', 'answer', 'type']
    missing_fields = [field for field in required_fields if not question_data.get(field)]
    
    if missing_fields:
        logger.error(f"Question missing required fields: {missing_fields}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞"
        
        if hasattr(message, 'edit_text'):
            await message.edit_text(error_msg)
        else:
            await message.reply_text(error_msg)
        return ConversationHandler.END
    
    question_id = question_data.get('id')
    
    # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    logger.info(f"Clearing old question data before sending new question {question_id}")
    keys_to_remove = []
    for key in context.user_data.keys():
        if key.startswith('question_') and key != f'question_{question_id}':
            keys_to_remove.append(key)
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥ –µ–≥–æ ID
    context.user_data[f'question_{question_id}'] = question_data.copy()
    context.user_data['current_question_id'] = question_id
    context.user_data['last_mode'] = last_mode
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"SENDING QUESTION: ID={question_id}, "
                f"Answer={question_data.get('answer')}, "
                f"Type={question_data.get('type')}, "
                f"Topic={question_data.get('topic')}")
   
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ –∏ —Ç–µ–º–µ
    if 'block' not in question_data and context.user_data.get('selected_block'):
        question_data['block'] = context.user_data['selected_block']
    if 'topic' not in question_data and context.user_data.get('selected_topic'):
        question_data['topic'] = context.user_data['selected_topic']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠ –¥–ª—è —Ä–µ–∂–∏–º–∞ exam_num
    if last_mode == 'exam_num' and 'exam_number' in question_data:
        context.user_data['current_exam_number'] = question_data['exam_number']
    
    # –ü–æ–ª—É—á–∞–µ–º user_id
    if hasattr(message, 'from_user'):
        user_id = message.from_user.id
    elif hasattr(message, 'chat_id'):
        user_id = message.chat_id
    else:
        user_id = message.message.chat_id
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ë–ï–ó –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    text = utils.format_question_text(question_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if hasattr(message, 'edit_text'):
            # –≠—Ç–æ CallbackQuery - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(text, parse_mode=ParseMode.HTML)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['current_question_message_id'] = message.message_id
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_msg = await message.reply_text(text, parse_mode=ParseMode.HTML)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if sent_msg:
                context.user_data['current_question_message_id'] = sent_msg.message_id
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        try:
            if hasattr(message, 'edit_text'):
                await message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                await message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass
        return ConversationHandler.END
    
    return states.ANSWERING

async def cmd_export_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export - —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV —Ñ–∞–π–ª."""
    user_id = update.effective_user.id
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
        csv_content = await utils.export_user_stats_csv(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        from io import BytesIO
        file_data = BytesIO(csv_content.encode('utf-8-sig'))  # utf-8-sig –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        file_data.name = f"statistics_{user_id}.csv"
        
        await update.message.reply_document(
            document=file_data,
            filename=f"statistics_{user_id}_{datetime.now().strftime('%Y%m%d')}.csv",
            caption="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV\n\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ Google Sheets –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user {user_id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cmd_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /report - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
    user_id = update.effective_user.id
    
    try:
        report = await utils.generate_detailed_report(user_id)
        await update.message.reply_text(report, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è user {user_id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_mistake_question(message, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫."""
    mistake_ids = context.user_data.get('mistake_ids', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    if current_index >= len(mistake_ids):
        # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
        if hasattr(message, 'edit_text'):
            await message.edit_text(
                "üéâ –í—ã –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
                reply_markup=keyboards.get_initial_choice_keyboard()
            )
        else:
            await message.reply_text(
                "üéâ –í—ã –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
                reply_markup=keyboards.get_initial_choice_keyboard()
            )
        return ConversationHandler.END
    
    question_id = mistake_ids[current_index]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º QUESTIONS_DICT_FLAT –∏–ª–∏ –∏—â–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = None
    if QUESTIONS_DICT_FLAT:
        question_data = QUESTIONS_DICT_FLAT.get(question_id)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ QUESTIONS_DICT_FLAT, –∏—â–µ–º —á–µ—Ä–µ–∑ cache –∏–ª–∏ –ø–µ—Ä–µ–±–æ—Ä–æ–º
    if not question_data:
        if questions_cache:
            question_data = questions_cache.get_by_id(question_id)
        else:
            # –ò—â–µ–º –ø–µ—Ä–µ–±–æ—Ä–æ–º
            for block_data in QUESTIONS_DATA.values():
                for topic_questions in block_data.values():
                    for q in topic_questions:
                        if q.get('id') == question_id:
                            question_data = q
                            break
                    if question_data:
                        break
                if question_data:
                    break
    
    if not question_data:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        logger.warning(f"Question {question_id} not found in mistakes mode")
        # –£–¥–∞–ª—è–µ–º —ç—Ç—É –æ—à–∏–±–∫—É –∏–∑ –ë–î
        await db.delete_mistake(context.user_data.get('user_id', message.from_user.id), question_id)
        context.user_data['current_mistake_index'] = current_index + 1
        return await send_mistake_question(message, context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
    context.user_data[f'question_{question_id}'] = question_data
    context.user_data['current_question_id'] = question_id
    context.user_data['last_mode'] = 'mistakes'
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    text = f"üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ({current_index + 1}/{len(mistake_ids)})</b>\n\n"
    text += utils.format_question_text(question_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if hasattr(message, 'edit_text'):
        sent_msg = await message.edit_text(text, parse_mode=ParseMode.HTML)
        context.user_data['current_question_message_id'] = message.message_id
    else:
        sent_msg = await message.reply_text(text, parse_mode=ParseMode.HTML)
        if sent_msg:
            context.user_data['current_question_message_id'] = sent_msg.message_id
    
    return states.REVIEWING_MISTAKES

@safe_handler()
async def handle_mistake_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—à–∏–±–æ–∫."""
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º
    context.user_data['answer_message_id'] = update.message.message_id
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_id = context.user_data.get('current_question_id')
    if not current_question_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return states.CHOOSING_MODE
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    question_data = context.user_data.get(f'question_{current_question_id}')
    if not question_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return states.CHOOSING_MODE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    correct_answer = str(question_data.get('answer', ''))
    question_type = question_data.get('type', 'multiple_choice')
    topic = question_data.get('topic')
    
    is_correct = utils.normalize_answer(user_answer, question_type) == \
                 utils.normalize_answer(correct_answer, question_type)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await db.update_progress(user_id, topic, is_correct)
    
    # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - —É–¥–∞–ª—è–µ–º –∏–∑ –æ—à–∏–±–æ–∫
    if is_correct:
        await db.delete_mistake(user_id, current_question_id)
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        mistake_ids = context.user_data.get('mistake_ids', [])
        current_index = context.user_data.get('current_mistake_index', 0)
        if 0 <= current_index < len(mistake_ids):
            mistake_ids.pop(current_index)
            context.user_data['mistake_ids'] = mistake_ids
    else:
        # –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ—à–∏–±–∫–µ
        context.user_data['current_mistake_index'] = context.user_data.get('current_mistake_index', 0) + 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        feedback = f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞."
    else:
        feedback = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
        feedback += f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n"
        feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    mistake_ids = context.user_data.get('mistake_ids', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    kb_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if question_data.get('explanation'):
        kb_buttons.append([
            InlineKeyboardButton(
                "üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ",
                callback_data="test_next_show_explanation",
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if current_index < len(mistake_ids):
        kb_buttons.append([
            InlineKeyboardButton(
                "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞",
                callback_data="test_next_continue",
            )
        ])
    else:
        kb_buttons.append([
            InlineKeyboardButton(
                "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data="test_mistake_finish",
            )
        ])
    
    kb_buttons.append([
        InlineKeyboardButton(
            "üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞",
            callback_data="test_next_change_topic",
        )
    ])
    
    kb = InlineKeyboardMarkup(kb_buttons)
    
    sent_msg = await update.message.reply_text(
        feedback,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    context.user_data['feedback_message_id'] = sent_msg.message_id
    context.user_data['last_mode'] = 'mistakes'
    
    return states.CHOOSING_NEXT_ACTION

@safe_handler()
async def mistake_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—à–∏–±–∫–∞–º."""
    query = update.callback_query
    
    action = query.data

    if action == "test_mistake_finish":
        kb = keyboards.get_initial_choice_keyboard()
        await query.edit_message_text(
            "‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    return states.REVIEWING_MISTAKES
    
@safe_handler()
async def select_exam_num(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è."""
    query = update.callback_query
    
    try:
        exam_number = int(query.data.split(":", 2)[2])
    except (ValueError, IndexError):
        return states.CHOOSING_EXAM_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    context.user_data['current_exam_number'] = exam_number
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
    questions_with_num = safe_cache_get_by_exam_num(exam_number)
    
    if not questions_with_num:
        return states.CHOOSING_EXAM_NUMBER
    
    await query.edit_message_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}...")
    
    # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = await utils.choose_question(query.from_user.id, questions_with_num)
    if question_data:
        await send_question(query.message, context, question_data, "exam_num")
        return states.ANSWERING
    else:
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return states.CHOOSING_MODE
        
@safe_handler()
async def select_mode_random_in_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        return states.CHOOSING_BLOCK
    
    questions_in_block = safe_cache_get_by_block(selected_block)
    
    if not questions_in_block:
        return states.CHOOSING_MODE
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–ª–æ–∫–∞...")
    
    question_data = await utils.choose_question(query.from_user.id, questions_in_block)
    if question_data:
        await send_question(query.message, context, question_data, "block")
        return states.ANSWERING
    else:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
            reply_markup=kb
        )
        return states.CHOOSING_BLOCK

@safe_handler()
async def select_mode_topic_in_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –≤ –±–ª–æ–∫–µ."""
    query = update.callback_query
    
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        return states.CHOOSING_BLOCK
    
    topics = list(QUESTIONS_DATA[selected_block].keys())
    if not topics:
        return states.CHOOSING_MODE
    
    kb = keyboards.get_topics_keyboard(selected_block, topics)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=kb
    )
    return states.CHOOSING_TOPIC

@safe_handler()
async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    
    selected_topic = query.data.replace("topic:", "")
    selected_block = context.user_data.get('selected_block')
    
    if not selected_block or not selected_topic:
        return states.CHOOSING_TOPIC
    
    questions_in_topic = safe_cache_get_by_topic(selected_topic)
    if not questions_in_topic:
        return states.CHOOSING_TOPIC
    
    context.user_data['selected_topic'] = selected_topic
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ...")
    
    question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
    if question_data:
        await send_question(query.message, context, question_data, "topic")
        return states.ANSWERING
    else:
        topics = list(QUESTIONS_DATA[selected_block].keys())
        kb = keyboards.get_topics_keyboard(selected_block, topics)
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
            reply_markup=kb
        )
        return states.CHOOSING_TOPIC

@safe_handler()
async def select_mistakes_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∏–∑ –º–µ–Ω—é."""
    query = update.callback_query
    
    user_id = query.from_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        return states.CHOOSING_MODE
    
    context.user_data['mistake_ids'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['user_id'] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è send_mistake_question
    
    await query.edit_message_text(
        f"üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(mistake_ids)}\n"
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É...",
        parse_mode=ParseMode.HTML
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(query.message, context)
    return states.REVIEWING_MISTAKES
    
async def cmd_debug_streaks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug_streaks - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–∫–∞—Ö."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–∫–∏
    streaks = await db.get_user_streaks(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        async with aiosqlite.connect(DATABASE_FILE) as conn:
            cursor = await conn.execute(
                """SELECT current_daily_streak, max_daily_streak, 
                          current_correct_streak, max_correct_streak,
                          last_activity_date
                   FROM users WHERE user_id = ?""",
                (user_id,)
            )
            row = await cursor.fetchone()
            
            if row:
                text = f"üîç <b>–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä–∏–∫–æ–≤ –¥–ª—è user {user_id}:</b>\n\n"
                text += f"<b>–ò–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_streaks:</b>\n"
                text += f"  current_daily: {streaks.get('current_daily', 'None')}\n"
                text += f"  max_daily: {streaks.get('max_daily', 'None')}\n"
                text += f"  current_correct: {streaks.get('current_correct', 'None')}\n"
                text += f"  max_correct: {streaks.get('max_correct', 'None')}\n\n"
                
                text += f"<b>–ü—Ä—è–º–æ –∏–∑ –ë–î:</b>\n"
                text += f"  current_daily_streak: {row[0]}\n"
                text += f"  max_daily_streak: {row[1]}\n"
                text += f"  current_correct_streak: {row[2]}\n"
                text += f"  max_correct_streak: {row[3]}\n"
                text += f"  last_activity_date: {row[4]}\n"
            else:
                text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î: {e}"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)


@safe_handler()
async def handle_detailed_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–º–∞–º."""
    query = update.callback_query
    
    user_id = update.effective_user.id
    stats = await db.get_user_stats(user_id)
    
    if not stats:
        return ConversationHandler.END
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–∞–º
    by_topic = {}
    for topic, correct, total in stats:
        topic_name = TOPIC_NAMES.get(topic, topic)
        percentage = (correct / total * 100) if total > 0 else 0
        by_topic[topic_name] = {
            'correct': correct,
            'total': total,
            'percentage': percentage
        }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
    sorted_topics = sorted(by_topic.items(), key=lambda x: x[1]['percentage'], reverse=True)
    
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–º–∞–º</b>\n\n"
    
    for topic, data in sorted_topics[:10]:  # –¢–æ–ø 10
        progress_bar = UniversalUIComponents.create_progress_bar(
            data['correct'], data['total'], width=10
        )
        color = UniversalUIComponents.get_color_for_score(data['correct'], data['total'])
        
        text += f"{color} <b>{topic}</b>\n"
        text += f"   {progress_bar}\n"
        text += f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {data['correct']}/{data['total']}\n\n"
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="test_back_to_stat_menu",
            )
        ]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return ConversationHandler.END


@safe_handler()
async def handle_export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV."""
    query = update.callback_query

    user_id = query.from_user.id
    try:
        csv_content = await utils.export_user_stats_csv(user_id)
        from io import BytesIO
        file_data = BytesIO(csv_content.encode("utf-8-sig"))
        file_data.name = f"statistics_{user_id}.csv"

        await query.message.reply_document(
            document=file_data,
            filename=file_data.name,
            caption="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user {user_id}: {e}")

    return ConversationHandler.END


@safe_handler()
async def handle_work_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    return await select_mistakes_mode(update, context)


@safe_handler()
async def handle_check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query

    if await utils.check_subscription(query.from_user.id, context.bot, REQUIRED_CHANNEL):
        kb = keyboards.get_initial_choice_keyboard()
        await query.edit_message_text(
            "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML,
        )
        return states.CHOOSING_MODE

    return ConversationHandler.END
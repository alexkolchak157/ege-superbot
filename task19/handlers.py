"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19."""

import logging
import os
import json
import random
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from core import states
from .evaluator import Task19AIEvaluator

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è 19
task19_data = {}

# –°–æ–∑–¥–∞–µ–º evaluator –∑–∞—Ä–∞–Ω–µ–µ
try:
    evaluator = Task19AIEvaluator()
    logger.info("Task19 AI evaluator created successfully")
except Exception as e:
    logger.warning(f"Failed to create AI evaluator: {e}. Will work without AI.")
    evaluator = None


async def init_task19_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19."""
    global task19_data
    
    data_file = os.path.join(os.path.dirname(__file__), "task19_topics.json")
    
    try:
        with open(data_file, 'r', encoding='utf-8') as f:
            task19_data = json.load(f)
        logger.info(f"Loaded {len(task19_data.get('topics', []))} topics for task19")
    except Exception as e:
        logger.error(f"Failed to load task19 data: {e}")
        task19_data = {"topics": []}


async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –∑–∞–¥–∞–Ω–∏–µ 19 –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>\n\n"
        "–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ "
        "—Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è –∏ —è–≤–ª–µ–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t19_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t19_theory")],
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t19_examples")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t19_progress")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def cmd_task19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /task19."""
    text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>\n\n"
        "–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ "
        "—Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è –∏ —è–≤–ª–µ–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t19_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t19_theory")],
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t19_examples")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t19_progress")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if not task19_data.get('topics'):
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:</b>\n\n"
    
    kb_buttons = []
    for i, topic in enumerate(task19_data['topics']):
        kb_buttons.append([InlineKeyboardButton(
            f"{i+1}. {topic['title']}",
            callback_data=f"t19_topic:{topic['id']}"
        )])
    
    kb_buttons.append([InlineKeyboardButton(
        "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞",
        callback_data="t19_random"
    )])
    kb_buttons.append([InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="t19_menu"
    )])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.SELECTING_TOPIC


async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "t19_random":
        topic = random.choice(task19_data['topics'])
    else:
        topic_id = int(query.data.split(':')[1])
        topic = next((t for t in task19_data['topics'] if t['id'] == topic_id), None)
    
    if not topic:
        await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    context.user_data['current_topic'] = topic
    
    text = f"""üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>

<b>–¢–µ–º–∞:</b> {topic['title']}

<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞
‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ (–∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞)

üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="t19_practice")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.WAITING_ANSWER


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_answer = update.message.text
    topic = context.user_data.get('current_topic')
    
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t19_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    thinking_msg = await update.message.reply_text(
        "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
    )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ evaluator
        if not evaluator:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ AI
            examples_count = len([line for line in user_answer.split('\n') if line.strip()])
            feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
            feedback += f"<b>–ü—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:</b> {examples_count}\n\n"
            
            if examples_count >= 3:
                feedback += "‚úÖ –í—ã –ø—Ä–∏–≤–µ–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤.\n"
            else:
                feedback += "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞.\n"
            
            feedback += "\n‚ö†Ô∏è <i>AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.</i>"
        else:
            # AI-–ø—Ä–æ–≤–µ—Ä–∫–∞
            result = await evaluator.evaluate(
                answer=user_answer,
                topic=topic['title'],
                task_text=topic['task_text'],
                key_points=topic.get('key_points', [])
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
            feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
            feedback += f"<b>–û—Ü–µ–Ω–∫–∞:</b> {result.total_score}/{result.max_score} –±–∞–ª–ª–æ–≤\n\n"
        
        if result.feedback:
            feedback += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{result.feedback}\n\n"
        
        if result.suggestions:
            feedback += f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for suggestion in result.suggestions:
                feedback += f"‚Ä¢ {suggestion}\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'task19_results' not in context.user_data:
            context.user_data['task19_results'] = []
        
        context.user_data['task19_results'].append({
            'topic': topic['title'],
            'score': result.total_score,
            'max_score': result.max_score
        })
        
        # –ö–Ω–æ–ø–∫–∏
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t19_practice"),
                InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="t19_menu")
            ],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ])
        
        await thinking_msg.edit_text(
            feedback,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        
        # Fallback –æ—Ü–µ–Ω–∫–∞
        examples_count = len([line for line in user_answer.split('\n') if line.strip() and len(line.strip()) > 20])
        
        feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        feedback += f"<b>–ü—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:</b> {examples_count}/3\n\n"
        
        if examples_count >= 3:
            feedback += "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n"
        else:
            feedback += "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç—Ä–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞.\n"
        
        feedback += "\n‚ö†Ô∏è <i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ AI-–ø—Ä–æ–≤–µ—Ä–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.</i>"
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t19_practice"),
                InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="t19_menu")
            ],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ])
        
        await thinking_msg.edit_text(
            feedback,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    
    return states.CHOOSING_MODE


async def theory_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    text = """üìö <b>–¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é 19</b>

<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞:</b>

1Ô∏è‚É£ <b>–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å</b>
‚ùå –ü–ª–æ—Ö–æ: "–ß–µ–ª–æ–≤–µ–∫ –Ω–∞—Ä—É—à–∏–ª –∑–∞–∫–æ–Ω"
‚úÖ –•–æ—Ä–æ—à–æ: "–í–æ–¥–∏—Ç–µ–ª—å –ò–≤–∞–Ω–æ–≤ –ø—Ä–µ–≤—ã—Å–∏–ª —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 40 –∫–º/—á –Ω–∞ —Ç—Ä–∞—Å—Å–µ –ú-4"

2Ô∏è‚É£ <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</b>
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ü—Ä–∏–≤–æ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã/–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è

3Ô∏è‚É£ <b>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–µ</b>
‚Ä¢ –ü—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–∏–µ
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑—å

<b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>
üî∏ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
üî∏ –ü–æ–≤—Ç–æ—Ä –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
üî∏ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ
üî∏ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏

<b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –°–ú–ò, –∏—Å—Ç–æ—Ä–∏–∏, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ –ª–∏—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞."""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


async def examples_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –±–∞–Ω–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    if task19_data.get('topics'):
        topic = task19_data['topics'][0]  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
        
        text = f"üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n"
        text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
        text += "<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n\n"
        
        for i, example in enumerate(topic.get('example_answers', []), 1):
            text += f"{i}. <b>{example['type']}</b>\n"
            text += f"   {example['example']}\n\n"
        
        text += "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤!</i>"
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞", callback_data="t19_bank_next:1")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
        ])
    else:
        text = "üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—É—Å—Ç."
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
        ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def bank_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    current_idx = int(query.data.split(":")[1])
    topics = task19_data.get('topics', [])
    
    if current_idx >= len(topics):
        current_idx = 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π —Ç–µ–º–µ
    
    topic = topics[current_idx]
    
    text = f"üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b> ({current_idx + 1}/{len(topics)})\n\n"
    text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
    text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
    text += "<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n\n"
    
    for i, example in enumerate(topic.get('example_answers', []), 1):
        text += f"{i}. <b>{example['type']}</b>\n"
        text += f"   {example['example']}\n\n"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    kb_buttons = []
    nav_row = []
    
    if current_idx > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t19_bank_next:{current_idx-1}"))
    
    nav_row.append(InlineKeyboardButton(f"{current_idx+1}/{len(topics)}", callback_data="noop"))
    
    if current_idx < len(topics) - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t19_bank_next:{current_idx+1}"))
    
    kb_buttons.append(nav_row)
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t19_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task19_results', [])
    
    if not results:
        text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n–í—ã –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è."
    else:
        total_attempts = len(results)
        total_score = sum(r['score'] for r in results)
        max_possible = sum(r['max_score'] for r in results)
        avg_score = total_score / total_attempts
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_percent = int(total_score / max_possible * 100) if max_possible > 0 else 0
        filled = "‚ñà" * (progress_percent // 10)
        empty = "‚ñë" * (10 - progress_percent // 10)
        progress_bar = f"{filled}{empty}"
        
        text = f"""üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é 19</b>

üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percent}%
üìù –†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_attempts}
‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/3
üèÜ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score}/{max_possible}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏:</b>"""
        
        for result in results[-5:]:
            score_emoji = "üü¢" if result['score'] == 3 else "üü°" if result['score'] >= 2 else "üî¥"
            text += f"\n{score_emoji} {result['topic']}: {result['score']}/3"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if avg_score < 2:
            text += "\n\nüí° <b>–°–æ–≤–µ—Ç:</b> –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
        elif avg_score < 2.5:
            text += "\n\nüí° <b>–°–æ–≤–µ—Ç:</b> –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤."
        else:
            text += "\n\nüéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –∑–∞–¥–∞–Ω–∏–µ–º 19!"
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    from core.plugin_loader import build_main_menu
    
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
        reply_markup=build_main_menu()
    )
    return ConversationHandler.END


async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è 19."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>\n\n"
        "–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ "
        "—Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è –∏ —è–≤–ª–µ–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t19_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t19_theory")],
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t19_examples")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t19_progress")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return await cmd_task19(update, context)

async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

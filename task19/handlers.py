import logging
import json
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from datetime import datetime
from core import states
from .evaluator import Task19AIEvaluator

logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π
task19_data = {}
evaluator = None

async def init_task19_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19."""
    global task19_data, evaluator
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã –∏ —ç—Ç–∞–ª–æ–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19
    data_file = os.path.join(os.path.dirname(__file__), "data", "task19_topics.json")
    
    try:
        if os.path.exists(data_file):
            with open(data_file, "r", encoding="utf-8") as f:
                task19_data = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(task19_data.get('topics', []))} —Ç–µ–º –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19")
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            task19_data = {
                "topics": [
                    {
                        "id": 1,
                        "title": "–í–∏–¥—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º",
                        "task_text": "–ù–∞–∑–æ–≤–∏—Ç–µ –∏ –ø—Ä–æ–∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç—Ä–∏ –≤–∏–¥–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º.",
                        "key_points": ["–ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã", "–º–æ—Ä–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã", "–æ–±—ã—á–∞–∏/—Ç—Ä–∞–¥–∏—Ü–∏–∏", "—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –Ω–æ—Ä–º—ã"],
                        "example_answers": [
                            {
                                "type": "–ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã",
                                "example": "–í–æ–¥–∏—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞, —Å–ª–µ–¥—É—è –ü–î–î"
                            }
                        ]
                    }
                ]
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä
            os.makedirs(os.path.dirname(data_file), exist_ok=True)
            with open(data_file, "w", encoding="utf-8") as f:
                json.dump(task19_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è 19: {e}")
        task19_data = {"topics": []}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI-–æ—Ü–µ–Ω—â–∏–∫
    evaluator = Task19AIEvaluator()

async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t19_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t19_theory")],
        [InlineKeyboardButton("üìã –ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t19_examples")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t19_progress")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19 - –ü—Ä–∏–º–µ—Ä—ã</b>\n\n"
        "–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞, "
        "–∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–∏—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    topics = task19_data.get("topics", [])
    if not topics:
        await query.edit_message_text(
            "‚ùå –¢–µ–º—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    kb_buttons = []
    for i, topic in enumerate(topics[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        kb_buttons.append([
            InlineKeyboardButton(
                f"üìÑ {topic['title']}", 
                callback_data=f"t19_topic:{i}"
            )
        ])
    
    kb_buttons.append([
        InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t19_nav:random")
    ])
    kb_buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
    ])
    
    await query.edit_message_text(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:</b>",
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_TOPIC

async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    topic_idx = int(query.data.split(":")[1])
    topics = task19_data.get("topics", [])
    
    if topic_idx >= len(topics):
        await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return states.CHOOSING_TOPIC
    
    topic = topics[topic_idx]
    context.user_data['current_topic'] = topic
    context.user_data['topic_index'] = topic_idx
    
    await query.edit_message_text(
        f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>\n\n"
        f"<b>–¢–µ–º–∞:</b> {topic['title']}\n\n"
        f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
        f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        f"‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –¢–†–ò –ø—Ä–∏–º–µ—Ä–∞\n"
        f"‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º\n"
        f"‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã\n\n"
        f"<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>",
        parse_mode=ParseMode.HTML
    )
    
    return states.AWAITING_ANSWER

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_answer = update.message.text.strip()
    
    if len(user_answer) < 50:
        await update.message.reply_text(
            "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞."
        )
        return states.AWAITING_ANSWER
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    topic = context.user_data.get('current_topic')
    if not topic:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
    thinking_msg = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç...")
    
    try:
        # AI-–ø—Ä–æ–≤–µ—Ä–∫–∞
        result = await evaluator.evaluate(
            answer=user_answer,
            topic=topic['title'],
            task_text=topic['task_text'],
            key_points=topic.get('key_points', [])
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
        feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        feedback += f"<b>–û—Ü–µ–Ω–∫–∞:</b> {result.total_score}/{result.max_score} –±–∞–ª–ª–æ–≤\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if result.detailed_analysis:
            analysis = result.detailed_analysis
            feedback += "<b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤:</b>\n"
            
            for ex in analysis.get('examples_analysis', []):
                num = ex['example_num']
                if ex['is_correct'] and ex['is_relevant'] and ex['is_specific']:
                    feedback += f"‚úÖ –ü—Ä–∏–º–µ—Ä {num}: –∑–∞—Å—á–∏—Ç–∞–Ω\n"
                else:
                    feedback += f"‚ùå –ü—Ä–∏–º–µ—Ä {num}: "
                    issues = []
                    if not ex['is_relevant']:
                        issues.append("–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–µ")
                    if not ex['is_specific']:
                        issues.append("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π")
                    if not ex['is_correct']:
                        issues.append("—Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É")
                    feedback += ", ".join(issues) + "\n"
        
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if result.factual_errors:
            feedback += "\n<b>‚ùå –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:</b>\n"
            for error in result.factual_errors[:2]:
                feedback += f"‚Ä¢ {error['error']}\n"
                feedback += f"  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {error['correction']}\n"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        if result.feedback:
            feedback += f"\nüí¨ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n{result.feedback}\n"
        
        # Suggestions
        if result.suggestions:
            feedback += "\nüí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            for suggestion in result.suggestions[:3]:
                feedback += f"‚Ä¢ {suggestion}\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'task19_results' not in context.user_data:
            context.user_data['task19_results'] = []
        
        context.user_data['task19_results'].append({
            'topic': topic['title'],
            'score': result.total_score,
            'max_score': result.max_score,
            'timestamp': datetime.now().isoformat()
        })
        
        # –ö–Ω–æ–ø–∫–∏
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t19_practice"),
                InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="t19_menu")
            ],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ])
        
        await thinking_msg.edit_text(
            feedback,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await thinking_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return states.CHOOSING_MODE

async def theory_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    theory_text = """üìö <b>–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ 19</b>

<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è:</b>
–ù—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¢–†–ò –ø—Ä–∏–º–µ—Ä–∞, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–∏—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.

<b>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ (3 –±–∞–ª–ª–∞):</b>
‚Ä¢ –ü–æ 1 –±–∞–ª–ª—É –∑–∞ –∫–∞–∂–¥—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –±–∞–ª–ª–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–∏–º–µ—Ä–∞–º:</b>
‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å (–Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è)
‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–∏—é
‚úÖ –†–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —è–≤–ª–µ–Ω–∏—è
‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å

<b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>
‚ùå –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä–æ–≤
‚ùå –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ
‚ùå –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

<b>–°–æ–≤–µ—Ç:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä:
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
‚Ä¢ –õ–∏—á–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç
‚Ä¢ –°–ú–ò –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
    ]])
    
    await query.edit_message_text(
        theory_text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task19_results', [])
    
    if not results:
        text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n–í—ã –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è."
    else:
        total_attempts = len(results)
        total_score = sum(r['score'] for r in results)
        max_possible = sum(r['max_score'] for r in results)
        avg_score = total_score / total_attempts
        
        text = f"""üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é 19</b>

üìù –†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_attempts}
‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/3
üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score}/{max_possible} ({int(total_score/max_possible*100)}%)

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏:</b>"""
        
        for result in results[-5:]:
            text += f"\n‚Ä¢ {result['topic']}: {result['score']}/3"
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è 19."""
    return await entry_from_menu(update, context)

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    from core.plugin_loader import build_main_menu
    kb = build_main_menu()
    
    await query.edit_message_text(
        "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=kb
    )
    
    return ConversationHandler.END

async def cmd_task19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /task19."""
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t19_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è", callback_data="t19_theory")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await update.message.reply_text(
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19 - –ü—Ä–∏–º–µ—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return await cmd_task19(update, context)

async def navigate_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º (—Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞)."""
    query = update.callback_query
    await query.answer()
    
    if "random" in query.data:
        import random
        topics = task19_data.get("topics", [])
        if topics:
            idx = random.randint(0, len(topics) - 1)
            query.data = f"t19_topic:{idx}"
            return await select_topic(update, context)
    
    return states.CHOOSING_TOPIC

async def examples_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –±–∞–Ω–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üèóÔ∏è <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã –ª—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–µ–º–∞–º.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
        ]]),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
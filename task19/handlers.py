"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19."""
import asyncio
import logging
import os
import json
import random
from typing import Optional, Dict, List
from core.document_processor import DocumentHandlerMixin
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from core.admin_tools import admin_manager
from core import states
from core.ai_evaluator import Task19Evaluator, EvaluationResult
from datetime import datetime
import io
from .evaluator import StrictnessLevel, Task19AIEvaluator
from core.universal_ui import UniversalUIComponents, AdaptiveKeyboards, MessageFormatter
from core.ui_helpers import (
    show_thinking_animation,
    show_extended_thinking_animation,  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
    show_streak_notification,
    get_personalized_greeting,
    get_motivational_message,
    create_visual_progress,
)

TASK19_STRICTNESS = os.getenv('TASK19_STRICTNESS', 'STRICT').upper()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π evaluator —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
evaluator = None

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è 19
task19_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º evaluator –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
if not evaluator:
    try:
        strictness_level = StrictnessLevel[os.getenv('TASK19_STRICTNESS', 'STRICT').upper()]
    except KeyError:
        strictness_level = StrictnessLevel.STRICT
    
    try:
        evaluator = Task19AIEvaluator(strictness=strictness_level)
        logger.info(f"Task19 AI evaluator initialized with {strictness_level.value} strictness")
    except Exception as e:
        logger.warning(f"Failed to initialize AI evaluator: {e}")
        evaluator = None


# –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async def set_strictness(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–≤)
    if not admin_manager.is_admin(user_id):
        await query.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üü¢ –ú—è–≥–∫–∏–π", callback_data="t19_strict:lenient")],
        [InlineKeyboardButton("üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="t19_strict:standard")],
        [InlineKeyboardButton("üî¥ –°—Ç—Ä–æ–≥–∏–π (–§–ò–ü–ò)", callback_data="t19_strict:strict")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
    ])
    
    current = evaluator.strictness.value if evaluator else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    await query.edit_message_text(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <b>{current}</b>\n\n"
        "üü¢ <b>–ú—è–≥–∫–∏–π</b> - –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "üü° <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b> - –±–∞–ª–∞–Ω—Å —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏\n"
        "üî¥ <b>–°—Ç—Ä–æ–≥–∏–π</b> - –ø–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –§–ò–ü–ò\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )


async def apply_strictness(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    global evaluator
    
    query = update.callback_query
    await query.answer()
    
    level_str = query.data.split(":")[1].upper()
    
    try:
        new_level = StrictnessLevel[level_str]
        evaluator = Task19AIEvaluator(strictness=new_level)
        
        await query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {new_level.value}", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        return await return_to_menu(update, context)
        
    except Exception as e:
        logger.error(f"Error setting strictness: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

async def delete_previous_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int, keep_message_id: Optional[int] = None):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."""
    if not hasattr(context, 'bot') or not context.bot:
        logger.warning("Bot instance not available for message deletion")
        return
    
    # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_keys = [
        'task19_question_msg_id',   # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        'task19_answer_msg_id',     # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–≤–µ—Ç–æ–º
        'task19_result_msg_id',     # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        'task19_thinking_msg_id'    # –°–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
    ]
    
    messages_to_delete = []
    deleted_count = 0
    
    # –°–æ–±–∏—Ä–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    for key in message_keys:
        msg_id = context.user_data.get(key)
        if msg_id and msg_id != keep_message_id:
            messages_to_delete.append((key, msg_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    extra_messages = context.user_data.get('task19_extra_messages', [])
    for msg_id in extra_messages:
        if msg_id and msg_id != keep_message_id:
            messages_to_delete.append(('extra', msg_id))
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for key, msg_id in messages_to_delete:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            deleted_count += 1
            logger.debug(f"Deleted {key}: {msg_id}")
        except Exception as e:
            logger.debug(f"Failed to delete {key} {msg_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∫—Ä–æ–º–µ keep_message_id –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
    for key in message_keys:
        if context.user_data.get(key) != keep_message_id:
            context.user_data.pop(key, None)
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    context.user_data['task19_extra_messages'] = []
    
    logger.info(f"Task19: Deleted {deleted_count}/{len(messages_to_delete)} messages")

async def init_task19_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19."""
    global task19_data

    data_file = os.path.join(os.path.dirname(__file__), "task19_topics.json")

    try:
        with open(data_file, "r", encoding="utf-8") as f:
            raw = json.load(f)

        if isinstance(raw, list):
            topics_list = raw
        else:
            topics_list = []
            for block_name, block in raw.get("blocks", {}).items():
                for topic in block.get("topics", []):
                    topic["block"] = block_name
                    topics_list.append(topic)

        all_topics = []
        topic_by_id: Dict[int, Dict] = {}
        blocks = {}
        for topic in topics_list:
            block = topic.get("block", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            all_topics.append(topic)
            topic_by_id[topic["id"]] = topic
            blocks.setdefault(block, {"topics": []})["topics"].append(topic)

        task19_data = {
            "topics": all_topics,
            "topic_by_id": topic_by_id,
            "blocks": blocks,
        }
        logger.info(f"Loaded {len(all_topics)} topics for task19")
    except Exception as e:
        logger.error(f"Failed to load task19 data: {e}")
        task19_data = {"topics": [], "blocks": {}}


async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –∑–∞–¥–∞–Ω–∏–µ 19 –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task19_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r['topic'] for r in results)) / 50 * 100) if results else 0,
    }

    greeting = get_personalized_greeting(user_stats)
    text = greeting + MessageFormatter.format_welcome_message(
        "–∑–∞–¥–∞–Ω–∏–µ 19",
        is_new_user=user_stats['total_attempts'] == 0
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t19_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t19_theory")],
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t19_examples")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t19_progress")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="t19_settings")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

    return states.CHOOSING_MODE


def _build_topic_message(topic: Dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ —Ç–µ–º–µ."""
    return (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>\n\n"
        f"<b>–¢–µ–º–∞:</b> {topic['title']}\n\n"
        f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º\n"
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ (–∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞)\n\n"
        "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"
    )


async def cmd_task19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /task19."""
    results = context.user_data.get('task19_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': 0,
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r['topic'] for r in results)) / 50 * 100) if results else 0
    }
    
    greeting = get_personalized_greeting(user_stats)
    text = greeting + MessageFormatter.format_welcome_message(
        "–∑–∞–¥–∞–Ω–∏–µ 19",
        is_new_user=user_stats['total_attempts'] == 0
    )
    
    kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="t19")
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

async def practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if 'checking_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data['checking_message_id']
            )
            del context.user_data['checking_message_id']
        except:
            pass
    
    if not task19_data.get("topics"):
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]]
            ),
        )
        return states.CHOOSING_MODE

    text = (
        "üéØ <b>–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏</b>\n\n"
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É?"
    )

    kb_buttons = [
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫–∞–º", callback_data="t19_select_block")],
        [InlineKeyboardButton("üóÇÔ∏è –í—Å–µ —Ç–µ–º—ã —Å–ø–∏—Å–∫–æ–º", callback_data="t19_list_topics")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t19_random_all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")],
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML,
    )

    return states.CHOOSING_MODE


async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±–ª–æ–∫–∞ —Ç–µ–º."""
    query = update.callback_query
    await query.answer()

    blocks = task19_data.get("blocks", {})
    if not blocks:
        await query.edit_message_text("‚ùå –ë–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return states.CHOOSING_MODE

    kb = [
        [InlineKeyboardButton(f"üìÅ {name}", callback_data=f"t19_block:{name}")]
        for name in blocks.keys()
    ]
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_practice")])

    await query.edit_message_text(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:</b>",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode=ParseMode.HTML,
    )
    return states.CHOOSING_BLOCK


async def block_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    await query.answer()

    block_name = query.data.split(":", 1)[1]
    context.user_data["selected_block"] = block_name

    kb = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data="t19_list_topics")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t19_random_block")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î—Ä—É–≥–æ–π –±–ª–æ–∫", callback_data="t19_select_block")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="t19_practice")],
    ]

    await query.edit_message_text(
        f"üìÅ <b>{block_name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode=ParseMode.HTML,
    )
    return states.CHOOSING_BLOCK


async def random_topic_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤."""
    query = update.callback_query
    await query.answer()

    topics: List[Dict] = task19_data.get("topics", [])
    if not topics:
        await query.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return states.CHOOSING_MODE

    topic = random.choice(topics)

    text = _build_topic_message(topic)
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t19_practice")]]
    )
    context.user_data["current_topic"] = topic
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

    return states.ANSWERING


async def random_topic_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    await query.answer()

    block_name = context.user_data.get("selected_block")
    if not block_name:
        await query.answer("–ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
        return states.CHOOSING_MODE

    topics = [t for t in task19_data.get("topics", []) if t.get("block") == block_name]
    if not topics:
        await query.answer("–¢–µ–º—ã –≤ –±–ª–æ–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return states.CHOOSING_BLOCK

    topic = random.choice(topics)
    text = _build_topic_message(topic)
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data=f"t19_block:{block_name}")]]
    )
    context.user_data["current_topic"] = topic
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

    return states.ANSWERING


async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)."""
    query = update.callback_query
    await query.answer()

    page = 0
    if query.data.startswith("t19_list_topics:page:"):
        try:
            page = int(query.data.split(":")[2])
        except ValueError:
            page = 0

    block_name = context.user_data.get("selected_block")

    topics = (
        [t for t in task19_data.get("topics", []) if t.get("block") == block_name]
        if block_name
        else task19_data.get("topics", [])
    )

    if not topics:
        await query.edit_message_text("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return states.CHOOSING_MODE

    ITEMS_PER_PAGE = 8
    total_pages = (len(topics) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    page = max(0, min(page, total_pages - 1))

    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE

    kb_rows = [
        [
            InlineKeyboardButton(t["title"], callback_data=f"t19_topic:{t['id']}")
        ]
        for t in topics[start:end]
    ]

    nav = []
    if page > 0:
        nav.append(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è", callback_data=f"t19_list_topics:page:{page-1}"
            )
        )
    nav.append(
        InlineKeyboardButton(
            create_visual_progress(page + 1, total_pages), callback_data="noop"
        )
    )
    if page < total_pages - 1:
        nav.append(
            InlineKeyboardButton(
                "‚û°Ô∏è", callback_data=f"t19_list_topics:page:{page+1}"
            )
        )
    if nav:
        kb_rows.append(nav)

    if block_name:
        kb_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫—É", callback_data=f"t19_block:{block_name}")])
    else:
        kb_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_practice")])

    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:</b>"
    if block_name:
        text += f"\n<b>–ë–ª–æ–∫:</b> {block_name}"

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_rows),
        parse_mode=ParseMode.HTML,
    )

    return states.CHOOSING_TOPIC


async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if 'checking_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data['checking_message_id']
            )
            del context.user_data['checking_message_id']
        except:
            pass
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    await delete_previous_messages(context, query.message.chat_id)
    
    if query.data == "t19_random":
        topic = random.choice(task19_data['topics'])
    else:
        topic_id = int(query.data.split(':')[1])
        topic = next((t for t in task19_data['topics'] if t['id'] == topic_id), None)
    
    if not topic:
        await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    context.user_data['current_topic'] = topic
    
    text = f"""üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>

<b>–¢–µ–º–∞:</b> {topic['title']}

<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞
‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ (–∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞)

üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="t19_practice")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING

async def show_progress_enhanced(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task19_results', [])
    
    if not results:
        text = MessageFormatter.format_welcome_message(
            "–∑–∞–¥–∞–Ω–∏–µ 19", 
            is_new_user=True
        )
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üí™ –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="t19_practice"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
        ]])
    else:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_attempts = len(results)
        total_score = sum(r['score'] for r in results)
        max_possible = sum(r['max_score'] for r in results)
        avg_score = total_score / total_attempts
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º
        topic_stats = {}
        for result in results:
            topic = result['topic']
            if topic not in topic_stats:
                topic_stats[topic] = []
            topic_stats[topic].append(result['score'])
        
        # –¢–æ–ø —Ç–µ–º—ã
        top_results = []
        for topic, scores in topic_stats.items():
            avg = sum(scores) / len(scores)
            top_results.append({
                'topic': topic,
                'score': avg,
                'max_score': 3
            })
        top_results.sort(key=lambda x: x['score'], reverse=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = MessageFormatter.format_progress_message({
            'total_attempts': total_attempts,
            'average_score': avg_score,
            'completed': len(topic_stats),
            'total': 50,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 50 —Ç–µ–º
            'total_time': 0,  # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            'top_results': top_results[:3]
        }, "–∑–∞–¥–∞–Ω–∏—é 19")
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        kb = AdaptiveKeyboards.create_progress_keyboard(
            has_detailed_stats=True,
            can_export=True,
            module_code="t19"
        )
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def choose_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    await delete_previous_messages(context, query.message.chat_id)
    
    if query.data == "t19_random":
        topic = random.choice(task19_data['topics'])
    else:
        topic_id = int(query.data.split(':')[1])
        topic = next((t for t in task19_data['topics'] if t['id'] == topic_id), None)
    
    if not topic:
        await query.message.chat.send_message(
            "‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_practice")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    context.user_data['current_topic'] = topic
    
    text = f"""üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>

<b>–¢–µ–º–∞:</b> {topic['title']}

<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞
‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ (–∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞)

üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="t19_practice")
    ]])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_msg = await query.message.chat.send_message(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
    context.user_data['task19_question_msg_id'] = sent_msg.message_id
    
    return states.ANSWERING

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_answer = update.message.text
    topic = context.user_data.get('current_topic')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['task19_answer_msg_id'] = update.message.message_id
    
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t19_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    checking_msg = await show_extended_thinking_animation(
        update.message, 
        "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç",
        duration=60  # 60 —Å–µ–∫—É–Ω–¥ –∞–Ω–∏–º–∞—Ü–∏–∏
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    context.user_data['checking_message_id'] = checking_msg.message_id
    
    result: Optional[EvaluationResult] = None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ evaluator
        if not evaluator:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ AI
            examples_count = len([line for line in user_answer.split('\n') if line.strip()])
            score = min(examples_count, 3) if examples_count <= 3 else 0
            result = EvaluationResult(
                scores={"–ö1": score},
                total_score=score,
                max_score=3,
                feedback="",
                detailed_analysis={},
                suggestions=[],
                factual_errors=[],
            )
            feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
            feedback += f"<b>–ü—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:</b> {examples_count}\n\n"

            if examples_count >= 3:
                feedback += "‚úÖ –í—ã –ø—Ä–∏–≤–µ–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤.\n"
            else:
                feedback += "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞.\n"

            feedback += "\n‚ö†Ô∏è <i>AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.</i>"
        else:
            # AI-–ø—Ä–æ–≤–µ—Ä–∫–∞
            result = await evaluator.evaluate(
                answer=user_answer,
                topic=topic['title'],
                task_text=topic['task_text'],
                key_points=topic.get('key_points', [])
            )
            
        if evaluator and result:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä  
            feedback = MessageFormatter.format_result_message(
                score=result.total_score,
                max_score=3,
                topic=topic['title'],
                details=result.detailed_analysis if hasattr(result, 'detailed_analysis') else {}
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if hasattr(result, 'detailed_analysis') and result.detailed_analysis:
                for i, (ex_name, ex_analysis) in enumerate(result.detailed_analysis.items()):
                    if isinstance(ex_analysis, dict):
                        score = ex_analysis.get('score', 0)
                        comment = ex_analysis.get('comment', '')
                        feedback += f"\n\n–ü—Ä–∏–º–µ—Ä {i+1}: {'‚úÖ' if score > 0 else '‚ùå'} {comment}"
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
            feedback = MessageFormatter.format_result_message(
                score=1,
                max_score=3,
                topic=topic['title'],
                details={"–°—Ç–∞—Ç—É—Å": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"}
            )

        score_val = result.total_score if result else 0
        max_score_val = result.max_score if result else 3
        motivation = get_motivational_message(score_val, max_score_val)
        feedback += f"\n\nüí¨ {motivation}"
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–µ—Ä—è—é..."
        try:
            await checking_msg.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            feedback,
            reply_markup=AdaptiveKeyboards.create_result_keyboard(
                score=result.total_score if result else 1,
                max_score=3,
                module_code="t19"
            ),
            parse_mode=ParseMode.HTML
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        context.user_data.setdefault('task19_results', []).append({
            'topic': topic['title'],
            'score': result.total_score if result else 1,
            'max_score': 3,
            'timestamp': datetime.now().isoformat()
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if score_val == max_score_val:
            context.user_data['correct_streak'] = context.user_data.get('correct_streak', 0) + 1
        else:
            context.user_data['correct_streak'] = 0

        if context.user_data['correct_streak'] in [3, 5, 10, 20, 50, 100]:
            await show_streak_notification(update, context, 'correct', context.user_data['correct_streak'])
        
        return states.CHOOSING_MODE

    except Exception as e:
        logger.error(f"Task19 evaluation error: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        try:
            await checking_msg.delete()
        except Exception:
            pass
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—à–∏–±–∫–∏ (score=0)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=AdaptiveKeyboards.create_result_keyboard(
                score=0,
                max_score=3,
                module_code="t19"
            ),
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE


async def handle_answer_document_task19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è task19."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    topic = context.user_data.get('current_topic')
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞."
        )
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    extracted_text = await DocumentHandlerMixin.handle_document_answer(
        update, 
        context,
        task_name="–ø—Ä–∏–º–µ—Ä—ã"
    )
    
    if not extracted_text:
        return states.WAITING_ANSWER
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = DocumentHandlerMixin.validate_document_content(
        extracted_text,
        task_type="examples"
    )
    
    if not is_valid:
        await update.message.reply_text(f"‚ùå {error_msg}")
        return states.WAITING_ANSWER
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    update.message.text = extracted_text
    return await handle_answer(update, context)

async def theory_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    text = """üìö <b>–¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é 19</b>

<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞:</b>

1Ô∏è‚É£ <b>–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å</b>
‚ùå –ü–ª–æ—Ö–æ: "–ß–µ–ª–æ–≤–µ–∫ –Ω–∞—Ä—É—à–∏–ª –∑–∞–∫–æ–Ω"
‚úÖ –•–æ—Ä–æ—à–æ: "–í–æ–¥–∏—Ç–µ–ª—å –ò–≤–∞–Ω–æ–≤ –ø—Ä–µ–≤—ã—Å–∏–ª —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 40 –∫–º/—á –Ω–∞ —Ç—Ä–∞—Å—Å–µ –ú-4"

2Ô∏è‚É£ <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</b>
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ü—Ä–∏–≤–æ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã/–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è

3Ô∏è‚É£ <b>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–µ</b>
‚Ä¢ –ü—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–∏–µ
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑—å

<b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>
üî∏ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
üî∏ –ü–æ–≤—Ç–æ—Ä –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
üî∏ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ
üî∏ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏

<b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –°–ú–ò, –∏—Å—Ç–æ—Ä–∏–∏, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ –ª–∏—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞."""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


async def examples_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –±–∞–Ω–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    if task19_data.get('topics'):
        topic = task19_data['topics'][0]  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
        
        text = f"üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n"
        text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
        text += "<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n\n"
        
        for i, example in enumerate(topic.get('example_answers', []), 1):
            text += f"{i}. <b>{example['type']}</b>\n"
            text += f"   {example['example']}\n\n"
        
        text += "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤!</i>"
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞", callback_data="t19_bank_next:1")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
        ])
    else:
        text = "üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—É—Å—Ç."
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
        ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def bank_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    current_idx = int(query.data.split(":")[1])
    topics = task19_data.get('topics', [])
    
    if current_idx >= len(topics):
        current_idx = 0
    
    topic = topics[current_idx]
    
    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_bar = UniversalUIComponents.create_progress_bar(
        current_idx + 1, len(topics), width=20, show_percentage=True
    )
    
    text = f"üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n{progress_bar}\n\n"
    text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
    text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
    text += "<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n\n"
    
    for i, example in enumerate(topic.get('example_answers', []), 1):
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
        color = UniversalUIComponents.COLOR_INDICATORS['green']
        text += f"{color} <b>{example['type']}</b>\n"
        text += f"   {example['example']}\n\n"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    kb_buttons = []
    nav_row = []
    
    if current_idx > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t19_bank_nav:{current_idx-1}"))
    
    nav_row.append(
        InlineKeyboardButton(
            create_visual_progress(current_idx + 1, len(topics)), callback_data="noop"
        )
    )
    
    if current_idx < len(topics) - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t19_bank_nav:{current_idx+1}"))
    
    kb_buttons.append(nav_row)
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t19_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task19_results', [])
    
    if not results:
        text = MessageFormatter.format_welcome_message(
            "–∑–∞–¥–∞–Ω–∏–µ 19", 
            is_new_user=True
        )
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üí™ –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="t19_practice"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
        ]])
    else:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_attempts = len(results)
        total_score = sum(r['score'] for r in results)
        max_possible = sum(r['max_score'] for r in results)
        avg_score = total_score / total_attempts
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º –¥–ª—è —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        topic_stats = {}
        for result in results:
            topic = result['topic']
            if topic not in topic_stats:
                topic_stats[topic] = []
            topic_stats[topic].append(result['score'])
        
        # –¢–æ–ø —Ç–µ–º—ã
        top_results = []
        for topic, scores in topic_stats.items():
            avg = sum(scores) / len(scores)
            top_results.append({
                'topic': topic,
                'score': avg,
                'max_score': 3
            })
        top_results.sort(key=lambda x: x['score'], reverse=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        text = MessageFormatter.format_progress_message({
            'total_attempts': total_attempts,
            'average_score': avg_score,
            'completed': len(topic_stats),
            'total': 50,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 50 —Ç–µ–º
            'total_time': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            'top_results': top_results[:3],
            'current_average': avg_score * 33.33,
            'previous_average': (avg_score * 33.33) - 5
        }, "–∑–∞–¥–∞–Ω–∏—é 19")
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        kb = AdaptiveKeyboards.create_progress_keyboard(
            has_detailed_stats=True,
            can_export=True,
            module_code="t19"
        )
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    from core.plugin_loader import build_main_menu
    
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
        reply_markup=build_main_menu()
    )
    return ConversationHandler.END


async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è 19."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
    results = context.user_data.get('task19_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r['topic'] for r in results)) / 50 * 100) if results else 0
    }
    
    greeting = get_personalized_greeting(user_stats)
    text = greeting + MessageFormatter.format_welcome_message(
        "–∑–∞–¥–∞–Ω–∏–µ 19",
        is_new_user=user_stats['total_attempts'] == 0
    )
    
    kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="t19")
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

async def handle_result_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "t19_new":
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ø–∏—Å–∫–∞ —Ç–µ–º
        await delete_previous_messages(context, query.message.chat_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        return await practice_mode(update, context)
    
    elif query.data == "t19_retry":
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ –∂–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
        await delete_previous_messages(context, query.message.chat_id)
        
        topic = context.user_data.get('current_topic')
        if topic:
            text = _build_topic_message(topic)
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="t19_practice")
            ]])
            
            msg = await query.message.chat.send_message(
                text, 
                reply_markup=kb, 
                parse_mode=ParseMode.HTML
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['task19_question_msg_id'] = msg.message_id
            
            return states.ANSWERING
        else:
            await query.message.chat.send_message(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t19_menu")
                ]])
            )
            return states.CHOOSING_MODE
    
    elif query.data == "t19_menu":
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è
        await delete_previous_messages(context, query.message.chat_id)
        return await return_to_menu(update, context)
    
    elif query.data == "t19_progress":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è)
        return await my_progress(update, context)

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return await cmd_task19(update, context)

async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

async def reset_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if context.user_data.get('confirm_reset_task19'):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        context.user_data['task19_results'] = []
        context.user_data.pop('confirm_reset_task19', None)
        
        await query.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        return await return_to_menu(update, context)
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        context.user_data['confirm_reset_task19'] = True
        
        text = """‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é 19?

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"""
        
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚ùå –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="t19_reset_confirm"),
                InlineKeyboardButton("‚úÖ –û—Ç–º–µ–Ω–∞", callback_data="t19_menu")
            ]
        ])
        
        await query.edit_message_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        return states.CHOOSING_MODE


# –î–æ–±–∞–≤–∏—Ç—å –≤ –º–µ–Ω—é "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å" –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞:
async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task19_results', [])
    
    if not results:
        text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n–í—ã –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è."
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
        ]])
    else:
        total_attempts = len(results)
        total_score = sum(r['score'] for r in results)
        max_possible = sum(r['max_score'] for r in results)
        avg_score = total_score / total_attempts
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_percent = int(total_score / max_possible * 100) if max_possible > 0 else 0
        filled = "‚ñà" * (progress_percent // 10)
        empty = "‚ñë" * (10 - progress_percent // 10)
        progress_bar = f"{filled}{empty}"
        
        text = f"""üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é 19</b>

üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percent}%
üìù –†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_attempts}
‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/3
üèÜ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score}/{max_possible}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏:</b>"""
        
        for result in results[-5:]:
            score_emoji = "üü¢" if result['score'] == 3 else "üü°" if result['score'] >= 2 else "üî¥"
            text += f"\n{score_emoji} {result['topic']}: {result['score']}/3"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if avg_score < 2:
            text += "\n\nüí° <b>–°–æ–≤–µ—Ç:</b> –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
        elif avg_score < 2.5:
            text += "\n\nüí° <b>–°–æ–≤–µ—Ç:</b> –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤."
        else:
            text += "\n\nüéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –∑–∞–¥–∞–Ω–∏–µ–º 19!"
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="t19_detailed_progress")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data="t19_export")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="t19_reset_confirm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
        ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_task19_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /task19_settings –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."""
    current_level = evaluator.strictness if evaluator else StrictnessLevel.STRICT
    
    text = f"""‚öôÔ∏è <b>–ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏—è 19</b>

–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{current_level.value}</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"""
    
    kb_buttons = []
    for level in StrictnessLevel:
        emoji = "‚úÖ" if level == current_level else ""
        kb_buttons.append([
            InlineKeyboardButton(
                f"{emoji} {level.value}",
                callback_data=f"t19_set_strictness:{level.name}"
            )
        ])
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

# –î–æ–±–∞–≤–∏—Ç—å –≤ handlers.py:

async def bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Ç–µ–º—ã –≤ –±–∞–Ω–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üîç <b>–ü–æ–∏—Å–∫ –≤ –±–∞–Ω–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t19_examples")
        ]]),
        parse_mode=ParseMode.HTML
    )
    
    context.user_data['waiting_for_bank_search'] = True
    return states.SEARCHING


async def handle_bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–Ω–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    if not context.user_data.get('waiting_for_bank_search'):
        return
    
    search_query = update.message.text.lower()
    context.user_data['waiting_for_bank_search'] = False
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–º—ã
    matching_topics = []
    for idx, topic in enumerate(task19_data.get('topics', [])):
        if search_query in topic['title'].lower() or search_query in topic.get('task_text', '').lower():
            matching_topics.append((idx, topic))
    
    if not matching_topics:
        await update.message.reply_text(
            "‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t19_bank_search"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_examples")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
    await update.message.reply_text("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º: " + str(len(matching_topics)))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    msg = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞...")
    await show_examples_for_topic_message(msg, context, matching_topics[0][0])
    
    return states.CHOOSING_MODE


async def show_examples_for_topic_message(message, context: ContextTypes.DEFAULT_TYPE, topic_idx: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ–º—ã (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ callback)."""
    topics = task19_data.get('topics', [])
    
    if not topics or topic_idx >= len(topics):
        await message.edit_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    topic = topics[topic_idx]
    context.user_data['bank_current_idx'] = topic_idx
    
    text = f"""üè¶ <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>

<b>–¢–µ–º–∞:</b> {topic['title']}

<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>

{generate_examples_for_topic(topic)}

üí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –≤–∑—è—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
‚Ä¢ –ß–µ—Ç–∫–æ –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–≤—è–∑—å —Å —Ç–µ–º–æ–π –∑–∞–¥–∞–Ω–∏—è"""
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    kb_buttons = []
    nav_row = []
    
    if topic_idx > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t19_bank_nav:{topic_idx-1}"))
    
    nav_row.append(
        InlineKeyboardButton(
            create_visual_progress(topic_idx + 1, len(topics)), callback_data="noop"
        )
    )
    
    if topic_idx < len(topics) - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t19_bank_nav:{topic_idx+1}"))
    
    kb_buttons.append(nav_row)
    kb_buttons.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="t19_bank_search")])
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t19_menu")])
    
    await message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )


def generate_examples_for_topic(topic: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    
    if "—ç–∫–æ–Ω–æ–º–∏–∫" in topic['title'].lower():
        return """1Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –±–∏–∑–Ω–µ—Å–∞:</b>
–ö–æ–º–ø–∞–Ω–∏—è "Wildberries" –≤ 2023 –≥–æ–¥—É –æ—Ç–∫—Ä—ã–ª–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö –†–æ—Å—Å–∏–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å 5-7 –¥–æ 1-2 –¥–Ω–µ–π –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –Ω–∞ 40%.

2Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –≥–æ—Å—Å–µ–∫—Ç–æ—Ä–∞:</b>
–¶–ë –†–§ –≤ –∏—é–ª–µ 2023 –≥–æ–¥–∞ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 12%, —á—Ç–æ–±—ã —Å–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏—é. –≠—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Ä–æ—Å—Ç—É —Å—Ç–∞–≤–æ–∫ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –¥–æ 15% –≥–æ–¥–æ–≤—ã—Ö –∏ —Å–Ω–∏–∂–µ–Ω–∏—é —Å–ø—Ä–æ—Å–∞ –Ω–∞ –∏–ø–æ—Ç–µ–∫—É –Ω–∞ 30%.

3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏:</b>
–°–µ–º—å—è –ò–≤–∞–Ω–æ–≤—ã—Ö –∏–∑ –ú–æ—Å–∫–≤—ã –ø–µ—Ä–µ—à–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –¥–∏—Å–∫–∞—É–Ω—Ç–µ—Ä–∞—Ö "–ü—è—Ç–µ—Ä–æ—á–∫–∞" –∏ "–ú–∞–≥–Ω–∏—Ç" –≤–º–µ—Å—Ç–æ "–ê–∑–±—É–∫–∏ –í–∫—É—Å–∞", —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ –∏–º —ç–∫–æ–Ω–æ–º–∏—Ç—å 15 —Ç—ã—Å. —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö."""
    
    elif "–ø–æ–ª–∏—Ç–∏" in topic['title'].lower():
        return """1Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏:</b>
–í —Å–µ–Ω—Ç—è–±—Ä–µ 2023 –≥–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏ –ø—Ä–æ—à–ª–∏ –≤—ã–±–æ—Ä—ã –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–æ–≤ –≤ 21 —Ä–µ–≥–∏–æ–Ω–µ. –Ø–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º 35%, —á—Ç–æ –Ω–∞ 5% –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–æ–≤.

2Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π:</b>
–í –º–∞–µ 2023 –≥–æ–¥–∞ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–§ –ø–æ—Å–µ—Ç–∏–ª –ö–∏—Ç–∞–π, –≥–¥–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞ "–°–∏–ª–∞ –°–∏–±–∏—Ä–∏-2" –º–æ—â–Ω–æ—Å—Ç—å—é 50 –º–ª—Ä–¥ –º¬≥ –≤ –≥–æ–¥.

3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –º–µ—Å—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏:</b>
–î–µ–ø—É—Ç–∞—Ç—ã –ú–æ—Å–≥–æ—Ä–¥—É–º—ã –≤ 2023 –≥–æ–¥—É –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–æ–Ω –æ –ª—å–≥–æ—Ç–Ω–æ–π –∞—Ä–µ–Ω–¥–µ –ø–æ–º–µ—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π - —Å—Ç–∞–≤–∫–∞ —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ 50% –¥–ª—è 500 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π."""
    
    else:
        return """1Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>
–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —à–∫–æ–ª—å–Ω–∏–∫ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –≤ 2023 –≥–æ–¥—É –Ω–∞–±—Ä–∞–ª 310 –±–∞–ª–ª–æ–≤ –Ω–∞ –ï–ì–≠ –∏ –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ –±—é–¥–∂–µ—Ç –≤ –ú–ì–ò–ú–û. –û–Ω –≥–æ—Ç–æ–≤–∏–ª—Å—è 2 –≥–æ–¥–∞ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏, —Ç—Ä–∞—Ç—è 50 —Ç—ã—Å. —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.

2Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã:</b>
–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã —Ñ–æ–Ω–¥–∞ "–ù–æ—á–ª–µ–∂–∫–∞" –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∫–æ—Ä–º—è—Ç 300 –±–µ–∑–¥–æ–º–Ω—ã—Ö. –ó–∞ 2023 –≥–æ–¥ –æ–Ω–∏ —Ä–∞–∑–¥–∞–ª–∏ –±–æ–ª–µ–µ 100 —Ç—ã—Å—è—á –ø–æ—Ä—Ü–∏–π –≥–æ—Ä—è—á–µ–π –µ–¥—ã.

3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –∫—É–ª—å—Ç—É—Ä—ã:</b>
–§–∏–ª—å–º "–ß–µ–ª—é—Å—Ç–∏" —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –ê. –£—á–∏—Ç–µ–ª—è —Å–æ–±—Ä–∞–ª –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–æ–∫–∞—Ç–µ 1,2 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –∑–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü, —Å—Ç–∞–≤ —Å–∞–º—ã–º –∫–∞—Å—Å–æ–≤—ã–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ñ–∏–ª—å–º–æ–º 2023 –≥–æ–¥–∞."""


# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
_topics_cache = None
_topics_cache_time = None

async def init_task19_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19 —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    global task19_data, _topics_cache, _topics_cache_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å)
    if _topics_cache and _topics_cache_time:
        if (datetime.now() - _topics_cache_time).seconds < 3600:
            task19_data = _topics_cache
            logger.info("Loaded task19 data from cache")
            return
    
    data_file = os.path.join(os.path.dirname(__file__), "task19_topics.json")
    
    try:
        with open(data_file, "r", encoding="utf-8") as f:
            raw = json.load(f)

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö: —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–æ–≤
        if isinstance(raw, list):
            topics_list = raw
        else:
            topics_list = []
            for block_name, block in raw.get("blocks", {}).items():
                for topic in block.get("topics", []):
                    topic["block"] = block_name
                    topics_list.append(topic)

        all_topics = []
        topic_by_id = {}
        topics_by_block = {}

        for topic in topics_list:
            block_name = topic.get("block", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            all_topics.append(topic)
            topic_by_id[topic["id"]] = topic
            topics_by_block.setdefault(block_name, []).append(topic)

        task19_data = {
            "topics": all_topics,
            "topic_by_id": topic_by_id,
            "topics_by_block": topics_by_block,
            "blocks": {b: {"topics": t} for b, t in topics_by_block.items()},
        }

        _topics_cache = raw
        _topics_cache_time = datetime.now()
        
        logger.info(f"Loaded {len(all_topics)} topics for task19")
    except Exception as e:
        logger.error(f"Failed to load task19 data: {e}")
        task19_data = {"topics": [], "blocks": {}, "topics_by_block": {}}


async def export_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task19_results', [])
    
    if not results:
        await query.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return states.CHOOSING_MODE
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_text = "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–Ø 19\n"
    export_text += "=" * 50 + "\n\n"
    export_text += f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
    export_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username or 'unknown'}\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_attempts = len(results)
    total_score = sum(r['score'] for r in results)
    max_possible = sum(r['max_score'] for r in results)
    avg_score = total_score / total_attempts if total_attempts > 0 else 0
    
    export_text += "–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
    export_text += "-" * 30 + "\n"
    export_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_attempts}\n"
    export_text += f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/3\n"
    export_text += f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score}/{max_possible}\n\n"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    export_text += "–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´\n"
    export_text += "-" * 30 + "\n\n"
    
    for i, result in enumerate(results, 1):
        export_text += f"{i}. –¢–µ–º–∞: {result['topic']}\n"
        export_text += f"   –ë–∞–ª–ª: {result['score']}/{result['max_score']}\n"
        if 'timestamp' in result:
            export_text += f"   –î–∞—Ç–∞: {result['timestamp']}\n"
        export_text += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –±–ª–æ–∫–∞–º
    blocks_stats = {}
    for result in results:
        topic_name = result['topic']
        for topic in task19_data.get('topics', []):
            if topic['title'] == topic_name:
                block = topic.get('block', '–î—Ä—É–≥–æ–µ')
                if block not in blocks_stats:
                    blocks_stats[block] = []
                blocks_stats[block].append(result['score'])
                break
    
    if blocks_stats:
        export_text += "\n–ê–ù–ê–õ–ò–ó –ü–û –ë–õ–û–ö–ê–ú\n"
        export_text += "-" * 30 + "\n\n"
        
        for block, scores in blocks_stats.items():
            avg = sum(scores) / len(scores)
            export_text += f"{block}:\n"
            export_text += f"  –ü–æ–ø—ã—Ç–æ–∫: {len(scores)}\n"
            export_text += f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg:.1f}/3\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    export_text += "\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n"
    export_text += "-" * 30 + "\n"
    
    if avg_score < 2:
        export_text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ –∑–∞–¥–∞–Ω–∏—é 19\n"
        export_text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤\n"
        export_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–æ–≤\n"
    elif avg_score < 2.5:
        export_text += "‚Ä¢ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è\n"
        export_text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤\n"
    else:
        export_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
        export_text += "‚Ä¢ –í—ã –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è 19 –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    import io
    file_buffer = io.BytesIO(export_text.encode('utf-8'))
    file_buffer.name = f'task19_results_{query.from_user.id}.txt'
    
    await query.message.reply_document(
        document=file_buffer,
        filename=file_buffer.name,
        caption="üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é 19"
    )
    
    return states.CHOOSING_MODE

async def detailed_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –±–ª–æ–∫–∞–º."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task19_results', [])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –±–ª–æ–∫–∞–º
    blocks_stats = {}
    for result in results:
        topic_name = result['topic']
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –¥–ª—è —Ç–µ–º—ã
        for topic in task19_data.get('topics', []):
            if topic['title'] == topic_name:
                block = topic.get('block', '–î—Ä—É–≥–æ–µ')
                if block not in blocks_stats:
                    blocks_stats[block] = {
                        'attempts': 0,
                        'total_score': 0,
                        'topics': set()
                    }
                blocks_stats[block]['attempts'] += 1
                blocks_stats[block]['total_score'] += result['score']
                blocks_stats[block]['topics'].add(topic_name)
                break
    
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º</b>\n\n"
    
    if not blocks_stats:
        text += "–í—ã –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è."
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫
        sorted_blocks = sorted(blocks_stats.items(), key=lambda x: x[1]['attempts'], reverse=True)
        
        for block_name, stats in sorted_blocks:
            avg_score = stats['total_score'] / stats['attempts']
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            if avg_score >= 2.5:
                emoji = "üü¢"
                assessment = "–æ—Ç–ª–∏—á–Ω–æ"
            elif avg_score >= 2:
                emoji = "üü°"
                assessment = "—Ö–æ—Ä–æ—à–æ"
            else:
                emoji = "üî¥"
                assessment = "—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
            
            text += f"{emoji} <b>{block_name}</b>\n"
            text += f"üìù –ü–æ–ø—ã—Ç–æ–∫: {stats['attempts']}\n"
            text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/3 ({assessment})\n"
            text += f"üìö –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {len(stats['topics'])}\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–ª–æ–∫–∞–º
    if blocks_stats:
        weak_blocks = [block for block, stats in blocks_stats.items() 
                      if stats['total_score'] / stats['attempts'] < 2]
        
        if weak_blocks:
            text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            text += f"–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏: {', '.join(weak_blocks)}\n"
            text += "–ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã –ø–æ —ç—Ç–∏–º —Ç–µ–º–∞–º."
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="t19_progress")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data="t19_export")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def settings_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    current_level = evaluator.strictness if evaluator else StrictnessLevel.STRICT
    
    text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

<b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {current_level.value}

<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π:</b>

üü¢ <b>–ë–∞–∑–æ–≤—ã–π</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è 3 –ø—Ä–∏–º–µ—Ä–æ–≤
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–º–µ
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö

üü° <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –æ—á–µ–≤–∏–¥–Ω—ã—Ö –æ—à–∏–±–æ–∫
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏

üî¥ <b>–°—Ç—Ä–æ–≥–∏–π</b> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫

üî• <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ö–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ"""
    
    kb_buttons = []
    for level in StrictnessLevel:
        emoji = "‚úÖ" if level == current_level else ""
        kb_buttons.append([
            InlineKeyboardButton(
                f"{emoji} {level.value}",
                callback_data=f"t19_set_strictness:{level.name}"
            )
        ])
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


async def set_strictness(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    global evaluator
    
    query = update.callback_query
    await query.answer()
    
    level_str = query.data.split(":")[1].upper()
    
    try:
        new_level = StrictnessLevel[level_str]
        evaluator = Task19AIEvaluator(strictness=new_level)
        
        await query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {new_level.value}", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return await settings_mode(update, context)
        
    except Exception as e:
        logger.error(f"Error setting strictness: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return states.CHOOSING_MODE
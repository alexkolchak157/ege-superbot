"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19."""
import asyncio
import logging
import os
import json
import random
import time
from typing import Optional, Dict, List, Any
from core.document_processor import DocumentHandlerMixin
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import BadRequest
from core.admin_tools import admin_manager
from core import states
from core.states import TASK19_WAITING
from core.ai_evaluator import Task19Evaluator, EvaluationResult
from datetime import datetime
import io
from .evaluator import StrictnessLevel, Task19AIEvaluator, AI_EVALUATOR_AVAILABLE
from core.universal_ui import UniversalUIComponents, AdaptiveKeyboards, MessageFormatter
from core.ui_helpers import (
    show_thinking_animation,
    show_extended_thinking_animation,
    show_streak_notification,
    show_ai_evaluation_animation,
    get_personalized_greeting,
    get_motivational_message,
    create_visual_progress,
    get_achievement_emoji,
)
from core.migration import ensure_module_migration
from core.error_handler import safe_handler, auto_answer_callback
from core.plugin_loader import build_main_menu
from core.state_validator import validate_state_transition, state_validator
from payment.decorators import requires_module

TASK19_STRICTNESS = os.getenv('TASK19_STRICTNESS', 'STRICT').upper()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π evaluator —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
evaluator = None

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è 19
task19_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º evaluator –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
if not evaluator:
    try:
        strictness_level = StrictnessLevel[os.getenv('TASK19_STRICTNESS', 'STRICT').upper()]
    except KeyError:
        strictness_level = StrictnessLevel.STRICT
    
    try:
        evaluator = Task19AIEvaluator(strictness=strictness_level)
        logger.info(f"Task19 AI evaluator initialized with {strictness_level.value} strictness")
    except Exception as e:
        logger.warning(f"Failed to initialize AI evaluator: {e}")
        evaluator = None

def set_active_module(context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç task19 –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å."""
    context.user_data['active_module'] = 'task19'
    context.user_data['current_module'] = 'task19'
    
# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@safe_handler()
async def strictness_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if not admin_manager.is_admin(query.from_user.id):
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return states.CHOOSING_MODE
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏
    current_strictness = StrictnessLevel.STRICT  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if evaluator and hasattr(evaluator, 'strictness'):
        current_strictness = evaluator.strictness
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üü¢ –ú—è–≥–∫–∏–π", callback_data="t19_strict:lenient")],
        [InlineKeyboardButton("üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="t19_strict:standard")],
        [InlineKeyboardButton("üî¥ –°—Ç—Ä–æ–≥–∏–π (–§–ò–ü–ò)", callback_data="t19_strict:strict")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
    ])
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if evaluator and hasattr(evaluator, 'strictness'):
        current = evaluator.strictness.value
    else:
        current = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    await query.edit_message_text(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <b>{current}</b>\n\n"
        "üü¢ <b>–ú—è–≥–∫–∏–π</b> - –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "üü° <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b> - –±–∞–ª–∞–Ω—Å —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏\n"
        "üî¥ <b>–°—Ç—Ä–æ–≥–∏–π</b> - –ø–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –§–ò–ü–ò\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

async def delete_previous_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int, keep_message_id: Optional[int] = None):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."""
    if not hasattr(context, 'bot') or not context.bot:
        logger.warning("Bot instance not available for message deletion")
        return
    
    # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_keys = [
        'task19_question_msg_id',   # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        'task19_answer_msg_id',     # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–≤–µ—Ç–æ–º
        'task19_result_msg_id',     # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        'task19_thinking_msg_id'    # –°–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
    ]
    
    messages_to_delete = []
    deleted_count = 0
    
    # –°–æ–±–∏—Ä–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    for key in message_keys:
        msg_id = context.user_data.get(key)
        if msg_id and msg_id != keep_message_id:
            messages_to_delete.append((key, msg_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    extra_messages = context.user_data.get('task19_extra_messages', [])
    for msg_id in extra_messages:
        if msg_id and msg_id != keep_message_id:
            messages_to_delete.append(('extra', msg_id))
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for key, msg_id in messages_to_delete:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            deleted_count += 1
            logger.debug(f"Deleted {key}: {msg_id}")
        except Exception as e:
            logger.debug(f"Failed to delete {key} {msg_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∫—Ä–æ–º–µ keep_message_id –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
    for key in message_keys:
        if context.user_data.get(key) != keep_message_id:
            context.user_data.pop(key, None)
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    context.user_data['task19_extra_messages'] = []
    
    logger.info(f"Task19: Deleted {deleted_count}/{len(messages_to_delete)} messages")

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
_topics_cache = None
_topics_cache_time = None

async def init_task19_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 19 —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    global task19_data, _topics_cache, _topics_cache_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å)
    if _topics_cache and _topics_cache_time:
        if (datetime.now() - _topics_cache_time).seconds < 3600:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            task19_data = _topics_cache
            logger.info(f"Loaded task19 data from cache: {len(task19_data.get('topics', []))} topics")
            return
    
    data_file = os.path.join(os.path.dirname(__file__), "task19_topics.json")
    
    try:
        with open(data_file, "r", encoding="utf-8") as f:
            raw = json.load(f)

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö: —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–æ–≤
        if isinstance(raw, list):
            topics_list = raw
        else:
            topics_list = []
            for block_name, block in raw.get("blocks", {}).items():
                for topic in block.get("topics", []):
                    topic["block"] = block_name
                    topics_list.append(topic)

        all_topics = []
        topic_by_id = {}
        topics_by_block = {}

        for topic in topics_list:
            block_name = topic.get("block", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            all_topics.append(topic)
            topic_by_id[topic["id"]] = topic
            topics_by_block.setdefault(block_name, []).append(topic)

        task19_data = {
            "topics": all_topics,
            "topic_by_id": topic_by_id,
            "topics_by_block": topics_by_block,
            "blocks": {b: {"topics": t} for b, t in topics_by_block.items()},
        }

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö—ç—à–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ —Å—ã—Ä—ã–µ
        _topics_cache = task19_data
        _topics_cache_time = datetime.now()
        
        logger.info(f"Loaded {len(all_topics)} topics for task19")
    except FileNotFoundError:
        logger.error(f"File not found: {data_file}")
        task19_data = {"topics": [], "blocks": {}, "topics_by_block": {}, "topic_by_id": {}}
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error in {data_file}: {e}")
        task19_data = {"topics": [], "blocks": {}, "topics_by_block": {}, "topic_by_id": {}}
    except Exception as e:
        logger.error(f"Failed to load task19 data: {e}")
        task19_data = {"topics": [], "blocks": {}, "topics_by_block": {}, "topic_by_id": {}}


@safe_handler()
@validate_state_transition({ConversationHandler.END, None})
async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –∑–∞–¥–∞–Ω–∏–µ 19 –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    set_active_module(context)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    results = context.user_data.get('task19_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r['topic'] for r in results)) / 50 * 100) if results else 0
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    greeting = get_personalized_greeting(user_stats)
    text = greeting + MessageFormatter.format_welcome_message(
        "–∑–∞–¥–∞–Ω–∏–µ 19",
        is_new_user=user_stats['total_attempts'] == 0
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="t19")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING_MODE –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é
    return states.CHOOSING_MODE


def _build_topic_message(topic: Dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ —Ç–µ–º–µ."""
    return (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>\n\n"
        f"<b>–¢–µ–º–∞:</b> {topic['title']}\n\n"
        f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º\n"
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ (–∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞)\n\n"
        "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"
    )

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if not task19_data or not task19_data.get('topics'):
        logger.error("Task19 data not loaded when entering practice mode")
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑
        await init_task19_data()
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –Ω–µ—Ç
        if not task19_data or not task19_data.get('topics'):
            text = """‚ùå <b>–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</b>
            
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–∞–¥–∞–Ω–∏–π.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
            
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t19_practice")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t19_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
            ])
            
            await query.edit_message_text(
                text,
                reply_markup=kb,
                parse_mode=ParseMode.HTML
            )
            return states.CHOOSING_MODE
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    context.user_data.pop('current_topic', None)
    context.user_data.pop('practice_results', None)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
    for key in ['task19_question_msg_id', 'task19_answer_msg_id', 
                'task19_result_msg_id', 'task19_thinking_msg_id']:
        context.user_data.pop(key, None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏
    text = "üí™ <b>–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t19_random_all")],
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫–∞–º", callback_data="t19_select_block")],
        [InlineKeyboardButton("üìã –í—Å–µ —Ç–µ–º—ã", callback_data="t19_list_topics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
    ])
    
    # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –≤–º–µ—Å—Ç–æ reply_text
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CHOOSING_MODE –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_BLOCK})
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±–ª–æ–∫–∞ —Ç–µ–º."""
    query = update.callback_query

    blocks = task19_data.get("blocks", {})
    if not blocks:
        await query.edit_message_text("‚ùå –ë–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return states.CHOOSING_MODE

    kb = [
        [InlineKeyboardButton(f"üìÅ {name}", callback_data=f"t19_block:{name}")]
        for name in blocks.keys()
    ]
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_practice")])

    await query.edit_message_text(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:</b>",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode=ParseMode.HTML,
    )
    return states.CHOOSING_BLOCK


@safe_handler()
async def block_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query

    block_name = query.data.split(":", 1)[1]
    context.user_data["selected_block"] = block_name

    kb = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data="t19_list_topics")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t19_random_block")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î—Ä—É–≥–æ–π –±–ª–æ–∫", callback_data="t19_select_block")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="t19_practice")],
    ]

    await query.edit_message_text(
        f"üìÅ <b>{block_name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode=ParseMode.HTML,
    )
    return states.CHOOSING_BLOCK


@safe_handler()
async def random_topic_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤."""
    query = update.callback_query

    topics: List[Dict] = task19_data.get("topics", [])
    if not topics:
        return states.CHOOSING_MODE

    topic = random.choice(topics)

    text = _build_topic_message(topic)
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t19_practice")]]
    )
    context.user_data["current_topic"] = topic
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è–≤–Ω–æ
    from core.state_validator import state_validator
    state_validator.set_state(query.from_user.id, TASK19_WAITING)
    
    return TASK19_WAITING


@safe_handler()
async def random_topic_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query

    block_name = context.user_data.get("selected_block")
    if not block_name:
        return states.CHOOSING_MODE

    topics = [t for t in task19_data.get("topics", []) if t.get("block") == block_name]
    if not topics:
        return states.CHOOSING_BLOCK

    topic = random.choice(topics)
    text = _build_topic_message(topic)
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data=f"t19_block:{block_name}")]]
    )
    context.user_data["current_topic"] = topic
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è–≤–Ω–æ
    from core.state_validator import state_validator
    state_validator.set_state(query.from_user.id, TASK19_WAITING)

    return TASK19_WAITING

@safe_handler()
async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)."""
    query = update.callback_query

    page = 0
    if query.data.startswith("t19_list_topics:page:"):
        try:
            page = int(query.data.split(":")[2])
        except ValueError:
            page = 0

    block_name = context.user_data.get("selected_block")

    topics = (
        [t for t in task19_data.get("topics", []) if t.get("block") == block_name]
        if block_name
        else task19_data.get("topics", [])
    )

    if not topics:
        await query.edit_message_text("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return states.CHOOSING_MODE

    ITEMS_PER_PAGE = 8
    total_pages = (len(topics) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    page = max(0, min(page, total_pages - 1))

    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE

    kb_rows = [
        [
            InlineKeyboardButton(t["title"], callback_data=f"t19_topic:{t['id']}")
        ]
        for t in topics[start:end]
    ]

    nav = []
    if page > 0:
        nav.append(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è", callback_data=f"t19_list_topics:page:{page-1}"
            )
        )
    nav.append(
        InlineKeyboardButton(
            create_visual_progress(page + 1, total_pages), callback_data="noop"
        )
    )
    if page < total_pages - 1:
        nav.append(
            InlineKeyboardButton(
                "‚û°Ô∏è", callback_data=f"t19_list_topics:page:{page+1}"
            )
        )
    if nav:
        kb_rows.append(nav)

    if block_name:
        kb_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫—É", callback_data=f"t19_block:{block_name}")])
    else:
        kb_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_practice")])

    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:</b>"
    if block_name:
        text += f"\n<b>–ë–ª–æ–∫:</b> {block_name}"

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_rows),
        parse_mode=ParseMode.HTML,
    )

    return states.CHOOSING_TOPIC


@safe_handler()
async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    set_active_module(context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º topic_id –∏–∑ callback_data
    topic_id = int(query.data.split(':')[1])
    topic = next((t for t in task19_data['topics'] if t['id'] == topic_id), None)
    
    if not topic:
        await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    context.user_data['current_topic'] = topic
    text = _build_topic_message(topic)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="t19_practice")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è–≤–Ω–æ
    from core.state_validator import state_validator
    state_validator.set_state(query.from_user.id, TASK19_WAITING)
    
    return TASK19_WAITING

@safe_handler()
async def show_progress_enhanced(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º."""
    query = update.callback_query
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º task19_practice_stats
    results = context.user_data.get('task19_results', [])
    task19_stats = context.user_data.get('task19_practice_stats', {})
    
    if not results and not task19_stats:
        text = MessageFormatter.format_welcome_message(
            "–∑–∞–¥–∞–Ω–∏–µ 19", 
            is_new_user=True
        )
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üí™ –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="t19_practice"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
        ]])
    else:
        total_attempts = 0
        total_score = 0
        max_possible = 0
        topic_stats_combined = {}
        
        if results:
            for result in results:
                topic_id = str(result.get('topic_id', 0))
                topic_title = result.get('topic_title', result.get('topic', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'))
                
                if topic_id not in topic_stats_combined:
                    topic_stats_combined[topic_id] = {
                        'title': topic_title,
                        'scores': [],
                        'attempts': 0
                    }
                
                topic_stats_combined[topic_id]['scores'].append(result['score'])
                topic_stats_combined[topic_id]['attempts'] += 1
                total_attempts += 1
                total_score += result['score']
                max_possible += result.get('max_score', 3)
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–∑ task19_practice_stats
        for topic_id_str, topic_data in task19_stats.items():
            if topic_data.get('attempts', 0) > 0:
                if topic_id_str not in topic_stats_combined:
                    topic_stats_combined[topic_id_str] = {
                        'title': topic_data.get('topic_title', f'–¢–µ–º–∞ {topic_id_str}'),
                        'scores': topic_data.get('scores', []),
                        'attempts': topic_data.get('attempts', 0)
                    }
                    total_attempts += topic_data['attempts']
                    total_score += sum(topic_data.get('scores', []))
                    max_possible += topic_data['attempts'] * 3
        
        avg_score = total_score / total_attempts if total_attempts > 0 else 0
        
        text = f"""üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ó–∞–¥–∞–Ω–∏–∏ 19</b>

üìù <b>–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {total_attempts}
‚≠ê <b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {avg_score:.1f}/3
üìö <b>–ò–∑—É—á–µ–Ω–æ —Ç–µ–º:</b> {len(topic_stats_combined)}
"""
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data="t19_export")],
            [InlineKeyboardButton("üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="t19_achievements")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
        ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return states.CHOOSING_MODE


def _format_evaluation_result(result) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
    total_score = getattr(result, 'total_score', 0)
    max_score = getattr(result, 'max_score', 3)
    text += f"<b>–ò—Ç–æ–≥–æ: {total_score}/{max_score} –±–∞–ª–ª–æ–≤</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if hasattr(result, 'feedback') and result.feedback:
        text += f"{result.feedback}\n"
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ detailed_feedback
    if hasattr(result, 'detailed_feedback') and result.detailed_feedback:
        detail = result.detailed_feedback
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
        if detail.get('valid_examples'):
            text += f"\n‚úÖ <b>–ó–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
            for ex in detail['valid_examples']:
                text += f"‚Ä¢ –ü—Ä–∏–º–µ—Ä {ex.get('number', '?')}: {ex.get('comment', '–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π')}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
        if detail.get('invalid_examples'):
            text += f"\n‚ùå <b>–ù–µ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
            for ex in detail['invalid_examples']:
                text += f"‚Ä¢ –ü—Ä–∏–º–µ—Ä {ex.get('number', '?')}: {ex.get('reason', '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º')}\n"
                if ex.get('improvement'):
                    text += f"  üí° <i>–°–æ–≤–µ—Ç: {ex['improvement']}</i>\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö
        if detail.get('penalty_applied'):
            text += f"\n‚ö†Ô∏è <b>–ü—Ä–∏–º–µ–Ω—ë–Ω —à—Ç—Ä–∞—Ñ:</b> {detail.get('penalty_reason', '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏')}\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if hasattr(result, 'suggestions') and result.suggestions:
        text += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        for suggestion in result.suggestions:
            text += f"‚Ä¢ {suggestion}\n"
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if hasattr(result, 'factual_errors') and result.factual_errors:
        text += "\n‚ö†Ô∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∏:</b>\n"
        for error in result.factual_errors:
            if isinstance(error, str):
                text += f"‚Ä¢ {error}\n"
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if total_score == max_score:
        text += "\nüéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞—Å—á–∏—Ç–∞–Ω—ã!"
    elif total_score > 0:
        text += "\nüí™ –ù–µ–ø–ª–æ—Ö–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!"
    else:
        text += "\nüìö –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã, –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
    
    return text

@safe_handler()
@validate_state_transition({TASK19_WAITING})
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ 19."""
    user_answer = update.message.text.strip()
    topic = context.user_data.get('current_topic')
    
    if not topic:
        await update.message.reply_text(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t19_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if len(user_answer) < 50:
        await update.message.reply_text(
            "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="t19_menu")
            ]])
        )
        return TASK19_WAITING
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    thinking_msg = await show_ai_evaluation_animation(
        update.message,
        duration=30  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è task19
    )
    
    try:
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç (AI –∏–ª–∏ –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞)
        if evaluator and AI_EVALUATOR_AVAILABLE:
            try:
                result = await evaluator.evaluate(
                    answer=user_answer,
                    topic=topic.get('title', ''),
                    task_text=topic.get('task_text', ''),
                    user_id=update.effective_user.id
                )
                score = result.total_score if hasattr(result, 'total_score') else result.get('score', 0)
                feedback_text = _format_evaluation_result(result)
                
            except Exception as e:
                logger.error(f"AI evaluation error: {e}")
                # Fallback –∫ –±–∞–∑–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ
                score, feedback = await _basic_evaluation(user_answer, topic)
                feedback_text = feedback
        else:
            # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ AI
            score, feedback_text = await _basic_evaluation(user_answer, topic)
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        await thinking_msg.delete()
        
        # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é save_result_task19 ===
        # –í–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ practice_stats
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        save_result_task19(context, topic, score)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é (—É–∂–µ –µ—Å—Ç—å –≤ save_result_task19, –Ω–æ –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        if score >= 2:
            context.user_data['correct_streak'] = context.user_data.get('correct_streak', 0) + 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ—Ä–∏–∏
            if context.user_data['correct_streak'] % 3 == 0:
                await show_streak_notification(
                    update.message,
                    context.user_data['correct_streak']
                )
        else:
            context.user_data['correct_streak'] = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_before = len(context.user_data.get('task19_achievements', set()))
        new_achievements = await check_achievements(context, update.effective_user.id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç
        if new_achievements:
            feedback_text += "\n\nüèÖ <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>"
            for ach in new_achievements:
                feedback_text += f"\n‚Ä¢ {ach['name']}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = AdaptiveKeyboards.create_result_keyboard(
            score=score,
            max_score=3,
            module_code="t19"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            feedback_text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        return states.CHOOSING_MODE
        
    except Exception as e:
        logger.error(f"Error in handle_answer: {e}")
        await thinking_msg.delete()
        
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t19_practice"),
                InlineKeyboardButton("üìù –í –º–µ–Ω—é", callback_data="t19_menu")
            ]])
        )
        return states.CHOOSING_MODE

def save_result_task19(context: ContextTypes.DEFAULT_TYPE, topic: Dict, score: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è task19 —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º."""
    from datetime import datetime
    
    if 'task19_results' not in context.user_data:
        context.user_data['task19_results'] = []
    
    if isinstance(topic, dict):
        topic_id = topic.get('id', 0)
        topic_title = topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')
        block = topic.get('block', '–û–±—â–∏–µ —Ç–µ–º—ã')
        task_text = topic.get('task_text', '')
    else:
        topic_id = hash(str(topic)) % 10000
        topic_title = str(topic)
        block = '–û–±—â–∏–µ —Ç–µ–º—ã'
        task_text = ''
    
    result = {
        'topic_id': topic_id,
        'topic': topic_title,
        'topic_title': topic_title,
        'block': block,
        'score': score,
        'max_score': 3,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'task_text': task_text[:100] if task_text else ''
    }
    
    context.user_data['task19_results'].append(result)
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º task19_practice_stats –≤–º–µ—Å—Ç–æ practice_stats
    if 'task19_practice_stats' not in context.user_data:
        context.user_data['task19_practice_stats'] = {}
    
    topic_id_str = str(topic_id)
    
    if topic_id_str not in context.user_data['task19_practice_stats']:
        context.user_data['task19_practice_stats'][topic_id_str] = {
            'attempts': 0,
            'scores': [],
            'last_attempt': None,
            'best_score': 0,
            'topic_title': topic_title,
            'topic_id': topic_id,
            'module': 'task19'
        }
    
    topic_stats = context.user_data['task19_practice_stats'][topic_id_str]
    topic_stats['attempts'] += 1
    topic_stats['scores'].append(score)
    topic_stats['last_attempt'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    topic_stats['best_score'] = max(topic_stats.get('best_score', 0), score)
    topic_stats['topic_title'] = topic_title
    
    if score >= 2:
        context.user_data['correct_streak'] = context.user_data.get('correct_streak', 0) + 1
    else:
        context.user_data['correct_streak'] = 0
    
    return result

@safe_handler()
async def handle_new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'."""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –Ω–æ–≤–æ–π —Ç–µ–º—ã
    return await practice_mode(update, context)

def _build_topic_message(topic: Dict) -> str:
    """–°—Ç—Ä–æ–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º –¥–ª—è —Ç–µ–º—ã."""
    text = f"""üìù <b>–ó–∞–¥–∞–Ω–∏–µ 19</b>

<b>–¢–µ–º–∞:</b> {topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')}

<b>–ó–∞–¥–∞–Ω–∏–µ:</b>
{topic.get('task_text', '–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω')}

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –¢–†–ò –ø—Ä–∏–º–µ—Ä–∞
‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑

üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º</i>"""
    
    return text

@safe_handler()
async def handle_retry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'."""
    query = update.callback_query
    await query.answer()
    
    topic = context.user_data.get('current_topic')
    if topic:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç topic
        if isinstance(topic, str):
            # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
            for t in task19_data.get('topics', []):
                if t.get('title') == topic:
                    topic = t
                    context.user_data['current_topic'] = topic
                    break
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return await return_to_menu(update, context)
        
        text = _build_topic_message(topic)
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="t19_practice")
        ]])
        
        await query.edit_message_text(
            text, 
            reply_markup=kb, 
            parse_mode=ParseMode.HTML
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, TASK19_WAITING)
        
        return TASK19_WAITING
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return await return_to_menu(update, context)

@safe_handler()
async def handle_show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'."""
    return await show_progress_enhanced(update, context)

@safe_handler()
async def handle_theory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é'."""
    return await theory_mode(update, context)

@safe_handler()
async def handle_examples(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–º–µ—Ä—ã'."""
    return await examples_bank(update, context)

@safe_handler()
async def handle_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'."""
    return await show_achievements(update, context)

@safe_handler()
async def handle_show_ideal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–∞–ª–æ–Ω'."""
    query = update.callback_query
    await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    return states.CHOOSING_MODE

async def _basic_evaluation(answer: str, topic: Any) -> tuple[int, str]:
    """–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ AI."""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
    if isinstance(topic, dict):
        topic_title = topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')
    elif isinstance(topic, str):
        topic_title = topic
    else:
        topic_title = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
    lines = [line.strip() for line in answer.split('\n') if line.strip()]
    examples_count = 0
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º –∏–ª–∏ –±—É–ª–ª–µ—Ç–∞–º
    for line in lines:
        if any(line.startswith(marker) for marker in ['1.', '2.', '3.', '‚Ä¢', '-', '*', '1)', '2)', '3)']):
            examples_count += 1
    
    # –û—Ü–µ–Ω–∫–∞
    if examples_count >= 3 and len(answer) > 200:
        score = 3
        feedback = f"‚úÖ –•–æ—Ä–æ—à–æ! –í—ã –ø—Ä–∏–≤–µ–ª–∏ {examples_count} –ø—Ä–∏–º–µ—Ä–∞. "
    elif examples_count >= 2 and len(answer) > 150:
        score = 2
        feedback = f"üëç –ù–µ–ø–ª–æ—Ö–æ! –ó–∞—Å—á–∏—Ç–∞–Ω–æ {examples_count} –ø—Ä–∏–º–µ—Ä–∞. "
    elif examples_count >= 1 and len(answer) > 100:
        score = 1
        feedback = "üìù –ó–∞—Å—á–∏—Ç–∞–Ω 1 –ø—Ä–∏–º–µ—Ä. "
    else:
        score = 0
        feedback = "‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω—ã. "
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if score == 3:
        feedback += "–í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞—Å—á–∏—Ç–∞–Ω—ã."
    elif score > 0:
        feedback += f"üí° –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤ –ø—Ä–∏–º–µ—Ä—ã."
    else:
        feedback += "‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ."
    
    return score, feedback

def _format_evaluation_result(result) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI."""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    if isinstance(result, dict):
        score = result.get('total_score', 0)
        max_score = result.get('max_score', 3)
        feedback_text = result.get('feedback', '')
        suggestions = result.get('suggestions', [])
        detailed = result.get('detailed_feedback', {})
    else:
        score = getattr(result, 'total_score', 0)
        max_score = getattr(result, 'max_score', 3)
        feedback_text = getattr(result, 'feedback', '')
        suggestions = getattr(result, 'suggestions', [])
        detailed = getattr(result, 'detailed_feedback', {})
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
    score = int(score)
    max_score = int(max_score)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    percentage = (score / max_score * 100) if max_score > 0 else 0
    
    if percentage >= 90:
        header = "üéâ <b>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>"
    elif percentage >= 60:
        header = "üëç <b>–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>"
    elif percentage >= 30:
        header = "üìù <b>–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å</b>"
    else:
        header = "‚ùå <b>–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</b>"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    feedback = f"{header}\n\n"
    feedback += f"<b>–í–∞—à –±–∞–ª–ª:</b> {score} –∏–∑ {max_score}\n\n"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if detailed and isinstance(detailed, dict):
        feedback += "<b>üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:</b>\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–º–µ—Ä–∞—Ö
        valid_count = detailed.get('valid_examples_count', 0)
        total_count = detailed.get('total_examples', 0)
        
        if total_count > 0:
            feedback += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {total_count}\n"
            feedback += f"‚Ä¢ –ó–∞—Å—á–∏—Ç–∞–Ω–æ: {valid_count}\n"
            
            # –®—Ç—Ä–∞—Ñ—ã
            if detailed.get('penalty_applied'):
                reason = detailed.get('penalty_reason', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π')
                feedback += f"‚Ä¢ ‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω —à—Ç—Ä–∞—Ñ: {reason}\n"
        
        feedback += "\n"
    
    # –ö—Ä–∞—Ç–∫–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç AI
    if feedback_text:
        feedback += f"<b>üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{feedback_text}\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    if suggestions and isinstance(suggestions, list):
        unique_suggestions = []
        seen = set()
        for s in suggestions:
            if s and s not in seen:
                unique_suggestions.append(s)
                seen.add(s)
        
        if unique_suggestions:
            feedback += "<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for suggestion in unique_suggestions[:3]:
                feedback += f"‚Ä¢ {suggestion}\n"
    
    return feedback.strip()

@safe_handler()
@validate_state_transition({TASK19_WAITING})
async def handle_answer_document_task19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è task19."""
    
    topic = context.user_data.get('current_topic')
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞."
        )
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–µ—Å–ª–∏ topic - —Å—Ç—Ä–æ–∫–∞)
    if isinstance(topic, str):
        # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–µ–º—ã
        for t in task19_data.get('topics', []):
            if t.get('title') == topic:
                topic = t
                context.user_data['current_topic'] = topic
                break
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    extracted_text = await DocumentHandlerMixin.handle_document_answer(
        update, 
        context,
        task_name="–ø—Ä–∏–º–µ—Ä—ã"
    )
    
    if not extracted_text:
        return TASK19_WAITING
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = DocumentHandlerMixin.validate_document_content(
        extracted_text,
        task_type="examples"
    )
    
    if not is_valid:
        await update.message.reply_text(f"‚ùå {error_msg}")
        return TASK19_WAITING
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['document_text'] = extracted_text
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    return await handle_answer(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def theory_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    
    text = """üìö <b>–¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é 19</b>

<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞:</b>

1Ô∏è‚É£ <b>–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å</b>
‚ùå –ü–ª–æ—Ö–æ: "–ß–µ–ª–æ–≤–µ–∫ –Ω–∞—Ä—É—à–∏–ª –∑–∞–∫–æ–Ω"
‚úÖ –•–æ—Ä–æ—à–æ: "–í–æ–¥–∏—Ç–µ–ª—å –ò–≤–∞–Ω–æ–≤ –ø—Ä–µ–≤—ã—Å–∏–ª —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 40 –∫–º/—á –Ω–∞ —Ç—Ä–∞—Å—Å–µ –ú-4"

2Ô∏è‚É£ <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</b>
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ü—Ä–∏–≤–æ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã/–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è

3Ô∏è‚É£ <b>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–µ</b>
‚Ä¢ –ü—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–∏–µ
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑—å

<b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>
üî∏ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
üî∏ –ü–æ–≤—Ç–æ—Ä –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
üî∏ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ
üî∏ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏

<b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –°–ú–ò, –∏—Å—Ç–æ—Ä–∏–∏, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ –ª–∏—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞."""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def examples_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –±–∞–Ω–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if not task19_data or not task19_data.get('topics'):
        logger.warning("Task19 data not loaded when accessing examples bank")
        await query.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...", show_alert=False)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        await init_task19_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    if task19_data.get('topics'):
        topic = task19_data['topics'][0]  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
        
        text = f"üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n"
        text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
        text += "<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n\n"
        
        for i, example in enumerate(topic.get('example_answers', []), 1):
            text += f"{i}. <b>{example['type']}</b>\n"
            text += f"   {example['example']}\n\n"
        
        text += "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤!</i>"
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞", callback_data="t19_bank_nav:1")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="t19_bank_search")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
        ])
    else:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        text = """üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>

‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t19_examples")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
        ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def bank_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    current_idx = int(query.data.split(":")[1])
    topics = task19_data.get('topics', [])
    
    if current_idx >= len(topics):
        current_idx = 0
    
    topic = topics[current_idx]
    
    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_bar = UniversalUIComponents.create_progress_bar(
        current_idx + 1, len(topics), width=20, show_percentage=True
    )
    
    text = f"üìö <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n{progress_bar}\n\n"
    text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
    text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
    text += "<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n\n"
    
    for i, example in enumerate(topic.get('example_answers', []), 1):
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
        color = UniversalUIComponents.COLOR_INDICATORS['green']
        text += f"{color} <b>{example['type']}</b>\n"
        text += f"   {example['example']}\n\n"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    kb_buttons = []
    nav_row = []
    
    if current_idx > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t19_bank_nav:{current_idx-1}"))
    
    nav_row.append(
        InlineKeyboardButton(
            create_visual_progress(current_idx + 1, len(topics)), callback_data="noop"
        )
    )
    
    if current_idx < len(topics) - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t19_bank_nav:{current_idx+1}"))
    
    kb_buttons.append(nav_row)
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t19_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE




@safe_handler()
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    from core.menu_handlers import handle_to_main_menu
    return await handle_to_main_menu(update, context)



@safe_handler()
async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é task19."""
    query = update.callback_query
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    from core.migration import ensure_module_migration
    ensure_module_migration(context, 'task19', task19_data)  # –ü–µ—Ä–µ–¥–∞–µ–º context, –ù–ï context.user_data!
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    set_active_module(context)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    results = context.user_data.get('task19_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r['topic'] for r in results)) / 50 * 100) if results else 0
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    greeting = get_personalized_greeting(user_stats)
    text = greeting + MessageFormatter.format_welcome_message(
        "–∑–∞–¥–∞–Ω–∏–µ 19",
        is_new_user=user_stats['total_attempts'] == 0
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="t19")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING_MODE –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é
    return states.CHOOSING_MODE

@safe_handler()
async def handle_result_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    query = update.callback_query
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ callback_data (—Å –ø–æ–ª–Ω—ã–º –∏ –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º)
    action = query.data
    if action.startswith("task19_"):
        action = action.replace("task19_", "t19_")
    
    if action == "t19_new":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        return await practice_mode(update, context)
    
    elif action == "t19_retry":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ –∂–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
        topic = context.user_data.get('current_topic')
        if topic:
            text = _build_topic_message(topic)
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É", callback_data="t19_practice")
            ]])
            
            await query.edit_message_text(
                text, 
                reply_markup=kb, 
                parse_mode=ParseMode.HTML
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from core.state_validator import state_validator
            state_validator.set_state(query.from_user.id, TASK19_WAITING)
            
            return TASK19_WAITING
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return await return_to_menu(update, context)
    
    elif action == "t19_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è
        return await return_to_menu(update, context)
    
    elif action == "t19_progress":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        return await show_progress_enhanced(update, context)
    
    elif action == "t19_show_ideal":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
        await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return states.CHOOSING_MODE
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return states.CHOOSING_MODE

@safe_handler()
async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é task19
    return await cmd_task19(update, context)

@safe_handler()
async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

def migrate_task19_data(context: ContextTypes.DEFAULT_TYPE):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö task19 –∏–∑ –æ–±—â–µ–≥–æ practice_stats –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if 'task19_practice_stats' in context.user_data:
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data['task19_practice_stats'] = {}
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∏–π practice_stats, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ task19
    if 'practice_stats' in context.user_data and task19_data and 'topics' in task19_data:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ topic_id –∏–∑ task19
        task19_topic_ids = {str(t.get('id', 0)) for t in task19_data['topics']}
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º—ã task19 –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        for topic_id_str, topic_data in context.user_data['practice_stats'].items():
            if topic_id_str in task19_topic_ids:
                context.user_data['task19_practice_stats'][topic_id_str] = topic_data.copy()
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥—É–ª—è
                context.user_data['task19_practice_stats'][topic_id_str]['module'] = 'task19'
    
    # –¢–∞–∫–∂–µ –º–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑ task19_results –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'task19_results' in context.user_data:
        for result in context.user_data['task19_results']:
            topic_id_str = str(result.get('topic_id', 0))
            
            # –ï—Å–ª–∏ —ç—Ç–æ–π —Ç–µ–º—ã –µ—â–µ –Ω–µ—Ç –≤ practice_stats
            if topic_id_str not in context.user_data['task19_practice_stats']:
                context.user_data['task19_practice_stats'][topic_id_str] = {
                    'attempts': 1,
                    'scores': [result['score']],
                    'last_attempt': result.get('timestamp'),
                    'best_score': result['score'],
                    'topic_title': result.get('topic_title', result.get('topic', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')),
                    'topic_id': result.get('topic_id'),
                    'module': 'task19'
                }

async def reset_progress_task19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ task19."""
    query = update.callback_query
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ task19
    context.user_data.pop('task19_results', None)
    context.user_data.pop('task19_practice_stats', None)  # –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data.pop('task19_achievements', None)
    
    await query.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é 19 —Å–±—Ä–æ—à–µ–Ω!", show_alert=True)
    return await return_to_menu(update, context)

@safe_handler()
async def cmd_task19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /task19."""
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    migrate_task19_data(context)  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    set_active_module(context)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    results = context.user_data.get('task19_results', [])
    task19_stats = context.user_data.get('task19_practice_stats', {})  # –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    total_attempts = sum(data.get('attempts', 0) for data in task19_stats.values())
    
    user_stats = {
        'total_attempts': total_attempts,
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(task19_stats) / 50 * 100) if task19_stats else 0
    }
    
    greeting = get_personalized_greeting(user_stats)
    text = greeting + MessageFormatter.format_welcome_message(
        "–∑–∞–¥–∞–Ω–∏–µ 19",
        is_new_user=user_stats['total_attempts'] == 0
    )
    
    kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="t19")
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Ç–µ–º—ã –≤ –±–∞–Ω–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    await query.edit_message_text(
        "üîç <b>–ü–æ–∏—Å–∫ –≤ –±–∞–Ω–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t19_examples")
        ]]),
        parse_mode=ParseMode.HTML
    )
    
    context.user_data['waiting_for_bank_search'] = True
    return states.SEARCHING


@safe_handler()
async def handle_bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–Ω–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    if not context.user_data.get('waiting_for_bank_search'):
        return
    
    search_query = update.message.text.lower()
    context.user_data['waiting_for_bank_search'] = False
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–º—ã
    matching_topics = []
    for idx, topic in enumerate(task19_data.get('topics', [])):
        if search_query in topic['title'].lower() or search_query in topic.get('task_text', '').lower():
            matching_topics.append((idx, topic))
    
    if not matching_topics:
        await update.message.reply_text(
            "‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t19_bank_search"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_examples")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
    await update.message.reply_text("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º: " + str(len(matching_topics)))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    msg = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞...")
    await show_examples_for_topic_message(msg, context, matching_topics[0][0])
    
    return states.CHOOSING_MODE


@safe_handler()
async def show_examples_for_topic_message(message, context: ContextTypes.DEFAULT_TYPE, topic_idx: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ–º—ã (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ callback)."""
    topics = task19_data.get('topics', [])
    
    if not topics or topic_idx >= len(topics):
        await message.edit_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    topic = topics[topic_idx]
    context.user_data['bank_current_idx'] = topic_idx
    
    text = f"""üè¶ <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>

<b>–¢–µ–º–∞:</b> {topic['title']}

<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>

{generate_examples_for_topic(topic)}

üí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –≤–∑—è—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
‚Ä¢ –ß–µ—Ç–∫–æ –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–≤—è–∑—å —Å —Ç–µ–º–æ–π –∑–∞–¥–∞–Ω–∏—è"""
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    kb_buttons = []
    nav_row = []
    
    if topic_idx > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t19_bank_nav:{topic_idx-1}"))
    
    nav_row.append(
        InlineKeyboardButton(
            create_visual_progress(topic_idx + 1, len(topics)), callback_data="noop"
        )
    )
    
    if topic_idx < len(topics) - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t19_bank_nav:{topic_idx+1}"))
    
    kb_buttons.append(nav_row)
    kb_buttons.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="t19_bank_search")])
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t19_menu")])
    
    await message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )


def generate_examples_for_topic(topic: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    
    if "—ç–∫–æ–Ω–æ–º–∏–∫" in topic['title'].lower():
        return """1Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –±–∏–∑–Ω–µ—Å–∞:</b>
–ö–æ–º–ø–∞–Ω–∏—è "Wildberries" –≤ 2023 –≥–æ–¥—É –æ—Ç–∫—Ä—ã–ª–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö –†–æ—Å—Å–∏–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å 5-7 –¥–æ 1-2 –¥–Ω–µ–π –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –Ω–∞ 40%.

2Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –≥–æ—Å—Å–µ–∫—Ç–æ—Ä–∞:</b>
–¶–ë –†–§ –≤ –∏—é–ª–µ 2023 –≥–æ–¥–∞ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 12%, —á—Ç–æ–±—ã —Å–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏—é. –≠—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Ä–æ—Å—Ç—É —Å—Ç–∞–≤–æ–∫ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –¥–æ 15% –≥–æ–¥–æ–≤—ã—Ö –∏ —Å–Ω–∏–∂–µ–Ω–∏—é —Å–ø—Ä–æ—Å–∞ –Ω–∞ –∏–ø–æ—Ç–µ–∫—É –Ω–∞ 30%.

3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏:</b>
–°–µ–º—å—è –ò–≤–∞–Ω–æ–≤—ã—Ö –∏–∑ –ú–æ—Å–∫–≤—ã –ø–µ—Ä–µ—à–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –¥–∏—Å–∫–∞—É–Ω—Ç–µ—Ä–∞—Ö "–ü—è—Ç–µ—Ä–æ—á–∫–∞" –∏ "–ú–∞–≥–Ω–∏—Ç" –≤–º–µ—Å—Ç–æ "–ê–∑–±—É–∫–∏ –í–∫—É—Å–∞", —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ –∏–º —ç–∫–æ–Ω–æ–º–∏—Ç—å 15 —Ç—ã—Å. —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö."""
    
    elif "–ø–æ–ª–∏—Ç–∏" in topic['title'].lower():
        return """1Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏:</b>
–í —Å–µ–Ω—Ç—è–±—Ä–µ 2023 –≥–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏ –ø—Ä–æ—à–ª–∏ –≤—ã–±–æ—Ä—ã –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–æ–≤ –≤ 21 —Ä–µ–≥–∏–æ–Ω–µ. –Ø–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º 35%, —á—Ç–æ –Ω–∞ 5% –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–æ–≤.

2Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π:</b>
–í –º–∞–µ 2023 –≥–æ–¥–∞ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–§ –ø–æ—Å–µ—Ç–∏–ª –ö–∏—Ç–∞–π, –≥–¥–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞ "–°–∏–ª–∞ –°–∏–±–∏—Ä–∏-2" –º–æ—â–Ω–æ—Å—Ç—å—é 50 –º–ª—Ä–¥ –º¬≥ –≤ –≥–æ–¥.

3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –º–µ—Å—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏:</b>
–î–µ–ø—É—Ç–∞—Ç—ã –ú–æ—Å–≥–æ—Ä–¥—É–º—ã –≤ 2023 –≥–æ–¥—É –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–æ–Ω –æ –ª—å–≥–æ—Ç–Ω–æ–π –∞—Ä–µ–Ω–¥–µ –ø–æ–º–µ—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π - —Å—Ç–∞–≤–∫–∞ —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ 50% –¥–ª—è 500 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π."""
    
    else:
        return """1Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>
–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —à–∫–æ–ª—å–Ω–∏–∫ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –≤ 2023 –≥–æ–¥—É –Ω–∞–±—Ä–∞–ª 310 –±–∞–ª–ª–æ–≤ –Ω–∞ –ï–ì–≠ –∏ –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ –±—é–¥–∂–µ—Ç –≤ –ú–ì–ò–ú–û. –û–Ω –≥–æ—Ç–æ–≤–∏–ª—Å—è 2 –≥–æ–¥–∞ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏, —Ç—Ä–∞—Ç—è 50 —Ç—ã—Å. —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.

2Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã:</b>
–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã —Ñ–æ–Ω–¥–∞ "–ù–æ—á–ª–µ–∂–∫–∞" –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∫–æ—Ä–º—è—Ç 300 –±–µ–∑–¥–æ–º–Ω—ã—Ö. –ó–∞ 2023 –≥–æ–¥ –æ–Ω–∏ —Ä–∞–∑–¥–∞–ª–∏ –±–æ–ª–µ–µ 100 —Ç—ã—Å—è—á –ø–æ—Ä—Ü–∏–π –≥–æ—Ä—è—á–µ–π –µ–¥—ã.

3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä –∏–∑ –∫—É–ª—å—Ç—É—Ä—ã:</b>
–§–∏–ª—å–º "–ß–µ–ª—é—Å—Ç–∏" —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –ê. –£—á–∏—Ç–µ–ª—è —Å–æ–±—Ä–∞–ª –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–æ–∫–∞—Ç–µ 1,2 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –∑–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü, —Å—Ç–∞–≤ —Å–∞–º—ã–º –∫–∞—Å—Å–æ–≤—ã–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ñ–∏–ª—å–º–æ–º 2023 –≥–æ–¥–∞."""


@safe_handler()
async def export_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª."""
    query = update.callback_query
    
    results = context.user_data.get('task19_results', [])
    
    if not results:
        return states.CHOOSING_MODE
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_text = "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–Ø 19\n"
    export_text += "=" * 50 + "\n\n"
    export_text += f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
    export_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username or 'unknown'}\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_attempts = len(results)
    total_score = sum(r['score'] for r in results)
    max_possible = sum(r['max_score'] for r in results)
    avg_score = total_score / total_attempts if total_attempts > 0 else 0
    
    export_text += "–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
    export_text += "-" * 30 + "\n"
    export_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_attempts}\n"
    export_text += f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/3\n"
    export_text += f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score}/{max_possible}\n\n"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    export_text += "–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´\n"
    export_text += "-" * 30 + "\n\n"
    
    for i, result in enumerate(results, 1):
        export_text += f"{i}. –¢–µ–º–∞: {result['topic']}\n"
        export_text += f"   –ë–∞–ª–ª: {result['score']}/{result['max_score']}\n"
        if 'timestamp' in result:
            export_text += f"   –î–∞—Ç–∞: {result['timestamp']}\n"
        export_text += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –±–ª–æ–∫–∞–º
    blocks_stats = {}
    for result in results:
        topic_name = result['topic']
        for topic in task19_data.get('topics', []):
            if topic['title'] == topic_name:
                block = topic.get('block', '–î—Ä—É–≥–æ–µ')
                if block not in blocks_stats:
                    blocks_stats[block] = []
                blocks_stats[block].append(result['score'])
                break
    
    if blocks_stats:
        export_text += "\n–ê–ù–ê–õ–ò–ó –ü–û –ë–õ–û–ö–ê–ú\n"
        export_text += "-" * 30 + "\n\n"
        
        for block, scores in blocks_stats.items():
            avg = sum(scores) / len(scores)
            export_text += f"{block}:\n"
            export_text += f"  –ü–æ–ø—ã—Ç–æ–∫: {len(scores)}\n"
            export_text += f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg:.1f}/3\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    export_text += "\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n"
    export_text += "-" * 30 + "\n"
    
    if avg_score < 2:
        export_text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ –∑–∞–¥–∞–Ω–∏—é 19\n"
        export_text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤\n"
        export_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–æ–≤\n"
    elif avg_score < 2.5:
        export_text += "‚Ä¢ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è\n"
        export_text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–º–µ—Ä–æ–≤\n"
    else:
        export_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
        export_text += "‚Ä¢ –í—ã –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è 19 –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    import io
    file_buffer = io.BytesIO(export_text.encode('utf-8'))
    file_buffer.name = f'task19_results_{query.from_user.id}.txt'
    
    await query.message.reply_document(
        document=file_buffer,
        filename=file_buffer.name,
        caption="üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é 19"
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def detailed_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –±–ª–æ–∫–∞–º."""
    query = update.callback_query
    
    results = context.user_data.get('task19_results', [])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –±–ª–æ–∫–∞–º
    blocks_stats = {}
    for result in results:
        topic_name = result['topic']
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –¥–ª—è —Ç–µ–º—ã
        for topic in task19_data.get('topics', []):
            if topic['title'] == topic_name:
                block = topic.get('block', '–î—Ä—É–≥–æ–µ')
                if block not in blocks_stats:
                    blocks_stats[block] = {
                        'attempts': 0,
                        'total_score': 0,
                        'topics': set()
                    }
                blocks_stats[block]['attempts'] += 1
                blocks_stats[block]['total_score'] += result['score']
                blocks_stats[block]['topics'].add(topic_name)
                break
    
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º</b>\n\n"
    
    if not blocks_stats:
        text += "–í—ã –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è."
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫
        sorted_blocks = sorted(blocks_stats.items(), key=lambda x: x[1]['attempts'], reverse=True)
        
        for block_name, stats in sorted_blocks:
            avg_score = stats['total_score'] / stats['attempts']
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            if avg_score >= 2.5:
                emoji = "üü¢"
                assessment = "–æ—Ç–ª–∏—á–Ω–æ"
            elif avg_score >= 2:
                emoji = "üü°"
                assessment = "—Ö–æ—Ä–æ—à–æ"
            else:
                emoji = "üî¥"
                assessment = "—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
            
            text += f"{emoji} <b>{block_name}</b>\n"
            text += f"üìù –ü–æ–ø—ã—Ç–æ–∫: {stats['attempts']}\n"
            text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/3 ({assessment})\n"
            text += f"üìö –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {len(stats['topics'])}\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–ª–æ–∫–∞–º
    if blocks_stats:
        weak_blocks = [block for block, stats in blocks_stats.items() 
                      if stats['total_score'] / stats['attempts'] < 2]
        
        if weak_blocks:
            text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            text += f"–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏: {', '.join(weak_blocks)}\n"
            text += "–ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã –ø–æ —ç—Ç–∏–º —Ç–µ–º–∞–º."
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="t19_progress")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data="t19_export")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def settings_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    query = update.callback_query
    
    current_level = evaluator.strictness if evaluator else StrictnessLevel.STRICT
    
    text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

<b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {current_level.value}

<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π:</b>

üü¢ <b>–ë–∞–∑–æ–≤—ã–π</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è 3 –ø—Ä–∏–º–µ—Ä–æ–≤
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–º–µ
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö

üü° <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –æ—á–µ–≤–∏–¥–Ω—ã—Ö –æ—à–∏–±–æ–∫
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏

üî¥ <b>–°—Ç—Ä–æ–≥–∏–π</b> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫

üî• <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ö–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ"""
    
    kb_buttons = []
    for level in StrictnessLevel:
        emoji = "‚úÖ" if level == current_level else ""
        kb_buttons.append([
            InlineKeyboardButton(
                f"{emoji} {level.value}",
                callback_data=f"t19_set_strictness:{level.name}"
            )
        ])
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def apply_strictness(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    global evaluator
    
    query = update.callback_query
    
    level_str = query.data.split(":")[1].upper()
    
    try:
        new_level = StrictnessLevel[level_str]
        evaluator = Task19AIEvaluator(strictness=new_level)
        
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return await settings_mode(update, context)
        
    except Exception as e:
        logger.error(f"Error setting strictness: {e}")
        return states.CHOOSING_MODE

@safe_handler()
async def cmd_task19_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º task19."""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if evaluator and hasattr(evaluator, 'strictness'):
        current_level = evaluator.strictness
    else:
        current_level = StrictnessLevel.STRICT if StrictnessLevel else None
    
    text = """‚öôÔ∏è <b>–ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏—è 19</b>

"""
    
    if current_level:
        text += f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{current_level.value}</b>\n\n"
    else:
        text += "–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
    
    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    kb_buttons = []
    
    if StrictnessLevel:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ enum –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        for level in StrictnessLevel:
            emoji = "‚úÖ" if current_level and level == current_level else ""
            kb_buttons.append([
                InlineKeyboardButton(
                    f"{emoji} {level.value}",
                    callback_data=f"t19_set_strictness:{level.name}"
                )
            ])
    else:
        kb_buttons.append([
            InlineKeyboardButton("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", callback_data="noop")
        ])
    
    kb_buttons.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
    ])
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def handle_theory_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ —Ç–µ–æ—Ä–∏–∏."""
    query = update.callback_query
    section = query.data.replace("t19_", "")
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    theory_content = {
        'how_to_write': {
            'title': '–ö–∞–∫ –ø–∏—Å–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã',
            'content': """üìù <b>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã</b>

<b>1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–º–µ—Ä–∞:</b>
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ —è–≤–ª–µ–Ω–∏–µ
- –£–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ (–µ—Å–ª–∏ –≤–∞–∂–Ω–æ)
- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏
- –°–≤—è–∑—å —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º

<b>2. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
- –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ—Å—Ç—å
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å (–Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è)
- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ç–µ–º–µ
- –ö—Ä–∞—Ç–∫–æ—Å—Ç—å –∏ —ë–º–∫–æ—Å—Ç—å

<b>3. –ò–∑–±–µ–≥–∞–π—Ç–µ:</b>
- –í—ã–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
- –°–ª–∏—à–∫–æ–º –æ–±—â–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
- –ü—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ —Å–≤—è–∑–∏ —Å —Ç–µ–º–æ–π
- –ü–æ–≤—Ç–æ—Ä–æ–≤ –∏ —Ç–∞–≤—Ç–æ–ª–æ–≥–∏–∏"""
        },
        'good_examples': {
            'title': '–£–¥–∞—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã',
            'content': """‚úÖ <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫</b>

<b>–ü—Ä–∏–º–µ—Ä 1:</b>
"–í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —Å–∏–ª—É –¥—É—Ö–∞ —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –Ω–∞—Ä–æ–¥–∞: –±–ª–æ–∫–∞–¥–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞—Å—å 872 –¥–Ω—è, –Ω–æ –≥–æ—Ä–æ–¥ –Ω–µ —Å–¥–∞–ª—Å—è."

<b>–ü–æ—á–µ–º—É —Ö–æ—Ä–æ—à–æ:</b>
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
- –¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –Ø—Å–Ω–∞—è —Å–≤—è–∑—å —Å —Ç–µ–º–æ–π

<b>–ü—Ä–∏–º–µ—Ä 2:</b>
"–†–µ—Ñ–æ—Ä–º—ã –ü–µ—Ç—Ä–∞ I –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –†–æ—Å—Å–∏—é: —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞, —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–ª–æ—Ç–∞, –≤–≤–µ–¥–µ–Ω–∏–µ –¢–∞–±–µ–ª–∏ –æ —Ä–∞–Ω–≥–∞—Ö."

<b>–ü–æ—á–µ–º—É —Ö–æ—Ä–æ—à–æ:</b>
- –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—Ñ–æ—Ä–º—ã
- –ü–æ–∫–∞–∑–∞–Ω –º–∞—Å—à—Ç–∞–± –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —Ç–µ–∑–∏—Å"""
        },
        'common_mistakes': {
            'title': '–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏',
            'content': """‚ùå <b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö</b>

<b>1. –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏:</b>
‚ùå "–ú–Ω–æ–≥–∏–µ –≤–æ–π–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≥–µ—Ä–æ–∏–∑–º"
‚úÖ "–°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –±–∏—Ç–≤–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –≥–µ—Ä–æ–∏–∑–º"

<b>2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏:</b>
‚ùå "–ò–∑–≤–µ—Å—Ç–Ω—ã–π —É—á—ë–Ω—ã–π —Å–¥–µ–ª–∞–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ"
‚úÖ "–ú–µ–Ω–¥–µ–ª–µ–µ–≤ –æ—Ç–∫—Ä—ã–ª –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–∫–æ–Ω"

<b>3. –ù–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚ùå "–í –ø—Ä–æ—à–ª–æ–º –≤–µ–∫–µ –±—ã–ª–∞ –≤–æ–π–Ω–∞"
‚úÖ "–ü–µ—Ä–≤–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞ 1914-1918 –≥–≥."

<b>4. –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ:</b>
‚ùå –ü—Ä–∏–º–µ—Ä –ø—Ä–æ —ç–∫–æ–Ω–æ–º–∏–∫—É –∫ —Ç–µ–º–µ –∫—É–ª—å—Ç—É—Ä—ã
‚úÖ –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ"""
        },
        'useful_phrases': {
            'title': '–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ—Ä–∞–∑—ã',
            'content': """üí¨ <b>–§—Ä–∞–∑—ã-—Å–≤—è–∑–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤</b>

<b>–î–ª—è –≤–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞:</b>
- "–Ø—Ä–∫–∏–º –ø—Ä–∏–º–µ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è..."
- "–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è..."
- "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è..."
- "–ú–æ–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä..."

<b>–î–ª—è —Å–≤—è–∑–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º:</b>
- "–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç..."
- "–î–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç..."
- "–≠—Ç–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ..."
- "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º—ã –≤–∏–¥–∏–º..."

<b>–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –ø—Ä–∏–º–µ—Ä–∞–º–∏:</b>
- "–î—Ä—É–≥–∏–º –ø—Ä–∏–º–µ—Ä–æ–º —Å–ª—É–∂–∏—Ç..."
- "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å..."
- "–ù–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è..."
- "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å..." """
        }
    }
    
    section_data = theory_content.get(section)
    
    if section_data:
        text = f"üìö <b>{section_data['title']}</b>\n\n{section_data['content']}"
    else:
        text = f"üìö –†–∞–∑–¥–µ–ª <b>{section}</b> –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ç–µ–æ—Ä–∏–∏", callback_data="t19_theory")
    ]])
    
    await query.edit_message_text(
        text, 
        reply_markup=kb, 
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


@safe_handler()
async def handle_settings_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Placeholder for settings related callbacks."""
    query = update.callback_query
    action = query.data.replace("t19_", "")
    if action == "reset_progress":
        await query.edit_message_text(
            "‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_settings")]]),
            parse_mode=ParseMode.HTML,
        )
    else:
        await query.edit_message_text(
            "‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–±—Ä–æ—à–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_settings")]]),
            parse_mode=ParseMode.HTML,
        )
    return states.CHOOSING_MODE

@safe_handler()
async def retry_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ –∏–∑ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    topic_id = query.data.split(':')[1]
    
    # –ò—â–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ
    topic_questions = []
    topic_name = None
    
    for block_data in task19_data.values():
        for topic, questions in block_data.items():
            if questions and len(questions) > 0:
                if questions[0].get('topic_id') == topic_id:
                    topic_questions = questions
                    topic_name = topic
                    break
        if topic_questions:
            break
    
    if not topic_questions:
        await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return states.CHOOSING_MODE
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    question = random.choice(topic_questions)
    context.user_data['task19_current_question'] = question
    context.user_data['task19_retry_mode'] = True  # –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
    
    text = f"üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>\n"
    text += f"üìö –¢–µ–º–∞: <i>{topic_name}</i>\n\n"
    text += f"<b>{question['question']}</b>\n\n"
    text += "–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏."
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t19_mistakes")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.TASK19_WAITING


@safe_handler()
async def apply_strictness(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    global evaluator
    
    query = update.callback_query
    level_name = query.data.split(':')[1].upper()
    
    try:
        if StrictnessLevel:
            new_level = StrictnessLevel[level_name]
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º evaluator —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º
            evaluator = Task19AIEvaluator(strictness=new_level)
            
            await query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {new_level.value}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            return await strictness_menu(update, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
            return states.CHOOSING_MODE
            
    except Exception as e:
        logger.error(f"Error setting strictness: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return states.CHOOSING_MODE


@safe_handler()
async def show_achievement_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
    query = update.callback_query
    achievement_id = query.data.split(':')[1]
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievement_details = {
        'first_example': {
            'name': 'üåü –ü–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä',
            'desc': '–í—ã –ø—Ä–∏–≤–µ–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä!',
            'tips': '–≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞.'
        },
        'perfect_5': {
            'name': 'üéØ –ü—è—Ç—å –∏–¥–µ–∞–ª–æ–≤',
            'desc': '–ü–æ–ª—É—á–µ–Ω–æ 5 –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∑–∞ –ø—Ä–∏–º–µ—Ä—ã!',
            'tips': '–í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã!'
        },
        'explorer_10': {
            'name': 'üó∫Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
            'desc': '–ò–∑—É—á–µ–Ω–æ 10 —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º!',
            'tips': '–®–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥–æ–∑–æ—Ä - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ.'
        },
        'master_50': {
            'name': 'üèÜ –ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤',
            'desc': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ 50 –∑–∞–¥–∞–Ω–∏–π —Å –≤—ã—Å–æ–∫–∏–º —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º!',
            'tips': '–í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç! –ü–æ–º–æ–≥–∏—Ç–µ –¥—Ä—É–≥–∏–º –æ—Å–≤–æ–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.'
        }
    }
    
    details = achievement_details.get(achievement_id)
    if not details:
        await query.answer("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return states.CHOOSING_MODE
    
    has_achievement = achievement_id in context.user_data.get('task19_achievements', set())
    
    text = f"{details['name']}\n\n"
    text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{details['desc']}\n\n"
    
    if has_achievement:
        text += f"‚úÖ <b>–ü–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        text += f"üí° <b>–°–æ–≤–µ—Ç:</b>\n{details['tips']}"
    else:
        text += "üîí <b>–ï—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n"
        text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!"
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º", callback_data="t19_achievements")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def achievement_ok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ OK –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏."""
    query = update.callback_query
    
    try:
        await query.message.delete()
    except:
        pass
    
    await query.answer()
    return None  # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@safe_handler()
async def show_ideal_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""
    query = update.callback_query
    
    current_question = context.user_data.get('task19_current_question')
    if not current_question:
        await query.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return states.CHOOSING_MODE
    
    ideal_examples = current_question.get('examples', [])
    if not ideal_examples:
        await query.answer("–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return states.CHOOSING_MODE
    
    text = "üíé <b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n\n"
    
    for i, example in enumerate(ideal_examples[:3], 1):
        text += f"<b>–ü—Ä–∏–º–µ—Ä {i}:</b>\n"
        text += f"{example}\n\n"
    
    text += "üí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
    text += "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫\n"
    text += "‚Ä¢ –¢–æ—á–Ω—ã–µ –¥–∞—Ç—ã –∏ —Ñ–∞–∫—Ç—ã\n"
    text += "‚Ä¢ –°–≤—è–∑—å —Å —Ç–µ–º–æ–π –≤–æ–ø—Ä–æ—Å–∞\n"
    text += "‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ç—å –∏ —ë–º–∫–æ—Å—Ç—å"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t19_retry")],
        [InlineKeyboardButton("üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="t19_new")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t19_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def reset_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    query = update.callback_query
    
    results = context.user_data.get('task19_results', [])
    achievements = context.user_data.get('task19_achievements', set())
    
    if not results:
        await query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞", show_alert=True)
        return states.CHOOSING_MODE
    
    text = (
        "‚ö†Ô∏è <b>–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?\n\n"
        f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n"
        f"‚Ä¢ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        f"‚Ä¢ {len(achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
        f"‚Ä¢ –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="t19_confirm_reset"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t19_settings")
        ]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def confirm_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞."""
    query = update.callback_query
    
    # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    context.user_data.pop('task19_results', None)
    context.user_data.pop('task19_achievements', None)
    context.user_data.pop('correct_streak', None)
    context.user_data.pop('practice_stats', None)
    context.user_data.pop('current_topic', None)
    context.user_data.pop('task19_current_topic', None)
    
    await query.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    return await return_to_menu(update, context)

async def show_achievement_notification(
    message: Message, 
    achievements: List[Dict],
    context: ContextTypes.DEFAULT_TYPE
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö."""
    if not achievements:
        return
    
    for achievement in achievements:
        emoji = get_achievement_emoji(achievement['id'])
        
        text = f"{emoji} <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>\n\n"
        text += f"üèÖ <b>{achievement['name']}</b>\n"
        text += f"üìù {achievement['desc']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
        motivational = [
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üöÄ",
            "–í—ã –¥–µ–ª–∞–µ—Ç–µ —É—Å–ø–µ—Ö–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ! üí™",
            "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –ù–æ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞ –≤–∑—è—Ç–∞! üèîÔ∏è",
            "–ë—Ä–∞–≤–æ! –í–∞—à–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ—Ç! üìà"
        ]
        text += f"<i>{random.choice(motivational)}</i>"
        
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üëç –û—Ç–ª–∏—á–Ω–æ!", callback_data="achievement_ok"),
            InlineKeyboardButton("üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="t19_achievements")
        ]])
        
        await message.reply_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if len(achievements) > 1:
            await asyncio.sleep(1)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def mistakes_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    results = context.user_data.get('task19_results', [])
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–º—ã —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏ (–º–µ–Ω—å—à–µ 2)
    low_score_topics = {}
    for result in results:
        if result.get('score', 0) < 2:
            topic_id = result.get('topic_id')
            if topic_id:
                if topic_id not in low_score_topics:
                    low_score_topics[topic_id] = {
                        'count': 0,
                        'avg_score': 0,
                        'scores': []
                    }
                low_score_topics[topic_id]['count'] += 1
                low_score_topics[topic_id]['scores'].append(result.get('score', 0))
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã
    for topic_id, data in low_score_topics.items():
        data['avg_score'] = sum(data['scores']) / len(data['scores'])
    
    if not low_score_topics:
        text = "üëç <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b>\n\n"
        text += "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–º —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n"
        text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞!"
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí™ –ö –ø—Ä–∞–∫—Ç–∏–∫–µ", callback_data="t19_practice")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")]
        ])
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É (—Å–Ω–∞—á–∞–ª–∞ —Ö—É–¥—à–∏–µ)
        sorted_topics = sorted(low_score_topics.items(), 
                             key=lambda x: x[1]['avg_score'])
        
        text = "üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
        text += "–¢–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:\n\n"
        
        buttons = []
        for i, (topic_id, data) in enumerate(sorted_topics[:5], 1):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ task19_data
            topic_name = topic_id  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ID
            for block_data in task19_data.values():
                for topic, topic_data in block_data.items():
                    if topic_data and len(topic_data) > 0 and topic_data[0].get('topic_id') == topic_id:
                        topic_name = topic
                        break
            
            avg_visual = UniversalUIComponents.create_score_visual(
                data['avg_score'], 
                3,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è task19
                use_stars=False
            )
            
            text += f"{i}. {topic_name}\n"
            text += f"   –ü–æ–ø—ã—Ç–æ–∫: {data['count']}, –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_visual}\n\n"
            
            buttons.append([InlineKeyboardButton(
                f"üìù {topic_name[:30]}{'...' if len(topic_name) > 30 else ''}",
                callback_data=f"t19_retry_topic:{topic_id}"
            )])
        
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_menu")])
        kb = InlineKeyboardMarkup(buttons)
        
        text += "\nüí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</i>"
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE


@safe_handler()
async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    
    achievements = context.user_data.get('task19_achievements', set())
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    all_achievements = {
        'first_example': ('üåü –ü–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä', '–ü—Ä–∏–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä'),
        'perfect_5': ('üéØ –ü—è—Ç—å –∏–¥–µ–∞–ª–æ–≤', '–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª 5 —Ä–∞–∑'),
        'explorer_10': ('üó∫Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–ò–∑—É—á–∏—Ç—å 10 —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º'),
        'persistent_20': ('üí™ –£–ø–æ—Ä—Å—Ç–≤–æ', '–í—ã–ø–æ–ª–Ω–∏—Ç—å 20 –∑–∞–¥–∞–Ω–∏–π'),
        'master_50': ('üèÜ –ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤', '–í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º –≤—ã—à–µ 2'),
        'speed_demon': ('‚ö° –°–∫–æ—Ä–æ—Å—Ç—å', '–î–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–µ —á–µ–º –∑–∞ –º–∏–Ω—É—Ç—É'),
        'comeback': ('üî• –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ', '–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –Ω–µ—É–¥–∞—á')
    }
    
    text = "üèÖ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –ó–∞–¥–∞–Ω–∏–∏ 19</b>\n\n"
    
    # –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if achievements:
        text += "<b>‚úÖ –ü–æ–ª—É—á–µ–Ω–æ:</b>\n"
        for ach_id in achievements:
            if ach_id in all_achievements:
                name, desc = all_achievements[ach_id]
                emoji = get_achievement_emoji(ach_id)
                text += f"{emoji} {name} - {desc}\n"
        text += "\n"
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    not_achieved = set(all_achievements.keys()) - achievements
    if not_achieved:
        text += "<b>üîì –î–æ—Å—Ç—É–ø–Ω–æ:</b>\n"
        for ach_id in sorted(not_achieved):
            name, desc = all_achievements[ach_id]
            text += f"‚ö™ {name[2:]} - {desc}\n"
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    progress_bar = UniversalUIComponents.create_progress_bar(
        len(achievements), 
        len(all_achievements),
        width=10
    )
    text += f"\n<b>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress_bar}"
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    percentage = len(achievements) / len(all_achievements) if all_achievements else 0
    if percentage == 1:
        text += "\n\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
    elif percentage >= 0.7:
        text += "\n\nüí™ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!"
    elif percentage >= 0.3:
        text += "\n\nüìà –•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    else:
        text += "\n\nüåü –ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ - —à–∞–≥ –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É!"
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t19_progress")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def check_achievements(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> List[Dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    results = context.user_data.get('task19_results', [])
    achievements = context.user_data.get('task19_achievements', set())
    new_achievements = []
    
    # –£—Å–ª–æ–≤–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if len(results) >= 1 and 'first_example' not in achievements:
        achievements.add('first_example')
        new_achievements.append({
            'id': 'first_example',
            'name': 'üåü –ü–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä',
            'desc': '–í—ã –ø—Ä–∏–≤–µ–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä!'
        })
    
    perfect_count = sum(1 for r in results if r.get('score', 0) >= 2.5)
    if perfect_count >= 5 and 'perfect_5' not in achievements:
        achievements.add('perfect_5')
        new_achievements.append({
            'id': 'perfect_5',
            'name': 'üéØ –ü—è—Ç—å –∏–¥–µ–∞–ª–æ–≤',
            'desc': '–ü–æ–ª—É—á–µ–Ω–æ 5 –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫!'
        })
    
    unique_topics = len(set(r.get('topic_id', r.get('topic')) for r in results))
    if unique_topics >= 10 and 'explorer_10' not in achievements:
        achievements.add('explorer_10')
        new_achievements.append({
            'id': 'explorer_10',
            'name': 'üó∫Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
            'desc': '–ò–∑—É—á–µ–Ω–æ 10 —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º!'
        })
    
    if len(results) >= 20 and 'persistent_20' not in achievements:
        achievements.add('persistent_20')
        new_achievements.append({
            'id': 'persistent_20',
            'name': 'üí™ –£–ø–æ—Ä—Å—Ç–≤–æ',
            'desc': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ 20 –∑–∞–¥–∞–Ω–∏–π!'
        })
    
    if len(results) >= 50:
        avg = sum(r.get('score', 0) for r in results) / len(results)
        if avg > 2 and 'master_50' not in achievements:
            achievements.add('master_50')
            new_achievements.append({
                'id': 'master_50',
                'name': 'üèÜ –ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤',
                'desc': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ 50 –∑–∞–¥–∞–Ω–∏–π —Å –≤—ã—Å–æ–∫–∏–º —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º!'
            })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    context.user_data['task19_achievements'] = achievements
    
    return new_achievements

"""
core/state_monitoring.py
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional, Tuple, Any
from collections import defaultdict, deque
from dataclasses import dataclass, asdict
import aiofiles

from telegram import Update
from telegram.ext import ContextTypes
from core.state_validator import state_validator
from core.admin_tools import admin_manager
from core import states

logger = logging.getLogger(__name__)


@dataclass
class StateTransitionEvent:
    """–°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_id: int
    from_state: Optional[int]
    to_state: int
    handler_name: str
    is_valid: bool
    timestamp: datetime
    duration_ms: Optional[int] = None
    error: Optional[str] = None
    
    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        data = asdict(self)
        data['timestamp'] = self.timestamp.isoformat()
        data['from_state_name'] = state_validator._state_name(self.from_state) if self.from_state else "None"
        data['to_state_name'] = state_validator._state_name(self.to_state)
        return data


class StateMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""
    
    def __init__(self, 
                 anomaly_threshold: int = 5,
                 window_size: int = 3600,  # 1 —á–∞—Å
                 max_events: int = 10000):
        self.anomaly_threshold = anomaly_threshold
        self.window_size = window_size
        self.max_events = max_events
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π
        self.events: deque = deque(maxlen=max_events)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.user_error_counts: Dict[int, int] = defaultdict(int)
        self.transition_counts: Dict[str, int] = defaultdict(int)
        self.handler_performance: Dict[str, List[int]] = defaultdict(list)
        
        # –ê–Ω–æ–º–∞–ª–∏–∏
        self.anomalies: List[Dict] = []
        self.blocked_users: Set[int] = set()
        
        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        self._monitoring_task = None
        self._cleanup_task = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self._monitoring_task = asyncio.create_task(self._monitor_loop())
        self._cleanup_task = asyncio.create_task(self._cleanup_loop())
        logger.info("State monitoring started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        if self._monitoring_task:
            self._monitoring_task.cancel()
        if self._cleanup_task:
            self._cleanup_task.cancel()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self.save_stats()
        logger.info("State monitoring stopped")
    
    def record_transition(self, event: StateTransitionEvent):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞."""
        self.events.append(event)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        transition_key = f"{event.from_state}->{event.to_state}"
        self.transition_counts[transition_key] += 1
        
        if not event.is_valid:
            self.user_error_counts[event.user_id] += 1
        
        if event.duration_ms:
            self.handler_performance[event.handler_name].append(event.duration_ms)
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
            if len(self.handler_performance[event.handler_name]) > 100:
                self.handler_performance[event.handler_name] = self.handler_performance[event.handler_name][-100:]
    
    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        while True:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await self._check_anomalies()
                await self._check_performance()
                await self._update_metrics()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
    
    async def _cleanup_loop(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        while True:
            try:
                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
                await self._cleanup_old_events()
                await self._reset_counters()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in cleanup loop: {e}")
    
    async def _check_anomalies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π."""
        now = datetime.now(timezone.utc)
        window_start = now - timedelta(seconds=self.window_size)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫
        for user_id, error_count in self.user_error_counts.items():
            if error_count >= self.anomaly_threshold:
                anomaly = {
                    'type': 'high_error_rate',
                    'user_id': user_id,
                    'error_count': error_count,
                    'timestamp': now.isoformat()
                }
                self.anomalies.append(anomaly)
                await self._handle_anomaly(anomaly)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        user_transitions = defaultdict(list)
        for event in self.events:
            if event.timestamp > window_start:
                user_transitions[event.user_id].append((event.from_state, event.to_state))
        
        for user_id, transitions in user_transitions.items():
            if self._detect_cycles(transitions):
                anomaly = {
                    'type': 'cyclic_transitions',
                    'user_id': user_id,
                    'transitions': transitions,
                    'timestamp': now.isoformat()
                }
                self.anomalies.append(anomaly)
                await self._handle_anomaly(anomaly)
    
    def _detect_cycles(self, transitions: List[Tuple[int, int]], min_cycle_length: int = 3) -> bool:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤."""
        if len(transitions) < min_cycle_length * 2:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for cycle_len in range(min_cycle_length, len(transitions) // 2 + 1):
            for start in range(len(transitions) - cycle_len * 2 + 1):
                pattern = transitions[start:start + cycle_len]
                next_pattern = transitions[start + cycle_len:start + cycle_len * 2]
                if pattern == next_pattern:
                    return True
        
        return False
    
    async def _check_performance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        slow_handlers = []
        
        for handler_name, durations in self.handler_performance.items():
            if durations:
                avg_duration = sum(durations) / len(durations)
                if avg_duration > 1000:  # –ë–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
                    slow_handlers.append({
                        'handler': handler_name,
                        'avg_duration_ms': avg_duration,
                        'samples': len(durations)
                    })
        
        if slow_handlers:
            await self._notify_admins_performance(slow_handlers)
    
    async def _handle_anomaly(self, anomaly: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∞–Ω–æ–º–∞–ª–∏–∏."""
        logger.warning(f"Anomaly detected: {anomaly}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏—è—Ö
        if anomaly['error_count'] > self.anomaly_threshold * 2:
            self.blocked_users.add(anomaly['user_id'])
            asyncio.create_task(self._unblock_user_later(anomaly['user_id'], 300))  # 5 –º–∏–Ω—É—Ç
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        await self._notify_admins_anomaly(anomaly)
    
    async def _unblock_user_later(self, user_id: int, delay: int):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
        await asyncio.sleep(delay)
        self.blocked_users.discard(user_id)
        logger.info(f"User {user_id} unblocked after {delay} seconds")
    
    async def _notify_admins_anomaly(self, anomaly: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏."""
        message = f"üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è</b>\n\n"
        
        if anomaly['type'] == 'high_error_rate':
            message += (
                f"–¢–∏–ø: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫\n"
                f"User ID: {anomaly['user_id']}\n"
                f"–û—à–∏–±–æ–∫: {anomaly['error_count']}\n"
            )
        elif anomaly['type'] == 'cyclic_transitions':
            message += (
                f"–¢–∏–ø: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã\n"
                f"User ID: {anomaly['user_id']}\n"
                f"–ü–∞—Ç—Ç–µ—Ä–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö\n"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É
        admin_list = admin_manager.get_admin_list()
        if admin_list:
            try:
                # –ù—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ bot instance
                from core.app import app
                await app.bot.send_message(admin_list[0], message, parse_mode='HTML')
            except:
                logger.error("Failed to notify admins about anomaly")
    
    async def _notify_admins_performance(self, slow_handlers: List[Dict]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        message = "‚ö†Ô∏è <b>–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏</b>\n\n"
        
        for handler in slow_handlers[:5]:  # –¢–æ–ø 5
            message += (
                f"‚Ä¢ {handler['handler']}: "
                f"{handler['avg_duration_ms']:.0f}ms "
                f"({handler['samples']} –∑–∞–º–µ—Ä–æ–≤)\n"
            )
        
        admin_list = admin_manager.get_admin_list()
        if admin_list:
            try:
                from core.app import app
                await app.bot.send_message(admin_list[0], message, parse_mode='HTML')
            except:
                pass
    
    async def _update_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º."""
        metrics = self.get_current_metrics()
        
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Prometheus, Grafana, etc.
        # –ü—Ä–∏–º–µ—Ä: await push_to_prometheus(metrics)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await self._save_metrics(metrics)
    
    def get_current_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫."""
        now = datetime.now(timezone.utc)
        hour_ago = now - timedelta(hours=1)
        
        recent_events = [e for e in self.events if e.timestamp > hour_ago]
        
        metrics = {
            'timestamp': now.isoformat(),
            'total_transitions': len(recent_events),
            'invalid_transitions': sum(1 for e in recent_events if not e.is_valid),
            'unique_users': len(set(e.user_id for e in recent_events)),
            'blocked_users': len(self.blocked_users),
            'anomalies_detected': len(self.anomalies),
            'top_transitions': self._get_top_transitions(5),
            'error_rate': (sum(1 for e in recent_events if not e.is_valid) / len(recent_events) * 100) if recent_events else 0,
            'avg_handler_performance': self._get_avg_performance(),
        }
        
        return metrics
    
    def _get_top_transitions(self, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø–µ—Ä–µ—Ö–æ–¥–æ–≤."""
        sorted_transitions = sorted(
            self.transition_counts.items(),
            key=lambda x: x[1],
            reverse=True
        )[:limit]
        
        return [
            {
                'transition': key,
                'count': count,
                'percentage': (count / sum(self.transition_counts.values()) * 100) if self.transition_counts else 0
            }
            for key, count in sorted_transitions
        ]
    
    def _get_avg_performance(self) -> Dict[str, float]:
        """–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        return {
            handler: sum(durations) / len(durations) if durations else 0
            for handler, durations in self.handler_performance.items()
        }
    
    async def _save_metrics(self, metrics: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–∞–π–ª."""
        filename = f"metrics/state_metrics_{datetime.now().strftime('%Y%m%d')}.jsonl"
        
        async with aiofiles.open(filename, 'a') as f:
            await f.write(json.dumps(metrics) + '\n')
    
    async def _cleanup_old_events(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        cutoff = datetime.now(timezone.utc) - timedelta(hours=24)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        self.events = deque(
            (e for e in self.events if e.timestamp > cutoff),
            maxlen=self.max_events
        )
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
        self.anomalies = [
            a for a in self.anomalies 
            if datetime.fromisoformat(a['timestamp']) > cutoff
        ]
    
    async def _reset_counters(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫."""
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞ 50%
        for user_id in list(self.user_error_counts.keys()):
            self.user_error_counts[user_id] = self.user_error_counts[user_id] // 2
            if self.user_error_counts[user_id] == 0:
                del self.user_error_counts[user_id]
    
    async def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats = {
            'saved_at': datetime.now(timezone.utc).isoformat(),
            'total_events': len(self.events),
            'transition_counts': dict(self.transition_counts),
            'anomalies': self.anomalies,
            'metrics': self.get_current_metrics()
        }
        
        filename = f"stats/state_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        async with aiofiles.open(filename, 'w') as f:
            await f.write(json.dumps(stats, indent=2))
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
        metrics = self.get_current_metrics()
        
        report = f"""üìä <b>–û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π</b>

üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {metrics['unique_users']}
üîÑ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {metrics['total_transitions']}
‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {metrics['invalid_transitions']} ({metrics['error_rate']:.1f}%)
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {metrics['blocked_users']}
‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: {metrics['anomalies_detected']}

<b>–¢–æ–ø –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b>"""
        
        for transition in metrics['top_transitions']:
            report += f"\n‚Ä¢ {transition['transition']}: {transition['count']} ({transition['percentage']:.1f}%)"
        
        return report


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
state_monitor = StateMonitor()


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
def enhanced_validate_state_transition(expected_states: Optional[Set[int]] = None):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º."""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id if update.effective_user else 0
            handler_name = func.__name__
            start_time = datetime.now(timezone.utc)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in state_monitor.blocked_users:
                logger.warning(f"Blocked user {user_id} tried to access {handler_name}")
                if update.callback_query:
                    await update.callback_query.answer(
                        "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                        show_alert=True
                    )
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state = state_validator.get_current_state(user_id)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            is_valid = True
            error = None
            
            if expected_states and current_state not in expected_states:
                is_valid = False
                error = f"Expected {expected_states}, got {current_state}"
            
            try:
                # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                result = await func(update, context, *args, **kwargs)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                duration = int((datetime.now(timezone.utc) - start_time).total_seconds() * 1000)
                
                event = StateTransitionEvent(
                    user_id=user_id,
                    from_state=current_state,
                    to_state=result if isinstance(result, int) else current_state,
                    handler_name=handler_name,
                    is_valid=is_valid,
                    timestamp=start_time,
                    duration_ms=duration,
                    error=error
                )
                
                state_monitor.record_transition(event)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if isinstance(result, int):
                    if result == ConversationHandler.END:
                        state_validator.clear_state(user_id)
                    else:
                        state_validator.set_state(user_id, result)
                
                return result
                
            except Exception as e:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                event = StateTransitionEvent(
                    user_id=user_id,
                    from_state=current_state,
                    to_state=current_state,
                    handler_name=handler_name,
                    is_valid=False,
                    timestamp=start_time,
                    error=str(e)
                )
                
                state_monitor.record_transition(event)
                raise
        
        return wrapper
    return decorator


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def monitoring_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    if not admin_manager.is_admin(update.effective_user.id):
        return
    
    report = state_monitor.generate_report()
    await update.message.reply_text(report, parse_mode='HTML')


async def monitoring_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
    if not admin_manager.is_admin(update.effective_user.id):
        return
    
    metrics = state_monitor.get_current_metrics()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    text = f"```json\n{json.dumps(metrics, indent=2, ensure_ascii=False)}\n```"
    
    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
    if len(text) > 4000:
        filename = f"metrics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(filename, 'w') as f:
            json.dump(metrics, f, indent=2, ensure_ascii=False)
        
        await update.message.reply_document(
            document=open(filename, 'rb'),
            caption="üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        )
        
        os.remove(filename)
    else:
        await update.message.reply_text(text, parse_mode='Markdown')
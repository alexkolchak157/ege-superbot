"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è task19, task20, task25
—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π evaluator –Ω–∞ None –∏ fallback –ª–æ–≥–∏–∫–æ–π.
"""
import logging
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from core import states
from core.universal_ui import AdaptiveKeyboards, MessageFormatter
from core.ui_helpers import (
    show_extended_thinking_animation,
    get_motivational_message
)
from datetime import datetime

logger = logging.getLogger(__name__)


class SafeEvaluatorMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å evaluator."""
    
    @staticmethod
    async def safe_evaluate(
        evaluator: Any,
        user_answer: str,
        topic: Dict[str, Any],
        task_number: int,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> Dict[str, Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É.
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏:
            - success: bool
            - score: int
            - max_score: int
            - feedback: str
            - details: Dict (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        user_id = update.effective_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
        checking_msg = await show_extended_thinking_animation(
            update.message,
            f"–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task_number}",
            duration=60
        )
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å evaluator
            if evaluator and hasattr(evaluator, 'evaluate'):
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI evaluator
                    result = await evaluator.evaluate(
                        answer=user_answer,
                        topic=topic.get('title', ''),
                        topic_data=topic
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    await checking_msg.delete()
                    
                    return {
                        'success': True,
                        'score': result.total_score,
                        'max_score': result.max_score,
                        'feedback': result.format_feedback(),
                        'details': result.score_breakdown if hasattr(result, 'score_breakdown') else {}
                    }
                    
                except Exception as e:
                    logger.warning(f"AI evaluator failed for task {task_number}: {e}")
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback
            
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            logger.info(f"Using fallback evaluation for task {task_number}")
            
            score = 0
            max_score = 5
            feedback_parts = []
            
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
            if len(user_answer) > 100:
                score += 2
                feedback_parts.append("‚úÖ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç")
            else:
                feedback_parts.append("‚ö†Ô∏è –û—Ç–≤–µ—Ç –º–æ–≥ –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            keywords = topic.get('keywords', [])
            if keywords:
                found_keywords = sum(1 for kw in keywords if kw.lower() in user_answer.lower())
                if found_keywords > 0:
                    score += min(3, found_keywords)
                    feedback_parts.append(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–Ω—è—Ç–∏–π: {found_keywords}")
                else:
                    feedback_parts.append("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ç–µ–º—ã")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –ø–æ–ø—ã—Ç–∫—É
                score += 2
                feedback_parts.append("üìù –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç")
            
            # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            await checking_msg.delete()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
            feedback = (
                f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º):</b>\n\n"
                f"{''.join(f'{part}<br/>' for part in feedback_parts)}\n"
                f"<b>–ò—Ç–æ–≥–æ: {score}/{max_score} –±–∞–ª–ª–æ–≤</b>\n\n"
                f"<i>üí° –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ AI-—Å–µ—Ä–≤–∏—Å–∞</i>"
            )
            
            return {
                'success': True,
                'score': score,
                'max_score': max_score,
                'feedback': feedback,
                'details': {'fallback': True}
            }
            
        except Exception as e:
            logger.error(f"Error in safe_evaluate for task {task_number}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                await checking_msg.delete()
            except:
                pass
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'success': False,
                'score': 0,
                'max_score': 5,
                'feedback': (
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                ),
                'details': {'error': str(e)}
            }


async def safe_handle_answer_task19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è task19."""
    logger.info(f"safe_handle_answer_task19 called for user {update.effective_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º evaluator –∏–∑ –º–æ–¥—É–ª—è task19
    try:
        from task19.handlers import evaluator
    except ImportError:
        logger.warning("Could not import evaluator from task19")
        evaluator = None
    
    user_answer = update.message.text
    topic = context.user_data.get('current_topic')
    
    if not topic:
        logger.error("No topic found in context")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t19_practice")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
    checking_msg = await show_extended_thinking_animation(
        update.message,
        "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ 19",
        duration=30
    )
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        result = await SafeEvaluatorMixin.safe_evaluate(
            evaluator=evaluator,
            user_answer=user_answer,
            topic=topic,
            task_number=19,
            update=update,
            context=context
        )
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        try:
            await checking_msg.delete()
        except Exception as e:
            logger.debug(f"Could not delete checking message: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        context.user_data.setdefault('task19_results', []).append({
            'topic': topic['title'],
            'score': result['score'],
            'max_score': result['max_score'],
            'timestamp': datetime.now().isoformat()
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            result['feedback'],
            reply_markup=AdaptiveKeyboards.create_result_keyboard(
                score=result['score'],
                max_score=result['max_score'],
                module_code="t19"
            ),
            parse_mode=ParseMode.HTML
        )
        
        logger.info(f"Answer evaluated for user {update.effective_user.id}: {result['score']}/{result['max_score']}")
        
        return states.CHOOSING_MODE
        
    except Exception as e:
        logger.error(f"Error in safe_handle_answer_task19: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            await checking_msg.delete()
        except:
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t19_practice"),
                InlineKeyboardButton("üìù –í –º–µ–Ω—é", callback_data="t19_menu")
            ]])
        )
        
        return states.CHOOSING_MODE


async def safe_handle_answer_task20(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è task20."""
    
    # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    active_module = context.user_data.get('active_module')
    if active_module != 'task20':
        # –ù–µ –Ω–∞—à –º–æ–¥—É–ª—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return states.CHOOSING_MODE
    # –ü–æ–ª—É—á–∞–µ–º evaluator –∏–∑ –º–æ–¥—É–ª—è task20
    try:
        from task20.handlers import evaluator
    except ImportError:
        logger.warning("Could not import evaluator from task20")
        evaluator = None
    
    user_answer = update.message.text
    topic = context.user_data.get('current_topic')
    
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t20_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É
    result = await SafeEvaluatorMixin.safe_evaluate(
        evaluator=evaluator,
        user_answer=user_answer,
        topic=topic,
        task_number=20,
        update=update,
        context=context
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_key = f'task20_practice_{topic["id"]}'
    if stats_key not in context.user_data:
        context.user_data[stats_key] = {
            'attempts': 0,
            'total_score': 0,
            'best_score': 0
        }
    
    stats = context.user_data[stats_key]
    stats['attempts'] += 1
    stats['total_score'] += result['score']
    stats['best_score'] = max(stats['best_score'], result['score'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_text(
        result['feedback'],
        reply_markup=AdaptiveKeyboards.create_result_keyboard(
            score=result['score'],
            max_score=result['max_score'],
            module_code="t20"
        ),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def safe_handle_answer_task25(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è task25."""
    # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    active_module = context.user_data.get('active_module')
    if active_module != 'task25':
        # –ù–µ –Ω–∞—à –º–æ–¥—É–ª—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return states.CHOOSING_MODE
    # –ü–æ–ª—É—á–∞–µ–º evaluator –∏–∑ –º–æ–¥—É–ª—è task25
    try:
        from task25.handlers import evaluator
    except ImportError:
        logger.warning("Could not import evaluator from task25")
        evaluator = None
    
    user_answer = update.message.text
    topic = context.user_data.get('current_topic')
    
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t25_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É
    result = await SafeEvaluatorMixin.safe_evaluate(
        evaluator=evaluator,
        user_answer=user_answer,
        topic=topic,
        task_number=25,
        update=update,
        context=context
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'task25_progress' not in context.user_data:
        context.user_data['task25_progress'] = {}
    
    context.user_data['task25_progress'][topic['id']] = {
        'completed': True,
        'score': result['score'],
        'max_score': result['max_score'],
        'timestamp': datetime.now().isoformat()
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_text(
        result['feedback'],
        reply_markup=AdaptiveKeyboards.create_result_keyboard(
            score=result['score'],
            max_score=result['max_score'],
            module_code="t25"
        ),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

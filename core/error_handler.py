"""
core/error_handler.py
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ callback_query –¥–ª—è –≤—Å–µ–≥–æ –±–æ—Ç–∞.
"""

import logging
import traceback
from functools import wraps
from typing import Callable, Optional, Any, Dict
from datetime import datetime, timezone

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from core import states
from telegram.error import BadRequest, NetworkError, TimedOut

logger = logging.getLogger(__name__)


class ErrorTypes:
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    NETWORK = "network"
    DATABASE = "database"
    VALIDATION = "validation"
    AI_SERVICE = "ai_service"
    PERMISSION = "permission"
    UNKNOWN = "unknown"


class BotError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ –±–æ—Ç–∞."""
    def __init__(self, message: str, error_type: str = ErrorTypes.UNKNOWN, user_friendly_message: Optional[str] = None):
        super().__init__(message)
        self.error_type = error_type
        self.user_friendly_message = user_friendly_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


class ValidationError(BotError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    def __init__(self, message: str, field: Optional[str] = None):
        super().__init__(message, ErrorTypes.VALIDATION)
        self.field = field


class AIServiceError(BotError):
    """–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞."""
    def __init__(self, message: str, service: str = "YandexGPT"):
        super().__init__(
            message, 
            ErrorTypes.AI_SERVICE,
            "AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        self.service = service


def safe_handler(
    return_on_error: Any = ConversationHandler.END,
    answer_callback: bool = True,
    log_errors: bool = True,
    notify_user: bool = True
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ handlers.
    
    Args:
        return_on_error: –ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        answer_callback: –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ callback_query
        log_errors: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏
        notify_user: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = None
            if getattr(update, "effective_user", None):
                user_id = update.effective_user.id
            elif getattr(update, "message", None) and getattr(update.message, "from_user", None):
                user_id = update.message.from_user.id
            elif getattr(update, "callback_query", None) and getattr(update.callback_query, "from_user", None):
                user_id = update.callback_query.from_user.id
            user_id = user_id or "Unknown"
            handler_name = func.__name__
            
            try:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query –µ—Å–ª–∏ –µ—Å—Ç—å
                if answer_callback and update.callback_query:
                    try:
                        await update.callback_query.answer()
                    except BadRequest as e:
                        if "query is too old" not in str(e):
                            logger.warning(f"Failed to answer callback query: {e}")
                
                # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                return await func(update, context, *args, **kwargs)
                
            except BotError as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞
                if log_errors:
                    logger.error(
                        f"BotError in {handler_name} for user {user_id}: "
                        f"[{e.error_type}] {e}"
                    )
                
                if notify_user:
                    await _notify_user_about_error(update, e.user_friendly_message)
                
                return return_on_error
                
            except (NetworkError, TimedOut) as e:
                # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
                if log_errors:
                    logger.error(
                        f"Network error in {handler_name} for user {user_id}: {e}"
                    )
                
                if notify_user:
                    await _notify_user_about_error(
                        update, 
                        "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
                
                return return_on_error
                
            
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –æ—à–∏–±–∫–∞
                if hasattr(context, 'error_handled') and context.error_handled:
                    return return_on_error
                    
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                context.error_handled = True
            except Exception as e:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
                if log_errors:
                    # logger.exception already logs the traceback
                    logger.exception(
                        f"Unexpected error in {handler_name} for user {user_id}: {e}"
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                _save_error_info(context, user_id, handler_name, e)
                
                if notify_user:
                    await _notify_user_about_error(
                        update,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º."
                    )
                
                return return_on_error
                
        return wrapper
    return decorator


async def _notify_user_about_error(update: Update, message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ."""
    error_keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_last_action"),
        InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="to_main_menu")
    ]])
    
    try:
        if update.callback_query:
            # –ï—Å–ª–∏ —ç—Ç–æ callback, –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=error_keyboard
                )
            except BadRequest:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await update.callback_query.message.reply_text(
                    message,
                    reply_markup=error_keyboard
                )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await update.message.reply_text(
                message,
                reply_markup=error_keyboard
            )
    except Exception as e:
        logger.error(f"Failed to notify user about error: {e}")


def _save_error_info(context: ContextTypes.DEFAULT_TYPE, user_id: Any, handler: str, error: Exception):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
    error_info = {
        'user_id': user_id,
        'handler': handler,
        'error_type': type(error).__name__,
        'error_message': str(error),
        'timestamp': datetime.now(timezone.utc).isoformat(),
        'traceback': traceback.format_exc()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_data –≤–º–µ—Å—Ç–æ bot_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    if 'recent_errors' not in context.user_data:
        context.user_data['recent_errors'] = []
    
    context.bot_data['recent_errors'].append(error_info)
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ—à–∏–±–æ–∫
    if len(context.bot_data['recent_errors']) > 100:
        context.bot_data['recent_errors'] = context.bot_data['recent_errors'][-100:]


class CallbackAnswerer:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query."""
    
    def __init__(self, query, default_text: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
        self.query = query
        self.default_text = default_text
        self.answered = False
    
    async def __aenter__(self):
        """–û—Ç–≤–µ—á–∞–µ–º –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        if self.query:
            try:
                await self.query.answer(self.default_text)
                self.answered = True
            except BadRequest as e:
                if "query is too old" not in str(e):
                    logger.warning(f"Failed to answer callback query: {e}")
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        if self.query and not self.answered:
            try:
                if exc_type:
                    # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
                    await self.query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
                else:
                    await self.query.answer()
            except:
                pass
    
    async def answer(self, text: Optional[str] = None, show_alert: bool = False):
        """–†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."""
        if self.query and not self.answered:
            try:
                await self.query.answer(text, show_alert=show_alert)
                self.answered = True
            except BadRequest:
                pass


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def global_error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.error(f"Exception while handling an update: {context.error}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
    user_id = None
    if update and update.effective_user:
        user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    _save_error_info(
        context, 
        user_id, 
        "global_error_handler", 
        context.error
    )
    
    # –ü—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –µ—Å–ª–∏ –µ—Å—Ç—å
        if update.callback_query:
            try:
                await update.callback_query.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    show_alert=True
                )
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        message = (
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: <code>{type(context.error).__name__}</code>"
        )
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
        ]])
        
        try:
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    message,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            elif update.message:
                await update.message.reply_text(
                    message,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"Failed to send error message to user: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    if isinstance(context.error, (AIServiceError, AttributeError, KeyError)):
        await _notify_admins_about_critical_error(context, update)


async def _notify_admins_about_critical_error(context: ContextTypes.DEFAULT_TYPE, update: Update):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö."""
    from core.admin_tools import admin_manager
    
    admin_ids = admin_manager.get_admin_list()
    if not admin_ids:
        return
    
    error_type = type(context.error).__name__
    user_info = "Unknown"
    if update and update.effective_user:
        user_info = f"@{update.effective_user.username or update.effective_user.id}"
    
    message = (
        f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n\n"
        f"<b>–¢–∏–ø:</b> <code>{error_type}</code>\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}\n"
        f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{str(context.error)[:200]}</code>\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    try:
        await context.bot.send_message(
            chat_id=admin_ids[0],
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Failed to notify admin about critical error: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
def register_error_handler(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫."""
    app.add_error_handler(global_error_handler)
    logger.info("Global error handler registered")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query
def auto_answer_callback(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query."""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        async with CallbackAnswerer(update.callback_query):
            return await func(update, context, *args, **kwargs)
    return wrapper


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

# 1. –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
@safe_handler()
async def some_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    pass


# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
@safe_handler(
    return_on_error=states.CHOOSING_MODE,
    notify_user=True
)
async def another_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    pass


# 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CallbackAnswerer –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
async def complex_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with CallbackAnswerer(update.callback_query) as answerer:
        # –ö–∞–∫–∞—è-—Ç–æ –ª–æ–≥–∏–∫–∞
        result = await some_async_operation()
        
        if result.success:
            await answerer.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!", show_alert=True)
        else:
            await answerer.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
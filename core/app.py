# core/app.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π

import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from typing import Optional, Dict, Any
from datetime import datetime
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, PicklePersistence, ContextTypes
from telegram.constants import ParseMode
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core import config, db
from payment import init_payment_module

logger = logging.getLogger(__name__)

async def handle_my_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager')
    
    if not subscription_manager:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    subscription_info = await subscription_manager.get_subscription_info(user_id)
    
    if subscription_info:
        # –ö–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if subscription_info.get('type') == 'modular':
            text = "üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            
            for module in subscription_info.get('modules', []):
                text += f"   ‚Ä¢ {module}\n"
            
            text += f"\nüìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info.get('expires_at').strftime('%d.%m.%Y')}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            text += "\nüìä <b>–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            modules_to_check = ['test_part', 'task19', 'task20', 'task24', 'task25']
            module_names = {
                'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞
                'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
            }
            
            for module_code in modules_to_check:
                has_access = await subscription_manager.check_module_access(user_id, module_code)
                status = "‚úÖ" if has_access else "‚ùå"
                text += f"   {status} {module_names.get(module_code, module_code)}\n"
        else:
            # –ï–¥–∏–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            text = "üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            text += f"‚úÖ <b>–ü–ª–∞–Ω:</b> {subscription_info.get('plan_name')}\n"
            text += f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info.get('expires_at').strftime('%d.%m.%Y')}\n"
    else:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∏ –≤ show_modular_interface
        text = "üíé <b>–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        text += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö
        text += "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> ‚Äî 1‚ÇΩ\n"
        text += "   ‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π\n"
        text += "   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã\n\n"
        
        text += "üéØ <b>–ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª</b> ‚Äî 499‚ÇΩ/–º–µ—Å\n"
        text += "   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 19, 20, 25\n"
        text += "   <i>–≠–∫–æ–Ω–æ–º–∏—è 98‚ÇΩ</i>\n\n"
        
        text += "üëë <b>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> ‚Äî 999‚ÇΩ/–º–µ—Å\n"
        text += "   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏\n"
        text += "   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        text += "   <i>–≠–∫–æ–Ω–æ–º–∏—è 346‚ÇΩ</i>\n\n"
        
        text += "üìö –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏"
    
    buttons = []
    
    if not subscription_info:
        buttons.append([InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")])
    else:
        buttons.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")])
    
    buttons.extend([
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_statistics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )

async def post_init(application: Application) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è post-init...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db.init_db()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(handle_my_subscription, pattern="^my_subscription$"))
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    # –ú–æ–¥—É–ª—å —Å–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç webhook
    await init_payment_module(application)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π-–ø–ª–∞–≥–∏–Ω–æ–≤
    try:
        from core import plugin_loader
        if hasattr(plugin_loader, 'load_modules'):
            plugin_loader.load_modules(application)
        else:
            # –ï—Å–ª–∏ load_modules –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º discover_plugins
            plugin_loader.discover_plugins()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã –≤—Ä—É—á–Ω—É—é
            for plugin in plugin_loader.PLUGINS:
                try:
                    logger.info(f"Registering plugin: {plugin.title}")
                    plugin.register(application)
                except Exception as e:
                    logger.error(f"Failed to register plugin {plugin.code}: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            application.add_handler(
                CallbackQueryHandler(show_plugin_menu, pattern="^main_menu$")
            )
    except Exception as e:
        logger.error(f"Error loading plugins: {e}")
        logger.info("Bot will work without additional plugins")
    
    logger.info("Post-init –∑–∞–≤–µ—Ä—à–µ–Ω")

async def post_shutdown(application: Application) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è shutdown...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await db.close_db()
    
    logger.info("Shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")

async def start_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    args = context.args
    
    if args and len(args) > 0:
        param = args[0]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        if param.startswith('payment_success_'):
            order_id = param.replace('payment_success_', '')
            await update.message.reply_text(
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!</b>\n\n"
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_subscriptions –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.",
                parse_mode=ParseMode.HTML
            )
            return
            
        elif param.startswith('payment_fail_'):
            order_id = param.replace('payment_fail_', '')
            await update.message.reply_text(
                "‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –µ—â–µ —Ä–∞–∑.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞.",
                parse_mode=ParseMode.HTML
            )
            return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.ensure_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription_manager = context.bot_data.get('subscription_manager')
    if subscription_manager:
        subscription_info = await subscription_manager.get_subscription_info(user_id)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        if subscription_info:
            if subscription_info.get('type') == 'modular':
                # –î–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                modules = subscription_info.get('modules', [])
                if modules:
                    status_text = f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–¥—É–ª–∏:\n"
                    for module in modules:
                        status_text += f"   ‚Ä¢ {module}\n"
                    status_text += f"\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info.get('expires_at').strftime('%d.%m.%Y')}"
                else:
                    status_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            else:
                # –î–ª—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
                plan_name = subscription_info.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')
                status_text = f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {plan_name}"
                status_text += f"\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info.get('expires_at').strftime('%d.%m.%Y')}"
        else:
            status_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    else:
        status_text = ""
    
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é!

{status_text}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
"""
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
    menu_keyboard = await show_main_menu_with_access(context, user_id)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=menu_keyboard,
        parse_mode="HTML"
    )

async def show_main_menu_with_access(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> InlineKeyboardMarkup:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º."""
    from core.plugin_loader import PLUGINS
    from payment.config import SUBSCRIPTION_MODE
    
    subscription_manager = context.bot_data.get('subscription_manager')
    buttons = []
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–æ–≤ –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ –º–æ–¥—É–ª–µ–π
    plugin_to_module = {
        'test_part': 'test_part',
        'task19': 'task19', 
        'task20': 'task20',
        'task24': 'task24',
        'task25': 'task25'
    }
    
    for plugin in PLUGINS:
        module_code = plugin_to_module.get(plugin.code)
        
        if module_code and subscription_manager and SUBSCRIPTION_MODE == 'modular':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
            has_access = await subscription_manager.check_module_access(user_id, module_code)
            
            if has_access:
                # –î–æ—Å—Ç—É–ø –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –≥–∞–ª–æ—á–∫–æ–π
                button_text = f"‚úÖ {plugin.title}"
            else:
                # –î–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∑–∞–º–∫–æ–º
                button_text = f"üîí {plugin.title}"
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –º–æ–¥—É–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            button_text = plugin.title
        
        buttons.append([InlineKeyboardButton(
            button_text,
            callback_data=f"choose_{plugin.code}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons.extend([
        [InlineKeyboardButton("üí≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])
    
    return InlineKeyboardMarkup(buttons)

async def handle_my_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager')
    
    if not subscription_manager:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    subscription_info = await subscription_manager.get_subscription_info(user_id)
    
    if subscription_info:
        if subscription_info.get('type') == 'modular':
            # –ú–æ–¥—É–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            text = "üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            
            for module in subscription_info.get('modules', []):
                text += f"   ‚Ä¢ {module}\n"
            
            text += f"\nüìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info.get('expires_at').strftime('%d.%m.%Y')}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            text += "\nüìä <b>–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            modules_to_check = ['test_part', 'task19', 'task20', 'task24', 'task25']
            module_names = {
                'test_part': '–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': '–ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': '–ó–∞–¥–∞–Ω–∏–µ 20',
                'task24': '–ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '–ó–∞–¥–∞–Ω–∏–µ 25'
            }
            
            for module_code in modules_to_check:
                has_access = await subscription_manager.check_module_access(user_id, module_code)
                status = "‚úÖ" if has_access else "‚ùå"
                text += f"   {status} {module_names.get(module_code, module_code)}\n"
        else:
            # –ï–¥–∏–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            text = "üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            text += f"‚úÖ <b>–ü–ª–∞–Ω:</b> {subscription_info.get('plan_name')}\n"
            text += f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info.get('expires_at').strftime('%d.%m.%Y')}\n"
    else:
        text = "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        text += "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º:\n\n"
        text += "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n"
        text += "‚Ä¢ –ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª - –∑–∞–¥–∞–Ω–∏—è 19, 20, 25\n"
        text += "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - –≤—Å–µ –º–æ–¥—É–ª–∏\n"
        text += "‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 7 –¥–Ω–µ–π\n"
    
    buttons = []
    
    if not subscription_info:
        buttons.append([InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_payment_plans")])
    
    buttons.extend([
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_statistics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è show_main_menu
def show_main_menu(context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    from core.plugin_loader import build_main_menu
    return build_main_menu()

async def help_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    try:
        from payment.config import SUBSCRIPTION_MODE, MODULE_PLANS, LEGACY_SUBSCRIPTION_PLANS
        
        if SUBSCRIPTION_MODE == 'modular':
            pricing_text = """
üíé –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö (–º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞):
- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
- –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: –æ—Ç 149‚ÇΩ/–º–µ—Å
- –ü–∞–∫–µ—Ç—ã: –æ—Ç 499‚ÇΩ/–º–µ—Å
- –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: 999‚ÇΩ/–º–µ—Å
"""
        else:
            plans = LEGACY_SUBSCRIPTION_PLANS
            pricing_text = f"""
üíé –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö:
- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
- –ë–∞–∑–æ–≤–∞—è ({plans['basic_month']['price_rub']}‚ÇΩ/–º–µ—Å): 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
- Pro ({plans['pro_month']['price_rub']}‚ÇΩ/–º–µ—Å): –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
- Pro –¥–æ –ï–ì–≠ ({plans['pro_ege']['price_rub']}‚ÇΩ): –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–æ –ï–ì–≠ 2025
"""
    except:
        # Fallback
        pricing_text = """
üíé –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö:
- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
- –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
"""
    
    help_text = f"""
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

{pricing_text}

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @your_support_bot
    """
    await update.message.reply_text(help_text, parse_mode="HTML")

async def menu_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    try:
        from core import plugin_loader
        if hasattr(plugin_loader, 'build_main_menu'):
            menu = plugin_loader.build_main_menu()
            await update.message.reply_text(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
                reply_markup=menu
            )
        else:
            await update.message.reply_text(
                "üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
    except Exception as e:
        logger.error(f"Error showing menu: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

async def show_plugin_menu(update: Update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–ª–∞–≥–∏–Ω–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    try:
        from core import plugin_loader
        menu = plugin_loader.build_main_menu()
        await query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=menu
        )
    except Exception as e:
        logger.error(f"Error showing plugin menu: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not hasattr(config, 'BOT_TOKEN') or not config.BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        builder = Application.builder()
        builder.token(config.BOT_TOKEN)
        
        # –î–æ–±–∞–≤–ª—è–µ–º persistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        #persistence = PicklePersistence(filepath="bot_persistence.pickle")
        #builder.persistence(persistence)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        builder.post_init(post_init)
        builder.post_shutdown(post_shutdown)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if hasattr(config, 'PROXY_URL') and config.PROXY_URL:
            from telegram.request import HTTPXRequest
            builder.request(HTTPXRequest(proxy=config.PROXY_URL))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = builder.build()
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()
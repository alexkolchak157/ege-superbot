import sys
import os
import logging
from telegram.ext import Application, CommandHandler
from core.plugin_loader import discover_plugins, build_main_menu, PLUGINS
from core.menu_handlers import register_global_handlers
from core.menu_handlers import handle_to_main_menu
from core.admin_tools import register_admin_handlers
from core.config import BOT_TOKEN
from core import db
from core.error_handler import register_error_handler
from core.state_validator import state_validator  # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def post_init(application: Application) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
    await db.init_db()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤
    for plugin in PLUGINS:
        if hasattr(plugin, 'post_init'):
            await plugin.post_init(application)
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    logger.info(f"State validator initialized with {len(state_validator.allowed_transitions)} state transitions")

async def post_shutdown(application: Application) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    await db.close_db()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º AI —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    from task19.handlers import evaluator as task19_evaluator
    from task20.handlers import evaluator as task20_evaluator
    from task25.handlers import evaluator as task25_evaluator
    
    for evaluator in [task19_evaluator, task20_evaluator, task25_evaluator]:
        if evaluator and hasattr(evaluator, 'cleanup'):
            try:
                await evaluator.cleanup()
            except:
                pass
    
    logger.info("All resources cleaned up")

async def start(update, context):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start."""
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=build_main_menu(),
    )
    context.user_data.clear()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
    if update.effective_user:
        state_validator.clear_state(update.effective_user.id)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    print("üîç –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã...")
    discover_plugins()
    
    print("‚öôÔ∏è –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    app = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .post_shutdown(post_shutdown)
        .build()
    )

    print("üåê –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
    register_global_handlers(app)

    print("üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
    register_admin_handlers(app)
    
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start...")
    app.add_handler(CommandHandler("start", start))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    async def state_stats(update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
        from core.admin_tools import admin_manager
        
        if not admin_manager.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        stats = state_validator.get_stats()
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π</b>\n\n"
        text += f"–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['total_transitions']}\n"
        text += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['unique_transitions']}\n"
        text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n\n"
        
        if stats['top_transitions']:
            text += "<b>–¢–æ–ø –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b>\n"
            for transition, count in stats['top_transitions'][:10]:
                text += f"‚Ä¢ {transition}: {count}\n"
        
        await update.message.reply_text(text, parse_mode='HTML')
    
    app.add_handler(CommandHandler("state_stats", state_stats))
    
    print("üîå –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã...")
    for plugin in PLUGINS:
        plugin.register(app)
    
    register_error_handler(app)
    
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
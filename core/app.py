# core/app.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π

import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from typing import Optional, Dict, Any
from datetime import datetime
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, PicklePersistence, ContextTypes
from telegram.constants import ParseMode
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core import config, db
from payment import init_payment_module

logger = logging.getLogger(__name__)

async def handle_my_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager')
    
    if not subscription_manager:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    subscription_info = await subscription_manager.get_subscription_info(user_id)
    
    if subscription_info:
        # –ö–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if subscription_info.get('type') == 'modular':
            text = "üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            
            for module in subscription_info.get('modules', []):
                text += f"   ‚Ä¢ {module}\n"
            
            text += f"\nüìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info.get('expires_at').strftime('%d.%m.%Y')}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            text += "\nüìä <b>–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            modules_to_check = ['test_part', 'task19', 'task20', 'task24', 'task25']
            module_names = {
                'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞
                'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
            }
            
            for module_code in modules_to_check:
                has_access = await subscription_manager.check_module_access(user_id, module_code)
                status = "‚úÖ" if has_access else "‚ùå"
                text += f"   {status} {module_names.get(module_code, module_code)}\n"
        else:
            # –ï–¥–∏–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            text = "üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            text += f"‚úÖ <b>–ü–ª–∞–Ω:</b> {subscription_info.get('plan_name')}\n"
            text += f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info.get('expires_at').strftime('%d.%m.%Y')}\n"
    else:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∏ –≤ show_modular_interface
        text = "üíé <b>–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        text += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö
        text += "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> ‚Äî 1‚ÇΩ\n"
        text += "   ‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π\n"
        text += "   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã\n\n"
        
        text += "üéØ <b>–ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª</b> ‚Äî 499‚ÇΩ/–º–µ—Å\n"
        text += "   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 19, 20, 25\n"
        text += "   <i>–≠–∫–æ–Ω–æ–º–∏—è 98‚ÇΩ</i>\n\n"
        
        text += "üëë <b>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> ‚Äî 999‚ÇΩ/–º–µ—Å\n"
        text += "   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏\n"
        text += "   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        text += "   <i>–≠–∫–æ–Ω–æ–º–∏—è 346‚ÇΩ</i>\n\n"
        
        text += "üìö –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏"
    
    buttons = []
    
    if not subscription_info:
        buttons.append([InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_start")])  # –ò–∑–º–µ–Ω–∏—Ç—å —Å "show_payment_plans"
    else:
        buttons.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")])
    
    buttons.extend([
        #[InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_statistics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )

async def post_init(application: Application) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è post-init...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db.init_db()
    try:
        from core.admin_tools import init_price_tables
        await init_price_tables()
        logger.info("Price tables initialized")
    except Exception as e:
        logger.error(f"Failed to initialize price tables: {e}")
    try:
        from core.user_middleware import register_user_middleware
        register_user_middleware(application)
        logger.info("User middleware registered")
    except Exception as e:
        logger.error(f"Failed to register user middleware: {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É cancel
    async def global_cancel(update: Update, context):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é
        try:
            from core.plugin_loader import build_main_menu
            kb = build_main_menu()
            
            await update.message.reply_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
                reply_markup=kb,
                parse_mode=ParseMode.HTML
            )
        except:
            await update.message.reply_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(handle_my_subscription, pattern="^my_subscription$"))
    application.add_handler(CommandHandler("cancel", global_cancel), group=10)
    # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    try:
        from core.menu_handlers import register_global_handlers
        register_global_handlers(application)
        logger.info("Registered global menu handlers")
    except ImportError as e:
        logger.error(f"Could not import menu_handlers: {e}")
    except Exception as e:
        logger.error(f"Error registering global handlers: {e}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    try:
        from core.admin_tools import register_admin_handlers
        register_admin_handlers(application)
        logger.info("Admin handlers registered")
    except ImportError as e:
        logger.error(f"Could not import admin_tools: {e}")
    except Exception as e:
        logger.error(f"Error registering admin handlers: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    await init_payment_module(application)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π-–ø–ª–∞–≥–∏–Ω–æ–≤
    try:
        from core import plugin_loader
        if hasattr(plugin_loader, 'load_modules'):
            plugin_loader.load_modules(application)
        else:
            # –ï—Å–ª–∏ load_modules –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º discover_plugins
            plugin_loader.discover_plugins()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã –≤—Ä—É—á–Ω—É—é
            for plugin in plugin_loader.PLUGINS:
                try:
                    logger.info(f"Registering plugin: {plugin.title}")
                    plugin.register(application)
                except Exception as e:
                    logger.error(f"Failed to register plugin {plugin.code}: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            application.add_handler(
                CallbackQueryHandler(show_plugin_menu, pattern="^main_menu$")
            )
    except Exception as e:
        logger.error(f"Error loading plugins: {e}")
        logger.info("Bot will work without additional plugins")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    if 'plugin_post_init_tasks' in application.bot_data:
        for plugin in application.bot_data['plugin_post_init_tasks']:
            try:
                logger.info(f"Running post_init for plugin: {plugin.title}")
                await plugin.post_init(application)
                logger.info(f"‚úÖ Plugin {plugin.title} initialized")
            except Exception as e:
                logger.error(f"Failed to initialize plugin {plugin.title}: {e}")
            
    logger.info("Post-init –∑–∞–≤–µ—Ä—à–µ–Ω")

async def post_shutdown(application: Application) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è shutdown...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await db.close_db()
    
    logger.info("Shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")

async def start_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await db.update_user_info(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    args = context.args
    
    if args and len(args) > 0:
        param = args[0]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        if param.startswith('payment_success_'):
            order_id = param.replace('payment_success_', '')
            await update.message.reply_text(
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!</b>\n\n"
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_subscriptions –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.",
                parse_mode=ParseMode.HTML
            )
            return
            
        elif param.startswith('payment_fail_'):
            order_id = param.replace('payment_fail_', '')
            await update.message.reply_text(
                "‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –µ—â–µ —Ä–∞–∑.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞.",
                parse_mode=ParseMode.HTML
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.ensure_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription_manager = context.bot_data.get('subscription_manager')
    subscription_info = None
    
    if subscription_manager:
        subscription_info = await subscription_manager.get_subscription_info(user_id)
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    user_name = user.first_name or "–¥—Ä—É–≥"
    current_hour = datetime.now().hour
    
    if 5 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= current_hour < 17:
        greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 17 <= current_hour < 23:
        greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        greeting = "–ü—Ä–∏–≤–µ—Ç"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if subscription_info and subscription_info.get('is_active'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        expires = subscription_info.get('expires_at').strftime('%d.%m.%Y')
        welcome_text = f"""
{greeting}, {user_name}! üëã

<b>‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expires}</b>

üìö <b>–í—Å—ë –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!</b>
–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Ç–∞—Å–∫–∞—Ç—å —Å–±–æ—Ä–Ω–∏–∫–∏ –∏ –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –∫–æ–Ω—Ü–µ —É—á–µ–±–Ω–∏–∫–∞.

<b>üí° –°–æ–≤–µ—Ç –¥–Ω—è:</b> –ü—Ä–∞–∫—Ç–∏–∫—É–π—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç ‚Äî –µ–¥–µ—à—å –≤ –∞–≤—Ç–æ–±—É—Å–µ –∏–ª–∏ –∂–¥—ë—à—å –¥—Ä—É–≥–∞? 
–ö–∞–∂–¥–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è –º–∏–Ω—É—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"""
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        welcome_text = f"""
{greeting}, {user_name}! üëã

<b>üéì –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é –≤ —Ç–≤–æ—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ!</b>

<b>üÜì –ë–ï–°–ü–õ–ê–¢–ù–û –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å:</b>
- 1000+ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Ä–∞–∑–±–æ—Ä–∞–º–∏
- –í—Å–µ —Ç–µ–º—ã –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞  
- –†–µ–∂–∏–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –±–ª–æ–∫–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º
- –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

<b>üíé –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç 199‚ÇΩ/–º–µ—Å:</b>

ü§ñ <b>–ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å–µ–∫—É–Ω–¥—ã</b> ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–≤–æ–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –§–ò–ü–ò. –ù–∏–∫–∞–∫–∏—Ö "–ø—Ä–∞–≤–∏–ª—å–Ω–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ" ‚Äî –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä, –∫–∞–∫ –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞.

üìö <b>–í—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ</b> ‚Äî –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤. –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Ç–∞—Å–∫–∞—Ç—å —Å–±–æ—Ä–Ω–∏–∫–∏ –∏ –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –∫–æ–Ω—Ü–µ —É—á–µ–±–Ω–∏–∫–∞.

‚ö° <b>–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</b> ‚Äî –µ–¥–µ—à—å –≤ –∞–≤—Ç–æ–±—É—Å–µ? –†–µ—à–∞–π —Ç–µ—Å—Ç—ã. –ñ–¥—ë—à—å –¥—Ä—É–≥–∞? –¢—Ä–µ–Ω–∏—Ä—É–π –∑–∞–¥–∞–Ω–∏–µ 24. –ö–∞–∂–¥–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è –º–∏–Ω—É—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

üìä <b>–£–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –±–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–≤–æ–∏ –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–Ω–∞–Ω–∏—è—Ö!

üí∞ <b>–ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã</b> ‚Äî –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Å–µ–≥–æ –∑–∞ 1‚ÇΩ, –ø–æ—Ç–æ–º –æ—Ç 199‚ÇΩ/–º–µ—Å –∑–∞ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏. –ü–ª–∞—Ç–∏—à—å —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å.

<b>üëá –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî —Ç–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞!</b>"""
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –¥–æ—Å—Ç—É–ø–∞
    menu_keyboard = await show_main_menu_with_access(context, user_id)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=menu_keyboard,
        parse_mode="HTML"
    )
        
        if subscription_info:
            if subscription_info.get('type') == 'modular':
                modules = subscription_info.get('modules', [])
                if modules:
                    status_text = f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–¥—É–ª–∏:\n"
                    for module in modules:
                        status_text += f"   ‚Ä¢ {module}\n"
                    status_text += f"\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info.get('expires_at').strftime('%d.%m.%Y')}"
                else:
                    status_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            else:
                plan_name = subscription_info.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')
                status_text = f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {plan_name}"
                status_text += f"\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info.get('expires_at').strftime('%d.%m.%Y')}"
        else:
            status_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    else:
        status_text = ""
    
    # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
    welcome_name = user.first_name or "–¥—Ä—É–≥"
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {welcome_name}!

–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é.

{status_text}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
"""
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
    menu_keyboard = await show_main_menu_with_access(context, user_id)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=menu_keyboard,
        parse_mode="HTML"
    )

async def show_main_menu_with_access(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> InlineKeyboardMarkup:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –¥–æ—Å—Ç—É–ø–∞."""
    
    subscription_manager = context.bot_data.get('subscription_manager')
    buttons = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
    from core import plugin_loader
    plugins = plugin_loader.get_active_plugins()
    
    for plugin in plugins:
        if plugin.code == 'test_part':
            # –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            icon = "üÜì"
            badge = " –ë–ï–°–ü–õ–ê–¢–ù–û"
            text = f"{icon} {plugin.title}{badge}"
            
        elif subscription_manager:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º –º–æ–¥—É–ª—è–º
            has_access = await subscription_manager.check_module_access(user_id, plugin.code)
            
            if has_access:
                icon = "‚úÖ"
                text = f"{icon} {plugin.title}"
            else:
                icon = "üîí"
                text = f"{icon} {plugin.title}"
        else:
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            icon = "üìö"
            text = f"{icon} {plugin.title}"
        
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"choose_{plugin.code}"
        )
        buttons.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    system_buttons = []
    
    if subscription_manager:
        subscription_info = await subscription_manager.get_subscription_info(user_id)
        
        if subscription_info:
            system_buttons.append(
                InlineKeyboardButton("üí≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscriptions")
            )
        else:
            system_buttons.append(
                InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_start")
            )
    
    system_buttons.append(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="global_stats")
    )
    
    if system_buttons:
        buttons.append(system_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    buttons.append([
        InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    ])
    
    return InlineKeyboardMarkup(buttons)

async def handle_my_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager')
    
    if not subscription_manager:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    subscription_info = await subscription_manager.get_subscription_info(user_id)
    
    if subscription_info:
        if subscription_info.get('type') == 'modular':
            # –ú–æ–¥—É–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            text = "üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            
            for module in subscription_info.get('modules', []):
                text += f"   ‚Ä¢ {module}\n"
            
            text += f"\nüìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info.get('expires_at').strftime('%d.%m.%Y')}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            text += "\nüìä <b>–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            modules_to_check = ['test_part', 'task19', 'task20', 'task24', 'task25']
            module_names = {
                'test_part': '–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': '–ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': '–ó–∞–¥–∞–Ω–∏–µ 20',
                'task24': '–ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '–ó–∞–¥–∞–Ω–∏–µ 25'
            }
            
            for module_code in modules_to_check:
                has_access = await subscription_manager.check_module_access(user_id, module_code)
                status = "‚úÖ" if has_access else "‚ùå"
                text += f"   {status} {module_names.get(module_code, module_code)}\n"
        else:
            # –ï–¥–∏–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            text = "üí≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            text += f"‚úÖ <b>–ü–ª–∞–Ω:</b> {subscription_info.get('plan_name')}\n"
            text += f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription_info.get('expires_at').strftime('%d.%m.%Y')}\n"
    else:
        text = "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        text += "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º:\n\n"
        text += "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n"
        text += "‚Ä¢ –ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª - –∑–∞–¥–∞–Ω–∏—è 19, 20, 25\n"
        text += "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - –≤—Å–µ –º–æ–¥—É–ª–∏\n"
        text += "‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 7 –¥–Ω–µ–π\n"
    
    buttons = []
    
    if not subscription_info:
        buttons.append([InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_start")])

    # –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –Ω–µ—ë –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    # –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è show_main_menu
def show_main_menu(context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    from core.plugin_loader import build_main_menu
    return build_main_menu()

async def help_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    try:
        from payment.config import SUBSCRIPTION_MODE, MODULE_PLANS, LEGACY_SUBSCRIPTION_PLANS
        
        if SUBSCRIPTION_MODE == 'modular':
            pricing_text = """
üíé –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö (–º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞):
- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
- –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: –æ—Ç 149‚ÇΩ/–º–µ—Å
- –ü–∞–∫–µ—Ç—ã: –æ—Ç 499‚ÇΩ/–º–µ—Å
- –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: 999‚ÇΩ/–º–µ—Å
"""
        else:
            plans = LEGACY_SUBSCRIPTION_PLANS
            pricing_text = f"""
üíé –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö:
- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
- –ë–∞–∑–æ–≤–∞—è ({plans['basic_month']['price_rub']}‚ÇΩ/–º–µ—Å): 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
- Pro ({plans['pro_month']['price_rub']}‚ÇΩ/–º–µ—Å): –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
- Pro –¥–æ –ï–ì–≠ ({plans['pro_ege']['price_rub']}‚ÇΩ): –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–æ –ï–ì–≠ 2025
"""
    except:
        # Fallback
        pricing_text = """
üíé –û –ø–æ–¥–ø–∏—Å–∫–∞—Ö:
- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
- –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
"""
    
    help_text = f"""
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

{pricing_text}

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @obshestvonapalcahsupport
    """
    await update.message.reply_text(help_text, parse_mode="HTML")

async def menu_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    user = update.effective_user
    
    # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ /menu
    await db.update_user_info(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
        user_id = update.effective_user.id
        try:
            from core.app import show_main_menu_with_access
            kb = await show_main_menu_with_access(context, user_id)
        except:
            # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é
            from core.plugin_loader import build_main_menu
            kb = build_main_menu()
        
        text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠:"
        
        # –î–æ–±–∞–≤–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if user.first_name:
            text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n" + text
        
        await update.message.reply_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Error in menu_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
        )

async def show_plugin_menu(update: Update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–ª–∞–≥–∏–Ω–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    try:
        from core import plugin_loader
        menu = plugin_loader.build_main_menu()
        await query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=menu
        )
    except Exception as e:
        logger.error(f"Error showing plugin menu: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not hasattr(config, 'BOT_TOKEN') or not config.BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        builder = Application.builder()
        builder.token(config.BOT_TOKEN)
        
        persistence = PicklePersistence(
            filepath="bot_persistence.pickle",
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            update_interval=30
        )
        builder.persistence(persistence)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        builder.post_init(post_init)
        builder.post_shutdown(post_shutdown)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if hasattr(config, 'PROXY_URL') and config.PROXY_URL:
            from telegram.request import HTTPXRequest
            builder.request(HTTPXRequest(proxy=config.PROXY_URL))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = builder.build()
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()
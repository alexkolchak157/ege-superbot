"""
Freemium –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ AI-–ø—Ä–æ–≤–µ—Ä–æ–∫.

–õ–æ–≥–∏–∫–∞:
- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 3 AI-–ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –¥–µ–Ω—å
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
- –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
"""

import logging
from typing import Tuple, Dict, Optional, Any
from core import db

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
FREE_DAILY_LIMIT = 3  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å


class FreemiumManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ freemium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, subscription_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

        Args:
            subscription_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.subscription_manager = subscription_manager
        logger.info(f"FreemiumManager initialized with daily limit: {FREE_DAILY_LIMIT}")

    async def check_ai_limit(
        self,
        user_id: int,
        module_code: Optional[str] = None
    ) -> Tuple[bool, int, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI-–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            module_code: –ö–æ–¥ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'task19', 'task24')

        Returns:
            Tuple: (can_use, remaining, limit_msg)
                - can_use: –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI-–ø—Ä–æ–≤–µ—Ä–∫—É
                - remaining: –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å (999 –¥–ª—è premium)
                - limit_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            has_subscription = False
            if self.subscription_manager and module_code:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º module_code –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ fallback
                # –ï—Å–ª–∏ module_code –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                has_subscription = await self.subscription_manager.check_module_access(
                    user_id, module_code
                )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ - –±–µ–∑–ª–∏–º–∏—Ç
            if has_subscription:
                return (True, 999, "‚ú® –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")

            # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            checks_used = await db.get_daily_ai_checks_used(user_id)
            remaining = FREE_DAILY_LIMIT - checks_used

            if remaining > 0:
                msg = f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {remaining}/{FREE_DAILY_LIMIT}"
                return (True, remaining, msg)
            else:
                msg = (
                    f"‚è∞ <b>–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {FREE_DAILY_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
                    "üíé <b>–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>\n"
                    "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ:\n"
                    "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ AI-–ø—Ä–æ–≤–µ—Ä–∫–∏\n"
                    "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
                    "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏\n\n"
                    "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</b> 1‚ÇΩ –∑–∞ 7 –¥–Ω–µ–π –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
                    "üëë <b>–ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> –æ—Ç 249‚ÇΩ/–º–µ—Å\n\n"
                    "‚è≥ <i>–ò–ª–∏ –∂–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è</i>"
                )
                return (False, 0, msg)

        except Exception as e:
            logger.error(f"Error checking AI limit for user {user_id}: {e}", exc_info=True)
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î - –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            return (False, 0, "‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def get_limit_info(
        self,
        user_id: int,
        module_code: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            module_code: –ö–æ–¥ –º–æ–¥—É–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            has_subscription = False
            if self.subscription_manager:
                has_subscription = await self.subscription_manager.check_module_access(
                    user_id, module_code or 'task24'
                )

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            checks_used = await db.get_daily_ai_checks_used(user_id)
            checks_remaining = max(0, FREE_DAILY_LIMIT - checks_used) if not has_subscription else 999

            return {
                'is_premium': has_subscription,
                'has_subscription': has_subscription,
                'checks_remaining': checks_remaining,
                'checks_limit': FREE_DAILY_LIMIT if not has_subscription else 999,
                'checks_used_today': checks_used,
                'reset_date': None,  # –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                'module_code': module_code
            }

        except Exception as e:
            logger.error(f"Error getting limit info for user {user_id}: {e}")
            return {
                'is_premium': False,
                'has_subscription': False,
                'checks_remaining': FREE_DAILY_LIMIT,
                'checks_limit': FREE_DAILY_LIMIT,
                'checks_used_today': 0,
                'reset_date': None,
                'module_code': module_code
            }

    def format_limit_message(self, limit_info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö.

        Args:
            limit_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if limit_info.get('is_premium'):
            return "‚ú® <b>–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω</b>"
        else:
            remaining = limit_info.get('checks_remaining', 0)
            limit = limit_info.get('checks_limit', FREE_DAILY_LIMIT)

            if remaining > 0:
                return f"üìä –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {remaining}/{limit}"
            else:
                return f"‚è≥ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ó–∞–≤—Ç—Ä–∞: {limit}/{limit}"

    async def use_ai_check(
        self,
        user_id: int,
        module_code: Optional[str] = None
    ) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–ø—Ä–æ–≤–µ—Ä–∫–∏.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            module_code: –ö–æ–¥ –º–æ–¥—É–ª—è

        Returns:
            True –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            can_use, _, _ = await self.check_ai_limit(user_id, module_code)

            if not can_use:
                logger.warning(f"User {user_id} tried to use AI check but limit exceeded")
                return False

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            success = await db.increment_ai_check_usage(user_id)

            if success:
                logger.info(f"AI check used by user {user_id} for module {module_code}")

            return success

        except Exception as e:
            logger.error(f"Error using AI check for user {user_id}: {e}")
            return False

    async def reset_daily_limits(self) -> int:
        """
        –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        (–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ë–î)

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–±—Ä–æ—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã
        """
        try:
            deleted = await db.reset_daily_ai_limits()
            logger.info(f"Daily limits reset: {deleted} old records cleaned")
            return deleted
        except Exception as e:
            logger.error(f"Error resetting daily limits: {e}")
            return 0

    async def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            stats = await db.get_ai_limit_stats(user_id, days=7)
            return stats
        except Exception as e:
            logger.error(f"Error getting user stats for {user_id}: {e}")
            return {
                'total_checks': 0,
                'checks_today': 0,
                'modules_used': []
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_freemium_manager_instance: Optional[FreemiumManager] = None


def get_freemium_manager(subscription_manager=None) -> FreemiumManager:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ freemium –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

    Args:
        subscription_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä FreemiumManager
    """
    global _freemium_manager_instance

    if _freemium_manager_instance is None:
        _freemium_manager_instance = FreemiumManager(subscription_manager)

    return _freemium_manager_instance

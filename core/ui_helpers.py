# core/ui_helpers.py
"""–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ UI/UX —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

import asyncio
import random
from datetime import datetime
from typing import Dict, Optional, Set
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∞–Ω–∏–º–∞—Ü–∏–∏
_active_animation_tasks: Set[asyncio.Task] = set()

def _create_animation_task(coro):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—ë."""
    task = asyncio.create_task(coro)
    _active_animation_tasks.add(task)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –Ω–∞–±–æ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    task.add_done_callback(_active_animation_tasks.discard)
    
    return task

async def show_thinking_animation(message: Message, text: str = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é") -> Message:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        text: –¢–µ–∫—Å—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        
    Returns:
        Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    """
    animations = ["ü§î", "üßê", "üí≠", "‚ú®"]
    thinking_msg = await message.reply_text(f"{animations[0]} {text}...")
    
    # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –±–µ–∑ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    try:
        for i in range(1, min(4, len(animations))):
            await asyncio.sleep(0.5)
            await thinking_msg.edit_text(f"{animations[i]} {text}...")
    except:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass
    
    return thinking_msg

async def show_extended_thinking_animation(message: Message, text: str = "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç", 
                                         duration: int = 40) -> Message:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è AI-–æ—Ü–µ–Ω–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        text: –¢–µ–∫—Å—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 40)
        
    Returns:
        Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    """
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    emojis = ["üîç", "üìù", "ü§î", "üí≠", "üìä", "‚ú®", "üßê", "üìñ", "üéØ", "‚ö°"]
    dots_sequence = [".", "..", "..."]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    thinking_msg = await message.reply_text(f"{emojis[0]} {text}{dots_sequence[0]}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    async def animate():
        update_interval = 1.5  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1.5 —Å–µ–∫—É–Ω–¥—ã
        iterations = int(duration / update_interval)
        
        for i in range(iterations):
            # –ú–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–∂–¥—ã–µ 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 4.5 —Å–µ–∫—É–Ω–¥—ã)
            emoji_index = (i // 3) % len(emojis)
            emoji = emojis[emoji_index]
            
            # –¢–æ—á–∫–∏ –º–µ–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
            dots = dots_sequence[i % len(dots_sequence)]
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
                if i % 10 == 5:  # –ö–∞–∂–¥—ã–µ ~15 —Å–µ–∫—É–Ω–¥
                    variation_text = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–µ—Ç–∞–ª–∏"
                elif i % 10 == 8:  # –ö–∞–∂–¥—ã–µ ~12 —Å–µ–∫—É–Ω–¥ —Å —Å–º–µ—â–µ–Ω–∏–µ–º
                    variation_text = "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ"
                else:
                    variation_text = text
                
                await thinking_msg.edit_text(f"{emoji} {variation_text}{dots}")
                await asyncio.sleep(update_interval)
                
            except Exception as e:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                logger.debug(f"Animation stopped: {e}")
                break
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏
    _create_animation_task(animate())
    
    return thinking_msg


async def show_ai_evaluation_animation(message: Message, duration: int = 40) -> Message:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è AI-–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        duration: –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        Message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    """
    # –§–∞–∑—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —ç–º–æ–¥–∑–∏
    phases = [
        ("üîç", "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç"),
        ("üìù", "–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"),
        ("ü§î", "–û—Ü–µ–Ω–∏–≤–∞—é –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞"),
        ("üí≠", "–ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å"),
        ("üìä", "–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –±–∞–ª–ª—ã"),
        ("‚ú®", "–§–æ—Ä–º–∏—Ä—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å")
    ]
    
    dots_sequence = [".", "..", "..."]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    emoji, text = phases[0]
    thinking_msg = await message.reply_text(f"{emoji} {text}{dots_sequence[0]}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã
    phase_duration = duration / len(phases)
    updates_per_phase = max(3, int(phase_duration / 1.5))  # –ú–∏–Ω–∏–º—É–º 3 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ñ–∞–∑—É
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    async def run_animation():
        try:
            for phase_idx, (emoji, phase_text) in enumerate(phases):
                for update_idx in range(updates_per_phase):
                    dots = dots_sequence[update_idx % len(dots_sequence)]
                    
                    try:
                        # –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
                        if update_idx == updates_per_phase - 1 and phase_idx < len(phases) - 1:
                            await thinking_msg.edit_text(f"{emoji} {phase_text}... ‚úì")
                            await asyncio.sleep(0.7)
                        else:
                            await thinking_msg.edit_text(f"{emoji} {phase_text}{dots}")
                            await asyncio.sleep(1.3)
                            
                    except Exception as e:
                        logger.debug(f"Animation update failed: {e}")
                        return
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await thinking_msg.edit_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                await asyncio.sleep(0.5)
            except:
                pass
                
        except Exception as e:
            logger.error(f"Animation error: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏
    _create_animation_task(run_animation())
    
    return thinking_msg

async def show_streak_notification(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 streak_type: str, value: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç—Ä–∏–∫–∞—Ö.
    
    Args:
        update: Update –æ–±—ä–µ–∫—Ç
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç
        streak_type: –¢–∏–ø —Å—Ç—Ä–∏–∫–∞ ('correct', 'daily')
        value: –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–∫–∞
    """
    milestones = {
        3: ("üî•", "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ!"),
        5: ("üî•üî•", "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"),
        7: ("üî•üî•", "–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥!"),
        10: ("üî•üî•üî•", "–î–µ—Å—è—Ç–∫–∞! –í–ø–µ—á–∞—Ç–ª—è–µ—Ç!"),
        15: ("üî•üî•üî•", "–î–≤–µ –Ω–µ–¥–µ–ª–∏! –í—ã –≤ —É–¥–∞—Ä–µ!"),
        20: ("üèÜ", "20 –¥–Ω–µ–π! –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ!"),
        30: ("üíé", "–ú–µ—Å—è—Ü –ø–æ–¥—Ä—è–¥! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!"),
        50: ("üëë", "50 –¥–Ω–µ–π! –í—ã –º–∞—Å—Ç–µ—Ä!"),
        100: ("üåü", "100 –¥–Ω–µ–π! –≠–ø–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∏–∫!")
    }
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π milestone
    emoji = "üî•"
    message_text = "–û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è!"
    
    for milestone, (milestone_emoji, milestone_text) in sorted(milestones.items(), reverse=True):
        if value >= milestone:
            emoji = milestone_emoji
            message_text = milestone_text
            break
    
    notification_text = f"{emoji} <b>–°—Ç—Ä–∏–∫ {value}!</b>\n{message_text}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification = await update.effective_message.reply_text(
        notification_text,
        parse_mode=ParseMode.HTML
    )
    
    # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    async def delete_notification():
        await asyncio.sleep(5)
        try:
            await notification.delete()
        except:
            pass
    
    _create_animation_task(delete_notification())

def get_personalized_greeting(user_name: str, user_stats: Dict[str, Any]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    
    Args:
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    """
    hour = datetime.now().hour
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
    if 5 <= hour < 12:
        time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        emoji = "‚òÄÔ∏è"
    elif 12 <= hour < 17:
        time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        emoji = "üå§"
    elif 17 <= hour < 22:
        time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        emoji = "üåÜ"
    else:
        time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        emoji = "üåô"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–∫
    streak = user_stats.get('daily_streak', 0)
    
    greeting = f"{emoji} {time_greeting}, {user_name}!\n"
    
    if streak > 0:
        greeting += f"üî• –í–∞—à —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π\n"
    
    return greeting

def get_motivational_message(score: int, max_score: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    
    Args:
        score: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –±–∞–ª–ª
        max_score: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
        
    Returns:
        str: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    percentage = score / max_score if max_score > 0 else 0
    
    motivational_quotes = {
        1.0: [
            "–ë–µ–∑—É–ø—Ä–µ—á–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä! üåü",
            "–ò–¥–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üéØ",
            "–í–∞—É! –≠—Ç–æ –±—ã–ª–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üèÜ",
            "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –∫–ª–∞—Å—Å! ‚≠ê",
            "–ë–ª–µ—Å—Ç—è—â–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üíé"
        ],
        0.8: [
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ï—â–µ —á—É—Ç—å-—á—É—Ç—å –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞! üí™",
            "–ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ! –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üéØ",
            "–°—É–ø–µ—Ä! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ! ‚≠ê",
            "–ó–¥–æ—Ä–æ–≤–æ! –í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! üöÄ",
            "–ú–æ–ª–æ–¥–µ—Ü! –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏! üìà"
        ],
        0.6: [
            "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è! üìà",
            "–ù–µ–ø–ª–æ—Ö–æ! –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–∞–µ—Ç –≤–∞—Å –ª—É—á—à–µ! üí°",
            "–î–≤–∏–∂–µ—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏! üöÄ",
            "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! üå±",
            "–î–æ—Å—Ç–æ–π–Ω–æ! –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É! üéØ"
        ],
        0.4: [
            "–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ü—Ä–∞–∫—Ç–∏–∫–∞ - –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É! üí™",
            "–ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ —É—Ä–æ–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ! üìö",
            "–í—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ª—É—á—à–µ —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π! üå±",
            "–ù–µ –æ–ø—É—Å–∫–∞–π—Ç–µ —Ä—É–∫–∏! –£ –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üåü",
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è! –£—Å–ø–µ—Ö –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏! üèÉ"
        ],
        0: [
            "–≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—É—Ç–∏! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å! üåü",
            "–ü–æ–º–Ω–∏—Ç–µ: –≤—Å–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª–∏ –Ω–æ–≤–∏—á–∫–∞–º–∏! üöÄ",
            "–ì–ª–∞–≤–Ω–æ–µ - –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! –£ –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üí™",
            "–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–∞–º—ã–π —Ç—Ä—É–¥–Ω—ã–π! –í—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø—Ä–æ–±—É–µ—Ç–µ! üå±",
            "–ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏! –í–ø–µ—Ä–µ–¥! üéØ"
        ]
    }
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for threshold, quotes in sorted(motivational_quotes.items(), reverse=True):
        if percentage >= threshold:
            return random.choice(quotes)
    
    return random.choice(motivational_quotes[0])

def create_visual_progress(current: int, total: int) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —ç–º–æ–¥–∑–∏.
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        total: –û–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        str: –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    if total == 0:
        return "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú"
    
    percentage = current / total
    filled = int(percentage * 10)
    
    bar = "üü©" * filled + "‚¨ú" * (10 - filled)
    
    return f"{bar} {int(percentage * 100)}%"

def get_achievement_emoji(achievement_type: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
    
    Args:
        achievement_type: –¢–∏–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        
    Returns:
        str: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏
    """
    achievement_emojis = {
        'first_answer': 'üéØ',
        'perfect_score': '‚≠ê',
        'streak_3': 'üî•',
        'streak_7': 'üî•üî•',
        'streak_30': 'üî•üî•üî•',
        'completed_10': 'üìö',
        'completed_50': 'üìñ',
        'completed_100': 'üéì',
        'speed_demon': '‚ö°',
        'perfectionist': 'üíé',
        'explorer': 'üó∫',
        'champion': 'üèÜ',
        'legend': 'üëë'
    }
    
    return achievement_emojis.get(achievement_type, 'üèÖ')

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async def cleanup_completed_animation_tasks():
    """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞."""
    global _active_animation_tasks
    completed = {task for task in _active_animation_tasks if task.done()}
    _active_animation_tasks -= completed
    logger.debug(f"Cleaned up {len(completed)} completed animation tasks")
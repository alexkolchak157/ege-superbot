# core/ui_helpers.py
"""–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ UI/UX —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

import asyncio
import random
from datetime import datetime
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

async def show_thinking_animation(message: Message, text: str = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é") -> Message:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        text: –¢–µ–∫—Å—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        
    Returns:
        Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    """
    animations = ["ü§î", "üßê", "üí≠", "‚ú®"]
    thinking_msg = await message.reply_text(f"{animations[0]} {text}...")
    
    # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –±–µ–∑ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    try:
        for i in range(1, min(4, len(animations))):
            await asyncio.sleep(0.5)
            await thinking_msg.edit_text(f"{animations[i]} {text}...")
    except:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass
    
    return thinking_msg

async def show_extended_thinking_animation(message: Message, text: str = "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç", 
                                         duration: int = 60) -> Message:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è AI-–æ—Ü–µ–Ω–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        text: –¢–µ–∫—Å—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
        
    Returns:
        Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    """
    emojis = ["‚ú®", "üîç", "üìù", "üí≠", "ü§î", "üìä"]
    dots = [".", "..", "..."]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    thinking_msg = await message.reply_text(f"{emojis[0]} {text}{dots[0]}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    async def animate():
        iterations = duration // 3  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        for i in range(iterations):
            emoji = emojis[i % len(emojis)]
            dot = dots[i % len(dots)]
            
            try:
                await thinking_msg.edit_text(f"{emoji} {text}{dot}")
                await asyncio.sleep(3)
            except Exception as e:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                logger.debug(f"Animation stopped: {e}")
                break
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(animate())
    
    return thinking_msg

async def show_streak_notification(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 streak_type: str, value: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç—Ä–∏–∫–∞—Ö.
    
    Args:
        update: Update –æ–±—ä–µ–∫—Ç
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç
        streak_type: –¢–∏–ø —Å—Ç—Ä–∏–∫–∞ ('correct', 'daily')
        value: –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–∫–∞
    """
    milestones = {
        3: ("üî•", "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ!"),
        5: ("üî•üî•", "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"),
        7: ("üî•üî•", "–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥!"),
        10: ("üî•üî•üî•", "–î–µ—Å—è—Ç–∫–∞! –í–ø–µ—á–∞—Ç–ª—è–µ—Ç!"),
        14: ("üî•üî•üî•", "–î–≤–µ –Ω–µ–¥–µ–ª–∏! –í—ã –º–æ–ª–æ–¥–µ—Ü!"),
        20: ("‚≠ê", "20 –ø–æ–¥—Ä—è–¥! –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞!"),
        30: ("üèÜ", "–ú–µ—Å—è—Ü –∑–∞–Ω—è—Ç–∏–π! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!"),
        50: ("üåü", "50 –¥–Ω–µ–π! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π!"),
        100: ("üíé", "100 –¥–Ω–µ–π! –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!")
    }
    
    if value in milestones:
        emoji, text = milestones[value]
        
        if streak_type == 'correct':
            title = f"{value} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥!"
        else:
            title = f"{value} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!"
        
        notification = f"""
{emoji} <b>–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!</b>

üéØ <b>{title}</b>
{text}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
"""
        
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üéâ –°—É–ø–µ—Ä!", callback_data="streak_ok")
        ]])
        
        msg = await update.effective_message.reply_text(
            notification,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        if context.job_queue:
            async def delete_msg(ctx: ContextTypes.DEFAULT_TYPE) -> None:
                try:
                    await msg.delete()
                except Exception:
                    pass

            context.job_queue.run_once(
                delete_msg,
                when=10,
                name=f"delete_streak_{msg.message_id}"
            )

def get_personalized_greeting(user_stats: Dict) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    
    Args:
        user_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    """
    hour = datetime.now().hour
    attempts = user_stats.get('total_attempts', 0)
    streak = user_stats.get('streak', 0)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    if 5 <= hour < 12:
        time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 17:
        time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 17 <= hour < 23:
        time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if attempts == 0:
        status = "–Ω–æ–≤–∏—á–æ–∫"
        emoji = "üå±"
    elif attempts < 10:
        status = "—É—á–µ–Ω–∏–∫"
        emoji = "üìö"
    elif attempts < 50:
        status = "–ø—Ä–∞–∫—Ç–∏–∫–∞–Ω—Ç"
        emoji = "üéØ"
    elif attempts < 100:
        status = "–∑–Ω–∞—Ç–æ–∫"
        emoji = "üèÜ"
    else:
        status = "—ç–∫—Å–ø–µ—Ä—Ç"
        emoji = "üåü"
    
    greeting = f"{time_greeting}! {emoji}\n"
    
    if streak > 0:
        greeting += f"üî• –í–∞—à —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π\n"
    
    return greeting

def get_motivational_message(score: int, max_score: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    
    Args:
        score: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –±–∞–ª–ª
        max_score: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
        
    Returns:
        str: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    percentage = score / max_score if max_score > 0 else 0
    
    motivational_quotes = {
        1.0: [
            "–ë–µ–∑—É–ø—Ä–µ—á–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä! üåü",
            "–ò–¥–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üéØ",
            "–í–∞—É! –≠—Ç–æ –±—ã–ª–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üèÜ",
            "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –∫–ª–∞—Å—Å! ‚≠ê",
            "–ë–ª–µ—Å—Ç—è—â–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üíé"
        ],
        0.8: [
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ï—â–µ —á—É—Ç—å-—á—É—Ç—å –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞! üí™",
            "–ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ! –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üéØ",
            "–°—É–ø–µ—Ä! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ! ‚≠ê",
            "–ó–¥–æ—Ä–æ–≤–æ! –í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! üöÄ",
            "–ú–æ–ª–æ–¥–µ—Ü! –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏! üìà"
        ],
        0.6: [
            "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è! üìà",
            "–ù–µ–ø–ª–æ—Ö–æ! –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–∞–µ—Ç –≤–∞—Å –ª—É—á—à–µ! üí°",
            "–î–≤–∏–∂–µ—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏! üöÄ",
            "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! üå±",
            "–î–æ—Å—Ç–æ–π–Ω–æ! –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É! üéØ"
        ],
        0.4: [
            "–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ü—Ä–∞–∫—Ç–∏–∫–∞ - –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É! üí™",
            "–ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ —É—Ä–æ–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ! üìö",
            "–í—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ª—É—á—à–µ —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π! üå±",
            "–ù–µ –æ–ø—É—Å–∫–∞–π—Ç–µ —Ä—É–∫–∏! –£ –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üåü",
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è! –£—Å–ø–µ—Ö –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏! üèÉ"
        ],
        0: [
            "–≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—É—Ç–∏! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å! üåü",
            "–ü–æ–º–Ω–∏—Ç–µ: –≤—Å–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª–∏ –Ω–æ–≤–∏—á–∫–∞–º–∏! üöÄ",
            "–ì–ª–∞–≤–Ω–æ–µ - –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! –£ –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üí™",
            "–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–∞–º—ã–π —Ç—Ä—É–¥–Ω—ã–π! –í—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø—Ä–æ–±—É–µ—Ç–µ! üå±",
            "–ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏! –í–ø–µ—Ä–µ–¥! üéØ"
        ]
    }
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for threshold, quotes in sorted(motivational_quotes.items(), reverse=True):
        if percentage >= threshold:
            return random.choice(quotes)
    
    return random.choice(motivational_quotes[0])

def create_visual_progress(current: int, total: int) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —ç–º–æ–¥–∑–∏.
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        total: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        str: –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    """
    if total == 0:
        return "‚ö™‚ö™‚ö™‚ö™‚ö™"
    
    percentage = current / total
    filled = int(percentage * 5)
    
    progress = ""
    for i in range(5):
        if i < filled:
            progress += "üü¢"
        else:
            progress += "‚ö™"
    
    return progress

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã

def format_time_difference(timestamp: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    
    Args:
        timestamp: ISO —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
    """
    try:
        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        diff = datetime.now() - dt
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    except:
        return "–Ω–µ–¥–∞–≤–Ω–æ"

def get_achievement_emoji(achievement_type: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
    
    Args:
        achievement_type: –¢–∏–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        
    Returns:
        str: –≠–º–æ–¥–∑–∏
    """
    emojis = {
        'first_perfect': 'üåü',
        'streak_3': 'üî•',
        'streak_7': 'üî•üî•',
        'streak_30': 'üèÜ',
        'all_topics': 'üéì',
        'speed_demon': '‚ö°',
        'perfectionist': 'üíé',
        'explorer': 'üó∫Ô∏è',
        'dedicated': 'üí™',
        'master': 'üëë'
    }
    
    return emojis.get(achievement_type, 'üèÖ')

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'show_thinking_animation',
    'show_extended_thinking_animation',  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    'show_streak_notification',
    'get_personalized_greeting',
    'get_motivational_message',
    'create_visual_progress',
    'format_time_difference',
    'get_achievement_emoji'
]
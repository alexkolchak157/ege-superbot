# core/admin_tools.py
"""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."""
import logging
from typing import Dict, List, Any, Set, Optional, Callable
from datetime import datetime, timedelta
from functools import wraps
import asyncio
import json
import csv
import io
import pickle
from datetime import datetime, timedelta, time
import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib.pyplot as plt
from io import BytesIO
import pandas as pd
import openpyxl
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ContextTypes, 
    CommandHandler, 
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters
)
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
BROADCAST_TEXT, BROADCAST_CONFIRM = range(2)
USER_SEARCH = 3
SETTINGS_VALUE = 4
FILTER_INPUT = 5
PRICE_INPUT = 6
SCHEDULE_MESSAGE = 7
SCHEDULE_TIME = 8
EDIT_PRICE_PLAN = 10
EDIT_PRICE_VALUE = 11
PROMO_CODE_INPUT = 12
PROMO_DISCOUNT_INPUT = 13
PROMO_LIMIT_INPUT = 14

class AdminManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–æ—Ç–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        self._admin_ids: Set[int] = set()
        self._failed_attempts: Dict[int, List[datetime]] = {}
        self._load_admins()
    
    def _load_admins(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        from core import config
        
        # –ü–æ–ª—É—á–∞–µ–º ADMIN_IDS –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (—É–∂–µ —Å–ø–∏—Å–æ–∫!)
        admin_ids_value = config.ADMIN_IDS
        
        if admin_ids_value:
            try:
                # config.ADMIN_IDS —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º —á–∏—Å–µ–ª
                if isinstance(admin_ids_value, list):
                    self._admin_ids = set(admin_ids_value)
                elif isinstance(admin_ids_value, str):
                    # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Ç—Ä–æ–∫–∞
                    admin_ids = [int(id_str.strip()) for id_str in admin_ids_value.split(',') if id_str.strip()]
                    self._admin_ids = set(admin_ids)
                else:
                    # –ï—Å–ª–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ
                    self._admin_ids = {int(admin_ids_value)}
                
                logger.info(f"Loaded {len(self._admin_ids)} admin IDs")
            except (ValueError, TypeError) as e:
                logger.error(f"Error parsing ADMIN_IDS: {e}")
                self._admin_ids = {1020468401}
        else:
            # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            self._admin_ids = {1020468401}
            logger.warning("No ADMIN_IDS found, using default")
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        is_admin = user_id in self._admin_ids
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if not is_admin:
            now = datetime.now()
            if user_id not in self._failed_attempts:
                self._failed_attempts[user_id] = []
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
            self._failed_attempts[user_id] = [
                attempt for attempt in self._failed_attempts[user_id]
                if now - attempt < timedelta(hours=1)
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
            self._failed_attempts[user_id].append(now)
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if len(self._failed_attempts[user_id]) >= 5:
                logger.warning(
                    f"‚ö†Ô∏è Suspicious activity: User {user_id} made "
                    f"{len(self._failed_attempts[user_id])} admin access attempts in the last hour"
                )
        
        return is_admin
    
    def add_admin(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        if user_id not in self._admin_ids:
            self._admin_ids.add(user_id)
            logger.info(f"Added new admin: {user_id}")
            return True
        return False
    
    def remove_admin(self, user_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        if user_id in self._admin_ids and len(self._admin_ids) > 1:
            self._admin_ids.remove(user_id)
            logger.info(f"Removed admin: {user_id}")
            return True
        return False
    
    def get_admin_list(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        return list(self._admin_ids)
    
    def get_security_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        return {
            'total_admins': len(self._admin_ids),
            'failed_attempts': {
                user_id: len(attempts) 
                for user_id, attempts in self._failed_attempts.items()
            },
            'suspicious_users': [
                user_id for user_id, attempts in self._failed_attempts.items()
                if len(attempts) >= 3
            ]
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
admin_manager = AdminManager()

class BroadcastScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫."""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.scheduled_broadcasts = {}
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        if not self.scheduler.running:
            self.scheduler.start()
            logger.info("Broadcast scheduler started")
    
    def add_broadcast(self, broadcast_id: str, run_time: datetime, message_data: dict, bot):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        job = self.scheduler.add_job(
            self._execute_broadcast,
            'date',
            run_date=run_time,
            args=[broadcast_id, message_data, bot],
            id=broadcast_id
        )
        
        self.scheduled_broadcasts[broadcast_id] = {
            'job': job,
            'run_time': run_time,
            'message_data': message_data,
            'status': 'scheduled'
        }
        
        logger.info(f"Scheduled broadcast {broadcast_id} for {run_time}")
        return broadcast_id
    
    async def _execute_broadcast(self, broadcast_id: str, message_data: dict, bot):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        from core import db
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            conn = await db.get_db()
            cursor = await conn.execute("SELECT user_id FROM users")
            users = await cursor.fetchall()
            
            sent = 0
            failed = 0
            
            for (user_id,) in users:
                try:
                    if message_data.get('photo'):
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=message_data['photo'],
                            caption=message_data.get('text', ''),
                            caption_entities=message_data.get('entities')
                        )
                    else:
                        await bot.send_message(
                            chat_id=user_id,
                            text=message_data['text'],
                            entities=message_data.get('entities')
                        )
                    sent += 1
                except Exception as e:
                    failed += 1
                    logger.error(f"Scheduled broadcast error for user {user_id}: {e}")
                
                await asyncio.sleep(0.05)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.scheduled_broadcasts[broadcast_id]['status'] = 'completed'
            self.scheduled_broadcasts[broadcast_id]['stats'] = {
                'sent': sent,
                'failed': failed,
                'total': len(users)
            }
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            for admin_id in admin_manager.get_admin_list():
                try:
                    await bot.send_message(
                        admin_id,
                        f"üì® –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                        f"ID: {broadcast_id}\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed}"
                    )
                except:
                    pass
                    
        except Exception as e:
            logger.error(f"Failed to execute scheduled broadcast {broadcast_id}: {e}")
            self.scheduled_broadcasts[broadcast_id]['status'] = 'failed'
    
    def cancel_broadcast(self, broadcast_id: str):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        if broadcast_id in self.scheduled_broadcasts:
            self.scheduler.remove_job(broadcast_id)
            self.scheduled_broadcasts[broadcast_id]['status'] = 'cancelled'
            return True
        return False
    
    def get_scheduled(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫."""
        return [
            {
                'id': bid,
                'run_time': data['run_time'],
                'status': data['status']
            }
            for bid, data in self.scheduled_broadcasts.items()
            if data['status'] == 'scheduled'
        ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
broadcast_scheduler = BroadcastScheduler()

# ============================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–ù–ê–ú–ò (–Ω–æ–≤—ã–π –∫–ª–∞—Å—Å)
# ============================================

class PriceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ü–µ–Ω –∏ —Ç–∞—Ä–∏—Ñ–æ–≤."""
    
    @staticmethod
    async def get_current_prices():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –∏–∑ –ë–î."""
        from core import db
        
        try:
            conn = await db.get_db()
            cursor = await conn.execute("""
                SELECT plan_id, price, duration_days, description 
                FROM subscription_plans
                ORDER BY price
            """)
            prices = await cursor.fetchall()
            
            if not prices:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã
                return {
                    'trial_7days': {'price': 99, 'duration': 7, 'description': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'},
                    'premium_30days': {'price': 299, 'duration': 30, 'description': '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'},
                    'premium_90days': {'price': 699, 'duration': 90, 'description': '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'}
                }
            
            return {
                plan_id: {
                    'price': price,
                    'duration': duration,
                    'description': desc
                }
                for plan_id, price, duration, desc in prices
            }
        except Exception as e:
            logger.error(f"Error getting prices: {e}")
            return {}
    
    @staticmethod
    async def update_price(plan_id: str, new_price: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞."""
        from core import db
        
        try:
            conn = await db.get_db()
            await conn.execute("""
                UPDATE subscription_plans 
                SET price = ?, updated_at = datetime('now')
                WHERE plan_id = ?
            """, (new_price, plan_id))
            await conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error updating price: {e}")
            return False
    
    @staticmethod
    async def create_plan(plan_id: str, price: int, duration: int, description: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""
        from core import db
        
        try:
            conn = await db.get_db()
            await conn.execute("""
                INSERT INTO subscription_plans (plan_id, price, duration_days, description, created_at)
                VALUES (?, ?, ?, ?, datetime('now'))
            """, (plan_id, price, duration, description))
            await conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error creating plan: {e}")
            return False


def admin_only(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user
        if not user:
            logger.warning("admin_only: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return  
            
        user_id = user.id
        username = user.username or "NoUsername"
        
        if not admin_manager.is_admin(user_id):
            logger.warning(
                f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏: "
                f"user_id={user_id}, username=@{username}, "
                f"function={func.__name__}"
            )
            
            if update.callback_query:
                await update.callback_query.answer(
                    "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", 
                    show_alert=True
                )
            else:
                await update.message.reply_text(
                    "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
                )
            return  
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        logger.info(
            f"‚úÖ –ê–¥–º–∏–Ω {user_id} (@{username}) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {func.__name__}"
        )
            
        return await func(update, context, *args, **kwargs)
    return wrapper


def get_admin_keyboard_extension(user_id: int) -> List[List[InlineKeyboardButton]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
    if not admin_manager.is_admin(user_id):
        return []

    return [[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω", callback_data="admin:main")]]


class AdminStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    
    @staticmethod
    async def get_global_stats(app) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞."""
        from core import db
        
        try:
            conn = await db.get_db()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await conn.execute("SELECT COUNT(*) FROM users")
            total_users = (await cursor.fetchone())[0]
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            cursor = await conn.execute("""
                SELECT COUNT(*) FROM users 
                WHERE last_activity_date > datetime('now', '-30 days')
            """)
            active_users = (await cursor.fetchone())[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            cursor = await conn.execute("SELECT COUNT(*) FROM attempts")
            total_attempts = (await cursor.fetchone())[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
            modules = ['task24', 'test_part', 'task19', 'task20', 'task25']
            by_module = {}
            
            for module in modules:
                cursor = await conn.execute(f"""
                    SELECT 
                        COUNT(DISTINCT user_id) as users,
                        COUNT(*) as attempts,
                        AVG(score) as avg_score
                    FROM attempts
                    WHERE module_type = ?
                """, (module,))
                
                result = await cursor.fetchone()
                if result:
                    by_module[module] = {
                        'users': result[0] or 0,
                        'attempts': result[1] or 0,
                        'avg_score': result[2] or 0
                    }
            
            return {
                'total_users': total_users,
                'active_users': active_users,
                'total_attempts': total_attempts,
                'by_module': by_module
            }
            
        except Exception as e:
            logger.error(f"Error getting global stats: {e}")
            return {
                'total_users': 0,
                'active_users': 0,
                'total_attempts': 0,
                'by_module': {}
            }


class AdminKeyboards:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    
    @staticmethod
    def main_admin_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats"),
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users")
            ],
            [
                InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings")
            ],
            [
                InlineKeyboardButton("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="admin:security"),
                InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin:export")
            ],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin:close")]
        ])
    
    @staticmethod
    def stats_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è", callback_data="admin:global_stats"),
                InlineKeyboardButton("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="admin:activity_stats")
            ],
            [
                InlineKeyboardButton("üìö –ü–æ –º–æ–¥—É–ª—è–º", callback_data="admin:module_stats"),
                InlineKeyboardButton("üèÜ –¢–æ–ø —é–∑–µ—Ä–æ–≤", callback_data="admin:top_users")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main")]
        ])
    
    @staticmethod
    def users_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", callback_data="admin:users_list"),
                InlineKeyboardButton("üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="admin:users_premium")
            ],
            [
                InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin:user_search"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:users_stats")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main")]
        ])
    
    @staticmethod
    def user_actions(user_id: int, has_subscription: bool) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        buttons = []
        
        if has_subscription:
            buttons.append([
                InlineKeyboardButton("‚ùå –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin:revoke_sub:{user_id}"),
                InlineKeyboardButton("‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin:extend_sub:{user_id}")
            ])
        else:
            buttons.append([
                InlineKeyboardButton("üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin:grant_sub:{user_id}")
            ])
        
        buttons.extend([
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin:user_stats:{user_id}"),
                InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"admin:message_user:{user_id}")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]
        ])
        
        return InlineKeyboardMarkup(buttons)
    
    @staticmethod
    def broadcast_confirm(stats: Dict) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin:broadcast_start"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:broadcast_cancel")
            ]
        ])
    
    @staticmethod
    def settings_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üí∞ –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin:settings_prices"),
                InlineKeyboardButton("üì¶ –ú–æ–¥—É–ª–∏", callback_data="admin:settings_modules")
            ],
            [
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin:settings_notifications"),
                InlineKeyboardButton("üõ°Ô∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", callback_data="admin:settings_mode")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main")]
        ])

    @staticmethod
    def export_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (CSV)", callback_data="admin:export_stats_csv"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (Excel)", callback_data="admin:export_stats_excel")
            ],
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (CSV)", callback_data="admin:export_users_csv"),
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (Excel)", callback_data="admin:export_users_excel")
            ],
            [
                InlineKeyboardButton("üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø", callback_data="admin:backup_full"),
                InlineKeyboardButton("üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="admin:restore_backup")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main")]
        ])
    
    @staticmethod
    def filter_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –ü–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin:filter_date"),
                InlineKeyboardButton("üïê –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin:filter_activity")
            ],
            [
                InlineKeyboardButton("üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="admin:filter_premium"),
                InlineKeyboardButton("‚ùå –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin:filter_free")
            ],
            [
                InlineKeyboardButton("üìä –ü–æ –º–æ–¥—É–ª—è–º", callback_data="admin:filter_modules"),
                InlineKeyboardButton("üéØ –ü–æ –±–∞–ª–ª–∞–º", callback_data="admin:filter_scores")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]
        ])
    
    @staticmethod
    def schedule_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin:schedule_new"),
                InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="admin:schedule_list")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:broadcast_menu")]
        ])
    
    @staticmethod
    def price_management() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏."""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üí∞ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="admin:prices_current"),
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="admin:prices_edit")
            ],
            [
                InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ", callback_data="admin:prices_new"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂", callback_data="admin:prices_stats")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]
        ])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

@admin_only
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."""
    query = update.callback_query
    if query:
        await query.answer()
    
    user = update.effective_user
    text = (
        f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:"
    )
    
    kb = AdminKeyboards.main_admin_menu()
    
    if query:
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    kb = AdminKeyboards.stats_menu()
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


# === –†–ê–°–°–´–õ–ö–ê ===

@admin_only
async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
        "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:main")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    context.user_data['broadcast_mode'] = True
    return BROADCAST_TEXT


@admin_only
async def broadcast_receive_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if not context.user_data.get('broadcast_mode'):
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.photo:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        context.user_data['broadcast_photo'] = update.message.photo[-1].file_id
        context.user_data['broadcast_text'] = update.message.caption or ""
        context.user_data['broadcast_caption_entities'] = update.message.caption_entities
    else:
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.user_data['broadcast_text'] = update.message.text
        context.user_data['broadcast_entities'] = update.message.entities
        context.user_data['broadcast_photo'] = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    from core import db
    conn = await db.get_db()
    cursor = await conn.execute("SELECT COUNT(*) FROM users")
    total_users = (await cursor.fetchone())[0]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = (
        "üì® <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"–¢–∏–ø: {'–§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º' if context.user_data.get('broadcast_photo') else '–¢–µ–∫—Å—Ç'}\n\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )
    
    await update.message.reply_text(preview_text, parse_mode=ParseMode.HTML)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if context.user_data.get('broadcast_photo'):
        await update.message.reply_photo(
            photo=context.user_data['broadcast_photo'],
            caption=context.user_data['broadcast_text'],
            caption_entities=context.user_data.get('broadcast_caption_entities')
        )
    else:
        await update.message.reply_text(
            text=context.user_data['broadcast_text'],
            entities=context.user_data.get('broadcast_entities')
        )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = AdminKeyboards.broadcast_confirm({'total_users': total_users})
    await update.message.reply_text(
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return BROADCAST_CONFIRM


@admin_only
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    from core import db
    conn = await db.get_db()
    cursor = await conn.execute("SELECT user_id FROM users")
    users = await cursor.fetchall()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    total = len(users)
    sent = 0
    failed = 0
    blocked = 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    progress_message = await query.edit_message_text(
        f"üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
        f"–û—à–∏–±–æ–∫: 0",
        parse_mode=ParseMode.HTML
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for i, (user_id,) in enumerate(users, 1):
        try:
            if context.user_data.get('broadcast_photo'):
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=context.user_data['broadcast_photo'],
                    caption=context.user_data['broadcast_text'],
                    caption_entities=context.user_data.get('broadcast_caption_entities')
                )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=context.user_data['broadcast_text'],
                    entities=context.user_data.get('broadcast_entities')
                )
            sent += 1
            
        except Forbidden:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            blocked += 1
            failed += 1
        except Exception as e:
            logger.error(f"Broadcast error for user {user_id}: {e}")
            failed += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % 10 == 0 or i == total:
            try:
                await progress_message.edit_text(
                    f"üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</b>\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total}\n"
                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
                    f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {blocked}",
                    parse_mode=ParseMode.HTML
                )
            except:
                pass
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        await asyncio.sleep(0.05)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="admin:main")]
    ])
    
    await progress_message.edit_text(
        f"üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}\n\n"
        f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(sent/total*100):.1f}%",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data['broadcast_mode'] = False
    context.user_data.pop('broadcast_text', None)
    context.user_data.pop('broadcast_photo', None)
    
    return ConversationHandler.END


@admin_only
async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data['broadcast_mode'] = False
    context.user_data.pop('broadcast_text', None)
    context.user_data.pop('broadcast_photo', None)
    
    await admin_panel(update, context)
    return ConversationHandler.END


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

@admin_only
async def handle_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from core import db
    from payment.config import SUBSCRIPTION_MODE
    
    conn = await db.get_db()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor = await conn.execute("SELECT COUNT(*) FROM users")
    total_users = (await cursor.fetchone())[0]
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if SUBSCRIPTION_MODE == 'modular':
        # –î–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º module_subscriptions
        cursor = await conn.execute("""
            SELECT COUNT(DISTINCT user_id) 
            FROM module_subscriptions 
            WHERE is_active = 1 
            AND expires_at > datetime('now')
        """)
        premium_users = (await cursor.fetchone())[0]
    else:
        # –î–ª—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º user_subscriptions
        cursor = await conn.execute("""
            SELECT COUNT(DISTINCT user_id) 
            FROM user_subscriptions 
            WHERE status = 'active' 
            AND expires_at > datetime('now')
        """)
        premium_users = (await cursor.fetchone())[0]
    
    text = (
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {premium_users}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    kb = AdminKeyboards.users_menu()
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = context.user_data.get('users_page', 0)
    per_page = 10
    
    from core import db
    conn = await db.get_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cursor = await conn.execute("SELECT COUNT(*) FROM users")
    total_users = (await cursor.fetchone())[0]
    total_pages = (total_users + per_page - 1) // per_page
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    cursor = await conn.execute("""
        SELECT user_id, username, first_name, last_activity_date 
        FROM users 
        ORDER BY last_activity_date DESC
        LIMIT ? OFFSET ?
    """, (per_page, page * per_page))
    
    users = await cursor.fetchall()
    
    text = f"üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> (—Å—Ç—Ä. {page+1}/{total_pages})\n\n"
    
    for user_id, username, first_name, last_activity in users:
        name = first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username_str = f"@{username}" if username else "–Ω–µ—Ç username"
        last_active = datetime.fromisoformat(last_activity).strftime("%d.%m.%Y")
        
        text += f"‚Ä¢ {name} ({username_str})\n"
        text += f"  ID: <code>{user_id}</code> | –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n\n"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"admin:users_page:{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="admin:noop"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"admin:users_page:{page+1}"))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")])
    
    kb = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def users_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    
    from core import db
    from payment.config import SUBSCRIPTION_MODE
    
    conn = await db.get_db()
    
    if SUBSCRIPTION_MODE == 'modular':
        # –î–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        cursor = await conn.execute("""
            SELECT DISTINCT 
                u.user_id, 
                u.username, 
                u.first_name,
                GROUP_CONCAT(ms.module_code) as modules,
                MAX(ms.expires_at) as expires_at
            FROM users u
            INNER JOIN module_subscriptions ms ON u.user_id = ms.user_id
            WHERE ms.is_active = 1 
            AND ms.expires_at > datetime('now')
            GROUP BY u.user_id
            ORDER BY expires_at DESC
            LIMIT 20
        """)
    else:
        # –î–ª—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        cursor = await conn.execute("""
            SELECT 
                u.user_id, 
                u.username, 
                u.first_name, 
                us.plan_id, 
                us.expires_at
            FROM users u
            INNER JOIN user_subscriptions us ON u.user_id = us.user_id
            WHERE us.status = 'active' 
            AND us.expires_at > datetime('now')
            ORDER BY us.expires_at DESC
            LIMIT 20
        """)
    
    premium_users = await cursor.fetchall()
    
    if not premium_users:
        text = "üíé <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."
    else:
        text = f"üíé <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π</b> ({len(premium_users)})\n\n"
        
        if SUBSCRIPTION_MODE == 'modular':
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            for user_id, username, first_name, modules, expires_at in premium_users:
                name = first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                username_str = f"@{username}" if username else ""
                expires = datetime.fromisoformat(expires_at).strftime("%d.%m.%Y")
                modules_list = modules.split(',') if modules else []
                
                text += f"‚Ä¢ {name} {username_str}\n"
                text += f"  ID: <code>{user_id}</code>\n"
                text += f"  –ú–æ–¥—É–ª–∏: {', '.join(modules_list)}\n"
                text += f"  –î–æ: {expires}\n\n"
        else:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            for user_id, username, first_name, plan_id, expires_at in premium_users:
                name = first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                username_str = f"@{username}" if username else ""
                expires = datetime.fromisoformat(expires_at).strftime("%d.%m.%Y")
                
                text += f"‚Ä¢ {name} {username_str}\n"
                text += f"  ID: <code>{user_id}</code>\n"
                text += f"  –ü–ª–∞–Ω: {plan_id} | –î–æ: {expires}\n\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def user_search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ User ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n"
        "‚Ä¢ Username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username)\n"
        "‚Ä¢ –ò–º—è (—á–∞—Å—Ç—å –∏–º–µ–Ω–∏)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:users")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    context.user_data['search_mode'] = True
    
    return USER_SEARCH


@admin_only
async def user_search_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not context.user_data.get('search_mode'):
        return ConversationHandler.END
    
    search_query = update.message.text.strip()
    
    from core import db
    conn = await db.get_db()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    
    # –ü–æ–∏—Å–∫ –ø–æ ID
    if search_query.isdigit():
        cursor = await conn.execute(
            "SELECT * FROM users WHERE user_id = ?",
            (int(search_query),)
        )
        user = await cursor.fetchone()
    
    # –ü–æ–∏—Å–∫ –ø–æ username
    if not user and search_query.startswith('@'):
        cursor = await conn.execute(
            "SELECT * FROM users WHERE username = ?",
            (search_query[1:],)
        )
        user = await cursor.fetchone()
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    if not user:
        cursor = await conn.execute(
            "SELECT * FROM users WHERE first_name LIKE ?",
            (f"%{search_query}%",)
        )
        user = await cursor.fetchone()
    
    if not user:
        await update.message.reply_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return USER_SEARCH
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await show_user_details(update, context, user[0])  # user[0] - —ç—Ç–æ user_id
    
    context.user_data['search_mode'] = False
    return ConversationHandler.END


async def show_user_details(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    from core import db
    from payment.subscription_manager import SubscriptionManager
    
    conn = await db.get_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor = await conn.execute(
        "SELECT * FROM users WHERE user_id = ?",
        (user_id,)
    )
    user = await cursor.fetchone()
    
    if not user:
        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]
        ])
        await update.message.reply_text(text, reply_markup=kb)
        return
    
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    _, username, first_name, last_name, created_at, last_activity = user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription_manager = SubscriptionManager()
    subscription = await subscription_manager.check_active_subscription(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor = await conn.execute("""
        SELECT module_type, COUNT(*), AVG(score) 
        FROM attempts 
        WHERE user_id = ? 
        GROUP BY module_type
    """, (user_id,))
    stats = await cursor.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
    text += f"üÜî ID: <code>{user_id}</code>\n"
    text += f"üë§ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    
    if last_name:
        text += f"üë§ –§–∞–º–∏–ª–∏—è: {last_name}\n"
    
    if username:
        text += f"üì± Username: @{username}\n"
    
    text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {datetime.fromisoformat(last_activity).strftime('%d.%m.%Y %H:%M')}\n\n"
    
    if subscription:
        text += f"üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n"
        text += f"–ü–ª–∞–Ω: {subscription['plan_id']}\n"
        text += f"–î–æ: {subscription['expires_at'].strftime('%d.%m.%Y')}\n\n"
    else:
        text += "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
    
    if stats:
        text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º:</b>\n"
        for module, attempts, avg_score in stats:
            text += f"‚Ä¢ {module}: {attempts} –ø–æ–ø—ã—Ç–æ–∫, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
    kb = AdminKeyboards.user_actions(user_id, bool(subscription))
    
    await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def grant_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    query = update.callback_query
    user_id = int(query.data.split(':')[-1])
    
    await query.answer("–í—ã–¥–∞—é –ø–æ–¥–ø–∏—Å–∫—É...")
    
    from payment.subscription_manager import SubscriptionManager
    subscription_manager = SubscriptionManager()
    
    # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
    await subscription_manager.activate_subscription(
        user_id=user_id,
        plan_id='premium_30days',
        payment_id='ADMIN_GRANT',
        amount=0
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="üéÅ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                 "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π!\n"
                 "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            parse_mode=ParseMode.HTML
        )
    except:
        pass
    
    await query.edit_message_text(
        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞!\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]
        ]),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def revoke_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    user_id = int(query.data.split(':')[-1])
    
    await query.answer("–û—Ç–∑—ã–≤–∞—é –ø–æ–¥–ø–∏—Å–∫—É...")
    
    from core import db
    conn = await db.get_db()
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await conn.execute("""
        UPDATE subscriptions 
        SET expires_at = datetime('now', '-1 day')
        WHERE user_id = ? AND expires_at > datetime('now')
    """, (user_id,))
    await conn.commit()
    
    await query.edit_message_text(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω–∞.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]
        ])
    )


# === –ù–ê–°–¢–†–û–ô–ö–ò ===

@admin_only
async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    from payment.config import SUBSCRIPTION_MODE
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications = context.bot_data.get('notifications_settings', {})
    notif_count = sum(1 for v in notifications.values() if v)
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"üõ°Ô∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: <b>{'–ú–æ–¥—É–ª—å–Ω—ã–π' if SUBSCRIPTION_MODE == 'modular' else '–ï–¥–∏–Ω—ã–π'}</b>\n"
        f"üîî –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{notif_count}</b>\n"
        f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: <b>{len(getattr(context.bot_data.get('plugins', []), 'PLUGINS', []))}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    )
    
    kb = AdminKeyboards.settings_menu()
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def settings_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    from payment.config import SUBSCRIPTION_MODE
    
    current_mode = SUBSCRIPTION_MODE
    
    text = (
        "üõ°Ô∏è <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{'–ú–æ–¥—É–ª—å–Ω—ã–π' if current_mode == 'modular' else '–ï–¥–∏–Ω—ã–π'}</b>\n\n"
        "‚Ä¢ <b>–ï–¥–∏–Ω—ã–π</b> - –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –º–æ–¥—É–ª–∏\n"
        "‚Ä¢ <b>–ú–æ–¥—É–ª—å–Ω—ã–π</b> - –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"
    )
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "‚úÖ –ï–¥–∏–Ω—ã–π" if current_mode == 'unified' else "–ï–¥–∏–Ω—ã–π",
                callback_data="admin:set_mode:unified"
            ),
            InlineKeyboardButton(
                "‚úÖ –ú–æ–¥—É–ª—å–Ω—ã–π" if current_mode == 'modular' else "–ú–æ–¥—É–ª—å–Ω—ã–π",
                callback_data="admin:set_mode:modular"
            )
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã."""
    query = update.callback_query
    mode = query.data.split(':')[-1]
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode}", show_alert=True)
    
    await settings_mode(update, context)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–∏) ===

@admin_only
async def global_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    stats = await AdminStats.get_global_stats(context.application)
    
    text = (
        "üìä <b>–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö (30 –¥–Ω–µ–π): {stats['active_users']}\n"
        f"üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']}\n\n"
        "<b>–ü–æ –º–æ–¥—É–ª—è–º:</b>\n"
    )
    
    for module, data in stats['by_module'].items():
        if data['users'] > 0:
            module_names = {
                'task24': 'üìù –ó–∞–¥–∞–Ω–∏–µ 24',
                'test_part': 'üìö –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üí≠ –ó–∞–¥–∞–Ω–∏–µ 20',
                'task25': 'üìã –ó–∞–¥–∞–Ω–∏–µ 25'
            }
            name = module_names.get(module, module)
            text += (
                f"\n{name}:\n"
                f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['users']}\n"
                f"  ‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫: {data['attempts']}\n"
            )
            if data.get('avg_score'):
                text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {data['avg_score']:.2f}\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats_menu")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def activity_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    
    from core import db
    
    text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
    
    try:
        conn = await db.get_db()
        
        cursor = await conn.execute("""
            SELECT 
                DATE(last_activity_date) as day,
                COUNT(DISTINCT user_id) as active_users
            FROM users
            WHERE last_activity_date > datetime('now', '-14 days')
            GROUP BY DATE(last_activity_date)
            ORDER BY day DESC
        """)
        daily_activity = await cursor.fetchall()
        
        if daily_activity:
            text += "üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π:</b>\n\n"
            
            max_users = max(row[1] for row in daily_activity) if daily_activity else 1
            
            for day, users in daily_activity:
                bar_length = int((users / max_users) * 20) if max_users > 0 else 0
                bar = "‚ñì" * bar_length + "‚ñë" * (20 - bar_length)
                date_str = datetime.strptime(day, "%Y-%m-%d").strftime("%d.%m")
                text += f"<code>{date_str} {bar} {users}</code>\n"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:activity_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:stats_menu")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def module_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º."""
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª–µ–π...")
    
    from core import db
    
    text = "üìö <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º</b>\n\n"
    
    try:
        conn = await db.get_db()
        
        modules = [
            ('task24', 'üìù –ó–∞–¥–∞–Ω–∏–µ 24'),
            ('test_part', 'üìö –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å'),
            ('task19', 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19'),
            ('task20', 'üí≠ –ó–∞–¥–∞–Ω–∏–µ 20'),
            ('task25', 'üìã –ó–∞–¥–∞–Ω–∏–µ 25')
        ]
        
        for module_type, module_name in modules:
            cursor = await conn.execute("""
                SELECT 
                    COUNT(DISTINCT user_id) as unique_users,
                    COUNT(*) as total_attempts,
                    AVG(score) as avg_score,
                    COUNT(CASE WHEN score > 0 THEN 1 END) as successful
                FROM attempts
                WHERE module_type = ?
                AND created_at > datetime('now', '-30 days')
            """, (module_type,))
            
            stats = await cursor.fetchone()
            
            if stats and stats[0] > 0:
                unique_users, total_attempts, avg_score, successful = stats
                success_rate = (successful / total_attempts * 100) if total_attempts > 0 else 0
                
                text += f"<b>{module_name}</b>\n"
                text += f"‚îú üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
                text += f"‚îú üìù –ü–æ–ø—ã—Ç–æ–∫: {total_attempts}\n"
                text += f"‚îú ‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}\n"
                text += f"‚îî ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
        text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:module_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:stats_menu")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    from core import db
    
    text = "üèÜ <b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    
    try:
        conn = await db.get_db()
        
        cursor = await conn.execute("""
            SELECT 
                user_id,
                COUNT(*) as total_attempts,
                SUM(score) as total_score,
                COUNT(DISTINCT module_type) as modules_used
            FROM attempts
            WHERE created_at > datetime('now', '-30 days')
            GROUP BY user_id
            ORDER BY total_attempts DESC
            LIMIT 10
        """)
        
        top_users_data = await cursor.fetchall()
        
        if top_users_data:
            for i, (user_id, attempts, score, modules) in enumerate(top_users_data, 1):
                cursor = await conn.execute(
                    "SELECT first_name, username FROM users WHERE user_id = ?",
                    (user_id,)
                )
                user_info = await cursor.fetchone()
                
                if user_info:
                    name = user_info[0] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    username = f"@{user_info[1]}" if user_info[1] else ""
                    
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                    
                    text += f"{medal} <b>{name}</b> {username}\n"
                    text += f"   üìù –ü–æ–ø—ã—Ç–æ–∫: {attempts}\n"
                    text += f"   üìö –ú–æ–¥—É–ª–µ–π: {modules}/5\n"
                    text += f"   ‚≠ê –û–±—â–∏–π –±–∞–ª–ª: {score:.0f}\n\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:top_users")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:stats_menu")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def security_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    query = update.callback_query
    await query.answer()
    
    report = admin_manager.get_security_report()
    
    text = (
        "üîí <b>–û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
        f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {report['total_admins']}\n\n"
    )
    
    if report['suspicious_users']:
        text += "‚ö†Ô∏è <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        for user_id in report['suspicious_users']:
            attempts = report['failed_attempts'].get(user_id, 0)
            text += f"  ‚Ä¢ User {user_id}: {attempts} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ —á–∞—Å\n"
    else:
        text += "‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:security")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@admin_only
async def close_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    await query.answer("–ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
    await query.delete_message()


@admin_only
async def handle_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –∏ –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    )
    
    kb = AdminKeyboards.export_menu()
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def export_stats_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV."""
    query = update.callback_query
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é CSV —Ñ–∞–π–ª...")
    
    from core import db
    
    try:
        conn = await db.get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor = await conn.execute("""
            SELECT 
                a.user_id,
                u.username,
                u.first_name,
                a.module_type,
                a.score,
                a.created_at
            FROM attempts a
            JOIN users u ON a.user_id = u.user_id
            ORDER BY a.created_at DESC
        """)
        
        data = await cursor.fetchall()
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['User ID', 'Username', 'Name', 'Module', 'Score', 'Date'])
        
        # –î–∞–Ω–Ω—ã–µ
        for row in data:
            writer.writerow(row)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        csv_data = output.getvalue().encode('utf-8-sig')  # BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        
        await context.bot.send_document(
            chat_id=update.effective_user.id,
            document=io.BytesIO(csv_data),
            filename=f"statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV"
        )
        
        await query.edit_message_text(
            "‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error exporting CSV: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )

@admin_only
async def export_stats_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏."""
    query = update.callback_query
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel —Ñ–∞–π–ª...")
    
    from core import db
    
    try:
        conn = await db.get_db()
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # –õ–∏—Å—Ç 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor = await conn.execute("""
                SELECT 
                    u.user_id,
                    u.username,
                    u.first_name,
                    COUNT(a.attempt_id) as total_attempts,
                    AVG(a.score) as avg_score,
                    MAX(a.score) as max_score,
                    COUNT(DISTINCT a.module_type) as modules_used
                FROM users u
                LEFT JOIN attempts a ON u.user_id = a.user_id
                GROUP BY u.user_id
            """)
            
            columns = ['User ID', 'Username', 'Name', 'Total Attempts', 'Avg Score', 'Max Score', 'Modules Used']
            df_stats = pd.DataFrame(await cursor.fetchall(), columns=columns)
            df_stats.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            # –õ–∏—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
            cursor = await conn.execute("""
                SELECT 
                    module_type,
                    COUNT(DISTINCT user_id) as unique_users,
                    COUNT(*) as total_attempts,
                    AVG(score) as avg_score,
                    MAX(score) as max_score,
                    MIN(score) as min_score
                FROM attempts
                GROUP BY module_type
            """)
            
            columns = ['Module', 'Unique Users', 'Total Attempts', 'Avg Score', 'Max Score', 'Min Score']
            df_modules = pd.DataFrame(await cursor.fetchall(), columns=columns)
            df_modules.to_excel(writer, sheet_name='–ü–æ –º–æ–¥—É–ª—è–º', index=False)
            
            # –õ–∏—Å—Ç 3: –ü–æ–¥–ø–∏—Å–∫–∏
            cursor = await conn.execute("""
                SELECT 
                    u.user_id,
                    u.username,
                    u.first_name,
                    s.plan_id,
                    s.started_at,
                    s.expires_at,
                    s.amount
                FROM subscriptions s
                JOIN users u ON s.user_id = u.user_id
                ORDER BY s.started_at DESC
            """)
            
            columns = ['User ID', 'Username', 'Name', 'Plan', 'Started', 'Expires', 'Amount']
            df_subs = pd.DataFrame(await cursor.fetchall(), columns=columns)
            df_subs.to_excel(writer, sheet_name='–ü–æ–¥–ø–∏—Å–∫–∏', index=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        output.seek(0)
        
        await context.bot.send_document(
            chat_id=update.effective_user.id,
            document=output,
            filename=f"statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            caption="üìä –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel"
        )
        
        await query.edit_message_text(
            "‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error exporting Excel: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )

@admin_only
async def backup_full(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ë–î."""
    query = update.callback_query
    await query.answer("–°–æ–∑–¥–∞—é –±—ç–∫–∞–ø...")
    
    try:
        # –ü—É—Ç—å –∫ –ë–î
        db_path = 'bot_database.db'
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ë–î
        with open(db_path, 'rb') as f:
            db_data = f.read()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await context.bot.send_document(
            chat_id=update.effective_user.id,
            document=io.BytesIO(db_data),
            filename=f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db",
            caption="üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
                   "‚ö†Ô∏è –•—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
        )
        
        await query.edit_message_text(
            "‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error creating backup: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )

@admin_only
async def generate_charts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏...")
    
    from core import db
    
    try:
        conn = await db.get_db()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, axes = plt.subplots(2, 2, figsize=(12, 10))
        fig.suptitle('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', fontsize=16)
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
        cursor = await conn.execute("""
            SELECT DATE(created_at) as day, COUNT(*) as attempts
            FROM attempts
            WHERE created_at > datetime('now', '-30 days')
            GROUP BY DATE(created_at)
            ORDER BY day
        """)
        data = await cursor.fetchall()
        
        if data:
            days = [datetime.strptime(d[0], '%Y-%m-%d') for d in data]
            attempts = [d[1] for d in data]
            
            axes[0, 0].plot(days, attempts, marker='o')
            axes[0, 0].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π')
            axes[0, 0].set_xlabel('–î–∞—Ç–∞')
            axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫')
            axes[0, 0].grid(True)
            axes[0, 0].tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—è–º
        cursor = await conn.execute("""
            SELECT module_type, COUNT(*) as count
            FROM attempts
            GROUP BY module_type
        """)
        data = await cursor.fetchall()
        
        if data:
            modules = [d[0] for d in data]
            counts = [d[1] for d in data]
            
            axes[0, 1].pie(counts, labels=modules, autopct='%1.1f%%')
            axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—è–º')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –º–æ–¥—É–ª—è–º
        cursor = await conn.execute("""
            SELECT module_type, AVG(score) as avg_score
            FROM attempts
            GROUP BY module_type
        """)
        data = await cursor.fetchall()
        
        if data:
            modules = [d[0] for d in data]
            scores = [d[1] for d in data]
            
            axes[1, 0].bar(modules, scores)
            axes[1, 0].set_title('–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –º–æ–¥—É–ª—è–º')
            axes[1, 0].set_xlabel('–ú–æ–¥—É–ª—å')
            axes[1, 0].set_ylabel('–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª')
            axes[1, 0].grid(True, axis='y')
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await conn.execute("""
            SELECT DATE(created_at) as day, COUNT(*) as new_users
            FROM users
            WHERE created_at > datetime('now', '-30 days')
            GROUP BY DATE(created_at)
            ORDER BY day
        """)
        data = await cursor.fetchall()
        
        if data:
            days = [datetime.strptime(d[0], '%Y-%m-%d') for d in data]
            new_users = [d[1] for d in data]
            
            # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—É–º–º–∞
            cumulative = []
            total = 0
            for count in new_users:
                total += count
                cumulative.append(total)
            
            axes[1, 1].plot(days, cumulative, marker='o', color='green')
            axes[1, 1].set_title('–†–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (30 –¥–Ω–µ–π)')
            axes[1, 1].set_xlabel('–î–∞—Ç–∞')
            axes[1, 1].set_ylabel('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            axes[1, 1].grid(True)
            axes[1, 1].tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=100)
        buf.seek(0)
        plt.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await context.bot.send_photo(
            chat_id=update.effective_user.id,
            photo=buf,
            caption="üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"
        )
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:generate_charts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:stats")]
        ])
        
        await query.edit_message_text(
            "‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=kb
        )
        
    except Exception as e:
        logger.error(f"Error generating charts: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:stats")]
            ])
        )

@admin_only
async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üîç <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
    )
    
    kb = AdminKeyboards.filter_menu()
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def filter_by_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üìÖ <b>–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:"
    )
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="admin:filter_apply:today"),
            InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="admin:filter_apply:yesterday")
        ],
        [
            InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="admin:filter_apply:week"),
            InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="admin:filter_apply:month")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:show_filters")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def settings_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏."""
    query = update.callback_query
    await query.answer()
    
    from core import plugin_loader
    
    text = "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏</b>\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
    plugins = plugin_loader.PLUGINS
    
    if plugins:
        text += f"–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {len(plugins)}\n\n"
        
        for plugin in plugins:
            text += f"‚Ä¢ <b>{plugin.title}</b>\n"
            text += f"  –ö–æ–¥: <code>{plugin.code}</code>\n"
            text += f"  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {plugin.menu_priority}\n\n"
    else:
        text += "–ú–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="admin:reload_modules"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:modules_usage")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞", callback_data="admin:modules_access"),
            InlineKeyboardButton("üîß –û—Ç–ª–∞–¥–∫–∞", callback_data="admin:modules_debug")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def modules_usage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π."""
    query = update.callback_query
    await query.answer()
    
    from core import db
    
    try:
        conn = await db.get_db()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
        cursor = await conn.execute("""
            SELECT 
                module_type,
                COUNT(DISTINCT user_id) as unique_users,
                COUNT(*) as total_uses,
                AVG(score) as avg_score,
                MAX(created_at) as last_used
            FROM attempts
            WHERE created_at > datetime('now', '-30 days')
            GROUP BY module_type
            ORDER BY total_uses DESC
        """)
        
        modules_stats = await cursor.fetchall()
        
        text = "üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π (30 –¥–Ω–µ–π)</b>\n\n"
        
        if modules_stats:
            for module, users, uses, avg_score, last_used in modules_stats:
                last_date = datetime.fromisoformat(last_used).strftime("%d.%m.%Y")
                
                module_names = {
                    'task24': 'üìã –ó–∞–¥–∞–Ω–∏–µ 24',
                    'test_part': 'üìö –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                    'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                    'task20': 'üí≠ –ó–∞–¥–∞–Ω–∏–µ 20',
                    'task25': 'üìù –ó–∞–¥–∞–Ω–∏–µ 25'
                }
                
                name = module_names.get(module, module)
                
                text += f"<b>{name}</b>\n"
                text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n"
                text += f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses}\n"
                text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}\n"
                text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_date}\n\n"
        else:
            text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"
        
    except Exception as e:
        logger.error(f"Error getting modules usage: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:modules_usage")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings_modules")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

# ============================================
# 3. –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
# ============================================

@admin_only
async def settings_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ bot_data)
    notifications = context.bot_data.get('notifications_settings', {
        'new_user': True,
        'new_payment': True,
        'daily_report': True,
        'errors': True,
        'low_balance': True
    })
    
    text = "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ, –æ —á—ë–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
    
    buttons = []
    
    for key, enabled in notifications.items():
        names = {
            'new_user': 'üë§ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'new_payment': 'üí≥ –ù–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
            'daily_report': 'üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç',
            'errors': '‚ùå –û—à–∏–±–∫–∏',
            'low_balance': 'üí∞ –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å'
        }
        
        status = "‚úÖ" if enabled else "‚ùå"
        button_text = f"{status} {names.get(key, key)}"
        buttons.append([InlineKeyboardButton(button_text, callback_data=f"admin:toggle_notif:{key}")])
    
    buttons.extend([
        [
            InlineKeyboardButton("üì® –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin:test_notification")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]
    ])
    
    kb = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def toggle_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    query = update.callback_query
    notif_type = query.data.split(':')[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    notifications = context.bot_data.get('notifications_settings', {
        'new_user': True,
        'new_payment': True,
        'daily_report': True,
        'errors': True,
        'low_balance': True
    })
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
    notifications[notif_type] = not notifications.get(notif_type, False)
    context.bot_data['notifications_settings'] = notifications
    
    await query.answer(f"{'–í–∫–ª—é—á–µ–Ω–æ' if notifications[notif_type] else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    await settings_notifications(update, context)

@admin_only
async def test_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
    
    test_message = """
üîî <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

–í—Ä–µ–º—è: {time}
    """.format(time=datetime.now().strftime("%d.%m.%Y %H:%M:%S"))
    
    try:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=test_message,
            parse_mode=ParseMode.HTML
        )
        
        await query.edit_message_text(
            "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings_notifications")]
            ])
        )
    except Exception as e:
        logger.error(f"Error sending test notification: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings_notifications")]
            ])
        )

# ============================================
# 4. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

@admin_only
async def export_payments_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ CSV."""
    query = update.callback_query
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–π–ª...")
    
    from core import db
    import csv
    import io
    
    try:
        conn = await db.get_db()
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: amount -> amount_kopecks
        cursor = await conn.execute("""
            SELECT 
                p.user_id,
                u.username,
                u.first_name,
                p.plan_id,
                p.amount_kopecks / 100.0 as amount_rub,
                p.status,
                p.payment_id,
                p.created_at,
                p.confirmed_at
            FROM payments p
            LEFT JOIN users u ON p.user_id = u.user_id
            ORDER BY p.created_at DESC
        """)
        
        payments = await cursor.fetchall()
        
        # –°–æ–∑–¥–∞—ë–º CSV
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['User ID', 'Username', 'Name', 'Plan', 'Amount (RUB)', 'Status', 'Payment ID', 'Created', 'Completed'])
        
        # –î–∞–Ω–Ω—ã–µ
        for row in payments:
            writer.writerow(row)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        csv_data = output.getvalue().encode('utf-8-sig')
        
        await context.bot.send_document(
            chat_id=update.effective_user.id,
            document=io.BytesIO(csv_data),
            filename=f"payments_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            caption="üí≥ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π"
        )
        
        await query.edit_message_text(
            "‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_history")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error exporting payments: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_history")]
            ])
        )

@admin_only
async def apply_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞."""
    query = update.callback_query
    filter_type = query.data.split(':')[-1]
    
    await query.answer("–ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä...")
    
    from core import db
    conn = await db.get_db()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º SQL —É—Å–ª–æ–≤–∏–µ
    where_clause = ""
    filter_name = ""
    
    if filter_type == 'today':
        where_clause = "DATE(created_at) = DATE('now')"
        filter_name = "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è"
    elif filter_type == 'yesterday':
        where_clause = "DATE(created_at) = DATE('now', '-1 day')"
        filter_name = "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—á–µ—Ä–∞"
    elif filter_type == 'week':
        where_clause = "created_at > datetime('now', '-7 days')"
        filter_name = "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
    elif filter_type == 'month':
        where_clause = "created_at > datetime('now', '-30 days')"
        filter_name = "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor = await conn.execute(f"""
        SELECT user_id, username, first_name, created_at
        FROM users
        WHERE {where_clause}
        ORDER BY created_at DESC
        LIMIT 20
    """)
    
    users = await cursor.fetchall()
    
    if users:
        text = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({filter_name})</b>\n\n"
        text += f"–ù–∞–π–¥–µ–Ω–æ: {len(users)}\n\n"
        
        for user_id, username, first_name, created_at in users[:10]:
            name = first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username_str = f"@{username}" if username else ""
            date_str = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            
            text += f"‚Ä¢ {name} {username_str}\n"
            text += f"  ID: <code>{user_id}</code>\n"
            text += f"  –î–∞—Ç–∞: {date_str}\n\n"
    else:
        text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ({filter_name})"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:show_filters")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

# ============================================
# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –†–ê–°–°–´–õ–û–ö
# ============================================

@admin_only
async def schedule_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    scheduled = broadcast_scheduler.get_scheduled()
    
    text = "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
    
    if scheduled:
        text += "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        for item in scheduled[:5]:
            run_time = item['run_time'].strftime("%d.%m.%Y %H:%M")
            text += f"‚Ä¢ ID: {item['id']}\n"
            text += f"  –í—Ä–µ–º—è: {run_time}\n\n"
    else:
        text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"
    
    kb = AdminKeyboards.schedule_menu()
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def schedule_new_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "(—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:schedule_menu")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    
    context.user_data['scheduling'] = True
    return SCHEDULE_MESSAGE

# ============================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–ù–ê–ú–ò
# ============================================

@admin_only
async def prices_current(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω."""
    query = update.callback_query
    await query.answer()
    
    prices = await PriceManager.get_current_prices()
    
    text = "üí∞ <b>–¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã</b>\n\n"
    
    for plan_id, data in prices.items():
        text += f"üì¶ <b>{plan_id}</b>\n"
        text += f"  ‚Ä¢ –¶–µ–Ω–∞: {data['price']} —Ä—É–±.\n"
        text += f"  ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} –¥–Ω–µ–π\n"
        text += f"  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="admin:prices_edit")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:price_management")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def prices_edit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω."""
    query = update.callback_query
    await query.answer()
    
    prices = await PriceManager.get_current_prices()
    
    text = "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:\n\n"
    
    buttons = []
    for plan_id, data in prices.items():
        buttons.append([
            InlineKeyboardButton(
                f"{plan_id} ({data['price']} —Ä—É–±.)",
                callback_data=f"admin:price_change:{plan_id}"
            )
        ])
    
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:price_management")])
    
    kb = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def price_change_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Ü–µ–Ω—ã."""
    query = update.callback_query
    plan_id = query.data.split(':')[-1]
    
    await query.answer()
    
    context.user_data['editing_plan'] = plan_id
    
    text = (
        f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è {plan_id}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 299"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:prices_edit")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return PRICE_INPUT

async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

@admin_only
async def export_users_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV."""
    query = update.callback_query
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é CSV —Ñ–∞–π–ª...")
    
    from core import db
    
    try:
        conn = await db.get_db()
        cursor = await conn.execute("""
            SELECT 
                user_id,
                username,
                first_name,
                last_name,
                created_at,
                last_activity_date
            FROM users
            ORDER BY created_at DESC
        """)
        
        data = await cursor.fetchall()
        
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(['User ID', 'Username', 'First Name', 'Last Name', 'Created', 'Last Activity'])
        
        for row in data:
            writer.writerow(row)
        
        csv_data = output.getvalue().encode('utf-8-sig')
        
        await context.bot.send_document(
            chat_id=update.effective_user.id,
            document=io.BytesIO(csv_data),
            filename=f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            caption="üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"
        )
        
        await query.edit_message_text(
            "‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error exporting users CSV: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )

@admin_only
async def export_users_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel."""
    query = update.callback_query
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel —Ñ–∞–π–ª...")
    
    from core import db
    
    try:
        conn = await db.get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await conn.execute("""
            SELECT 
                u.user_id,
                u.username,
                u.first_name,
                u.last_name,
                u.created_at,
                u.last_activity_date,
                COUNT(DISTINCT a.attempt_id) as attempts,
                AVG(a.score) as avg_score,
                COUNT(DISTINCT a.module_type) as modules
            FROM users u
            LEFT JOIN attempts a ON u.user_id = a.user_id
            GROUP BY u.user_id
            ORDER BY u.created_at DESC
        """)
        
        columns = ['User ID', 'Username', 'First Name', 'Last Name', 'Created', 'Last Activity', 'Attempts', 'Avg Score', 'Modules']
        df = pd.DataFrame(await cursor.fetchall(), columns=columns)
        
        output = io.BytesIO()
        df.to_excel(output, index=False, sheet_name='Users')
        output.seek(0)
        
        await context.bot.send_document(
            chat_id=update.effective_user.id,
            document=output,
            filename=f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            caption="üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel"
        )
        
        await query.edit_message_text(
            "‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error exporting users Excel: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:export")]
            ])
        )

@admin_only
async def receive_scheduled_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not context.user_data.get('scheduling'):
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_data = {}
    if update.message.photo:
        message_data['photo'] = update.message.photo[-1].file_id
        message_data['text'] = update.message.caption or ""
        message_data['entities'] = update.message.caption_entities
    else:
        message_data['text'] = update.message.text
        message_data['entities'] = update.message.entities
    
    context.user_data['scheduled_message'] = message_data
    
    text = (
        "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–®–∞–≥ 2: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 18:00"
    )
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)
    return SCHEDULE_TIME

@admin_only
async def receive_schedule_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_str = update.message.text.strip()
        scheduled_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
        
        if scheduled_time <= datetime.now():
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return SCHEDULE_TIME
        
        # –°–æ–∑–¥–∞–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_id = f"broadcast_{int(datetime.now().timestamp())}"
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        broadcast_scheduler.add_broadcast(
            broadcast_id=broadcast_id,
            run_time=scheduled_time,
            message_data=context.user_data['scheduled_message'],
            bot=context.bot
        )
        
        text = (
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            f"ID: {broadcast_id}\n"
            f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {scheduled_time.strftime('%d.%m.%Y %H:%M')}"
        )
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÖ –ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É", callback_data="admin:schedule_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin:main")]
        ])
        
        await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('scheduling', None)
        context.user_data.pop('scheduled_message', None)
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 18:00"
        )
        return SCHEDULE_TIME

@admin_only
async def process_new_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã."""
    try:
        new_price = int(update.message.text.strip())
        
        if new_price < 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
            return PRICE_INPUT
        
        plan_id = context.user_data.get('editing_plan')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        success = await PriceManager.update_price(plan_id, new_price)
        
        if success:
            text = f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è {plan_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price} —Ä—É–±."
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã"
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –ö —Ü–µ–Ω–∞–º", callback_data="admin:price_management")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin:main")]
        ])
        
        await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        
        context.user_data.pop('editing_plan', None)
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return PRICE_INPUT

@admin_only
async def price_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫."
    )
    
    kb = AdminKeyboards.price_management()
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def settings_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    from payment.config import SUBSCRIPTION_MODE, MODULE_PLANS, SUBSCRIPTION_PLANS
    
    text = "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
    
    if SUBSCRIPTION_MODE == 'modular':
        text += "üì¶ <b>–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        text += "<b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –º–æ–¥—É–ª–µ–π:</b>\n"
        for module_id, module_data in MODULE_PLANS.items():
            text += f"‚Ä¢ {module_data['name']}: {module_data['price_rub']}‚ÇΩ/–º–µ—Å\n"
    else:
        text += "üìã <b>–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
        text += "<b>–¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n"
        for plan_id, plan_data in SUBSCRIPTION_PLANS.items():
            text += f"‚Ä¢ {plan_data['name']}: {plan_data['price']}‚ÇΩ\n"
            text += f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan_data['duration_days']} –¥–Ω–µ–π\n\n"
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="admin:edit_prices"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂", callback_data="admin:sales_stats")
        ],
        [
            InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin:promo_codes"),
            InlineKeyboardButton("üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin:payment_history")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def edit_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω."""
    query = update.callback_query
    await query.answer()
    
    from payment.config import SUBSCRIPTION_MODE, MODULE_PLANS, SUBSCRIPTION_PLANS
    
    text = "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:\n\n"
    
    buttons = []
    
    if SUBSCRIPTION_MODE == 'modular':
        for module_id, module_data in MODULE_PLANS.items():
            button_text = f"{module_data['name']}: {module_data['price_rub']}‚ÇΩ"
            buttons.append([InlineKeyboardButton(
                button_text, 
                callback_data=f"admin:price_edit:{module_id}"
            )])
    else:
        for plan_id, plan_data in SUBSCRIPTION_PLANS.items():
            button_text = f"{plan_data['name']}: {plan_data['price']}‚ÇΩ"
            buttons.append([InlineKeyboardButton(
                button_text,
                callback_data=f"admin:price_edit:{plan_id}"
            )])
    
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings_prices")])
    
    kb = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def price_edit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."""
    query = update.callback_query
    plan_id = query.data.split(':')[-1]
    
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['editing_plan_id'] = plan_id
    
    from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS, SUBSCRIPTION_MODE
    
    if SUBSCRIPTION_MODE == 'modular':
        plans = MODULE_PLANS
        current_price = plans.get(plan_id, {}).get('price_rub', 0)
        plan_name = plans.get(plan_id, {}).get('name', plan_id)
    else:
        plans = SUBSCRIPTION_PLANS
        current_price = plans.get(plan_id, {}).get('price', 0)
        plan_name = plans.get(plan_id, {}).get('name', plan_id)
    
    text = (
        f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>\n\n"
        f"–¢–∞—Ä–∏—Ñ: {plan_name}\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 299"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:edit_prices")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return EDIT_PRICE_VALUE

@admin_only
async def price_edit_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã."""
    try:
        new_price = int(update.message.text.strip())
        
        if new_price < 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
            return EDIT_PRICE_VALUE
        
        plan_id = context.user_data.get('editing_plan_id')
        
        from core import db
        from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS, SUBSCRIPTION_MODE
        
        conn = await db.get_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ
        cursor = await conn.execute(
            "SELECT plan_id, duration_days FROM subscription_plans WHERE plan_id = ?",
            (plan_id,)
        )
        existing_plan = await cursor.fetchone()
        
        if existing_plan:
            # –ï—Å–ª–∏ –ø–ª–∞–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É
            await conn.execute("""
                UPDATE subscription_plans 
                SET price = ?, updated_at = CURRENT_TIMESTAMP
                WHERE plan_id = ?
            """, (new_price, plan_id))
        else:
            # –ï—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            duration_days = 30  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            description = plan_id
            
            if SUBSCRIPTION_MODE == 'modular':
                # –î–ª—è –º–æ–¥—É–ª–µ–π –≤—Å–µ–≥–¥–∞ 30 –¥–Ω–µ–π
                duration_days = 30
                description = MODULE_PLANS.get(plan_id, {}).get('name', plan_id)
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –±–µ—Ä—ë–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                plan_data = SUBSCRIPTION_PLANS.get(plan_id, {})
                duration_days = plan_data.get('duration_days', 30)
                description = plan_data.get('name', plan_id)
            
            await conn.execute("""
                INSERT INTO subscription_plans (plan_id, price, duration_days, description, created_at, updated_at)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (plan_id, new_price, duration_days, description))
        
        await conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –∫–æ–Ω—Ñ–∏–≥–µ (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)
        # –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –≤ –∏–¥–µ–∞–ª–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ë–î
        if SUBSCRIPTION_MODE == 'modular':
            if plan_id in MODULE_PLANS:
                MODULE_PLANS[plan_id]['price_rub'] = new_price
        else:
            if plan_id in SUBSCRIPTION_PLANS:
                SUBSCRIPTION_PLANS[plan_id]['price'] = new_price
        
        text = f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {plan_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price}‚ÇΩ"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        for admin_id in admin_manager.get_admin_list():
            if admin_id != update.effective_user.id:
                try:
                    await context.bot.send_message(
                        admin_id,
                        f"‚ö†Ô∏è –ê–¥–º–∏–Ω @{update.effective_user.username} –∏–∑–º–µ–Ω–∏–ª —Ü–µ–Ω—É {plan_id} –Ω–∞ {new_price}‚ÇΩ",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    pass
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π", callback_data="admin:edit_prices")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin:settings_prices")]
        ])
        
        await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        
        context.user_data.pop('editing_plan_id', None)
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return EDIT_PRICE_VALUE
    except Exception as e:
        logger.error(f"Error updating price: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:edit_prices")]
            ])
        )
        return ConversationHandler.END

# ============================================
# 4. –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê–ú–ò
# ============================================

@admin_only
async def promo_codes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    
    from core import db
    
    try:
        conn = await db.get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        cursor = await conn.execute("""
            SELECT code, discount_percent, discount_amount, usage_limit, used_count
            FROM promo_codes
            WHERE is_active = 1
            ORDER BY created_at DESC
            LIMIT 10
        """)
        
        promos = await cursor.fetchall()
        
        text = "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n"
        
        if promos:
            text += "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n"
            for code, disc_percent, disc_amount, limit, used in promos:
                discount = f"{disc_percent}%" if disc_percent else f"{disc_amount}‚ÇΩ"
                usage = f"{used}/{limit}" if limit else f"{used}/‚àû"
                text += f"‚Ä¢ <code>{code}</code> - {discount} (–∏—Å–ø: {usage})\n"
        else:
            text += "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç"
        
    except Exception as e:
        logger.error(f"Error loading promo codes: {e}")
        text = "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="admin:promo_create"),
            InlineKeyboardButton("üìã –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin:promo_list")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:promo_stats"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="admin:promo_delete")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings_prices")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def promo_create_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –î–ª–∏–Ω–∞ –æ—Ç 4 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: SUMMER2024, DISCOUNT50\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:promo_codes")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    
    context.user_data['promo_creation'] = {}
    return PROMO_CODE_INPUT

@admin_only
async def promo_code_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    code = update.message.text.strip().upper()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not code.isalnum():
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã!")
        return PROMO_CODE_INPUT
    
    if len(code) < 4 or len(code) > 20:
        await update.message.reply_text("‚ùå –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!")
        return PROMO_CODE_INPUT
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    from core import db
    conn = await db.get_db()
    cursor = await conn.execute("SELECT id FROM promo_codes WHERE code = ?", (code,))
    exists = await cursor.fetchone()
    
    if exists:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return PROMO_CODE_INPUT
    
    context.user_data['promo_creation']['code'] = code
    
    text = (
        f"üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        f"–ö–æ–¥: <code>{code}</code>\n\n"
        f"–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏:"
    )
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä –ü—Ä–æ—Ü–µ–Ω—Ç", callback_data="admin:promo_type:percent"),
            InlineKeyboardButton("üí∞ –§–∏–∫—Å. —Å—É–º–º–∞", callback_data="admin:promo_type:amount")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:promo_codes")]
    ])
    
    await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return PROMO_DISCOUNT_INPUT

@admin_only
async def promo_type_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∫–∏–¥–∫–∏."""
    query = update.callback_query
    discount_type = query.data.split(':')[-1]
    
    await query.answer()
    
    context.user_data['promo_creation']['type'] = discount_type
    
    if discount_type == 'percent':
        text = (
            "üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (1-100):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 50"
        )
    else:
        text = (
            "üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 100"
        )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:promo_codes")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return PROMO_DISCOUNT_INPUT

@admin_only
async def promo_discount_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏."""
    try:
        discount = int(update.message.text.strip())
        
        discount_type = context.user_data['promo_creation'].get('type', 'percent')
        
        if discount_type == 'percent':
            if discount < 1 or discount > 100:
                await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")
                return PROMO_DISCOUNT_INPUT
            context.user_data['promo_creation']['discount_percent'] = discount
            context.user_data['promo_creation']['discount_amount'] = 0
        else:
            if discount < 1:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return PROMO_DISCOUNT_INPUT
            context.user_data['promo_creation']['discount_amount'] = discount
            context.user_data['promo_creation']['discount_percent'] = 0
        
        text = (
            "üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
            "–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
            "(0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):"
        )
        
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        return PROMO_LIMIT_INPUT
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return PROMO_DISCOUNT_INPUT

@admin_only
async def promo_limit_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π."""
    try:
        limit = int(update.message.text.strip())
        
        if limit < 0:
            await update.message.reply_text("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
            return PROMO_LIMIT_INPUT
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ë–î
        from core import db
        conn = await db.get_db()
        
        promo_data = context.user_data['promo_creation']
        
        await conn.execute("""
            INSERT INTO promo_codes (
                code, discount_percent, discount_amount, 
                usage_limit, used_count, is_active
            ) VALUES (?, ?, ?, ?, 0, 1)
        """, (
            promo_data['code'],
            promo_data.get('discount_percent', 0),
            promo_data.get('discount_amount', 0),
            limit if limit > 0 else None
        ))
        await conn.commit()
        
        discount_text = f"{promo_data.get('discount_percent', 0)}%" if promo_data.get('type') == 'percent' else f"{promo_data.get('discount_amount', 0)}‚ÇΩ"
        limit_text = f"{limit} —Ä–∞–∑" if limit > 0 else "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        
        text = (
            f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"–ö–æ–¥: <code>{promo_data['code']}</code>\n"
            f"–°–∫–∏–¥–∫–∞: {discount_text}\n"
            f"–õ–∏–º–∏—Ç: {limit_text}"
        )
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéÅ –ö –ø—Ä–æ–º–æ–∫–æ–¥–∞–º", callback_data="admin:promo_codes")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin:main")]
        ])
        
        await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        
        context.user_data.pop('promo_creation', None)
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return PROMO_LIMIT_INPUT

@admin_only
async def promo_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    from core import db
    conn = await db.get_db()
    
    cursor = await conn.execute("""
        SELECT code, discount_percent, discount_amount, usage_limit, used_count, is_active
        FROM promo_codes
        ORDER BY created_at DESC
    """)
    
    promos = await cursor.fetchall()
    
    text = "üìã <b>–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n"
    
    if promos:
        for code, disc_percent, disc_amount, limit, used, active in promos[:20]:
            status = "‚úÖ" if active else "‚ùå"
            discount = f"{disc_percent}%" if disc_percent else f"{disc_amount}‚ÇΩ"
            usage = f"{used}/{limit}" if limit else f"{used}/‚àû"
            
            text += f"{status} <code>{code}</code>\n"
            text += f"   –°–∫–∏–¥–∫–∞: {discount} | –ò—Å–ø: {usage}\n\n"
    else:
        text += "–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:promo_codes")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def promo_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    from core import db
    conn = await db.get_db()
    
    cursor = await conn.execute("""
        SELECT 
            COUNT(*) as total,
            SUM(used_count) as total_used,
            COUNT(CASE WHEN is_active = 1 THEN 1 END) as active
        FROM promo_codes
    """)
    
    stats = await cursor.fetchone()
    total, total_used, active = stats
    
    # –¢–æ–ø –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    cursor = await conn.execute("""
        SELECT code, used_count
        FROM promo_codes
        WHERE used_count > 0
        ORDER BY used_count DESC
        LIMIT 5
    """)
    
    top_promos = await cursor.fetchall()
    
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {total}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {total_used or 0}\n\n"
    )
    
    if top_promos:
        text += "<b>–¢–æ–ø –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n"
        for code, used in top_promos:
            text += f"‚Ä¢ <code>{code}</code>: {used} —Ä–∞–∑\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:promo_codes")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def sales_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    from core import db
    
    try:
        conn = await db.get_db()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: amount -> amount_kopecks, –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
        cursor = await conn.execute("""
            SELECT 
                COUNT(*) as total_payments,
                SUM(amount_kopecks) / 100.0 as total_revenue,
                AVG(amount_kopecks) / 100.0 as avg_payment,
                COUNT(DISTINCT user_id) as unique_buyers
            FROM payments
            WHERE status IN ('completed', 'confirmed')
            AND created_at > datetime('now', '-30 days')
        """)
        
        stats = await cursor.fetchone()
        
        if stats:
            total_payments, total_revenue, avg_payment, unique_buyers = stats
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º
            cursor = await conn.execute("""
                SELECT 
                    plan_id,
                    COUNT(*) as count,
                    SUM(amount_kopecks) / 100.0 as revenue
                FROM payments
                WHERE status IN ('completed', 'confirmed')
                AND created_at > datetime('now', '-30 days')
                GROUP BY plan_id
                ORDER BY revenue DESC
            """)
            
            plans_stats = await cursor.fetchall()
            
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (30 –¥–Ω–µ–π)</b>\n\n"
            text += f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue or 0:,.0f}‚ÇΩ\n"
            text += f"üì¶ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_payments or 0}\n"
            text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {unique_buyers or 0}\n"
            text += f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_payment or 0:,.0f}‚ÇΩ\n\n"
            
            if plans_stats:
                text += "<b>–ü–æ —Ç–∞—Ä–∏—Ñ–∞–º:</b>\n"
                for plan_id, count, revenue in plans_stats:
                    text += f"‚Ä¢ {plan_id}: {count} —à—Ç. –Ω–∞ {revenue:,.0f}‚ÇΩ\n"
        else:
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</b>\n\n–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç."
        
    except Exception as e:
        logger.error(f"Error getting sales stats: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:sales_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings_prices")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

@admin_only
async def payment_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π."""
    query = update.callback_query
    await query.answer()
    
    from core import db
    
    try:
        conn = await db.get_db()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–ª–∞—Ç–µ–∂–µ–π
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: amount -> amount_kopecks
        cursor = await conn.execute("""
            SELECT 
                p.user_id,
                u.username,
                u.first_name,
                p.plan_id,
                p.amount_kopecks / 100.0 as amount_rub,
                p.status,
                p.created_at
            FROM payments p
            LEFT JOIN users u ON p.user_id = u.user_id
            ORDER BY p.created_at DESC
            LIMIT 20
        """)
        
        payments = await cursor.fetchall()
        
        text = "üí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
        
        if payments:
            for user_id, username, first_name, plan_id, amount_rub, status, created_at in payments[:10]:
                name = first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                username_str = f"@{username}" if username else f"ID: {user_id}"
                status_emoji = "‚úÖ" if status in ("completed", "confirmed") else "‚è≥" if status == "pending" else "‚ùå"
                date_str = datetime.fromisoformat(created_at).strftime("%d.%m %H:%M")
                
                text += f"{status_emoji} {date_str} - {name} ({username_str})\n"
                text += f"   {plan_id}: {amount_rub:.0f}‚ÇΩ\n\n"
        else:
            text += "–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
        
    except Exception as e:
        logger.error(f"Error getting payment history: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="admin:export_payments")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings_prices")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)


async def init_price_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏."""
    from core import db
    
    conn = await db.get_db()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS subscription_plans (
            plan_id TEXT PRIMARY KEY,
            price INTEGER NOT NULL,
            duration_days INTEGER NOT NULL,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    await conn.execute("""
        INSERT OR IGNORE INTO subscription_plans (plan_id, price, duration_days, description)
        VALUES 
            ('trial_7days', 99, 7, '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'),
            ('premium_30days', 299, 30, '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'),
            ('premium_90days', 699, 90, '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')
    """)
    
    await conn.commit()
    logger.info("Price tables initialized")

def register_price_promo_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ü–µ–Ω –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    from telegram.ext import CallbackQueryHandler, MessageHandler, filters, ConversationHandler
    
    # ConversationHandler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    price_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(price_edit_start, pattern="^admin:price_edit:")],
        states={
            EDIT_PRICE_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price_edit_process)]
        },
        fallbacks=[
            CallbackQueryHandler(edit_prices, pattern="^admin:edit_prices$")
        ]
    )
    app.add_handler(price_conv)
    
    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promo_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(promo_create_start, pattern="^admin:promo_create$")],
        states={
            PROMO_CODE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, promo_code_receive)],
            PROMO_DISCOUNT_INPUT: [
                CallbackQueryHandler(promo_type_select, pattern="^admin:promo_type:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, promo_discount_receive)
            ],
            PROMO_LIMIT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, promo_limit_receive)]
        },
        fallbacks=[
            CallbackQueryHandler(promo_codes_menu, pattern="^admin:promo_codes$"),
            CommandHandler("cancel", lambda u, c: ConversationHandler.END)
        ]
    )
    app.add_handler(promo_conv)
    
    # –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(edit_prices, pattern="^admin:edit_prices$"))
    app.add_handler(CallbackQueryHandler(promo_codes_menu, pattern="^admin:promo_codes$"))
    app.add_handler(CallbackQueryHandler(promo_list, pattern="^admin:promo_list$"))
    app.add_handler(CallbackQueryHandler(promo_stats, pattern="^admin:promo_stats$"))
    
    logger.info("Price and promo handlers registered")

def register_admin_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters
    
    # –ö–æ–º–∞–Ω–¥–∞ /admin
    app.add_handler(CommandHandler("admin", admin_panel))
    
    # ConversationHandler –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_broadcast, pattern="^admin:broadcast$")],
        states={
            BROADCAST_TEXT: [MessageHandler(filters.ALL & ~filters.COMMAND, broadcast_receive_message)],
            BROADCAST_CONFIRM: []
        },
        fallbacks=[
            CommandHandler("cancel", lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(broadcast_cancel, pattern="^admin:broadcast_cancel$"),
            CallbackQueryHandler(admin_panel, pattern="^admin:main$")
        ]
    )
    app.add_handler(broadcast_conv)
    
    # ConversationHandler –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    search_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(user_search_start, pattern="^admin:user_search$")],
        states={
            USER_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_search_process)]
        },
        fallbacks=[
            CommandHandler("cancel", lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(handle_users, pattern="^admin:users$")
        ]
    )
    app.add_handler(search_conv)
        # –≠–∫—Å–ø–æ—Ä—Ç –∏ –±—ç–∫–∞–ø
    app.add_handler(CallbackQueryHandler(handle_export, pattern="^admin:export$"))
    app.add_handler(CallbackQueryHandler(export_stats_csv, pattern="^admin:export_stats_csv$"))
    app.add_handler(CallbackQueryHandler(export_stats_excel, pattern="^admin:export_stats_excel$"))
    app.add_handler(CallbackQueryHandler(export_users_csv, pattern="^admin:export_users_csv$"))
    app.add_handler(CallbackQueryHandler(export_users_excel, pattern="^admin:export_users_excel$"))
    app.add_handler(CallbackQueryHandler(backup_full, pattern="^admin:backup_full$"))
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    app.add_handler(CallbackQueryHandler(generate_charts, pattern="^admin:generate_charts$"))
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    app.add_handler(CallbackQueryHandler(show_filters, pattern="^admin:show_filters$"))
    app.add_handler(CallbackQueryHandler(filter_by_date, pattern="^admin:filter_date$"))
    app.add_handler(CallbackQueryHandler(apply_filter, pattern="^admin:filter_apply:"))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫
    app.add_handler(CallbackQueryHandler(settings_prices, pattern="^admin:settings_prices$"))
    app.add_handler(CallbackQueryHandler(sales_stats, pattern="^admin:sales_stats$"))
    app.add_handler(CallbackQueryHandler(payment_history, pattern="^admin:payment_history$"))
    app.add_handler(CallbackQueryHandler(export_payments_csv, pattern="^admin:export_payments$"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ú–æ–¥—É–ª–∏
    app.add_handler(CallbackQueryHandler(settings_modules, pattern="^admin:settings_modules$"))
    app.add_handler(CallbackQueryHandler(modules_usage, pattern="^admin:modules_usage$"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(settings_notifications, pattern="^admin:settings_notifications$"))
    app.add_handler(CallbackQueryHandler(toggle_notification, pattern="^admin:toggle_notif:"))
    app.add_handler(CallbackQueryHandler(test_notification, pattern="^admin:test_notification$"))
    
    logger.info("Settings handlers registered successfully")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
    app.add_handler(CallbackQueryHandler(schedule_broadcast_menu, pattern="^admin:schedule_menu$"))
    app.add_handler(CallbackQueryHandler(schedule_new_broadcast, pattern="^admin:schedule_new$"))
    
    # ConversationHandler –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    schedule_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(schedule_new_broadcast, pattern="^admin:schedule_new$")],
        states={
            SCHEDULE_MESSAGE: [MessageHandler(filters.ALL & ~filters.COMMAND, receive_scheduled_message)],
            SCHEDULE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_schedule_time)]
        },
        fallbacks=[
            CommandHandler("cancel", lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(schedule_broadcast_menu, pattern="^admin:schedule_menu$")
        ]
    )
    app.add_handler(schedule_conv)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏
    app.add_handler(CallbackQueryHandler(price_management, pattern="^admin:price_management$"))
    app.add_handler(CallbackQueryHandler(prices_current, pattern="^admin:prices_current$"))
    app.add_handler(CallbackQueryHandler(prices_edit_start, pattern="^admin:prices_edit$"))
    app.add_handler(CallbackQueryHandler(price_change_request, pattern="^admin:price_change:"))
    
    # ConversationHandler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    price_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(price_change_request, pattern="^admin:price_change:")],
        states={
            PRICE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_new_price)]
        },
        fallbacks=[
            CommandHandler("cancel", lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(prices_edit_start, pattern="^admin:prices_edit$")
        ]
    )
    app.add_handler(price_conv)
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    broadcast_scheduler.start()
    
    logger.info("Extended admin handlers registered successfully")
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin:main$"))
    app.add_handler(CallbackQueryHandler(stats_menu, pattern="^admin:stats$"))
    app.add_handler(CallbackQueryHandler(handle_users, pattern="^admin:users$"))
    app.add_handler(CallbackQueryHandler(handle_settings, pattern="^admin:settings$"))
    app.add_handler(CallbackQueryHandler(handle_export, pattern="^admin:export$"))
    app.add_handler(CallbackQueryHandler(security_report, pattern="^admin:security$"))
    app.add_handler(CallbackQueryHandler(close_admin_panel, pattern="^admin:close$"))
    
    # –†–∞—Å—Å—ã–ª–∫–∞
    app.add_handler(CallbackQueryHandler(broadcast_start, pattern="^admin:broadcast_start$"))
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    app.add_handler(CallbackQueryHandler(users_list, pattern="^admin:users_list$"))
    app.add_handler(CallbackQueryHandler(users_premium, pattern="^admin:users_premium$"))
    app.add_handler(CallbackQueryHandler(grant_subscription, pattern="^admin:grant_sub:"))
    app.add_handler(CallbackQueryHandler(revoke_subscription, pattern="^admin:revoke_sub:"))
    app.add_handler(CallbackQueryHandler(
        lambda u, c: (c.user_data.__setitem__('users_page', int(u.callback_query.data.split(':')[-1])), 
                     users_list(u, c))[1],
        pattern="^admin:users_page:"
    ))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    app.add_handler(CallbackQueryHandler(settings_mode, pattern="^admin:settings_mode$"))
    app.add_handler(CallbackQueryHandler(set_mode, pattern="^admin:set_mode:"))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    app.add_handler(CallbackQueryHandler(stats_menu, pattern="^admin:stats_menu$"))
    app.add_handler(CallbackQueryHandler(global_stats, pattern="^admin:global_stats$"))
    app.add_handler(CallbackQueryHandler(activity_stats, pattern="^admin:activity_stats$"))
    app.add_handler(CallbackQueryHandler(module_stats, pattern="^admin:module_stats$"))
    app.add_handler(CallbackQueryHandler(top_users, pattern="^admin:top_users$"))
    
    # –ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(CallbackQueryHandler(noop, pattern="^admin:noop$"))
    register_price_promo_handlers(app)

    logger.info("Admin handlers registered successfully")
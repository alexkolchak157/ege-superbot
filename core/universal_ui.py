"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å UI/UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –±–æ—Ç–∞.
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ç–∏–ª–µ task20 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

from typing import List, Dict, Optional, Tuple, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class UniversalUIComponents:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
    
    # –°–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    PROGRESS_CHARS = {
        'full': '‚ñà',
        'high': '‚ñì',
        'medium': '‚ñí',
        'low': '‚ñë',
        'empty': '‚ñë'
    }
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ü–µ–Ω–æ–∫
    SCORE_EMOJIS = {
        'perfect': 'üåü',
        'excellent': 'üéâ',
        'good': '‚úÖ',
        'fair': 'üí°',
        'poor': 'üìö',
        'none': '‚ùå'
    }
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    COLOR_INDICATORS = {
        'green': 'üü¢',
        'yellow': 'üü°',
        'red': 'üî¥',
        'blue': 'üîµ',
        'white': '‚ö™'
    }
    
    @classmethod
    def create_progress_bar(cls, current: int, total: int, width: int = 10, 
                          show_percentage: bool = True) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä.
        
        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            total: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            width: –®–∏—Ä–∏–Ω–∞ –±–∞—Ä–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            show_percentage: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç
        """
        if total == 0:
            return cls.PROGRESS_CHARS['empty'] * width
        
        percentage = current / total
        filled = int(percentage * width)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if percentage >= 0.9:
            fill_char = cls.PROGRESS_CHARS['full']
        elif percentage >= 0.7:
            fill_char = cls.PROGRESS_CHARS['high']
        elif percentage >= 0.5:
            fill_char = cls.PROGRESS_CHARS['medium']
        else:
            fill_char = cls.PROGRESS_CHARS['low']
        
        bar = fill_char * filled + cls.PROGRESS_CHARS['empty'] * (width - filled)
        
        if show_percentage:
            return f"{bar} {int(percentage * 100)}%"
        return bar
    
    @classmethod
    def create_score_visual(cls, score: int, max_score: int, 
                          use_stars: bool = True) -> str:
        """
        –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏.
        
        Args:
            score: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –±–∞–ª–ª
            max_score: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
            use_stars: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã
        """
        if use_stars and max_score <= 5:
            # –ó–≤–µ–∑–¥–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ—Ü–µ–Ω–æ–∫
            filled = "‚≠ê" * score
            empty = "‚òÜ" * (max_score - score)
            return filled + empty
        else:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ü–µ–Ω–æ–∫ - —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç —Å —ç–º–æ–¥–∑–∏
            percentage = score / max_score if max_score > 0 else 0
            
            if percentage == 1:
                emoji = cls.SCORE_EMOJIS['perfect']
            elif percentage >= 0.9:
                emoji = cls.SCORE_EMOJIS['excellent']
            elif percentage >= 0.7:
                emoji = cls.SCORE_EMOJIS['good']
            elif percentage >= 0.5:
                emoji = cls.SCORE_EMOJIS['fair']
            elif percentage > 0:
                emoji = cls.SCORE_EMOJIS['poor']
            else:
                emoji = cls.SCORE_EMOJIS['none']
            
            return f"{emoji} {score}/{max_score}"
    
    @classmethod
    def create_trend_indicator(cls, current: float, previous: float) -> str:
        """
        –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π.
        
        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            previous: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if current > previous:
            return "üìà –†–∞—Å—Ç—ë—Ç"
        elif current < previous:
            return "üìâ –ü–∞–¥–∞–µ—Ç"
        else:
            return "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ"
    
    @classmethod
    def format_time_spent(cls, minutes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
        if minutes < 1:
            return "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"
        elif minutes < 60:
            return f"{minutes} –º–∏–Ω"
        else:
            hours = minutes // 60
            mins = minutes % 60
            if mins == 0:
                return f"{hours} —á"
            return f"{hours} —á {mins} –º–∏–Ω"
    
    @classmethod
    def format_date_relative(cls, date: datetime) -> str:
        """–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã."""
        now = datetime.now()
        diff = now - date
        
        if diff.days == 0:
            if diff.seconds < 3600:
                return f"{diff.seconds // 60} –º–∏–Ω –Ω–∞–∑–∞–¥"
            else:
                return f"{diff.seconds // 3600} —á –Ω–∞–∑–∞–¥"
        elif diff.days == 1:
            return "–≤—á–µ—Ä–∞"
        elif diff.days < 7:
            return f"{diff.days} –¥–Ω –Ω–∞–∑–∞–¥"
        else:
            return date.strftime("%d.%m.%Y")
    
    @classmethod
    def create_achievement_badge(cls, name: str, icon: str = "üèÜ",
                               rarity: str = "common") -> str:
        """–°–æ–∑–¥–∞—Ç—å –±–µ–π–¥–∂ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
        rarity_colors = {
            'common': '‚ö™',
            'uncommon': 'üü¢',
            'rare': 'üîµ',
            'epic': 'üü£',
            'legendary': 'üü°'
        }
        
        color = rarity_colors.get(rarity, '‚ö™')
        return f"{color} {icon} {name}"
    
    @classmethod
    def format_statistics_tree(cls, stats: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞.
        
        Args:
            stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        lines = []
        items = list(stats.items())
        
        for i, (key, value) in enumerate(items):
            is_last = i == len(items) - 1
            prefix = "‚îî" if is_last else "‚îú"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á
            formatted_key = key.replace('_', ' ').title()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if isinstance(value, float):
                formatted_value = f"{value:.2f}"
            elif isinstance(value, bool):
                formatted_value = "‚úÖ" if value else "‚ùå"
            else:
                formatted_value = str(value)
            
            lines.append(f"{prefix} {formatted_key}: {formatted_value}")
        
        return "\n".join(lines)
    
    @classmethod
    def get_color_for_score(cls, score: int, max_score: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ü–µ–Ω–∫–∏."""
        percentage = score / max_score if max_score > 0 else 0
        
        if percentage >= 0.9:
            return cls.COLOR_INDICATORS['green']
        elif percentage >= 0.7:
            return cls.COLOR_INDICATORS['yellow']
        elif percentage >= 0.5:
            return cls.COLOR_INDICATORS['blue']
        else:
            return cls.COLOR_INDICATORS['red']
    
    @classmethod
    def create_fancy_header(cls, title: str, subtitle: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–º–∫–æ–π"""
        header = f"‚ïî{'‚ïê' * (len(title) + 4)}‚ïó\n"
        header += f"‚ïë  {title}  ‚ïë\n"
        header += f"‚ïö{'‚ïê' * (len(title) + 4)}‚ïù"
        
        if subtitle:
            header += f"\n\n{subtitle}"
        
        return header

class AdaptiveKeyboards:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –º–µ–Ω—è—é—â–∏–µ—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    
    @staticmethod
    def create_result_keyboard(score: int, max_score: int,
                             module_code: str = "task") -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞.
        –ö–Ω–æ–ø–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
        """
        buttons = []
        percentage = score / max_score if max_score > 0 else 0
        
        if percentage == 1.0:
            # –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            buttons.append([
                InlineKeyboardButton("üéâ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"{module_code}_new"),
                InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"{module_code}_progress")
            ])
            buttons.append([
                InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data=f"{module_code}_achievements")
            ])
        elif percentage >= 0.6:
            # –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            buttons.append([
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"{module_code}_retry"),
                InlineKeyboardButton("üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"{module_code}_new")
            ])
            buttons.append([
                InlineKeyboardButton("üí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–∞–ª–æ–Ω", callback_data=f"{module_code}_show_ideal")
            ])
        else:
            # –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            buttons.append([
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"{module_code}_retry")
            ])
            buttons.append([
                InlineKeyboardButton("üìö –ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é", callback_data=f"{module_code}_theory"),
                InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã", callback_data=f"{module_code}_examples")
            ])
            buttons.append([
                InlineKeyboardButton("üéØ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"{module_code}_new")
            ])
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        buttons.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data=f"{module_code}_menu"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="to_main_menu")
        ])
        
        return InlineKeyboardMarkup(buttons)
    
    @staticmethod
    def create_menu_keyboard(user_stats: Dict[str, Any],
                           module_code: str = "task") -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥—É–ª—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        """
        buttons = []
        
        # –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å—Ç—Ä–∏–∫–∞
        practice_text = "üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞"
        if user_stats.get('streak', 0) > 0:
            practice_text += f" (üî•{user_stats['streak']})"
        buttons.append([InlineKeyboardButton(practice_text, callback_data=f"{module_code}_practice")])
        
        # –¢–µ–æ—Ä–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–æ–≤–∏–∑–Ω—ã
        theory_text = "üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã"
        if user_stats.get('total_attempts', 0) == 0:
            theory_text += " üÜï"
        buttons.append([InlineKeyboardButton(theory_text, callback_data=f"{module_code}_theory")])
        
        # –ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤/—ç—Ç–∞–ª–æ–Ω–æ–≤
        examples_text = "üè¶ –ë–∞–Ω–∫ —ç—Ç–∞–ª–æ–Ω–æ–≤"
        if user_stats.get('examples_viewed', 0) == 0:
            examples_text += " üí°"
        buttons.append([InlineKeyboardButton(examples_text, callback_data=f"{module_code}_examples")])
        
        # –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ —Å —Å—á—ë—Ç—á–∏–∫–æ–º
        if user_stats.get('mistakes_count', 0) > 0:
            mistakes_text = f"üîß –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ({user_stats['mistakes_count']})"
            buttons.append([InlineKeyboardButton(mistakes_text, callback_data=f"{module_code}_mistakes")])
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
        progress_text = "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
        if user_stats.get('progress_percent', 0) > 0:
            progress_text += f" ({user_stats['progress_percent']}%)"
        buttons.append([InlineKeyboardButton(progress_text, callback_data=f"{module_code}_progress")])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.extend([
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{module_code}_settings")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ])
        
        return InlineKeyboardMarkup(buttons)
    
    @staticmethod
    def create_progress_keyboard(has_detailed_stats: bool = False,
                               can_export: bool = True,
                               module_code: str = "task") -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        buttons = []
        
        if has_detailed_stats:
            buttons.append([
                InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                                   callback_data=f"{module_code}_detailed_stats")
            ])
        
        if can_export:
            buttons.append([
                InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                                   callback_data=f"{module_code}_export")
            ])
        
        buttons.extend([
            [
                InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", 
                                   callback_data=f"{module_code}_reset_confirm"),
                InlineKeyboardButton("üí™ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
                                   callback_data=f"{module_code}_practice")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{module_code}_menu")]
        ])
        
        return InlineKeyboardMarkup(buttons)


class MessageFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ."""
    
    @staticmethod
    def format_result_message(score: int, max_score: int, topic: str,
                            details: Optional[Dict] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
        
        Args:
            score: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –±–∞–ª–ª
            max_score: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        percentage = score / max_score if max_score > 0 else 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if percentage == 1.0:
            header = "üéâ <b>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>"
            emoji = "üåü"
        elif percentage >= 0.8:
            header = "üëç <b>–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>"
            emoji = "‚úÖ"
        elif percentage >= 0.6:
            header = "üìù <b>–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å</b>"
            emoji = "üí°"
        else:
            header = "‚ùå <b>–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</b>"
            emoji = "üìö"
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏
        score_visual = UniversalUIComponents.create_score_visual(score, max_score)
        
        text = f"""{header}

<b>–¢–µ–º–∞:</b> {topic}
<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {score_visual}

{emoji} <b>–ê–Ω–∞–ª–∏–∑:</b>"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if details:
            for key, value in details.items():
                if value:
                    text += f"\n‚Ä¢ {key}: {value}"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
        if percentage < 1.0:
            text += "\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> "
            if percentage < 0.3:
                text += "–ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ"
            elif percentage < 0.6:
                text += "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏"
            else:
                text += "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è"
        
        return text
    
    @staticmethod
    def format_progress_message(stats: Dict[str, Any], module_name: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.
        
        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            module_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        """
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = UniversalUIComponents.create_progress_bar(
            stats.get('completed', 0),
            stats.get('total', 1)
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        time_spent = UniversalUIComponents.format_time_spent(
            stats.get('total_time', 0)
        )
        
        # –¢—Ä–µ–Ω–¥
        if 'trend' in stats:
            trend = UniversalUIComponents.create_trend_indicator(
                stats.get('current_average', 0),
                stats.get('previous_average', 0)
            )
        else:
            trend = "‚û°Ô∏è –ù–∞—á–∞–ª–æ –ø—É—Ç–∏"
        
        text = f"""üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ {module_name}</b>

<b>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
{UniversalUIComponents.format_statistics_tree({
    '–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π': stats.get('total_attempts', 0),
    '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': f"{stats.get('average_score', 0):.2f}",
    '–ò–∑—É—á–µ–Ω–æ —Ç–µ–º': f"{stats.get('completed', 0)}/{stats.get('total', 0)}",
    '–í—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏': time_spent,
    '–¢—Ä–µ–Ω–¥': trend
})}

<b>üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º:</b>
{progress_bar}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'top_results' in stats and stats['top_results']:
            text += "\n\n<b>üèÜ –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>"
            for i, result in enumerate(stats['top_results'][:3], 1):
                score_visual = UniversalUIComponents.create_score_visual(
                    result['score'],
                    result['max_score']
                )
                text += f"\n{i}. {result['topic']}: {score_visual}"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        avg_score = stats.get('average_score', 0)
        if avg_score > 0:
            text += "\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> "
            if avg_score < 2:
                text += "–£–¥–µ–ª–∏—Ç–µ –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∞–∫—Ç–∏–∫–æ–π"
            elif avg_score < 2.5:
                text += "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è"
            else:
                text += "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã"
        
        return text
    
    @staticmethod
    def format_welcome_message(module_name: str, is_new_user: bool = True) -> str:
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥—É–ª—è."""
        if is_new_user:
            return f"""üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {module_name}!</b>

–ó–¥–µ—Å—å –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª.

<b>–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:</b>
‚Ä¢ üìö –ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üèÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤ –º–µ–Ω—é!"""
        else:
            return f"""üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</b>

–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ {module_name}.
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"""


# –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    'UniversalUIComponents',
    'AdaptiveKeyboards',
    'MessageFormatter'
]

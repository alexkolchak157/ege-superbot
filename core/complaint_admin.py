"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∂–∞–ª–æ–± –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ AI.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è:
- –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–± —É—á–µ–Ω–∏–∫–æ–≤
- –û–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±
- –°–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
- –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∂–∞–ª–æ–±–∞–º –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
"""

import logging
import aiosqlite
from datetime import datetime
from typing import Optional, List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode
from core.config import DATABASE_FILE
from core.hint_manager import HintManager
from core.admin_tools import admin_only

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
HINT_AWAITING_TEXT = "hint_awaiting_text"
HINT_AWAITING_CATEGORY = "hint_awaiting_category"
HINT_AWAITING_PRIORITY = "hint_awaiting_priority"


@admin_only
async def cmd_review_complaint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∞–ª–æ–±—ã: /review_complaint <id>

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∞–ª–æ–±–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args or len(context.args) == 0:
        await update.message.reply_text(
            "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /review_complaint &lt;id&gt;\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/review_complaint 123</code>\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–± –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending_complaints",
            parse_mode=ParseMode.HTML
        )
        return

    try:
        complaint_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∂–∞–ª–æ–±—ã. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
            parse_mode=ParseMode.HTML
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∂–∞–ª–æ–±—É –∏–∑ –ë–î
    try:
        async with aiosqlite.connect(DATABASE_FILE) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                """
                SELECT * FROM user_feedback
                WHERE id = ? AND feedback_type = 'complaint'
                """,
                (complaint_id,)
            )
            complaint = await cursor.fetchone()

        if not complaint:
            await update.message.reply_text(
                f"‚ùå –ñ–∞–ª–æ–±–∞ #{complaint_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode=ParseMode.HTML
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∞–ª–æ–±–µ
        status_emoji = {
            'new': 'üÜï',
            'in_progress': '‚è≥',
            'resolved': '‚úÖ',
            'closed': 'üîí'
        }

        user_answer_preview = complaint['user_answer'][:400] if complaint['user_answer'] else "–ù/–î"
        ai_feedback_preview = complaint['ai_feedback'][:400] if complaint['ai_feedback'] else "–ù/–î"

        text = f"""
{status_emoji.get(complaint['status'], '‚ùì')} <b>–ñ–∞–ª–æ–±–∞ #{complaint_id}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {complaint['status']}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{complaint['user_id']}</code>
<b>–î–∞—Ç–∞:</b> {complaint['created_at']}

üìö <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {complaint['task_type']}
üìñ <b>–¢–µ–º–∞:</b> {complaint['topic_name']}
üìä <b>–û—Ü–µ–Ω–∫–∞ AI:</b> K1={complaint['k1_score']}, K2={complaint['k2_score']}

<b>–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã:</b>
{complaint['complaint_reason']}

<b>–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —É—á–µ–Ω–∏–∫–∞:</b>
{complaint['message']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>–ü–ª–∞–Ω —É—á–µ–Ω–∏–∫–∞:</b>
<code>{user_answer_preview}{'...' if len(user_answer_preview) >= 400 else ''}</code>

<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å AI:</b>
<code>{ai_feedback_preview}{'...' if len(ai_feedback_preview) >= 400 else ''}</code>
"""

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = []

        if complaint['status'] == 'new':
            keyboard.append([
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"adm_approve:{complaint_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"adm_reject:{complaint_id}")
            ])

        if complaint['status'] in ['new', 'in_progress']:
            keyboard.append([
                InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É", callback_data=f"adm_create_hint:{complaint_id}")
            ])

        keyboard.append([
            InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å —É—á–µ–Ω–∏–∫—É", callback_data=f"adm_respond:{complaint_id}")
        ])

        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None
        )

    except Exception as e:
        logger.error(f"Error reviewing complaint #{complaint_id}: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂–∞–ª–æ–±—ã #{complaint_id}.",
            parse_mode=ParseMode.HTML
        )


@admin_only
async def cmd_pending_complaints(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±: /pending_complaints
    """
    try:
        async with aiosqlite.connect(DATABASE_FILE) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                """
                SELECT id, user_id, task_type, topic_name, complaint_reason,
                       k1_score, k2_score, created_at
                FROM user_feedback
                WHERE feedback_type = 'complaint' AND status = 'new'
                ORDER BY created_at DESC
                LIMIT 10
                """
            )
            complaints = await cursor.fetchall()

        if not complaints:
            await update.message.reply_text(
                "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±!",
                parse_mode=ParseMode.HTML
            )
            return

        text = f"üÜï <b>–û–∂–∏–¥–∞—é—â–∏–µ –∂–∞–ª–æ–±—ã ({len(complaints)}):</b>\n\n"

        for complaint in complaints:
            text += f"""
<b>#{complaint['id']}</b> | {complaint['task_type']} | {complaint['topic_name']}
üë§ User: <code>{complaint['user_id']}</code> | üìä K1={complaint['k1_score']}, K2={complaint['k2_score']}
üìÖ {complaint['created_at']}
üí≠ {complaint['complaint_reason']}

"""

        text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /review_complaint &lt;id&gt; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"Error fetching pending complaints: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂–∞–ª–æ–±.",
            parse_mode=ParseMode.HTML
        )


async def handle_approve_complaint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∂–∞–ª–æ–±—ã.
    """
    query = update.callback_query
    await query.answer()

    complaint_id = int(query.data.split(":")[1])

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã
        async with aiosqlite.connect(DATABASE_FILE) as db:
            await db.execute(
                """
                UPDATE user_feedback
                SET status = 'resolved',
                    resolution_type = 'approved',
                    admin_id = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
                """,
                (update.effective_user.id, complaint_id)
            )
            await db.commit()

        logger.info(f"Complaint #{complaint_id} approved by admin {update.effective_user.id}")

        await query.edit_message_text(
            f"‚úÖ <b>–ñ–∞–ª–æ–±–∞ #{complaint_id} –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è AI, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –±—É–¥—É—â–µ–º.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/create_hint {complaint_id}</code>",
            parse_mode=ParseMode.HTML
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
        await notify_user_about_resolution(context, complaint_id, approved=True)

    except Exception as e:
        logger.error(f"Error approving complaint #{complaint_id}: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã #{complaint_id}.",
            parse_mode=ParseMode.HTML
        )


async def handle_reject_complaint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã.
    """
    query = update.callback_query
    await query.answer()

    complaint_id = int(query.data.split(":")[1])

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã
        async with aiosqlite.connect(DATABASE_FILE) as db:
            await db.execute(
                """
                UPDATE user_feedback
                SET status = 'resolved',
                    resolution_type = 'rejected',
                    admin_id = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
                """,
                (update.effective_user.id, complaint_id)
            )
            await db.commit()

        logger.info(f"Complaint #{complaint_id} rejected by admin {update.effective_user.id}")

        await query.edit_message_text(
            f"‚ùå <b>–ñ–∞–ª–æ–±–∞ #{complaint_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.",
            parse_mode=ParseMode.HTML
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        await notify_user_about_resolution(context, complaint_id, approved=False)

    except Exception as e:
        logger.error(f"Error rejecting complaint #{complaint_id}: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã #{complaint_id}.",
            parse_mode=ParseMode.HTML
        )


async def handle_create_hint_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –∂–∞–ª–æ–±—ã.
    """
    query = update.callback_query
    await query.answer()

    complaint_id = int(query.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∂–∞–ª–æ–±—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['creating_hint_for_complaint'] = complaint_id

    await query.edit_message_text(
        f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –∂–∞–ª–æ–±—ã #{complaint_id}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è AI.\n\n"
        "<b>–§–æ—Ä–º–∞—Ç:</b> \"–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ...\"\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –≤ –†–æ—Å—Å–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –º–Ω–æ–≥–æ–ø–∞—Ä—Ç–∏–π–Ω–æ—Å—Ç—å –∏ –ø–ª—é—Ä–∞–ª–∏–∑–º. "
        "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–º–µ—Ä–∞ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π, "
        "–µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–ª–æ–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.</code>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π.",
        parse_mode=ParseMode.HTML
    )

    return HINT_AWAITING_TEXT


@admin_only
async def cmd_create_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏: /create_hint <complaint_id>
    """
    if not context.args or len(context.args) == 0:
        await update.message.reply_text(
            "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /create_hint &lt;complaint_id&gt;\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/create_hint 123</code>",
            parse_mode=ParseMode.HTML
        )
        return

    try:
        complaint_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∂–∞–ª–æ–±—ã.",
            parse_mode=ParseMode.HTML
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã
    try:
        async with aiosqlite.connect(DATABASE_FILE) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                "SELECT id, task_type, topic_name FROM user_feedback WHERE id = ?",
                (complaint_id,)
            )
            complaint = await cursor.fetchone()

        if not complaint:
            await update.message.reply_text(
                f"‚ùå –ñ–∞–ª–æ–±–∞ #{complaint_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode=ParseMode.HTML
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['creating_hint_for_complaint'] = complaint_id

        await update.message.reply_text(
            f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –∂–∞–ª–æ–±—ã #{complaint_id}</b>\n\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {complaint['task_type']}\n"
            f"–¢–µ–º–∞: {complaint['topic_name']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è AI (–Ω–∞—á–Ω–∏—Ç–µ —Å '–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ...'):",
            parse_mode=ParseMode.HTML
        )

        return HINT_AWAITING_TEXT

    except Exception as e:
        logger.error(f"Error initiating hint creation: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            parse_mode=ParseMode.HTML
        )


async def handle_hint_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    """
    hint_text = update.message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(hint_text) < 20:
        await update.message.reply_text(
            "‚ö†Ô∏è –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É:",
            parse_mode=ParseMode.HTML
        )
        return HINT_AWAITING_TEXT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    context.user_data['hint_text'] = hint_text

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    keyboard = [
        [InlineKeyboardButton("üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏", callback_data="hcat_criteria")],
        [InlineKeyboardButton("‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã", callback_data="hcat_factual")],
        [InlineKeyboardButton("üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞", callback_data="hcat_structural")],
        [InlineKeyboardButton("üìñ –¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è", callback_data="hcat_terminology")],
        [InlineKeyboardButton("üí≠ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="hcat_general")],
    ]

    await update.message.reply_text(
        "‚úÖ –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–¥—Å–∫–∞–∑–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

    return HINT_AWAITING_CATEGORY


async def handle_hint_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    """
    query = update.callback_query
    await query.answer()

    category_map = {
        'hcat_criteria': 'criteria',
        'hcat_factual': 'factual',
        'hcat_structural': 'structural',
        'hcat_terminology': 'terminology',
        'hcat_general': 'general'
    }

    category = category_map.get(query.data, 'general')
    context.user_data['hint_category'] = category

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    keyboard = [
        [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ö—Ä–∏—Ç–∏—á–Ω–∞—è (5)", callback_data="hprio_5")],
        [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –í—ã—Å–æ–∫–∞—è (4)", callback_data="hprio_4")],
        [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è (3)", callback_data="hprio_3")],
        [InlineKeyboardButton("‚≠êÔ∏è‚≠êÔ∏è –ù–∏–∑–∫–∞—è (2)", callback_data="hprio_2")],
        [InlineKeyboardButton("‚≠êÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (1)", callback_data="hprio_1")],
    ]

    await query.edit_message_text(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏:\n\n"
        "5 - –ö—Ä–∏—Ç–∏—á–Ω–∞—è (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π)\n"
        "4 - –í—ã—Å–æ–∫–∞—è\n"
        "3 - –°—Ä–µ–¥–Ω—è—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "2 - –ù–∏–∑–∫–∞—è\n"
        "1 - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

    return HINT_AWAITING_PRIORITY


async def handle_hint_priority_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –ë–î.
    """
    query = update.callback_query
    await query.answer()

    priority = int(query.data.split("_")[1])

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    complaint_id = context.user_data.get('creating_hint_for_complaint')
    hint_text = context.user_data.get('hint_text')
    hint_category = context.user_data.get('hint_category', 'general')

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∞–ª–æ–±–µ
        async with aiosqlite.connect(DATABASE_FILE) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                "SELECT task_type, topic_name FROM user_feedback WHERE id = ?",
                (complaint_id,)
            )
            complaint = await cursor.fetchone()

        if not complaint:
            await query.edit_message_text(
                f"‚ùå –ñ–∞–ª–æ–±–∞ #{complaint_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode=ParseMode.HTML
            )
            return ConversationHandler.END

        # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ HintManager
        hint_manager = HintManager(DATABASE_FILE)
        hint_id = await hint_manager.create_hint_from_complaint(
            complaint_id=complaint_id,
            task_type=complaint['task_type'],
            topic_name=complaint['topic_name'],
            hint_text=hint_text,
            hint_category=hint_category,
            priority=priority,
            admin_id=update.effective_user.id
        )

        logger.info(
            f"Hint #{hint_id} created from complaint #{complaint_id} "
            f"by admin {update.effective_user.id}"
        )

        await query.edit_message_text(
            f"‚úÖ <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞ #{hint_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {complaint['task_type']}\n"
            f"–¢–µ–º–∞: {complaint['topic_name']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hint_category}\n"
            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}/5\n\n"
            f"<b>–¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n<code>{hint_text}</code>\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç—Ç–æ–π —Ç–µ–º—ã.",
            parse_mode=ParseMode.HTML
        )

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('creating_hint_for_complaint', None)
        context.user_data.pop('hint_text', None)
        context.user_data.pop('hint_category', None)

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error creating hint: {e}", exc_info=True)
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏.",
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END


async def notify_user_about_resolution(
    context: ContextTypes.DEFAULT_TYPE,
    complaint_id: int,
    approved: bool
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ –µ–≥–æ –∂–∞–ª–æ–±–µ.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∞–ª–æ–±–µ
        async with aiosqlite.connect(DATABASE_FILE) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                "SELECT user_id, topic_name FROM user_feedback WHERE id = ?",
                (complaint_id,)
            )
            complaint = await cursor.fetchone()

        if not complaint:
            logger.warning(f"Cannot notify user: complaint #{complaint_id} not found")
            return

        user_id = complaint['user_id']
        topic = complaint['topic_name']

        if approved:
            message = f"""
‚úÖ <b>–í–∞—à–∞ –∂–∞–ª–æ–±–∞ #{complaint_id} –æ–¥–æ–±—Ä–µ–Ω–∞!</b>

–¢–µ–º–∞: <i>{topic}</i>

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª –≤–∞—à—É –∂–∞–ª–æ–±—É –∏ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –≤–∞—à–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI.

–í –±—É–¥—É—â–µ–º –ø–æ–¥–æ–±–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ.
"""
        else:
            message = f"""
‚ùå <b>–í–∞—à–∞ –∂–∞–ª–æ–±–∞ #{complaint_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

–¢–µ–º–∞: <i>{topic}</i>

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª –≤–∞—à—É –∂–∞–ª–æ–±—É. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ü–µ–Ω–∫–∞ AI –ø—Ä–∏–∑–Ω–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π.

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""

        await context.bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode=ParseMode.HTML
        )

        logger.info(f"User {user_id} notified about complaint #{complaint_id} resolution")

    except Exception as e:
        logger.error(f"Error notifying user about complaint resolution: {e}", exc_info=True)


@admin_only
async def cmd_hints_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫: /hints_list [task_type] [topic]
    """
    task_type = context.args[0] if len(context.args) > 0 else None
    topic_name = ' '.join(context.args[1:]) if len(context.args) > 1 else None

    try:
        hint_manager = HintManager(DATABASE_FILE)

        if task_type and topic_name:
            hints = await hint_manager.get_hints_by_topic(task_type, topic_name)
            header = f"üìã <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è {task_type} / {topic_name}:</b>\n\n"
        elif task_type:
            hints = await hint_manager.get_active_hints(task_type, max_hints=20)
            header = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è {task_type}:</b>\n\n"
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            async with aiosqlite.connect(DATABASE_FILE) as db:
                db.row_factory = aiosqlite.Row
                cursor = await db.execute(
                    """
                    SELECT id, task_type, topic_name, hint_category, priority,
                           is_active, usage_count
                    FROM task_specific_hints
                    WHERE is_active = 1
                    ORDER BY task_type, priority DESC, usage_count DESC
                    LIMIT 20
                    """
                )
                rows = await cursor.fetchall()
                hints = [dict(row) for row in rows]
            header = "üìã <b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (—Ç–æ–ø 20):</b>\n\n"

        if not hints:
            await update.message.reply_text(
                "–ü–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                parse_mode=ParseMode.HTML
            )
            return

        text = header
        for hint in hints:
            status = "‚úÖ" if hint.get('is_active', 1) else "‚ùå"
            text += f"""
{status} <b>#{hint.get('hint_id', hint.get('id'))}</b> | {hint.get('task_type', 'N/A')} | {hint.get('topic_name', '–û–±—â–∞—è')}
üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {hint.get('priority', 1)}/5 | üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {hint.get('usage_count', 0)}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hint.get('hint_category', 'N/A')}

"""

        text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hint_details &lt;id&gt; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"Error fetching hints list: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫.",
            parse_mode=ParseMode.HTML
        )


def register_admin_complaint_handlers(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∂–∞–ª–æ–±.

    Args:
        app: Application instance
    """
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∞–ª–æ–±–∞–º–∏
    app.add_handler(CommandHandler("review_complaint", cmd_review_complaint))
    app.add_handler(CommandHandler("pending_complaints", cmd_pending_complaints))
    app.add_handler(CommandHandler("hints_list", cmd_hints_list))

    # Callback handlers –¥–ª—è –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(handle_approve_complaint, pattern=r"^adm_approve:"))
    app.add_handler(CallbackQueryHandler(handle_reject_complaint, pattern=r"^adm_reject:"))

    # Conversation handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    hint_creation_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_create_hint_button, pattern=r"^adm_create_hint:"),
            CommandHandler("create_hint", cmd_create_hint)
        ],
        states={
            HINT_AWAITING_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_hint_text_input)
            ],
            HINT_AWAITING_CATEGORY: [
                CallbackQueryHandler(handle_hint_category_selection, pattern=r"^hcat_")
            ],
            HINT_AWAITING_PRIORITY: [
                CallbackQueryHandler(handle_hint_priority_selection, pattern=r"^hprio_")
            ],
        },
        fallbacks=[],
        allow_reentry=True
    )

    app.add_handler(hint_creation_conv)

    logger.info("Admin complaint handlers registered successfully")

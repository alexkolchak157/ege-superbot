"""–ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è –±–æ—Ç–∞."""

import importlib
import pkgutil
from typing import List
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from core.plugin_base import BotPlugin

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
PLUGINS: List[BotPlugin] = []


def discover_plugins() -> None:
    """–ò—â–µ–º –º–æ–¥—É–ª–∏ *.plugin.py –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞."""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info("Starting plugin discovery...")
    
    for mod in pkgutil.iter_modules():
        # –î–æ–±–∞–≤–ª—è–µ–º task25 –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
        if mod.name in ("test_part", "task24", "task19", "task20", "task25"):
            try:
                logger.info(f"Loading plugin: {mod.name}")
                plugin_module = importlib.import_module(f"{mod.name}.plugin")
                PLUGINS.append(plugin_module.plugin)
                logger.info(f"Successfully loaded: {plugin_module.plugin.title}")
            except Exception as e:
                logger.error(f"Failed to load plugin {mod.name}: {e}")
    
    PLUGINS.sort(key=lambda p: p.menu_priority)
    logger.info(f"Loaded {len(PLUGINS)} plugins: {[p.title for p in PLUGINS]}")


def build_main_menu() -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤."""
    import logging
    logger = logging.getLogger(__name__)
    
    if not PLUGINS:
        logger.warning("No plugins loaded for main menu!")
        return InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π", callback_data="no_plugins")
        ]])
    
    buttons = []
    for p in PLUGINS:
        logger.debug(f"Adding menu button for plugin: {p.code} - {p.title}")
        buttons.append([InlineKeyboardButton(
            p.title,
            callback_data=f"choose_{p.code}"
        )])
    
    logger.info(f"Main menu built with {len(buttons)} buttons")
    return InlineKeyboardMarkup(buttons)
    
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ core/plugin_loader.py

def load_modules(application):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
    import logging
    logger = logging.getLogger(__name__)
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã
    discover_plugins()
    
    # –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞–≥–∏–Ω
    for plugin in PLUGINS:
        try:
            logger.info(f"Registering plugin: {plugin.title}")
            plugin.register(application)
            
            # –ï—Å–ª–∏ —É –ø–ª–∞–≥–∏–Ω–∞ –µ—Å—Ç—å post_init, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
            if hasattr(plugin, 'post_init'):
                application.post_init(plugin.post_init)
                
        except Exception as e:
            logger.error(f"Failed to register plugin {plugin.code}: {e}")
    
    logger.info(f"Successfully registered {len(PLUGINS)} plugins")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from telegram import Update
    from telegram.ext import CommandHandler, CallbackQueryHandler
    
    async def show_main_menu(update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        menu = build_main_menu()
        text = "üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠:"
        
        if update.message:
            await update.message.reply_text(text, reply_markup=menu)
        elif update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=menu)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CommandHandler("menu", show_main_menu))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    application.add_handler(
        CallbackQueryHandler(show_main_menu, pattern="^main_menu$")
    )
# core/menu_handlers.py
"""–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é."""

from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
import logging
from telegram.error import BadRequest

logger = logging.getLogger(__name__)

async def handle_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    query = update.callback_query
    
    if query:
        await query.answer()
        
        user_id = query.from_user.id
        
        welcome_text = """
üéì <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
        try:
            from core.app import show_main_menu_with_access
            kb = await show_main_menu_with_access(context, user_id)
        except ImportError:
            try:
                from core.plugin_loader import build_main_menu
                kb = build_main_menu()
            except ImportError as e:
                logger.error(f"Could not import menu builder: {e}")
                kb = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if kb:
                await query.edit_message_text(
                    welcome_text, 
                    reply_markup=kb,
                    parse_mode="HTML"
                )
            else:
                await query.edit_message_text(
                    welcome_text,
                    parse_mode="HTML"
                )
        except BadRequest as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            error_message = str(e).lower()
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if "message is not modified" in error_message:
                logger.debug("Message is not modified, skipping update")
                pass
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            elif "message to edit not found" in error_message or "message can't be edited" in error_message:
                logger.debug("Message too old or can't be edited, sending new one")
                # –¢–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try:
                    await query.message.delete()
                except:
                    pass
                
                if kb:
                    await query.message.chat.send_message(
                        welcome_text, 
                        reply_markup=kb,
                        parse_mode="HTML"
                    )
                else:
                    await query.message.chat.send_message(
                        welcome_text,
                        parse_mode="HTML"
                    )
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º
                logger.error(f"Unknown BadRequest error: {e}")
        except Exception as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"Unexpected error in handle_to_main_menu: {e}")

    return ConversationHandler.END


async def handle_plugin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–≥–∏–Ω–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    
    # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –î–ï–õ–ê–ï–ú context.user_data.clear()! ===
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–æ–¥—É–ª—è
    temp_keys = [
        'current_topic',
        'active_module',
        'current_module',
        'answer_processing',
        'current_block',
        'viewing_mode',
        '_state',
        'conversation_state'
    ]
    
    for key in temp_keys:
        context.user_data.pop(key, None)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Plugin choice: {query.data}, preserved data keys: {len(context.user_data)}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    if query:
        await query.answer()
    
    # ConversationHandler –ø–ª–∞–≥–∏–Ω–∞ —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Ö–æ–¥
    return None


def register_global_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤–æ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–∞—Ö."""
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    app.add_handler(
        CallbackQueryHandler(
            handle_to_main_menu, 
            pattern="^to_main_menu$"
        ),
        group=-1  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö
    )
    
    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
    app.add_handler(
        CallbackQueryHandler(
            handle_to_main_menu, 
            pattern="^main_menu$"
        ),
        group=-1
    )
"""–û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞."""
import logging
from typing import Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.error import BadRequest

logger = logging.getLogger(__name__)

async def safe_edit_message(
    update: Update, 
    new_text: str, 
    reply_markup=None, 
    parse_mode=None
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫—É "–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ".
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    """
    query = update.callback_query
    if not query:
        return False
        
    try:
        await query.edit_message_text(
            new_text, 
            reply_markup=reply_markup, 
            parse_mode=parse_mode
        )
        return True
    except BadRequest as e:
        if "message is not modified" in str(e).lower():
            logger.debug(f"Message not modified for user {query.from_user.id}")
            return False
        else:
            raise

async def safe_answer_callback(update: Update, text: str = None, show_alert: bool = False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query."""
    if update.callback_query:
        try:
            await update.callback_query.answer(text, show_alert=show_alert)
        except Exception as e:
            logger.warning(f"Failed to answer callback query: {e}")

def create_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])

async def check_subscription(user_id: int, bot) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª.
    –í—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ
    return True

async def send_subscription_required(query, channel: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel.lstrip('@')}")],
        [InlineKeyboardButton("üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])
    
    text = f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {channel}"
    
    await query.edit_message_text(text, reply_markup=kb)

class CallbackData:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ callback_data –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤."""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    TO_MAIN_MENU = "to_main_menu"
    TO_MENU = "to_menu" 
    CANCEL = "cancel"
    
    @classmethod
    def get_plugin_entry(cls, plugin_code: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback_data –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–ª–∞–≥–∏–Ω."""
        return f"choose_{plugin_code}"
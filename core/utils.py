# core/utils.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫

import logging
from typing import Optional, Union
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from core import config, db
from payment.subscription_manager import SubscriptionManager

logger = logging.getLogger(__name__)

async def check_subscription(
    user_id: int, 
    bot, 
    channel: Optional[str] = None,
    check_paid: bool = True,
    check_channel: bool = False
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        channel: –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ check_channel=True)
        check_paid: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        check_channel: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    Returns:
        True –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, False –∏–Ω–∞—á–µ
    """
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if check_paid:
        subscription_manager = SubscriptionManager()
        subscription_info = await subscription_manager.get_subscription_info(user_id)
        
        if subscription_info['is_active']:
            return True
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if check_channel and channel:
        try:
            chat_member = await bot.get_chat_member(channel, user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
    
    return False

async def send_subscription_required(
    query_or_update: Union[Update, any],
    channel: Optional[str] = None,
    show_plans: bool = True
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
    
    Args:
        query_or_update: Update –∏–ª–∏ CallbackQuery
        channel: –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        show_plans: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(query_or_update, 'message'):
        message = query_or_update.message
        answer_func = message.reply_text
    elif hasattr(query_or_update, 'answer'):
        answer_func = query_or_update.answer
        message = query_or_update.message
    else:
        logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    text = "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
    
    # –ö–Ω–æ–ø–∫–∏
    keyboard = []
    
    if show_plans:
        text += "üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:\n"
        text += "‚Ä¢ –ë–∞–∑–æ–≤—ã–π (299‚ÇΩ/–º–µ—Å) - 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
        text += "‚Ä¢ Pro (599‚ÇΩ/–º–µ—Å) - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n"
        text += "‚Ä¢ Pro –¥–æ –ï–ì–≠ (1999‚ÇΩ) - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–æ –ï–ì–≠ 2025\n"
        
        keyboard.append([
            InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_start")
        ])
    
    if channel:
        text += f"\nüì£ –ò–ª–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel} –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
        keyboard.append([
            InlineKeyboardButton("üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{channel[1:]}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(answer_func, '__call__'):
        if hasattr(query_or_update, 'answer'):
            # –î–ª—è CallbackQuery –∏—Å–ø–æ–ª—å–∑—É–µ–º answer –∏ edit_message_text
            await query_or_update.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
            await message.edit_text(text, reply_markup=reply_markup)
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await answer_func(text, reply_markup=reply_markup)

async def check_daily_limit(user_id: int) -> tuple[bool, int, int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        (–º–æ–∂–Ω–æ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ_—Å–µ–≥–æ–¥–Ω—è, –ª–∏–º–∏—Ç)
    """
    subscription_manager = SubscriptionManager()
    subscription_info = await subscription_manager.get_subscription_info(user_id)
    
    # –î–ª—è Pro –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç –ª–∏–º–∏—Ç–∞
    if subscription_info['is_active'] and subscription_info['plan_id'] in ['pro_month', 'pro_ege']:
        return True, 0, -1  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date().isoformat()
    user_data = await db.get_user(user_id)
    
    if not user_data:
        return False, 0, 0
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if user_data.get('last_usage_date') != today:
        await db.execute_query(
            "UPDATE users SET daily_usage_count = 0, last_usage_date = ? WHERE user_id = ?",
            (today, user_id)
        )
        daily_count = 0
    else:
        daily_count = user_data.get('daily_usage_count', 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
    if subscription_info['is_active'] and subscription_info['plan_id'] == 'basic_month':
        limit = 100  # –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω - 100 –≤ –¥–µ–Ω—å
    else:
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç
        monthly_count = user_data.get('monthly_usage_count', 0)
        if monthly_count >= 50:
            return False, monthly_count, 50
        limit = 50 - monthly_count  # –û—Å—Ç–∞–≤—à–∏–π—Å—è –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç
    
    return daily_count < limit, daily_count, limit

async def increment_usage(user_id: int) -> None:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    today = datetime.now().date().isoformat()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –∏ –º–µ—Å—è—á–Ω—ã–π —Å—á–µ—Ç—á–∏–∫–∏
    await db.execute_query("""
        UPDATE users 
        SET daily_usage_count = daily_usage_count + 1,
            monthly_usage_count = monthly_usage_count + 1,
            last_usage_date = ?
        WHERE user_id = ?
    """, (today, user_id))

async def reset_monthly_usage(user_id: int) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await db.execute_query(
        "UPDATE users SET monthly_usage_count = 0 WHERE user_id = ?",
        (user_id,)
    )

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
def requires_subscription(check_channel: bool = False):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    
    Args:
        check_channel: –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    """
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            has_subscription = await check_subscription(
                user_id,
                context.bot,
                channel=config.REQUIRED_CHANNEL if check_channel else None,
                check_paid=True,
                check_channel=check_channel
            )
            
            if not has_subscription:
                if update.callback_query:
                    await send_subscription_required(update.callback_query)
                else:
                    await send_subscription_required(update)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            can_use, used, limit = await check_daily_limit(user_id)
            if not can_use:
                text = f"‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n"
                if limit == 50:
                    text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü\n"
                    text += "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞!"
                else:
                    text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{limit} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è\n"
                    text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"
                
                keyboard = [[
                    InlineKeyboardButton("üí≥ –£–ª—É—á—à–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_start")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if update.callback_query:
                    await update.callback_query.answer(text, show_alert=True)
                else:
                    await update.message.reply_text(text, reply_markup=reply_markup)
                return
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await increment_usage(user_id)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return await func(update, context)
        
        return wrapper
    return decorator
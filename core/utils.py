"""–û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞."""
import logging
from typing import Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


async def safe_edit_message(
    update: Update, new_text: str, reply_markup=None, parse_mode=None
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫—É "–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ".

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    """
    query = update.callback_query
    if not query:
        return False

    try:
        await query.edit_message_text(
            new_text, reply_markup=reply_markup, parse_mode=parse_mode
        )
        return True
    except BadRequest as e:
        if "message is not modified" in str(e).lower():
            logger.debug(f"Message not modified for user {query.from_user.id}")
            return False
        else:
            raise


async def safe_answer_callback(
    update: Update, text: str = None, show_alert: bool = False
):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query."""
    if update.callback_query:
        try:
            await update.callback_query.answer(text, show_alert=show_alert)
        except Exception as e:
            logger.warning(f"Failed to answer callback query: {e}")


def create_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]]
    )


async def check_subscription(user_id: int, bot, channel: Optional[str] = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª.

    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ API.
        channel: –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            ``core.config.REQUIRED_CHANNEL``.

    Returns:
        ``True`` –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–∞–Ω–∞–ª–µ. –ü—Ä–∏ –æ—à–∏–±–∫–µ API —Ñ—É–Ω–∫—Ü–∏—è
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ``True`` —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.
    """

    from telegram.constants import ChatMemberStatus

    from core.config import REQUIRED_CHANNEL

    if not channel:
        channel = REQUIRED_CHANNEL

    if not channel:
        logger.warning("–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return True

    try:
        member = await bot.get_chat_member(chat_id=channel, user_id=user_id)

        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ ChatMemberStatus
        status = getattr(member, "status", None)
        if not status:
            return False

        valid_statuses = {
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
        }

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π PTB, –≥–¥–µ —Å—Ç–∞—Ç—É—Å –Ω–∞–∑—ã–≤–∞–ª—Å—è OWNER –∏–ª–∏ CREATOR
        if hasattr(ChatMemberStatus, "OWNER"):
            valid_statuses.add(ChatMemberStatus.OWNER)
        if hasattr(ChatMemberStatus, "CREATOR"):
            valid_statuses.add(ChatMemberStatus.CREATOR)

        return status in valid_statuses

    except Exception as e:  # pragma: no cover - –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return True


async def send_subscription_required(query, channel: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    kb = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel.lstrip('@')}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"
                )
            ],
        ]
    )

    text = f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {channel}"

    await query.edit_message_text(text, reply_markup=kb)


class CallbackData:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ callback_data –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤."""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    TO_MAIN_MENU = "to_main_menu"
    TO_MENU = "to_menu"
    CANCEL = "cancel"

    @classmethod
    def get_plugin_entry(cls, plugin_code: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback_data –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–ª–∞–≥–∏–Ω."""
        return f"choose_{plugin_code}"

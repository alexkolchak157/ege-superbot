# payment/webhook.py
"""Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
import logging
import json
import hashlib
import hmac
from aiohttp import web
from telegram import Bot
import asyncio
from datetime import datetime
import aiosqlite
from enum import Enum
from core import config
from .subscription_manager import SubscriptionManager
from .tinkoff import TinkoffPayment

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è webhook –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
webhook_app = None
webhook_runner = None
webhook_site = None

class TinkoffStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π Tinkoff"""
    INIT = "INIT"
    NEW = "NEW"
    FORM_SHOWED = "FORM_SHOWED"
    AUTHORIZED = "AUTHORIZED"
    CONFIRMED = "CONFIRMED"
    CANCELED = "CANCELED"
    DEADLINE_EXPIRED = "DEADLINE_EXPIRED"
    REJECTED = "REJECTED"
    AUTH_FAIL = "AUTH_FAIL"
    REFUNDED = "REFUNDED"
    PARTIAL_REFUNDED = "PARTIAL_REFUNDED"
    REVERSED = "REVERSED"

def verify_tinkoff_signature(data: dict, token: str, terminal_key: str, secret_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –æ—Ç Tinkoff."""
    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_data = data.copy()
    
    # –£–¥–∞–ª—è–µ–º Token –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    received_token = check_data.pop('Token', '')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏ TerminalKey
    check_data['Password'] = secret_key
    check_data['TerminalKey'] = terminal_key
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º
    sorted_data = sorted(check_data.items())
    
    # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    concat_values = ''.join(str(value) for key, value in sorted_data)
    
    # –í—ã—á–∏—Å–ª—è–µ–º SHA256
    calculated_token = hashlib.sha256(concat_values.encode()).hexdigest()
    
    return calculated_token.upper() == received_token.upper()


async def handle_webhook(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Tinkoff."""
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await request.json()
        logger.info(f"Webhook received: {json.dumps(data, indent=2)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
        await log_webhook_event(data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if 'TerminalKey' not in data or 'Token' not in data:
            logger.warning("Missing required fields in webhook data")
            return web.Response(text="FAIL", status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not verify_tinkoff_signature(
            data,
            data.get('Token', ''),
            config.TINKOFF_TERMINAL_KEY,
            config.TINKOFF_SECRET_KEY
        ):
            logger.warning("Invalid webhook signature")
            return web.Response(text="FAIL", status=401)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        status = data.get('Status')
        order_id = data.get('OrderId')
        payment_id = data.get('PaymentId')
        
        if not order_id:
            logger.warning("No OrderId in webhook data")
            return web.Response(text="OK")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
        if await is_payment_processed(order_id, status):
            logger.info(f"Payment {order_id} with status {status} already processed")
            return web.Response(text="OK")
        
        subscription_manager = SubscriptionManager()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        await subscription_manager.update_payment_status(order_id, status.lower())
        
        if status == TinkoffStatus.CONFIRMED.value:
            logger.info(f"Payment confirmed for order {order_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"Attempting to activate subscription for order {order_id}")
            
            success = await subscription_manager.activate_subscription(
                order_id=order_id,
                payment_id=str(payment_id)
            )
            
            if success:
                logger.info(f"‚úÖ Subscription activated successfully for order {order_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                payment_info = await subscription_manager.get_payment_by_order_id(order_id)
                logger.info(f"Payment info: {payment_info}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot = request.app.get('bot')
                if bot:
                    await notify_user_success(bot, order_id)
            else:
                logger.error(f"‚ùå Failed to activate subscription for order {order_id}")
        
        elif status == TinkoffStatus.REJECTED.value:
            bot = request.app.get('bot')
            if bot:
                await notify_user_rejected(bot, order_id)
                
        elif status == TinkoffStatus.REFUNDED.value:
            # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            payment_info = await subscription_manager.get_payment_by_order_id(order_id)
            if payment_info:
                await subscription_manager.deactivate_subscription(
                    payment_info['user_id'], 
                    payment_info['plan_id']
                )
                bot = request.app.get('bot')
                if bot:
                    await notify_user_refunded(bot, order_id)
        
        elif status == TinkoffStatus.CANCELED.value:
            bot = request.app.get('bot')
            if bot:
                await notify_user_canceled(bot, order_id)
        
        return web.Response(text="OK")
        
    except json.JSONDecodeError:
        logger.error("Invalid JSON in webhook request")
        return web.Response(text="FAIL", status=400)
    except Exception as e:
        logger.exception(f"Error processing webhook: {e}")
        return web.Response(text="FAIL", status=500)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

async def log_webhook_event(data: dict):
    """–õ–æ–≥–∏—Ä—É–µ—Ç webhook —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î."""
    try:
        async with aiosqlite.connect(config.DATABASE_PATH) as db:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await db.execute("""
                CREATE TABLE IF NOT EXISTS webhook_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id TEXT,
                    payment_id TEXT,
                    status TEXT,
                    data TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            await db.execute("""
                INSERT INTO webhook_logs (order_id, payment_id, status, data)
                VALUES (?, ?, ?, ?)
            """, (
                data.get('OrderId'),
                data.get('PaymentId'),
                data.get('Status'),
                json.dumps(data, ensure_ascii=False)
            ))
            
            await db.commit()
            
    except Exception as e:
        logger.error(f"Error logging webhook event: {e}")

async def is_payment_processed(order_id: str, status: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º."""
    try:
        async with aiosqlite.connect(config.DATABASE_PATH) as db:
            cursor = await db.execute("""
                SELECT COUNT(*) FROM webhook_logs 
                WHERE order_id = ? AND status = ?
            """, (order_id, status))
            
            count = await cursor.fetchone()
            return count[0] > 1  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 1, –∑–Ω–∞—á–∏—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏
            
    except Exception as e:
        logger.error(f"Error checking payment processing: {e}")
        return False

async def notify_user_success(bot, order_id: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ."""
    try:
        subscription_manager = SubscriptionManager()
        payment_info = await subscription_manager.get_payment_by_order_id(order_id)
        
        if payment_info:
            plan_names = {
                'package_second_part': '–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ï–ì–≠',
                'package_full': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø',
                'trial_7days': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π'
            }
            
            plan_name = plan_names.get(payment_info['plan_id'], payment_info['plan_id'])
            
            await bot.send_message(
                payment_info['user_id'],
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ¬´{plan_name}¬ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.\n"
                f"–ü—Ä–∏—è—Ç–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠! üìö\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ."
            )
    except Exception as e:
        logger.error(f"Failed to notify user: {e}")

async def notify_user_rejected(bot, order_id: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""
    try:
        subscription_manager = SubscriptionManager()
        payment_info = await subscription_manager.get_payment_by_order_id(order_id)
        
        if payment_info:
            await bot.send_message(
                payment_info['user_id'],
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –±–∞–Ω–∫–æ–º.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ\n"
                "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π\n"
                "‚Ä¢ –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É."
            )
    except Exception as e:
        logger.error(f"Failed to notify user about rejection: {e}")

async def notify_user_refunded(bot, order_id: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤."""
    try:
        subscription_manager = SubscriptionManager()
        payment_info = await subscription_manager.get_payment_by_order_id(order_id)
        
        if payment_info:
            await bot.send_message(
                payment_info['user_id'],
                "üí∏ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
                "–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
                "–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
            )
    except Exception as e:
        logger.error(f"Failed to notify user about refund: {e}")

async def notify_user_canceled(bot, order_id: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""
    try:
        subscription_manager = SubscriptionManager()
        payment_info = await subscription_manager.get_payment_by_order_id(order_id)
        
        if payment_info:
            await bot.send_message(
                payment_info['user_id'],
                "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, "
                "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
            )
    except Exception as e:
        logger.error(f"Failed to notify user about cancellation: {e}")


def create_webhook_app(bot: Bot = None) -> web.Application:
    """–°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook."""
    app = web.Application()
    app['bot'] = bot
    # –í–ê–ñ–ù–û: –ø—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å /payment-notification
    app.router.add_post('/payment-notification', handle_webhook)  # –ò–∑–º–µ–Ω–µ–Ω–æ!
    app.router.add_get('/health', health_check)
    return app

async def health_check(request: web.Request) -> web.Response:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook —Å–µ—Ä–≤–µ—Ä–∞."""
    return web.Response(text='OK', status=200)

async def start_webhook_server(bot: Bot = None, port: int = 8080):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä."""
    global webhook_app, webhook_runner, webhook_site
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not all([
            getattr(config, 'TINKOFF_TERMINAL_KEY', None),
            getattr(config, 'TINKOFF_SECRET_KEY', None)
        ]):
            logger.warning("Tinkoff credentials not configured, webhook server not started")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        webhook_app = create_webhook_app(bot)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º runner
        webhook_runner = web.AppRunner(webhook_app)
        await webhook_runner.setup()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–π—Ç
        webhook_site = web.TCPSite(webhook_runner, '0.0.0.0', port)
        await webhook_site.start()
        
        logger.info(f"Webhook server started on port {port}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º webhook URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Tinkoff
        if hasattr(config, 'WEBHOOK_BASE_URL'):
            webhook_url = f"{config.WEBHOOK_BASE_URL}/webhook"
            logger.info(f"Webhook URL for Tinkoff: {webhook_url}")
        
    except Exception as e:
        logger.exception(f"Failed to start webhook server: {e}")


async def stop_webhook_server():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä."""
    global webhook_site, webhook_runner
    
    if webhook_site:
        await webhook_site.stop()
        webhook_site = None
    
    if webhook_runner:
        await webhook_runner.cleanup()
        webhook_runner = None
    
    logger.info("Webhook server stopped")
# payment/scheduler.py - –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á

import logging
from datetime import datetime, timedelta, timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode

logger = logging.getLogger(__name__)

class SubscriptionScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–æ–∫."""
    
    def __init__(self, bot: Bot, subscription_manager):
        self.bot = bot
        self.subscription_manager = subscription_manager
        self.scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
        self.setup_jobs()
    
    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏."""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
        self.scheduler.add_job(
            self.check_expiring_subscriptions,
            CronTrigger(hour=10, minute=0),
            id='check_expiring_subscriptions',
            replace_existing=True,
            misfire_grace_time=3600
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–π - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00
        self.scheduler.add_job(
            self.process_auto_renewals,
            CronTrigger(hour=2, minute=0),
            id='process_auto_renewals',
            replace_existing=True,
            misfire_grace_time=3600
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
        self.scheduler.add_job(
            self.cleanup_old_notifications,
            CronTrigger(day_of_week='sun', hour=3, minute=0),
            id='cleanup_notifications',
            replace_existing=True
        )
        
        logger.info("Subscription scheduler jobs configured")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if not self.scheduler.running:
            self.scheduler.start()
            logger.info("Subscription scheduler started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("Subscription scheduler stopped")
    
    async def check_expiring_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö."""
        logger.info("Starting expiring subscriptions check...")
        
        notification_days = [7, 3, 1]  # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å
        
        for days in notification_days:
            try:
                expiring = await self.subscription_manager.get_expiring_subscriptions(days)
                
                for subscription in expiring:
                    user_id = subscription['user_id']
                    expires_at = subscription['expires_at']
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    notification_type = f'expiry_{days}days' if days > 1 else 'expiry_1day'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ
                    if await self.subscription_manager.has_notification_sent(
                        user_id, notification_type, expires_at
                    ):
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.send_expiry_notification(user_id, days, subscription)
                    
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    await self.subscription_manager.mark_notification_sent(
                        user_id, notification_type, expires_at
                    )
                    
            except Exception as e:
                logger.error(f"Error checking expiring subscriptions for {days} days: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await self.check_expired_subscriptions()
        
        logger.info("Expiring subscriptions check completed")
    
    async def send_expiry_notification(self, user_id: int, days_remaining: int, subscription: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏
            auto_renewal = await self.subscription_manager.get_auto_renewal_status(user_id)
            
            if days_remaining == 7:
                emoji = "üìÖ"
                urgency = "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"
            elif days_remaining == 3:
                emoji = "‚è∞"
                urgency = "—á–µ—Ä–µ–∑ 3 –¥–Ω—è"
            elif days_remaining == 1:
                emoji = "‚ö†Ô∏è"
                urgency = "–∑–∞–≤—Ç—Ä–∞"
            else:
                emoji = "üìÜ"
                urgency = f"—á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π"
            
            text = f"""{emoji} <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {urgency}!</b>

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {subscription['expires_at'].strftime('%d.%m.%Y')}"""
            
            if 'modules' in subscription:
                text += f"\nüì¶ –ú–æ–¥—É–ª–∏: {subscription['modules']}"
            
            if auto_renewal and auto_renewal.get('enabled'):
                text += "\n\n‚úÖ –£ –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ. –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                
                keyboard = [[
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                       callback_data="disable_auto_renewal")
                ]]
            else:
                text += "\n\nüí° –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º!"
                
                keyboard = [
                    [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                                        callback_data="renew_subscription")],
                    [InlineKeyboardButton("üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                        callback_data="enable_auto_renewal")]
                ]
            
            keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
                                                 callback_data="my_subscriptions")])
            
    if bot:
        try:  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø (4 –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ 1 tab)
            await self.bot.send_message(  # ‚úÖ –î–≤–æ–π–Ω–æ–π –æ—Ç—Å—Ç—É–ø (–≤–Ω—É—Ç—Ä–∏ try)
                chat_id=user_id,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"Sent {days_remaining}-day expiry notification to user {user_id}")
            
        except Exception as e:  # ‚úÖ –ù–∞ —É—Ä–æ–≤–Ω–µ try
            logger.error(f"Error sending expiry notification to user {user_id}: {e}")
    else:  # –ù–∞ —É—Ä–æ–≤–Ω–µ if
        logger.error("Bot instance not available")
    
    async def check_expired_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫—à–∏–µ –≤—á–µ—Ä–∞
            yesterday = datetime.now(timezone.utc) - timedelta(days=1)
            expired = await self.subscription_manager.get_expiring_subscriptions(-1)
            
            for subscription in expired:
                user_id = subscription['user_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                auto_renewal = await self.subscription_manager.get_auto_renewal_status(user_id)
                
                if auto_renewal and auto_renewal.get('enabled'):
                    # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å
                    success = await self.subscription_manager.process_auto_renewal(user_id)
                    
                    if success:
                        await self.send_renewal_success_notification(user_id)
                    else:
                        await self.send_renewal_failure_notification(user_id)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                    await self.send_expired_notification(user_id, subscription)
                    
        except Exception as e:
            logger.error(f"Error checking expired subscriptions: {e}")
    
    async def send_expired_notification(self, user_id: int, subscription: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ."""
        try:
            text = """‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. 
–í—ã –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.

üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                                    callback_data="renew_subscription")],
                [InlineKeyboardButton("üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", 
                                    callback_data="special_offer")]
            ]
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"Sent expiration notification to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending expiration notification: {e}")
    
    async def send_renewal_success_notification(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            subscription = await self.subscription_manager.check_active_subscription(user_id)
            
            text = f"""‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥.

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription['expires_at'].strftime('%d.%m.%Y')}

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üéâ"""
            
            keyboard = [[
                InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="my_subscriptions")
            ]]
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error sending renewal success notification: {e}")
    
    async def send_renewal_failure_notification(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏."""
        try:
            text = """‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
‚Ä¢ –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã
‚Ä¢ –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é."""
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Ä—É—á–Ω—É—é", 
                                    callback_data="renew_subscription")],
                [InlineKeyboardButton("üîß –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É", 
                                    callback_data="update_payment_method")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                    callback_data="disable_auto_renewal")]
            ]
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error sending renewal failure notification: {e}")
    
    async def process_auto_renewals(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
        logger.info("Starting auto-renewal processing...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
            users_to_renew = await self.subscription_manager.get_users_for_auto_renewal()
            
            success_count = 0
            failure_count = 0
            
            for user_id in users_to_renew:
                try:
                    success = await self.subscription_manager.process_auto_renewal(user_id)
                    
                    if success:
                        success_count += 1
                        await self.send_renewal_success_notification(user_id)
                    else:
                        failure_count += 1
                        await self.send_renewal_failure_notification(user_id)
                        
                except Exception as e:
                    logger.error(f"Error processing auto-renewal for user {user_id}: {e}")
                    failure_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await self.send_renewal_report(success_count, failure_count)
            
        except Exception as e:
            logger.error(f"Error in auto-renewal processing: {e}")
        
        logger.info(f"Auto-renewal processing completed: {success_count} success, {failure_count} failures")
    
    async def send_renewal_report(self, success_count: int, failure_count: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
        try:
            from core.config import ADMIN_IDS
            
            text = f"""üìä <b>–û—Ç—á–µ—Ç –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è—Ö</b>

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}

‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–æ: {success_count}
‚ùå –û—à–∏–±–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {failure_count}
üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count + failure_count}

{'‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!' if failure_count > 0 else '‚ú® –í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!'}"""
            
            for admin_id in ADMIN_IDS:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=text,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"Error sending report to admin {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"Error sending renewal report: {e}")
    
    async def cleanup_old_notifications(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        try:
            import aiosqlite
            
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cutoff_date = datetime.now(timezone.utc) - timedelta(days=30)
            
            async with aiosqlite.connect(self.subscription_manager.database_file) as conn:
                await conn.execute("""
                    DELETE FROM subscription_notifications 
                    WHERE sent_at < ?
                """, (cutoff_date,))
                
                await conn.commit()
                
            logger.info("Old notifications cleaned up")
            
        except Exception as e:
            logger.error(f"Error cleaning up notifications: {e}")
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –º–Ω–æ–≥–æ–º–µ—Å—è—á–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from enum import Enum

from aiogram import types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
class AutoRenewalStates(StatesGroup):
    SHOWING_TERMS = State()
    CONSENT_CHECKBOX = State()
    FINAL_CONFIRMATION = State()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers.py
SHOWING_TERMS = AutoRenewalStates.SHOWING_TERMS
CONSENT_CHECKBOX = AutoRenewalStates.CONSENT_CHECKBOX
FINAL_CONFIRMATION = AutoRenewalStates.FINAL_CONFIRMATION

class AutoRenewalConsent:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ."""
    
    def __init__(self, db_path: str = "/opt/ege-bot/subscriptions.db"):
        self.db_path = db_path
        
    async def show_auto_renewal_choice(self, update: types.Update, context: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑."""
        
        plan_name = context.user_data.get('selected_plan', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')
        duration = context.user_data.get('duration_months', 1)
        price = context.user_data.get('price', 490)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        discount_text = ""
        if duration > 1:
            discount_percent = min(duration * 5, 20)  # –ú–∞–∫—Å–∏–º—É–º 20% —Å–∫–∏–¥–∫–∏
            discount_text = f"\nüéÅ –°–∫–∏–¥–∫–∞ {discount_percent}% –∑–∞ –æ–ø–ª–∞—Ç—É –Ω–∞ {duration} –º–µ—Å."
        
        text = f"""üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>

üì¶ –¢–∞—Ä–∏—Ñ: <b>{plan_name}</b>
‚è± –ü–µ—Ä–∏–æ–¥: <b>{duration} –º–µ—Å.</b>
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>{discount_text}

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"""

        keyboard = [
            [InlineKeyboardButton(
                "üîÑ –° –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º (—É–¥–æ–±–Ω–µ–µ)", 
                callback_data="choose_auto_renewal"
            )],
            [InlineKeyboardButton(
                "üí≥ –†–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞", 
                callback_data="choose_no_auto_renewal"
            )],
            [InlineKeyboardButton(
                "‚ùì –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏", 
                callback_data="show_auto_renewal_terms"
            )]
        ]
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return SHOWING_TERMS
    
    async def handle_choice_selection(self, update: types.CallbackQuery, context: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã."""
        query = update.callback_query
        await query.answer()
        
        if query.data == "choose_auto_renewal":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–≥–ª–∞—Å–∏—é –Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
            return await self.show_consent_form(update, context)
            
        elif query.data == "choose_no_auto_renewal":
            # –û–±—ã—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
            context.user_data['enable_auto_renewal'] = False
            return await self.proceed_to_payment(update, context)
            
        elif query.data == "show_auto_renewal_terms":
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return await self.show_detailed_terms(update, context)
    
    async def show_consent_form(self, update: types.Update, context: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–≥–ª–∞—Å–∏—è —Å —á–µ–∫–±–æ–∫—Å–æ–º."""
        
        plan_name = context.user_data.get('selected_plan', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')
        price = context.user_data.get('price', 490)
        duration = context.user_data.get('duration_months', 1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        if duration == 1:
            renewal_period = "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
        elif duration == 3:
            renewal_period = "–∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞"
        elif duration == 6:
            renewal_period = "–∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤"
        else:
            renewal_period = f"–∫–∞–∂–¥—ã–µ {duration} –º–µ—Å—è—Ü–µ–≤"
        
        checkbox_state = context.user_data.get('consent_checkbox', False)
        checkbox_emoji = "‚òëÔ∏è" if checkbox_state else "‚¨ú"
        
        text = f"""üìù <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ</b>

–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º.

üìã <b>–£—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>
‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å {renewal_period}
‚Ä¢ –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {price} ‚ÇΩ
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ /my_subscriptions

{checkbox_emoji} <b>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è</b>

<i>–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.</i>"""

        keyboard = [
            [InlineKeyboardButton(
                f"{checkbox_emoji} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ",
                callback_data="toggle_consent_checkbox"
            )],
            [InlineKeyboardButton(
                "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                callback_data="show_user_agreement"
            )],
            [InlineKeyboardButton(
                "‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º" if checkbox_state else "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ",
                callback_data="confirm_with_auto_renewal" if checkbox_state else "need_consent_reminder"
            )],
            [InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_payment_choice"
            )]
        ]
        
        query = update.callback_query
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return CONSENT_CHECKBOX
    
    async def toggle_consent(self, update: types.CallbackQuery, context: FSMContext):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è."""
        query = update.callback_query
        
        current_state = context.user_data.get('consent_checkbox', False)
        context.user_data['consent_checkbox'] = not current_state
        
        if not current_state:
            await query.answer("‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
        else:
            await query.answer("‚¨ú –°–æ–≥–ª–∞—Å–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        return await self.show_consent_form(update, context)
    
    async def confirm_with_auto_renewal(self, update: types.CallbackQuery, context: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º."""
        query = update.callback_query
        
        if not context.user_data.get('consent_checkbox', False):
            await query.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ!", show_alert=True)
            return CONSENT_CHECKBOX
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –≤ –ë–î
        await self.save_consent_to_db(
            user_id=query.from_user.id,
            plan_id=context.user_data.get('selected_plan'),
            amount=context.user_data.get('price'),
            period_days=context.user_data.get('duration_months', 1) * 30
        )
        
        context.user_data['enable_auto_renewal'] = True
        await query.answer("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º")
        
        return await self.proceed_to_payment(update, context)
    
    async def proceed_to_payment(self, update: types.Update, context: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞."""
        query = update.callback_query
        
        plan_name = context.user_data.get('selected_plan', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')
        duration = context.user_data.get('duration_months', 1)
        price = context.user_data.get('price', 490)
        email = context.user_data.get('email', '')
        auto_renewal = context.user_data.get('enable_auto_renewal', False)
        
        renewal_text = "üîÑ –° –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º" if auto_renewal else "üí≥ –†–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞"
        
        text = f"""‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –¢–∞—Ä–∏—Ñ: <b>{plan_name}</b>
‚Ä¢ –ü–µ—Ä–∏–æ–¥: <b>{duration} –º–µ—Å.</b>
‚Ä¢ Email: <b>{email}</b>
‚Ä¢ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: <b>{renewal_text}</b>

üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ: {price} ‚ÇΩ</b>

–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º–µ."""

        keyboard = [
            [InlineKeyboardButton(
                f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {price} ‚ÇΩ",
                callback_data="proceed_to_payment"
            )],
            [InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="cancel_payment"
            )]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return FINAL_CONFIRMATION
    
    async def save_consent_to_db(self, user_id: int, plan_id: str, amount: int, period_days: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
        import sqlite3
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO auto_renewal_consents 
                (user_id, plan_id, amount, period_days, consent_text, consent_checkbox_state, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                user_id,
                plan_id,
                amount,
                period_days,
                f"–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {plan_id} –∫–∞–∂–¥—ã–µ {period_days} –¥–Ω–µ–π",
                1,
                datetime.now()
            ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"Saved auto-renewal consent for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error saving consent: {e}")
    
    async def show_detailed_terms(self, update: types.CallbackQuery, context: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        query = update.callback_query
        await query.answer()
        
        text = """üìú <b>–ü–æ–¥—Ä–æ–±–Ω–æ –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏</b>

<b>üîÑ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?</b>
–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ. –ö–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü/–∫–≤–∞—Ä—Ç–∞–ª) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—É–º–º—ã –ø–æ–¥–ø–∏—Å–∫–∏.

<b>üí≥ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π</b>
‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —à–ª—é–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É PCI DSS

<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>
‚Ä¢ –ó–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–ø–ª–∞—Ç–æ–π - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

<b>‚ùå –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>
‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ /my_subscriptions
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

<b>üí∞ –í–æ–∑–≤—Ä–∞—Ç—ã</b>
‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π - –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
‚Ä¢ –ü–æ—Å–ª–µ 14 –¥–Ω–µ–π - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>
–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: /support"""
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_auto_renewal_choice")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return SHOWING_TERMS
    
    async def handle_back_navigation(self, update: types.CallbackQuery, context: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥."""
        query = update.callback_query
        
        if query.data == "back_to_payment_choice":
            return await self.show_auto_renewal_choice(update, context)
        elif query.data == "show_auto_renewal_choice":
            return await self.show_auto_renewal_choice(update, context)


class SubscriptionNotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö."""
    
    def __init__(self, bot: Bot, db_path: str = "/opt/ege-bot/subscriptions.db"):
        self.bot = bot
        self.db_path = db_path
        self.is_running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫."""
        if self.is_running:
            return
        
        self.is_running = True
        asyncio.create_task(self._notification_loop())
        logger.info("Subscription notification manager started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫."""
        self.is_running = False
        logger.info("Subscription notification manager stopped")
    
    async def _notification_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
        while self.is_running:
            try:
                await self.check_expiring_subscriptions()
                await self.process_auto_renewals()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                await asyncio.sleep(21600)
                
            except Exception as e:
                logger.error(f"Error in notification loop: {e}")
                await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
    
    async def check_expiring_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        import sqlite3
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            three_days_later = datetime.now() + timedelta(days=3)
            
            cursor.execute("""
                SELECT DISTINCT user_id, plan_id, end_date, auto_renewal_enabled
                FROM expiring_subscriptions
                WHERE end_date BETWEEN ? AND ?
                AND last_notification_date IS NULL OR last_notification_date < ?
            """, (
                datetime.now(),
                three_days_later,
                datetime.now() - timedelta(days=1)
            ))
            
            expiring_subs = cursor.fetchall()
            
            for user_id, plan_id, end_date, auto_renewal in expiring_subs:
                await self.send_expiry_notification(
                    user_id, plan_id, end_date, bool(auto_renewal)
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                cursor.execute("""
                    UPDATE expiring_subscriptions
                    SET last_notification_date = ?
                    WHERE user_id = ? AND plan_id = ?
                """, (datetime.now(), user_id, plan_id))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Error checking expiring subscriptions: {e}")
    
    async def send_expiry_notification(self, user_id: int, plan_id: str, end_date: datetime, auto_renewal: bool):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
        
        days_left = (end_date - datetime.now()).days
        
        if auto_renewal:
            text = f"""‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "{plan_id}" –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.

üìÖ –î–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {end_date.strftime('%d.%m.%Y')}
üí≥ –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_subscriptions"""
        else:
            text = f"""‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "{plan_id}" –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.

üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%d.%m.%Y')}

–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe"""
        
        keyboard = [
            [InlineKeyboardButton(
                "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", 
                callback_data="manage_subscription"
            )]
        ]
        
        try:
            await self.bot.send_message(
                user_id,
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info(f"Sent expiry notification to user {user_id}")
            
        except Exception as e:
            logger.error(f"Failed to send notification to user {user_id}: {e}")
    
    async def process_auto_renewals(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫."""
        import sqlite3
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
            cursor.execute("""
                SELECT user_id, plan_id, amount, recurrent_token
                FROM auto_renewal_settings
                WHERE enabled = 1 
                AND next_renewal_date <= ?
                AND failures_count < 3
            """, (datetime.now(),))
            
            renewals = cursor.fetchall()
            
            for user_id, plan_id, amount, token in renewals:
                success = await self.process_single_renewal(
                    user_id, plan_id, amount, token
                )
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                    next_date = datetime.now() + timedelta(days=30)
                    cursor.execute("""
                        UPDATE auto_renewal_settings
                        SET next_renewal_date = ?, failures_count = 0
                        WHERE user_id = ?
                    """, (next_date, user_id))
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    cursor.execute("""
                        INSERT INTO auto_renewal_history
                        (user_id, plan_id, status, amount, created_at)
                        VALUES (?, ?, 'success', ?, ?)
                    """, (user_id, plan_id, amount, datetime.now()))
                    
                else:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
                    cursor.execute("""
                        UPDATE auto_renewal_settings
                        SET failures_count = failures_count + 1
                        WHERE user_id = ?
                    """, (user_id,))
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    cursor.execute("""
                        INSERT INTO auto_renewal_history
                        (user_id, plan_id, status, amount, error_message, created_at)
                        VALUES (?, ?, 'failed', ?, 'Payment failed', ?)
                    """, (user_id, plan_id, amount, datetime.now()))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Error processing auto renewals: {e}")
    
    async def process_single_renewal(self, user_id: int, plan_id: str, amount: int, token: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ."""
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        # –ü—Ä–∏–º–µ—Ä –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ:
        try:
            from payment.tinkoff import TinkoffPayment
            
            tinkoff = TinkoffPayment()
            result = await tinkoff.charge_recurrent(
                rebill_id=token,
                amount=amount * 100,  # –í –∫–æ–ø–µ–π–∫–∞—Ö
                order_id=f"AUTO_{user_id}_{datetime.now().timestamp()}"
            )
            
            if result.get('Success'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
                await self.bot.send_message(
                    user_id,
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '{plan_id}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n"
                    f"–°–ø–∏—Å–∞–Ω–æ: {amount} ‚ÇΩ\n"
                    f"–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')}"
                )
                return True
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
                await self.bot.send_message(
                    user_id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É '{plan_id}'.\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_subscriptions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π."
                )
                return False
                
        except Exception as e:
            logger.error(f"Error charging recurrent payment for user {user_id}: {e}")
            return False


class MultiMonthSubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–Ω–æ–≥–æ–º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."""
    
    @staticmethod
    def calculate_discount(months: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–∏–¥–∫—É –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
        discounts = {
            1: 0,      # –ë–µ–∑ —Å–∫–∏–¥–∫–∏
            3: 0.10,   # 10% —Å–∫–∏–¥–∫–∞
            6: 0.15,   # 15% —Å–∫–∏–¥–∫–∞
            12: 0.20   # 20% —Å–∫–∏–¥–∫–∞
        }
        return discounts.get(months, 0)
    
    @staticmethod
    def calculate_price(base_price: int, months: int) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏."""
        discount = MultiMonthSubscriptionManager.calculate_discount(months)
        total = base_price * months
        discounted = total * (1 - discount)
        return int(discounted)
    
    @staticmethod
    def get_duration_options(base_price: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
        options = []
        
        for months in [1, 3, 6, 12]:
            price = MultiMonthSubscriptionManager.calculate_price(base_price, months)
            discount = MultiMonthSubscriptionManager.calculate_discount(months)
            
            option = {
                'months': months,
                'price': price,
                'discount_percent': int(discount * 100),
                'monthly_price': price // months,
                'savings': base_price * months - price
            }
            
            if months == 1:
                option['label'] = f"1 –º–µ—Å—è—Ü - {price} ‚ÇΩ"
            elif months == 3:
                option['label'] = f"3 –º–µ—Å—è—Ü–∞ - {price} ‚ÇΩ (—Å–∫–∏–¥–∫–∞ {option['discount_percent']}%)"
            elif months == 6:
                option['label'] = f"6 –º–µ—Å—è—Ü–µ–≤ - {price} ‚ÇΩ (—Å–∫–∏–¥–∫–∞ {option['discount_percent']}%)"
            elif months == 12:
                option['label'] = f"1 –≥–æ–¥ - {price} ‚ÇΩ (—Å–∫–∏–¥–∫–∞ {option['discount_percent']}%)"
            
            options.append(option)
        
        return options


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers.py
async def show_auto_renewal_choice(update: types.Update, context: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ handlers.py."""
    consent_handler = AutoRenewalConsent()
    return await consent_handler.show_auto_renewal_choice(update, context)


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = [
    'AutoRenewalConsent',
    'SubscriptionNotificationManager',
    'MultiMonthSubscriptionManager',
    'AutoRenewalStates',
    'SHOWING_TERMS',
    'CONSENT_CHECKBOX', 
    'FINAL_CONFIRMATION',
    'show_auto_renewal_choice'
]
# payment/auto_renewal_scheduler.py - –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫

import logging
import asyncio
from datetime import datetime, timedelta, timezone
from typing import List, Dict
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Bot
from telegram.constants import ParseMode

logger = logging.getLogger(__name__)

class AutoRenewalScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫."""
    
    def __init__(self, bot: Bot, subscription_manager, tinkoff_api):
        self.bot = bot
        self.subscription_manager = subscription_manager
        self.tinkoff_api = tinkoff_api
        self.scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
        self.is_running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if not self.is_running:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –ú–°–ö
            self.scheduler.add_job(
                self.check_expiring_subscriptions,
                CronTrigger(hour=10, minute=0),
                id='check_expiring',
                replace_existing=True
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 –ø–æ –ú–°–ö
            self.scheduler.add_job(
                self.process_auto_renewals,
                CronTrigger(hour=12, minute=0),
                id='process_renewals',
                replace_existing=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
            self.scheduler.add_job(
                self.retry_failed_renewals,
                CronTrigger(hour='*/4'),
                id='retry_failed',
                replace_existing=True
            )
            
            self.scheduler.start()
            self.is_running = True
            logger.info("Auto-renewal scheduler started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self.is_running:
            self.scheduler.shutdown()
            self.is_running = False
            logger.info("Auto-renewal scheduler stopped")
    
    async def check_expiring_subscriptions(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.
        """
        try:
            logger.info("Checking expiring subscriptions...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            expiring_in_3_days = await self.subscription_manager.get_expiring_subscriptions(3)
            
            for subscription in expiring_in_3_days:
                user_id = subscription['user_id']
                expires_at = subscription['expires_at']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
                auto_renewal = await self.subscription_manager.get_auto_renewal_status(user_id)
                
                if auto_renewal and auto_renewal['enabled']:
                    # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
                    message = f"""‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {expires_at.strftime('%d.%m.%Y')}.

üîÑ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</b>
–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 1 –º–µ—Å—è—Ü.
–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: {subscription.get('amount', 0)} ‚ÇΩ

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auto_renewal"""
                else:
                    # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
                    message = f"""‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {expires_at.strftime('%d.%m.%Y')}.

‚ùå –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.
–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ /auto_renewal –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
                
                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"Failed to send expiry notification to user {user_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —Å–µ–≥–æ–¥–Ω—è
            expiring_today = await self.subscription_manager.get_expiring_subscriptions(0)
            
            for subscription in expiring_today:
                user_id = subscription['user_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                if subscription.get('is_trial'):
                    await self._handle_trial_expiry(user_id, subscription)
                else:
                    await self._handle_regular_expiry(user_id, subscription)
            
            logger.info(f"Processed {len(expiring_in_3_days)} 3-day warnings and {len(expiring_today)} expiring today")
            
        except Exception as e:
            logger.exception(f"Error checking expiring subscriptions: {e}")
    
    async def _handle_trial_expiry(self, user_id: int, subscription: Dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ.
        """
        try:
            auto_renewal = await self.subscription_manager.get_auto_renewal_status(user_id)
            
            if auto_renewal and auto_renewal['enabled'] and auto_renewal.get('recurrent_token'):
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ –ø–æ–ª–Ω—ã–π –º–µ—Å—è—Ü –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                logger.info(f"Auto-renewing trial subscription for user {user_id}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞)
                new_plan_id = 'package_full'  # –ò–ª–∏ –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                amount_kopecks = 99900  # 999 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
                order_id = f"AUTO_TRIAL_{user_id}_{int(datetime.now().timestamp())}"
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
                init_result = await self.tinkoff_api.init_payment(
                    order_id=order_id,
                    amount_kopecks=amount_kopecks,
                    description="–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
                    user_email=await self.subscription_manager.get_user_email(user_id),
                    receipt_items=[{
                        "Name": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ï–ì–≠ (1 –º–µ—Å—è—Ü)",
                        "Price": amount_kopecks,
                        "Quantity": 1,
                        "Amount": amount_kopecks,
                        "Tax": "none"
                    }],
                    enable_recurrent=False  # –ù–µ –Ω—É–∂–Ω–æ, —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
                )
                
                if init_result['success']:
                    payment_id = init_result['payment_id']
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
                    charge_result = await self.tinkoff_api.charge_recurrent(
                        payment_id=payment_id,
                        rebill_id=auto_renewal['recurrent_token']
                    )
                    
                    if charge_result['success']:
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        await self.subscription_manager.activate_subscription(
                            order_id=order_id,
                            user_id=user_id,
                            plan_id=new_plan_id
                        )
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=f"""‚úÖ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 1 –º–µ—Å—è—Ü.
–ü–ª–∞–Ω: –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
–°–ø–∏—Å–∞–Ω–æ: 999 ‚ÇΩ

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üéì

/my_subscriptions - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫
/auto_renewal - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º""",
                            parse_mode=ParseMode.HTML
                        )
                    else:
                        # –°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                        await self._notify_renewal_failed(user_id, charge_result.get('error'))
                else:
                    logger.error(f"Failed to init payment for trial renewal: {init_result}")
            else:
                # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=user_id,
                    text="""üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Å–µ—Ä–≤–∏—Å!

–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –ï–ì–≠, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:
/subscribe - –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏

–ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø:
/auto_renewal - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ""",
                    parse_mode=ParseMode.HTML
                )
                
        except Exception as e:
            logger.exception(f"Error handling trial expiry for user {user_id}: {e}")
    
    async def _handle_regular_expiry(self, user_id: int, subscription: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
        try:
            auto_renewal = await self.subscription_manager.get_auto_renewal_status(user_id)
            
            if not auto_renewal or not auto_renewal['enabled']:
                # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await self.subscription_manager.deactivate_expired_subscription(user_id)
                
                await self.bot.send_message(
                    chat_id=user_id,
                    text="""‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –∏ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.

–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø:
/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
/auto_renewal - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ""",
                    parse_mode=ParseMode.HTML
                )
                
        except Exception as e:
            logger.exception(f"Error handling regular expiry for user {user_id}: {e}")
    
    async def process_auto_renewals(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.
        """
        try:
            logger.info("Processing auto-renewals...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
            users_to_renew = await self.subscription_manager.get_users_for_auto_renewal()
            
            success_count = 0
            failed_count = 0
            
            for user_data in users_to_renew:
                user_id = user_data['user_id']
                rebill_id = user_data['recurrent_token']
                plan_id = user_data['plan_id']
                amount = user_data['amount']
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                    success = await self._process_single_renewal(
                        user_id, rebill_id, plan_id, amount
                    )
                    
                    if success:
                        success_count += 1
                    else:
                        failed_count += 1
                        
                except Exception as e:
                    logger.error(f"Failed to process renewal for user {user_id}: {e}")
                    failed_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–ª–∞—Ç–µ–∂–∞–º–∏
                await asyncio.sleep(1)
            
            logger.info(f"Auto-renewal complete: {success_count} success, {failed_count} failed")
            
        except Exception as e:
            logger.exception(f"Error processing auto-renewals: {e}")
    
    async def _process_single_renewal(self, user_id: int, rebill_id: str,
                                       plan_id: str, amount: int) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
        –í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤.
        """
        try:
            # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ‚Ññ1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
            if amount <= 0:
                logger.error(
                    f"‚ùå CRITICAL: Attempted auto-renewal for user {user_id} with invalid amount: {amount}. "
                    f"BLOCKING renewal to prevent incorrect charge."
                )
                await self._notify_renewal_failed(
                    user_id, 
                    "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                return False
            
            # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ‚Ññ2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
            if not rebill_id or len(rebill_id) < 10:
                logger.error(
                    f"‚ùå CRITICAL: Invalid rebill_id for user {user_id}. "
                    f"BLOCKING renewal."
                )
                await self._notify_renewal_failed(
                    user_id,
                    "–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–∏—Ç–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ."
                )
                return False
            
            # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ‚Ññ3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            subscription = await self.subscription_manager.check_active_subscription(user_id)
            if subscription and subscription.get('plan_id') != plan_id:
                logger.warning(
                    f"‚ö†Ô∏è Plan mismatch for user {user_id}: expected {plan_id}, "
                    f"found {subscription.get('plan_id')}. Updating plan_id."
                )
                plan_id = subscription.get('plan_id')
            
            order_id = f"AUTO_{user_id}_{int(datetime.now().timestamp())}"
            amount_kopecks = amount * 100
            
            logger.info(
                f"üîÑ Processing auto-renewal for user {user_id}: "
                f"amount={amount}‚ÇΩ, plan={plan_id}"
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
            init_result = await self.tinkoff_api.init_recurrent_payment(
                order_id=order_id,
                amount_kopecks=amount_kopecks,
                description=f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {plan_id}",
            )
            
            if not init_result['success']:
                logger.error(f"‚ùå Failed to init renewal payment for user {user_id}: {init_result}")
                await self._notify_renewal_failed(user_id, init_result.get('error'))
                await self.subscription_manager.increment_renewal_failures(user_id)
                return False
            
            payment_id = init_result['payment_id']
            logger.info(f"‚úÖ Payment initialized for user {user_id}: payment_id={payment_id}")
            
            # –ö–†–ò–¢–ò–ß–ù–ê–Ø –¢–û–ß–ö–ê: –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
            charge_result = await self.tinkoff_api.charge_recurrent(
                payment_id=payment_id,
                rebill_id=rebill_id
            )
            
            # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ‚Ññ4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏—Å–∞–Ω–∏—è
            if not charge_result.get('success'):
                logger.error(
                    f"‚ùå Charge FAILED for user {user_id}: {charge_result.get('error')}"
                )
                await self._notify_renewal_failed(user_id, charge_result.get('error'))
                await self.subscription_manager.increment_renewal_failures(user_id)
                return False
            
            # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ‚Ññ5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            charge_status = charge_result.get('status')
            if charge_status != 'CONFIRMED':
                logger.error(
                    f"‚ùå Charge status is not CONFIRMED for user {user_id}: status={charge_status}"
                )
                await self._notify_renewal_failed(
                    user_id,
                    f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (—Å—Ç–∞—Ç—É—Å: {charge_status})"
                )
                await self.subscription_manager.increment_renewal_failures(user_id)
                return False
            
            # ‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            logger.info(f"‚úÖ Payment CONFIRMED for user {user_id}. Activating subscription...")
            
            activation_success = await self.subscription_manager.activate_subscription(
                order_id=order_id,
                user_id=user_id,
                plan_id=plan_id
            )
            
            if not activation_success:
                logger.error(
                    f"‚ùå CRITICAL: Payment succeeded but activation failed for user {user_id}! "
                    f"Manual intervention required. order_id={order_id}"
                )
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            await self.subscription_manager.update_next_renewal_date(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
            await self.bot.send_message(
                chat_id=user_id,
                text=f"""‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>

    –ü–ª–∞–Ω: {plan_id}
    –ü–µ—Ä–∏–æ–¥: 1 –º–µ—Å—è—Ü
    –°–ø–∏—Å–∞–Ω–æ: {amount} ‚ÇΩ

    –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')}

    /my_subscriptions - –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    /auto_renewal - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º""",
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"‚úÖ ‚úÖ ‚úÖ Auto-renewal COMPLETE for user {user_id}")
            return True
            
        except Exception as e:
            logger.exception(f"‚ùå EXCEPTION during auto-renewal for user {user_id}: {e}")
            await self._notify_renewal_failed(user_id, str(e))
            await self.subscription_manager.increment_renewal_failures(user_id)
            return False

    async def retry_failed_renewals(self):
        """
        –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞.
        """
        try:
            logger.info("Retrying failed renewals...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            failed_renewals = await self.subscription_manager.get_failed_renewals(hours=24)
            
            retry_count = 0
            success_count = 0
            
            for renewal in failed_renewals:
                user_id = renewal['user_id']
                failures_count = renewal['failures_count']
                
                # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –±–æ–ª—å—à–µ 3 —Ä–∞–∑
                if failures_count >= 3:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                auto_renewal = await self.subscription_manager.get_auto_renewal_status(user_id)
                
                if auto_renewal and auto_renewal['enabled']:
                    retry_count += 1
                    
                    success = await self._process_single_renewal(
                        user_id,
                        auto_renewal['recurrent_token'],
                        auto_renewal['plan_id'],
                        auto_renewal['amount']
                    )
                    
                    if success:
                        success_count += 1
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
                        await self.subscription_manager.reset_renewal_failures(user_id)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                await asyncio.sleep(2)
            
            logger.info(f"Retry complete: {success_count}/{retry_count} successful")
            
        except Exception as e:
            logger.exception(f"Error retrying failed renewals: {e}")
    
    async def _notify_renewal_failed(self, user_id: int, error: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏."""
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=f"""‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
–ü—Ä–∏—á–∏–Ω–∞: {error}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
‚Ä¢ –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ
/auto_renewal - –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è

–ú—ã –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.""",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Failed to notify user {user_id} about renewal failure: {e}")
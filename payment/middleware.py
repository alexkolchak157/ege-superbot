# payment/middleware.py
"""Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
import logging
from functools import wraps
from datetime import datetime, timezone

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core import db
from .subscription_manager import SubscriptionManager

logger = logging.getLogger(__name__)

# –õ–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
FREE_MONTHLY_LIMIT = 50

subscription_manager = SubscriptionManager()


def requires_subscription(func=None, *, feature=None, check_limit=True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏.
    
    Args:
        feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        check_limit: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    def decorator(handler_func):
        @wraps(handler_func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_status = await db.get_or_create_user_status(user_id)
            is_subscribed = user_status.get('is_subscribed', False)
            monthly_usage = user_status.get('monthly_usage_count', 0)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if is_subscribed:
                return await handler_func(update, context)
            
            # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if check_limit and monthly_usage >= FREE_MONTHLY_LIMIT:
                await show_subscription_required(update, monthly_usage)
                return
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if check_limit:
                await db.increment_usage(user_id)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return await handler_func(update, context)
        
        return wrapper
    
    if func:
        return decorator(func)
    return decorator


async def show_subscription_required(update: Update, current_usage: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    text = f"""‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç</b>

–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {current_usage} –∏–∑ {FREE_MONTHLY_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.

–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"""
    
    keyboard = [
        [InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="to_subscription")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="check_subscription_status")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )


async def check_subscription_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_status = await db.get_or_create_user_status(user_id)
    subscription = await subscription_manager.check_active_subscription(user_id)
    
    if subscription:
        from .config import SUBSCRIPTION_PLANS
        plan = SUBSCRIPTION_PLANS[subscription['plan_id']]
        expires = subscription['expires_at'].strftime('%d.%m.%Y')
        days_left = (subscription['expires_at'] - datetime.now(timezone.utc)).days
        
        text = f"""‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

üìã –ü–ª–∞–Ω: {plan['name']}
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."""
        
        keyboard = [[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
        ]]
        
    else:
        usage = user_status.get('monthly_usage_count', 0)
        remaining = max(0, FREE_MONTHLY_LIMIT - usage)
        
        text = f"""‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>

üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {usage} / {FREE_MONTHLY_LIMIT}
üìù –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining}

–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ {FREE_MONTHLY_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü."""
        
        keyboard = [
            [InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="to_subscription")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )


def register_subscription_middleware(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç middleware –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    from telegram.ext import CallbackQueryHandler
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    app.add_handler(
        CallbackQueryHandler(
            check_subscription_status_handler,
            pattern="^check_subscription_status$"
        ),
        group=1
    )
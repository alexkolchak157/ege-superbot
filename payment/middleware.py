# payment/subscription_middleware.py - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è python-telegram-bot v20

import logging
from typing import Optional, Set, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, Application, TypeHandler, 
    ApplicationHandlerStop, CallbackContext
)
from datetime import datetime

from core import config, db
from payment.subscription_manager import SubscriptionManager

logger = logging.getLogger(__name__)

class SubscriptionMiddleware:
    """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    def __init__(
        self,
        free_commands: Optional[Set[str]] = None,
        free_patterns: Optional[Set[str]] = None,
        check_channel: bool = False,
        channel: Optional[str] = None
    ):
        """
        Args:
            free_commands: –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            free_patterns: –ü–∞—Ç—Ç–µ—Ä–Ω—ã callback_data, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            check_channel: –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            channel: –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.free_commands = free_commands or {
            'start', 'help', 'subscribe', 'subscription', 
            'grant_subscription', 'revoke_subscription', 'payment_stats'
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã callback_data, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        self.free_patterns = free_patterns or {
            'main_menu', 'subscribe_', 'plan_', 'check_payment_',
            'check_subscription', 'help_', 'lang_', 'settings_'
        }
        
        self.check_channel = check_channel
        self.channel = channel or config.REQUIRED_CHANNEL
        self.subscription_manager = SubscriptionManager()
        
    async def process_update(
        self,
        update: Update,
        application: Application,
        check_update: bool,
        context: CallbackContext
    ) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.
        
        Returns:
            True - –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
            False - –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        """
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not update.effective_user:
            return True
            
        user_id = update.effective_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
        if self._is_free_action(update):
            return True
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await db.ensure_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        has_subscription = await self._check_subscription(user_id, application.bot)
        
        if not has_subscription:
            await self._send_subscription_required(update, context)
            raise ApplicationHandlerStop()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        can_use, used, limit = await self._check_limits(user_id)
        
        if not can_use:
            await self._send_limit_exceeded(update, context, used, limit)
            raise ApplicationHandlerStop()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await self._increment_usage(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ context
        context.user_data['subscription_info'] = await self.subscription_manager.get_subscription_info(user_id)
        context.user_data['usage_info'] = {'used': used + 1, 'limit': limit}
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        if update.callback_query and limit > 0 and limit != -1:
            remaining = limit - used - 1
            if remaining > 0 and remaining <= 10:
                await update.callback_query.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining}")
        
        return True
    
    def _is_free_action(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if update.message and update.message.text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ /
            text = update.message.text
            if text.startswith('/'):
                command = text.split()[0][1:].split('@')[0].lower()
                if command in self.free_commands:
                    return True
                    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_query
        elif update.callback_query and update.callback_query.data:
            callback_data = update.callback_query.data
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for pattern in self.free_patterns:
                if callback_data.startswith(pattern):
                    return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º inline_query (–≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è preview)
        elif update.inline_query:
            return True
            
        return False
    
    async def _check_subscription(self, user_id: int, bot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription_info = await self.subscription_manager.get_subscription_info(user_id)
        if subscription_info['is_active']:
            return True
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
        if self.check_channel and self.channel:
            try:
                chat_member = await bot.get_chat_member(self.channel, user_id)
                if chat_member.status in ['member', 'administrator', 'creator']:
                    return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
        
        return False
    
    async def _check_limits(self, user_id: int) -> tuple[bool, int, int]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        subscription_info = await self.subscription_manager.get_subscription_info(user_id)
        
        # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã
        if subscription_info['is_active'] and subscription_info['plan_id'] in ['pro_month', 'pro_ege']:
            return True, 0, -1
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        today = datetime.now().date().isoformat()
        user_data = await db.get_user(user_id)
        
        if not user_data:
            return False, 0, 0
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if user_data.get('last_usage_date') != today:
            await db.execute_query(
                "UPDATE users SET daily_usage_count = 0, last_usage_date = ? WHERE user_id = ?",
                (today, user_id)
            )
            daily_count = 0
        else:
            daily_count = user_data.get('daily_usage_count', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
        if subscription_info['is_active'] and subscription_info['plan_id'] == 'basic_month':
            limit = 100  # –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
        else:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω - –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç
            monthly_count = user_data.get('monthly_usage_count', 0)
            if monthly_count >= 50:
                return False, monthly_count, 50
            limit = 50 - monthly_count
        
        return daily_count < limit, daily_count, limit
    
    async def _increment_usage(self, user_id: int) -> None:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        today = datetime.now().date().isoformat()
        await db.execute_query("""
            UPDATE users 
            SET daily_usage_count = daily_usage_count + 1,
                monthly_usage_count = monthly_usage_count + 1,
                last_usage_date = ?
            WHERE user_id = ?
        """, (today, user_id))
    
    async def _send_subscription_required(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        text = "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
        text += "üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:\n"
        text += "‚Ä¢ –ë–∞–∑–æ–≤—ã–π (299‚ÇΩ/–º–µ—Å) - 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
        text += "‚Ä¢ Pro (599‚ÇΩ/–º–µ—Å) - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n"
        text += "‚Ä¢ Pro –¥–æ –ï–ì–≠ (1999‚ÇΩ) - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–æ –ï–ì–≠ 2025\n"
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_start")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        if self.channel and self.check_channel:
            text += f"\nüì£ –ò–ª–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {self.channel} –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
            keyboard.insert(1, [
                InlineKeyboardButton("üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{self.channel[1:]}")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
            try:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            except:
                await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        elif update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def _send_limit_exceeded(self, update: Update, context: ContextTypes.DEFAULT_TYPE, used: int, limit: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
        if limit == 50:
            text = f"‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n"
            text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü\n"
            text += "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞!"
        else:
            text = f"‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n"
            text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{limit} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è\n"
            text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –£–ª—É—á—à–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_start")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.answer("–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!", show_alert=True)
            try:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            except:
                await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        elif update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)


def setup_subscription_middleware(
    application: Application,
    free_commands: Optional[Set[str]] = None,
    free_patterns: Optional[Set[str]] = None,
    check_channel: bool = False
) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫.
    –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ post_init –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î.
    """
    middleware = SubscriptionMiddleware(
        free_commands=free_commands,
        free_patterns=free_patterns,
        check_channel=check_channel
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º middleware –≤ application –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
    application.bot_data['subscription_middleware'] = middleware
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    async def check_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
        try:
            await middleware.process_update(update, application, True, context)
        except ApplicationHandlerStop:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            raise
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –≥—Ä—É–ø–ø–æ–π -100 (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º)
    # TypeHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    from telegram.ext import TypeHandler
    application.add_handler(
        TypeHandler(Update, check_subscription_handler),
        group=-100
    )
    
    logger.info("Subscription middleware —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
# payment/decorators.py
"""–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
import functools
import logging
from typing import Callable, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from .subscription_manager import SubscriptionManager

logger = logging.getLogger(__name__)


def requires_subscription(
    plan_level: Optional[str] = None,
    send_message: bool = True,
    check_channel: bool = False
) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏.
    
    Args:
        plan_level: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ (basic_month, pro_month, pro_ege)
        send_message: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        check_channel: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ —Ç–∞–∫–∂–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            if not update.effective_user:
                return await func(update, context, *args, **kwargs)
            
            user_id = update.effective_user.id
            subscription_manager = SubscriptionManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await subscription_manager.check_active_subscription(user_id)
            
            if subscription:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if plan_level:
                    plan_hierarchy = {
                        'basic_month': 1,
                        'pro_month': 2,
                        'pro_ege': 3
                    }
                    
                    user_level = plan_hierarchy.get(subscription['plan_id'], 0)
                    required_level = plan_hierarchy.get(plan_level, 0)
                    
                    if user_level >= required_level:
                        return await func(update, context, *args, **kwargs)
                else:
                    return await func(update, context, *args, **kwargs)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            if check_channel:
                from core import config, utils
                if hasattr(config, 'REQUIRED_CHANNEL'):
                    is_member = await utils.check_subscription(
                        context.bot, 
                        user_id, 
                        config.REQUIRED_CHANNEL
                    )
                    if is_member:
                        return await func(update, context, *args, **kwargs)
            
            # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if send_message:
                text = """‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.

–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscribe"""
                
                keyboard = [[
                    InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="to_subscription")
                ]]
                
                if update.callback_query:
                    await update.callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
                    await update.callback_query.message.reply_text(
                        text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await update.message.reply_text(
                        text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=ParseMode.HTML
                    )
            
            return None
        
        return wrapper
    return decorator
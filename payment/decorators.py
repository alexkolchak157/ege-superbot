# payment/decorators.py
"""–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º."""
import functools
import logging
from typing import Callable, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from .subscription_manager import SubscriptionManager
from .config import SUBSCRIPTION_MODE, SUBSCRIPTION_PLANS

logger = logging.getLogger(__name__)


def requires_subscription(
    plan_level: Optional[str] = None,
    send_message: bool = True,
    check_channel: bool = False
) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞).
    
    Args:
        plan_level: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ (basic_month, pro_month, pro_ege)
        send_message: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        check_channel: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ —Ç–∞–∫–∂–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            if not update.effective_user:
                return await func(update, context, *args, **kwargs)
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            from core import config
            admin_ids = []
            if hasattr(config, 'ADMIN_IDS') and config.ADMIN_IDS:
                if isinstance(config.ADMIN_IDS, str):
                    admin_ids = [int(id.strip()) for id in config.ADMIN_IDS.split(',') if id.strip()]
                elif isinstance(config.ADMIN_IDS, list):
                    admin_ids = config.ADMIN_IDS
            
            if user_id in admin_ids:
                return await func(update, context, *args, **kwargs)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            subscription_manager = context.bot_data.get('subscription_manager')
            if not subscription_manager:
                subscription_manager = SubscriptionManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await subscription_manager.check_active_subscription(user_id)
            
            if subscription:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if plan_level:
                    plan_hierarchy = {
                        'basic_month': 1,
                        'pro_month': 2,
                        'pro_ege': 3
                    }
                    
                    user_level = plan_hierarchy.get(subscription['plan_id'], 0)
                    required_level = plan_hierarchy.get(plan_level, 0)
                    
                    if user_level >= required_level:
                        return await func(update, context, *args, **kwargs)
                else:
                    return await func(update, context, *args, **kwargs)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            if check_channel:
                from core import config, utils
                if hasattr(config, 'REQUIRED_CHANNEL'):
                    is_member = await utils.check_subscription(
                        context.bot, 
                        user_id, 
                        config.REQUIRED_CHANNEL
                    )
                    if is_member:
                        return await func(update, context, *args, **kwargs)
            
            # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if send_message:
                text = """‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–ª–∞–Ω–∞."""
                
                keyboard = [[
                    InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if update.callback_query:
                    await update.callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
                    try:
                        await update.callback_query.edit_message_text(
                            text, 
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup
                        )
                    except:
                        await update.callback_query.message.reply_text(
                            text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup
                        )
                elif update.message:
                    await update.message.reply_text(
                        text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
            
            return None
        
        return wrapper
    return decorator


def requires_module(module_code: str, send_message: bool = True) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é (–º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞).
    
    Args:
        module_code: –ö–æ–¥ –º–æ–¥—É–ª—è ('test_part', 'task19', 'task20', 'task25', 'task24')
        send_message: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        @requires_module('task24')
        async def premium_function(update, context):
            ...
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            if not update.effective_user:
                return await func(update, context, *args, **kwargs)
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            from core import config
            admin_ids = []
            if hasattr(config, 'ADMIN_IDS') and config.ADMIN_IDS:
                if isinstance(config.ADMIN_IDS, str):
                    admin_ids = [int(id.strip()) for id in config.ADMIN_IDS.split(',') if id.strip()]
                elif isinstance(config.ADMIN_IDS, list):
                    admin_ids = config.ADMIN_IDS
            
            if user_id in admin_ids:
                logger.info(f"Admin {user_id} bypassing module check for {module_code}")
                return await func(update, context, *args, **kwargs)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            subscription_manager = context.bot_data.get('subscription_manager')
            if not subscription_manager:
                subscription_manager = SubscriptionManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
            has_access = await subscription_manager.check_module_access(user_id, module_code)
            
            if has_access:
                logger.info(f"User {user_id} has access to module {module_code}")
                return await func(update, context, *args, **kwargs)
            
            # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if send_message:
                module_names = {
                    'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                    'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                    'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20', 
                    'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25',
                    'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24 (–ü—Ä–µ–º–∏—É–º)'
                }
                module_name = module_names.get(module_code, module_code)
                
                # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
                min_price = None
                for plan_id, plan in SUBSCRIPTION_PLANS.items():
                    if module_code in plan.get('modules', []):
                        price = plan.get('price_rub', 0)
                        if min_price is None or price < min_price:
                            min_price = price
                
                text = f"üîí <b>–î–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é '{module_name}' –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                
                if min_price:
                    text += f"üí∞ –î–æ—Å—Ç—É–ø –æ—Ç {min_price}‚ÇΩ/–º–µ—Å—è—Ü\n\n"
                
                text += "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n"
                text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
                
                keyboard = [[
                    InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
                ]]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏" –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
                user_modules = await subscription_manager.get_user_modules(user_id)
                if user_modules:
                    keyboard.append([
                        InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
                    ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if update.callback_query:
                    await update.callback_query.answer(
                        f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {module_name}!", 
                        show_alert=True
                    )
                    try:
                        await update.callback_query.edit_message_text(
                            text, 
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup
                        )
                    except Exception as e:
                        logger.error(f"Error editing message: {e}")
                        await update.callback_query.message.reply_text(
                            text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup
                        )
                elif update.message:
                    await update.message.reply_text(
                        text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
            
            return None
        
        return wrapper
    return decorator



def requires_any_subscription(send_message: bool = True) -> Callable:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            if not update.effective_user:
                return await func(update, context, *args, **kwargs)
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            from core import config
            admin_ids = []
            if hasattr(config, 'ADMIN_IDS') and config.ADMIN_IDS:
                if isinstance(config.ADMIN_IDS, str):
                    admin_ids = [int(id.strip()) for id in config.ADMIN_IDS.split(',') if id.strip()]
                elif isinstance(config.ADMIN_IDS, list):
                    admin_ids = config.ADMIN_IDS
            
            if user_id in admin_ids:
                return await func(update, context, *args, **kwargs)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            subscription_manager = context.bot_data.get('subscription_manager')
            if not subscription_manager:
                subscription_manager = SubscriptionManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            if SUBSCRIPTION_MODE == 'modular':
                user_modules = await subscription_manager.get_user_modules(user_id)
                has_subscription = len(user_modules) > 0
            else:
                subscription = await subscription_manager.check_active_subscription(user_id)
                has_subscription = subscription is not None
            
            if has_subscription:
                return await func(update, context, *args, **kwargs)
            
            # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if send_message:
                text = """‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"""
                
                keyboard = [[
                    InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if update.callback_query:
                    await update.callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
                    try:
                        await update.callback_query.edit_message_text(
                            text, 
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup
                        )
                    except:
                        await update.callback_query.message.reply_text(
                            text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup
                        )
                elif update.message:
                    await update.message.reply_text(
                        text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
            
            return None
        
        return wrapper
    return decorator
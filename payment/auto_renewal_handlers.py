# payment/auto_renewal_handlers.py - –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from telegram.constants import ParseMode
from .subscription_manager import SubscriptionManager
try:
    from core.error_handler import safe_handler
except ImportError:
    # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å error_handler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    def safe_handler():
        def decorator(func):
            return func
        return decorator

logger = logging.getLogger(__name__)

@safe_handler()
async def cmd_auto_renewal_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        auto_renewal = await subscription_manager.get_auto_renewal_status(user_id)
        
        if not auto_renewal:
            text = """üîÑ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.

–° –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, –∏ –≤—ã –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º."""
            
            keyboard = [[
                InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                   callback_data="enable_auto_renewal")
            ]]
        else:
            if auto_renewal['enabled']:
                text = f"""‚úÖ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</b>

üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {auto_renewal['next_renewal_date'].strftime('%d.%m.%Y')}
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {'–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞' if auto_renewal['payment_method'] == 'card' else '–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂'}

–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
                
                keyboard = [[
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                       callback_data="disable_auto_renewal")
                ]]
            else:
                text = """‚ùå <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>

–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."""
                
                keyboard = [[
                    InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                       callback_data="enable_auto_renewal")
                ]]
        
        keyboard.append([
            InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
        ])
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error checking auto-renewal status: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."
        )

@safe_handler()
async def handle_enable_auto_renewal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = await subscription_manager.check_active_subscription(user_id)
        
        if not subscription:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                                       callback_data="subscribe_start")
                ]])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        payment_info = await subscription_manager.get_last_payment_info(user_id)
        
        if not payment_info or not payment_info.get('recurrent_id'):
            text = """üí≥ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>

–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É.

–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"."""
            
            keyboard = [[
                InlineKeyboardButton("üí≥ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", 
                                   callback_data="renew_subscription")
            ]]
        else:
            # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
            success = await subscription_manager.enable_auto_renewal(
                user_id,
                payment_method='recurrent',
                recurrent_token=payment_info['recurrent_id']
            )
            
            if success:
                text = f"""‚úÖ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ!</b>

üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {subscription['expires_at'].strftime('%d.%m.%Y')}
üí∞ –°—É–º–º–∞: {subscription.get('amount', 0)} ‚ÇΩ

–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è."""
                
                keyboard = [[
                    InlineKeyboardButton("‚úÖ –û—Ç–ª–∏—á–Ω–æ!", callback_data="close_message")
                ]]
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                keyboard = []
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None
        )
        
    except Exception as e:
        logger.error(f"Error enabling auto-renewal: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@safe_handler()
async def handle_disable_auto_renewal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager')
    
    if query.data == "disable_auto_renewal":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = """‚ö†Ô∏è <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?

–ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:
- –ü–æ–¥–ø–∏—Å–∫–∞ –ù–ï –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
- –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"""
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", 
                                   callback_data="confirm_disable_auto_renewal"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", 
                                   callback_data="cancel_disable_auto_renewal")
            ]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    elif query.data == "cancel_disable_auto_renewal":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
            auto_renewal = await subscription_manager.get_auto_renewal_status(user_id)
            
            if auto_renewal and auto_renewal.get('enabled'):
                text = f"""üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º</b>

‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ

üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {auto_renewal['next_renewal_date'].strftime('%d.%m.%Y')}
üí∞ –°—É–º–º–∞: {auto_renewal.get('amount', 0)} ‚ÇΩ

–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü."""
                
                keyboard = [
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                        callback_data="disable_auto_renewal")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
                                        callback_data="my_subscriptions")]
                ]
            else:
                text = """üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º</b>

–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ."""
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                        callback_data="enable_auto_renewal")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
                                        callback_data="my_subscriptions")]
                ]
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error handling cancel: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º
            await query.edit_message_text(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∞–º–∏...",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
                                       callback_data="my_subscriptions")
                ]])
            )
        
    elif query.data == "confirm_disable_auto_renewal":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - –æ—Ç–∫–ª—é—á–∞–µ–º
        try:
            if not subscription_manager:
                await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
                
            success = await subscription_manager.disable_auto_renewal(user_id)
            
            if success:
                text = """‚úÖ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.

–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.

–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."""
                
                keyboard = [[
                    InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
                                       callback_data="my_subscriptions")
                ]]
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                keyboard = [[
                    InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", 
                                       callback_data="disable_auto_renewal"),
                    InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
                                       callback_data="my_subscriptions")
                ]]
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error disabling auto-renewal: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
                                       callback_data="my_subscriptions")
                ]])
            )

@safe_handler()
async def handle_renew_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
        last_subscription = await subscription_manager.get_last_subscription_info(user_id)
        
        if last_subscription:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å —Å —Ç–µ–º –∂–µ –ø–ª–∞–Ω–æ–º
            text = f"""üí≥ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É "{last_subscription['plan_name']}"?

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {last_subscription['amount']} ‚ÇΩ/–º–µ—Å"""
            
            keyboard = [
                [InlineKeyboardButton(f"‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å –∑–∞ {last_subscription['amount']} ‚ÇΩ", 
                                     callback_data=f"pay_plan_{last_subscription['plan_id']}")],
                [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω", 
                                     callback_data="subscribe_start")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", 
                                     callback_data="close_message")]
            ]
        else:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä –ø–ª–∞–Ω–∞
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:"
            keyboard = [[
                InlineKeyboardButton("üí≥ –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω", 
                                   callback_data="subscribe_start")
            ]]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error handling subscription renewal: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@safe_handler()
async def manage_auto_renewal_from_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∏–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager')
    
    if not subscription_manager:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    try:
        auto_renewal = await subscription_manager.get_auto_renewal_status(user_id)
        
        if not auto_renewal or not auto_renewal.get('enabled'):
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∫–ª—é—á–∏—Ç—å
            text = """üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º</b>

–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.

–í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –æ–Ω–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü."""
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                    callback_data="enable_auto_renewal")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_subscriptions")]
            ]
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–ø—Ü–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            text = f"""üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º</b>

‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ

üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {auto_renewal['next_renewal_date'].strftime('%d.%m.%Y')}
üí∞ –°—É–º–º–∞: {auto_renewal.get('amount', 0)} ‚ÇΩ

–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü."""
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                    callback_data="disable_auto_renewal")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_subscriptions")]
            ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error managing auto-renewal: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def register_auto_renewal_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("auto_renewal", cmd_auto_renewal_status))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(
        handle_enable_auto_renewal, 
        pattern="^enable_auto_renewal$"
    ))
    app.add_handler(CallbackQueryHandler(
        handle_disable_auto_renewal, 
        pattern="^(disable_auto_renewal|confirm_disable_auto_renewal|cancel_disable_auto_renewal)$"
    ))
    app.add_handler(CallbackQueryHandler(
        handle_renew_subscription, 
        pattern="^renew_subscription$"
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∏–∑ my_subscriptions
    app.add_handler(CallbackQueryHandler(
        manage_auto_renewal_from_subscriptions,
        pattern="^manage_auto_renewal$"
    ))
    
    logger.info("Auto-renewal handlers registered")
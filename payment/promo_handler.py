# payment/promo_handler.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è."""

import logging
from typing import Dict, Any, Optional, Tuple, List
import aiosqlite
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest

from core.db import DATABASE_FILE
from core.error_handler import safe_handler

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
PROMO_INPUT = "promo_input"


class PromoCodeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, database_file: str = DATABASE_FILE):
        self.database_file = database_file
    
    async def check_promo_code(self, code: str, user_id: int = None) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        
        Args:
            code: –ö–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        """
        try:
            async with aiosqlite.connect(self.database_file) as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
                cursor = await conn.execute(
                    """
                    SELECT id, code, discount_percent, discount_amount, 
                           usage_limit, used_count, is_active
                    FROM promo_codes
                    WHERE code = ? AND is_active = 1
                    """,
                    (code.upper(),)
                )
                row = await cursor.fetchone()
                
                if not row:
                    return None
                
                promo_id, code, discount_percent, discount_amount, usage_limit, used_count, is_active = row
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                if usage_limit is not None and used_count >= usage_limit:
                    logger.info(f"Promo code {code} exceeded usage limit")
                    return None
                
                # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –≠–¢–û–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
                if user_id:
                    cursor = await conn.execute(
                        """
                        SELECT COUNT(*) FROM promo_usage_log
                        WHERE promo_code = ? AND user_id = ?
                        """,
                        (code.upper(), user_id)
                    )
                    used_by_user = await cursor.fetchone()
                    
                    if used_by_user and used_by_user[0] > 0:
                        logger.info(f"Promo code {code} already used by user {user_id}")
                        return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
                
                return {
                    'id': promo_id,
                    'code': code,
                    'discount_percent': discount_percent or 0,
                    'discount_amount': discount_amount or 0,
                    'usage_limit': usage_limit,
                    'used_count': used_count,
                    'is_active': is_active
                }
                
        except Exception as e:
            logger.error(f"Error checking promo code: {e}")
            return None
    
    async def get_user_promo_history(self, user_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        """
        try:
            async with aiosqlite.connect(self.database_file) as conn:
                cursor = await conn.execute(
                    """
                    SELECT promo_code, discount_applied, original_price, 
                           final_price, order_id, used_at
                    FROM promo_usage_log
                    WHERE user_id = ?
                    ORDER BY used_at DESC
                    """,
                    (user_id,)
                )
                
                history = []
                rows = await cursor.fetchall()
                for row in rows:
                    history.append({
                        'promo_code': row[0],
                        'discount_applied': row[1],
                        'original_price': row[2],
                        'final_price': row[3],
                        'order_id': row[4],
                        'used_at': row[5]
                    })
                
                return history
                
        except Exception as e:
            logger.error(f"Error getting promo history: {e}")
            return []
    
    async def is_promo_available_for_user(self, code: str, user_id: int) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Returns:
            (–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        """
        try:
            async with aiosqlite.connect(self.database_file) as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
                cursor = await conn.execute(
                    """
                    SELECT usage_limit, used_count, is_active
                    FROM promo_codes
                    WHERE code = ?
                    """,
                    (code.upper(),)
                )
                promo = await cursor.fetchone()
                
                if not promo:
                    return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                
                usage_limit, used_count, is_active = promo
                
                if not is_active:
                    return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                
                if usage_limit and used_count >= usage_limit:
                    return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç)"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                cursor = await conn.execute(
                    """
                    SELECT COUNT(*) FROM promo_usage_log
                    WHERE promo_code = ? AND user_id = ?
                    """,
                    (code.upper(), user_id)
                )
                used = await cursor.fetchone()
                
                if used and used[0] > 0:
                    return False, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"
                
                return True, "OK"
                
        except Exception as e:
            logger.error(f"Error checking promo availability: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@safe_handler()
async def handle_promo_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    promo_code = update.message.text.strip().upper()
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_available, error_message = await promo_manager.is_promo_available_for_user(promo_code, user_id)
    
    if not is_available:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if "—É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏" in error_message:
            text = f"""‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>

–í—ã —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> —Ä–∞–Ω–µ–µ.
–ö–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑ —Å–∫–∏–¥–∫–∏."""
        else:
            text = f"""‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</b>

{error_message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑ —Å–∫–∏–¥–∫–∏."""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="retry_promo")],
            [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data="skip_promo")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
        ]
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return PROMO_INPUT
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á—Ç–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω)
    promo_data = await promo_manager.check_promo_code(promo_code, user_id)
    
    # –ü—Ä–æ–º–æ–∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    base_price = context.user_data.get('total_price', 0)
    final_price, discount_amount = promo_manager.calculate_discount(base_price, promo_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['promo_code'] = promo_code
    context.user_data['promo_discount'] = discount_amount
    context.user_data['original_price'] = base_price
    context.user_data['total_price'] = final_price  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
    context.user_data['promo_data'] = promo_data
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–∏–¥–∫–µ
    if promo_data['discount_percent'] > 0:
        discount_text = f"{promo_data['discount_percent']}%"
    else:
        discount_text = f"{promo_data['discount_amount']} ‚ÇΩ"
    
    plan_name = context.user_data.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')
    duration = context.user_data.get('duration_months', 1)
    
    text = f"""‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>

üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>
üí∏ –°–∫–∏–¥–∫–∞: <b>{discount_text}</b>

üì¶ –ü–ª–∞–Ω: <b>{plan_name}</b>
‚è± –°—Ä–æ–∫: <b>{duration} –º–µ—Å.</b>

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <s>{base_price} ‚ÇΩ</s>
üéØ –°–æ —Å–∫–∏–¥–∫–æ–π: <b>{final_price} ‚ÇΩ</b>
üìâ –í–∞—à–∞ –≤—ã–≥–æ–¥–∞: <b>{discount_amount} ‚ÇΩ</b>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ]
    
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫)
    await promo_manager.apply_promo_code(promo_code, user_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É email
    from .handlers import ENTERING_EMAIL
    return ENTERING_EMAIL


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
promo_manager = PromoCodeManager()


@safe_handler()
async def show_promo_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    query = update.callback_query
    if query:
        await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –ø–ª–∞–Ω
    total_price = context.user_data.get('total_price', 0)
    plan_name = context.user_data.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')
    duration = context.user_data.get('duration_months', 1)
    
    text = f"""üéÅ <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>

üì¶ –ü–ª–∞–Ω: <b>{plan_name}</b>
‚è± –°—Ä–æ–∫: <b>{duration} –º–µ—Å.</b>
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price} ‚ÇΩ</b>

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞":"""
    
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data="skip_promo")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_duration_selection")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ]
    
    try:
        if query:
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            message = update.message or update.callback_query.message
            await message.reply_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.debug("Message already showing promo input")
            if query:
                await query.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç", show_alert=False)
    
    return PROMO_INPUT


@safe_handler()
async def handle_promo_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    promo_code = update.message.text.strip().upper()
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_data = await promo_manager.check_promo_code(promo_code, user_id)
    
    if not promo_data:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="retry_promo")],
            [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data="skip_promo")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
        ]
        
        await update.message.reply_text(
            f"‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</b>\n\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑ —Å–∫–∏–¥–∫–∏.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return PROMO_INPUT
    
    # –ü—Ä–æ–º–æ–∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    base_price = context.user_data.get('total_price', 0)
    final_price, discount_amount = promo_manager.calculate_discount(base_price, promo_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['promo_code'] = promo_code
    context.user_data['promo_discount'] = discount_amount
    context.user_data['original_price'] = base_price
    context.user_data['total_price'] = final_price  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
    context.user_data['promo_data'] = promo_data
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–∏–¥–∫–µ
    if promo_data['discount_percent'] > 0:
        discount_text = f"{promo_data['discount_percent']}%"
    else:
        discount_text = f"{promo_data['discount_amount']} ‚ÇΩ"
    
    plan_name = context.user_data.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')
    duration = context.user_data.get('duration_months', 1)
    
    text = f"""‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>

üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>
üí∏ –°–∫–∏–¥–∫–∞: <b>{discount_text}</b>

üì¶ –ü–ª–∞–Ω: <b>{plan_name}</b>
‚è± –°—Ä–æ–∫: <b>{duration} –º–µ—Å.</b>

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <s>{base_price} ‚ÇΩ</s>
üéØ –°–æ —Å–∫–∏–¥–∫–æ–π: <b>{final_price} ‚ÇΩ</b>
üìâ –í–∞—à–∞ –≤—ã–≥–æ–¥–∞: <b>{discount_amount} ‚ÇΩ</b>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ]
    
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫)
    await promo_manager.apply_promo_code(promo_code, user_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É email
    from .handlers import ENTERING_EMAIL
    return ENTERING_EMAIL


@safe_handler()
async def skip_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ email."""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –µ—Å–ª–∏ –±—ã–ª–∏
    context.user_data.pop('promo_code', None)
    context.user_data.pop('promo_discount', None)
    context.user_data.pop('promo_data', None)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É email
    from .handlers import request_email
    return await request_email(update, context)


@safe_handler()
async def retry_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å–Ω–æ–≤–∞
    return await show_promo_input(update, context)


async def init_promo_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    async with aiosqlite.connect(DATABASE_FILE) as conn:
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS promo_codes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT UNIQUE NOT NULL,
                discount_percent INTEGER DEFAULT 0,
                discount_amount INTEGER DEFAULT 0,
                usage_limit INTEGER,
                used_count INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS promo_usage_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                promo_code TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                order_id TEXT,
                discount_applied INTEGER,
                used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (promo_code) REFERENCES promo_codes(code)
            )
        """)
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_promo_code 
            ON promo_codes(code, is_active)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_promo_usage_user 
            ON promo_usage_log(user_id, used_at)
        """)
        
        await conn.commit()
        logger.info("Promo code tables initialized")
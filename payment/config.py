# payment/config.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
"""–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ–ø–ª–∞—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
import os
import logging
from decimal import Decimal
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, List
from dotenv import load_dotenv
load_dotenv()
# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff
TINKOFF_TERMINAL_KEY = os.getenv('TINKOFF_TERMINAL_KEY')
TINKOFF_SECRET_KEY = os.getenv('TINKOFF_SECRET_KEY')
TINKOFF_API_URL = 'https://securepay.tinkoff.ru/v2/'

# Webhook settings
WEBHOOK_BASE_URL = os.getenv('WEBHOOK_BASE_URL', 'https://your-domain.com')
WEBHOOK_PATH = '/payment/webhook'
WEBHOOK_HOST = '0.0.0.0'
WEBHOOK_PORT = 8080
# Admin notifications
PAYMENT_ADMIN_CHAT_ID = int(os.getenv('PAYMENT_ADMIN_CHAT_ID', '0'))
DATABASE_PATH = 'quiz_async.db'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –ë–î
WEBHOOK_URL = 'https://xn--80aaabfr9bnfdntn4cn1bzd.xn--p1ai/payment-notification'
FREE_MODULES = ['test_part']
# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_MODE = os.getenv('SUBSCRIPTION_MODE', 'modular')  # 'unified' –∏–ª–∏ 'modular'

logger = logging.getLogger(__name__)
logger.info(f"Payment module loaded with SUBSCRIPTION_MODE = {SUBSCRIPTION_MODE}")
# ========= –°–¢–ê–†–´–ï –ü–õ–ê–ù–´ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) =========
LEGACY_SUBSCRIPTION_PLANS = {
    'basic_month': {
        'name': 'ü•â –ë–∞–∑–æ–≤–∞—è (1 –º–µ—Å—è—Ü)',
        'description': '–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π',
        'price_rub': 299,
        'duration_days': 30,
        'modules': ['test_part'],  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏
        'features': [
            '‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            '‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            '‚úÖ –î–æ 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å',
            '‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ]
    },
    'pro_month': {
        'name': 'ü•á Pro (1 –º–µ—Å—è—Ü)',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π',
        'price_rub': 599,
        'duration_days': 30,
        'modules': ['test_part', 'task19', 'task20', 'task25'],  # –ë–µ–∑ –ø—Ä–µ–º–∏—É–º task24
        'features': [
            '‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            '‚úÖ –ó–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏',
            '‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
            '‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ]
    },
    'pro_ege': {
        'name': 'üéì Pro –¥–æ –ï–ì–≠',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ 03.06.2025',
        'price_rub': 1999,
        'duration_until': datetime(2025, 6, 3, tzinfo=timezone.utc),
        'modules': ['test_part', 'task19', 'task20', 'task25', 'task24'],  # –í—Å–µ –º–æ–¥—É–ª–∏
        'features': [
            '‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro',
            '‚úÖ –ü—Ä–µ–º–∏—É–º –∑–∞–¥–∞–Ω–∏–µ 24',
            '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –ï–ì–≠ 2025',
            '‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
        ]
    }
}

# ========= –ù–û–í–ê–Ø –ú–û–î–£–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê =========
MODULE_PLANS = {
    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    'module_test_part': {
        'name': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
        'description': '–ó–∞–¥–∞–Ω–∏—è 1-16 —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞',
        'detailed_description': [
            '‚Ä¢ –ó–∞–¥–∞–Ω–∏—è 1-16 –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –ï–ì–≠',
            '‚Ä¢ –í—Å–µ —Ç–µ–º—ã –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è',
            '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤',
            '‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫'
        ],
        'price_rub': 0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å
        'is_free': True,  # –§–ª–∞–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        'modules': ['test_part'],
        'type': 'individual'
    },
    
    'module_task19': {
        'name': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',  
        'description': '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∏–º–µ—Ä–∞–º–∏',
        'detailed_description': [
            '‚Ä¢ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —è–≤–ª–µ–Ω–∏–π',
            '‚Ä¢ –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π —Ñ–∞–∫—Ç–∞–º–∏',
            '‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é',
            '‚Ä¢ –ë–∞–∑–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º'
        ],
        'price_rub': 199,
        'duration_days': 30,
        'modules': ['task19'],
        'type': 'individual'
    },
    
    'module_task20': {
        'name': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
        'description': '–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å—É–∂–¥–µ–Ω–∏–π',
        'detailed_description': [
            '‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞',
            '‚Ä¢ –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π',
            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–æ–π —Ç–µ–∫—Å—Ç–∞',
            '‚Ä¢ –ë–∞–Ω–∫ —Ç–∏–ø–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –∏ –∫–ª–∏—à–µ'
        ],
        'price_rub': 199,
        'duration_days': 30,
        'modules': ['task20'],
        'type': 'individual'
    },
    
    'module_task25': {
        'name': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25',
        'description': '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞–º–∏',
        'detailed_description': [
            '‚Ä¢ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è',
            '‚Ä¢ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä—ë—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä',
            '‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π —Ñ–∞–∫—Ç–∞–º–∏',
            '‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤'
        ],
        'price_rub': 199,
        'duration_days': 30,
        'modules': ['task25'],
        'type': 'individual'
    },
    
    'module_task24': {
        'name': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
        'description': '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞',
        'detailed_description': [
            '‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞',
            '‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 –ø—É–Ω–∫—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ –ø–æ–¥–ø—É–Ω–∫—Ç–∞—Ö',
            '‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø–æ–ª–Ω–æ—Ç—ã',
            '‚Ä¢ –ë–∞–∑–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º –∫—É—Ä—Å–∞'
        ],
        'price_rub': 399,
        'duration_days': 30,
        'modules': ['task24'],
        'type': 'individual'
    },
    
    # –ü–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    'package_second_part': {
        'name': 'üéØ –ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª',
        'description': '–ó–∞–¥–∞–Ω–∏—è 19, 20, 25 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ò–ò',
        'price_rub': 499,
        'duration_days': 30,
        'modules': ['task19', 'task20', 'task25'],
        'type': 'package',
        'features': [
            '‚úÖ –ó–∞–¥–∞–Ω–∏–µ 19 - –ü—Ä–∏–º–µ—Ä—ã',  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            '‚úÖ –ó–∞–¥–∞–Ω–∏–µ 20 - –°—É–∂–¥–µ–Ω–∏—è',  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            '‚úÖ –ó–∞–¥–∞–Ω–∏–µ 25 - –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç',  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            '‚úÖ –≠–∫–æ–Ω–æ–º–∏—è 98‚ÇΩ/–º–µ—Å'
        ]
    },
    'package_full': {
        'name': 'üëë –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø',
        'description': '–í—Å–µ –º–æ–¥—É–ª–∏ + –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏',
        'price_rub': 999,
        'duration_days': 30,
        'modules': ['test_part', 'task19', 'task20', 'task24', 'task25'],
        'type': 'package',
        'features': [
            '‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            '‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏',
            '‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            '‚úÖ –≠–∫–æ–Ω–æ–º–∏—è 346‚ÇΩ/–º–µ—Å'
        ]
    },
    
    # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    'trial_7days': {
        'name': 'üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π',
        'price_rub': 1,
        'duration_days': 7,
        'modules': ['test_part', 'task19', 'task20', 'task24', 'task25'],
        'type': 'trial'
    }
}

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
DURATION_DISCOUNTS = {
    1: {'multiplier': 1.0, 'label': '1 –º–µ—Å—è—Ü'},
    3: {'multiplier': 2.7, 'label': '3 –º–µ—Å—è—Ü–∞'},
    6: {'multiplier': 5.0, 'label': '6 –º–µ—Å—è—Ü–µ–≤'},
    12: {'multiplier': 9.0, 'label': '12 –º–µ—Å—è—Ü–µ–≤'}
}

# –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–æ–≤
if SUBSCRIPTION_MODE == 'modular':
    SUBSCRIPTION_PLANS = MODULE_PLANS
    logger.info(f"Using MODULE_PLANS with {len(MODULE_PLANS)} plans")
else:
    SUBSCRIPTION_PLANS = LEGACY_SUBSCRIPTION_PLANS
    logger.info(f"Using LEGACY_SUBSCRIPTION_PLANS with {len(LEGACY_SUBSCRIPTION_PLANS)} plans")

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–µ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
logger.info(f"Available plans: {list(SUBSCRIPTION_PLANS.keys())}")

def get_plan_price_kopecks(plan_id: str, months: int = 1, custom_plan_data: dict = None) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –ø–ª–∞–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    
    Args:
        plan_id: ID –ø–ª–∞–Ω–∞
        months: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
        custom_plan_data: –î–∞–Ω–Ω—ã–µ custom –ø–ª–∞–Ω–∞ (–µ—Å–ª–∏ –ø–ª–∞–Ω custom)
    
    Returns:
        –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    """
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ custom –ø–ª–∞–Ω–æ–≤
    if plan_id.startswith('custom_') and custom_plan_data:
        base_price = custom_plan_data.get('price_rub', 0)
    else:
        plan = SUBSCRIPTION_PLANS.get(plan_id)
        if not plan:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ MODULE_PLANS –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            if SUBSCRIPTION_MODE == 'modular':
                plan = MODULE_PLANS.get(plan_id)
            
            if not plan:
                raise ValueError(f"Unknown plan: {plan_id}")
        
        base_price = plan['price_rub']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if months in DURATION_DISCOUNTS:
        multiplier = DURATION_DISCOUNTS[months]['multiplier']
        total_price = int(base_price * multiplier)
    else:
        total_price = base_price * months
    
    return total_price * 100

def get_subscription_end_date(plan_id: str, months: int = 1) -> datetime:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∞."""
    plan = SUBSCRIPTION_PLANS.get(plan_id)
    if not plan:
        raise ValueError(f"Unknown plan: {plan_id}")
    
    if 'duration_until' in plan:
        return plan['duration_until']
    else:
        days = plan['duration_days'] * months
        return datetime.now(timezone.utc) + timedelta(days=days)

def calculate_subscription_price(plan_id: str, months: int = 1, custom_plan_data: dict = None) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É—á–µ—Ç–æ–º —Å—Ä–æ–∫–∞ –∏ —Å–∫–∏–¥–æ–∫."""
    if plan_id.startswith('custom_') and custom_plan_data:
        base_price = custom_plan_data.get('price_rub', 0)
    else:
        plan = SUBSCRIPTION_PLANS.get(plan_id) or MODULE_PLANS.get(plan_id)
        if not plan:
            raise ValueError(f"Unknown plan: {plan_id}")
        base_price = plan['price_rub']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    if months in DURATION_DISCOUNTS:
        multiplier = DURATION_DISCOUNTS[months]['multiplier']
        total_price = int(base_price * multiplier)
    else:
        total_price = base_price * months
    
    return total_price * 100  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–ø–µ–π–∫–∞—Ö

def get_plan_modules(plan_id: str) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∞."""
    plan = SUBSCRIPTION_PLANS.get(plan_id)
    if not plan:
        return []
    return plan.get('modules', [])
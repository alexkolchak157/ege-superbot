# payment/config.py
"""–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ–ø–ª–∞—Ç—ã."""
import os
from decimal import Decimal
from datetime import datetime, timedelta, timezone
from typing import Dict, Any

# Tinkoff API settings
TINKOFF_TERMINAL_KEY = os.getenv('TINKOFF_TERMINAL_KEY')
TINKOFF_SECRET_KEY = os.getenv('TINKOFF_SECRET_KEY')
TINKOFF_API_URL = 'https://securepay.tinkoff.ru/v2/'

# Webhook settings
WEBHOOK_BASE_URL = os.getenv('WEBHOOK_BASE_URL', 'https://your-domain.com')
WEBHOOK_PATH = '/payment/webhook'

# Admin notifications
PAYMENT_ADMIN_CHAT_ID = int(os.getenv('PAYMENT_ADMIN_CHAT_ID', '0'))

# Subscription plans
SUBSCRIPTION_PLANS = {
    'basic_month': {
        'name': 'ü•â –ë–∞–∑–æ–≤–∞—è (1 –º–µ—Å—è—Ü)',
        'description': '–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π',
        'price_rub': 299,
        'duration_days': 30,
        'features': [
            '‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            '‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            '‚úÖ –î–æ 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å',
            '‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ]
    },
    'pro_month': {
        'name': 'ü•á Pro (1 –º–µ—Å—è—Ü)',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π',
        'price_rub': 599,
        'duration_days': 30,
        'features': [
            '‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            '‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            '‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
            '‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
        ]
    },
    'pro_ege': {
        'name': 'üéì Pro –¥–æ –ï–ì–≠',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ 03.06.2025',
        'price_rub': 1999,
        'duration_until': datetime(2025, 6, 3, tzinfo=timezone.utc),
        'features': [
            '‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro',
            '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –ï–ì–≠ 2025',
            '‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            '‚úÖ –ì—Ä—É–ø–ø–æ–≤—ã–µ —Ä–∞–∑–±–æ—Ä—ã'
        ]
    }
}

def get_plan_price_kopecks(plan_id: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –ø–ª–∞–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö."""
    plan = SUBSCRIPTION_PLANS.get(plan_id)
    if not plan:
        raise ValueError(f"Unknown plan: {plan_id}")
    return plan['price_rub'] * 100

def get_subscription_end_date(plan_id: str) -> datetime:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∞."""
    plan = SUBSCRIPTION_PLANS.get(plan_id)
    if not plan:
        raise ValueError(f"Unknown plan: {plan_id}")
    
    if 'duration_until' in plan:
        return plan['duration_until']
    else:
        return datetime.now(timezone.utc) + timedelta(days=plan['duration_days'])
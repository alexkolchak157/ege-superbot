# payment/config.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
"""–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ–ø–ª–∞—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
import os
from decimal import Decimal
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, List

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff
TINKOFF_TERMINAL_KEY = os.getenv('TINKOFF_TERMINAL_KEY')
TINKOFF_SECRET_KEY = os.getenv('TINKOFF_SECRET_KEY')
TINKOFF_API_URL = 'https://securepay.tinkoff.ru/v2/'

# Webhook settings
WEBHOOK_BASE_URL = os.getenv('WEBHOOK_BASE_URL', 'https://your-domain.com')
WEBHOOK_PATH = '/payment/webhook'

# Admin notifications
PAYMENT_ADMIN_CHAT_ID = int(os.getenv('PAYMENT_ADMIN_CHAT_ID', '0'))

# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_MODE = os.getenv('SUBSCRIPTION_MODE', 'modular')  # 'unified' –∏–ª–∏ 'modular'

# ========= –°–¢–ê–†–´–ï –ü–õ–ê–ù–´ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) =========
LEGACY_SUBSCRIPTION_PLANS = {
    'basic_month': {
        'name': 'ü•â –ë–∞–∑–æ–≤–∞—è (1 –º–µ—Å—è—Ü)',
        'description': '–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π',
        'price_rub': 299,
        'duration_days': 30,
        'modules': ['test_part'],  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏
        'features': [
            '‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            '‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            '‚úÖ –î–æ 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å',
            '‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ]
    },
    'pro_month': {
        'name': 'ü•á Pro (1 –º–µ—Å—è—Ü)',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π',
        'price_rub': 599,
        'duration_days': 30,
        'modules': ['test_part', 'task19', 'task20', 'task25'],  # –ë–µ–∑ –ø—Ä–µ–º–∏—É–º task24
        'features': [
            '‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è',
            '‚úÖ –ó–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏',
            '‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
            '‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ]
    },
    'pro_ege': {
        'name': 'üéì Pro –¥–æ –ï–ì–≠',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ 03.06.2025',
        'price_rub': 1999,
        'duration_until': datetime(2025, 6, 3, tzinfo=timezone.utc),
        'modules': ['test_part', 'task19', 'task20', 'task25', 'task24'],  # –í—Å–µ –º–æ–¥—É–ª–∏
        'features': [
            '‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro',
            '‚úÖ –ü—Ä–µ–º–∏—É–º –∑–∞–¥–∞–Ω–∏–µ 24',
            '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –ï–ì–≠ 2025',
            '‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
        ]
    }
}

# ========= –ù–û–í–ê–Ø –ú–û–î–£–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê =========
MODULE_PLANS = {
    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
    'module_test_part': {
        'name': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
        'description': '–ó–∞–¥–∞–Ω–∏—è 1-16 —Å —Ä–∞–∑–±–æ—Ä–æ–º',
        'price_rub': 149,
        'duration_days': 30,
        'modules': ['test_part'],
        'type': 'individual'
    },
    'module_task19': {
        'name': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
        'description': '–ê–Ω–∞–ª–∏–∑ —Å—É–∂–¥–µ–Ω–∏–π —Å –ò–ò',
        'price_rub': 199,
        'duration_days': 30,
        'modules': ['task19'],
        'type': 'individual'
    },
    'module_task20': {
        'name': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
        'description': '–¢–µ–∫—Å—Ç —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏',
        'price_rub': 199,
        'duration_days': 30,
        'modules': ['task20'],
        'type': 'individual'
    },
    'module_task25': {
        'name': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25',
        'description': '–≠—Å—Å–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ò–ò',
        'price_rub': 199,
        'duration_days': 30,
        'modules': ['task25'],
        'type': 'individual'
    },
    'module_task24': {
        'name': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24 (–ü—Ä–µ–º–∏—É–º)',
        'description': '–ü–ª–∞–Ω—ã —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π',
        'price_rub': 399,
        'duration_days': 30,
        'modules': ['task24'],
        'type': 'individual'
    },
    
    # –ü–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    'package_second_part': {
        'name': 'üéØ –ü–∞–∫–µ—Ç "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å"',
        'description': '–ó–∞–¥–∞–Ω–∏—è 19, 20, 25',
        'price_rub': 499,
        'duration_days': 30,
        'modules': ['task19', 'task20', 'task25'],
        'type': 'package',
        'savings': 98
    },
    'package_full': {
        'name': 'üëë –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø',
        'description': '–í—Å–µ –º–æ–¥—É–ª–∏ + VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        'price_rub': 999,
        'duration_days': 30,
        'modules': ['test_part', 'task19', 'task20', 'task25', 'task24'],
        'type': 'package',
        'savings': 346
    },
    
    # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    'trial_7days': {
        'name': 'üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
        'description': '7 –¥–Ω–µ–π –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞',
        'price_rub': 1,
        'duration_days': 7,
        'modules': ['test_part', 'task19', 'task20', 'task25', 'task24'],
        'type': 'trial',
        'one_time_only': True
    }
}

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
DURATION_DISCOUNTS = {
    1: {'multiplier': 1.0, 'label': '1 –º–µ—Å—è—Ü'},
    3: {'multiplier': 2.7, 'label': '3 –º–µ—Å—è—Ü–∞ (-10%)'},  # 10% —Å–∫–∏–¥–∫–∞
    6: {'multiplier': 4.8, 'label': '6 –º–µ—Å—è—Ü–µ–≤ (-20%)'}  # 20% —Å–∫–∏–¥–∫–∞
}

# –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–æ–≤
if SUBSCRIPTION_MODE == 'modular':
    SUBSCRIPTION_PLANS = MODULE_PLANS
else:
    SUBSCRIPTION_PLANS = LEGACY_SUBSCRIPTION_PLANS

def get_plan_price_kopecks(plan_id: str, months: int = 1) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –ø–ª–∞–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    plan = SUBSCRIPTION_PLANS.get(plan_id)
    if not plan:
        raise ValueError(f"Unknown plan: {plan_id}")
    
    base_price = plan['price_rub']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if months in DURATION_DISCOUNTS:
        multiplier = DURATION_DISCOUNTS[months]['multiplier']
        total_price = int(base_price * multiplier)
    else:
        total_price = base_price * months
    
    return total_price * 100

def get_subscription_end_date(plan_id: str, months: int = 1) -> datetime:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∞."""
    plan = SUBSCRIPTION_PLANS.get(plan_id)
    if not plan:
        raise ValueError(f"Unknown plan: {plan_id}")
    
    if 'duration_until' in plan:
        return plan['duration_until']
    else:
        days = plan['duration_days'] * months
        return datetime.now(timezone.utc) + timedelta(days=days)

def get_plan_modules(plan_id: str) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∞."""
    plan = SUBSCRIPTION_PLANS.get(plan_id)
    if not plan:
        return []
    return plan.get('modules', [])
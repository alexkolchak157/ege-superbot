#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∞—è –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python apply_payment_migrations.py
"""

import sqlite3
import logging
import shutil
import sys
import os
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def find_databases():
    """–ò—â–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    script_dir = Path(__file__).parent
    parent_dir = script_dir.parent
    
    possible_dbs = [
        # –í —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        parent_dir / 'quiz_async.db',
        parent_dir / 'baza8.db',
        parent_dir / 'subscriptions.db',
        # –í —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (payment)
        script_dir / 'subscriptions.db',
        script_dir / 'quiz_async.db',
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
        Path('/opt/ege-bot/quiz_async.db'),
        Path('/opt/ege-bot/subscriptions.db'),
        Path('/opt/ege-bot/baza8.db'),
    ]
    
    found_dbs = []
    for db_path in possible_dbs:
        if db_path.exists():
            found_dbs.append(db_path)
            logger.info(f"‚úì –ù–∞–π–¥–µ–Ω–∞ –ë–î: {db_path}")
    
    return found_dbs


def check_payment_tables(db_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –ø–ª–∞—Ç–µ–∂–µ–π –≤ –ë–î."""
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' 
            AND (name LIKE '%payment%' 
                 OR name LIKE '%subscription%' 
                 OR name LIKE '%module%'
                 OR name = 'users')
        """)
        
        tables = [row[0] for row in cursor.fetchall()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ payments –µ—Å–ª–∏ –µ—Å—Ç—å
        payment_count = 0
        if 'payments' in tables:
            cursor.execute("SELECT COUNT(*) FROM payments")
            payment_count = cursor.fetchone()[0]
        
        conn.close()
        
        return tables, payment_count
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {db_path}: {e}")
        return [], 0


def check_column_exists(conn, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    cursor = conn.execute(f"PRAGMA table_info({table_name})")
    columns = [row[1] for row in cursor.fetchall()]
    return column_name in columns


def apply_migrations(db_path):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    logger.info(f"\n{'='*60}")
    logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫: {db_path}")
    logger.info(f"{'='*60}")
    
    conn = sqlite3.connect(str(db_path))
    cursor = conn.cursor()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = db_path.with_suffix('.db.backup_' + datetime.now().strftime('%Y%m%d_%H%M%S'))
        shutil.copy2(db_path, backup_path)
        logger.info(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        conn.execute("BEGIN TRANSACTION")
        
        # 1. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É payments
        logger.info("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã payments...")
        
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='payments'
        """)
        
        if not cursor.fetchone():
            logger.info("  ‚Üí –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã payments...")
            cursor.execute("""
                CREATE TABLE payments (
                    payment_id TEXT PRIMARY KEY,
                    order_id TEXT UNIQUE NOT NULL,
                    user_id INTEGER NOT NULL,
                    plan_id TEXT NOT NULL,
                    amount INTEGER NOT NULL,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    completed_at TIMESTAMP,
                    metadata TEXT DEFAULT '{}',
                    rebill_id TEXT,
                    is_recurrent BOOLEAN DEFAULT 0,
                    auto_renewal_enabled BOOLEAN DEFAULT 0,
                    email TEXT
                )
            """)
            logger.info("  ‚úì –¢–∞–±–ª–∏—Ü–∞ payments —Å–æ–∑–¥–∞–Ω–∞")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            columns_to_add = [
                ('metadata', "TEXT DEFAULT '{}'"),
                ('rebill_id', 'TEXT'),
                ('is_recurrent', 'BOOLEAN DEFAULT 0'),
                ('auto_renewal_enabled', 'BOOLEAN DEFAULT 0'),
                ('email', 'TEXT'),
                ('completed_at', 'TIMESTAMP')
            ]
            
            for column_name, column_def in columns_to_add:
                if not check_column_exists(conn, 'payments', column_name):
                    logger.info(f"  ‚Üí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ {column_name}...")
                    try:
                        cursor.execute(f"ALTER TABLE payments ADD COLUMN {column_name} {column_def}")
                        logger.info(f"  ‚úì –ö–æ–ª–æ–Ω–∫–∞ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    except sqlite3.OperationalError as e:
                        if "duplicate column" not in str(e):
                            logger.warning(f"  ! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {column_name}: {e}")
                else:
                    logger.info(f"  ‚úì –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_emails
        logger.info("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_emails...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_emails (
                user_id INTEGER PRIMARY KEY,
                email TEXT NOT NULL,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        logger.info("  ‚úì –¢–∞–±–ª–∏—Ü–∞ user_emails –≥–æ—Ç–æ–≤–∞")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É auto_renewal_settings
        logger.info("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã auto_renewal_settings...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS auto_renewal_settings (
                user_id INTEGER PRIMARY KEY,
                enabled BOOLEAN DEFAULT 0,
                payment_method TEXT CHECK(payment_method IN ('card', 'recurrent')),
                recurrent_token TEXT,
                card_token TEXT,
                next_renewal_date TIMESTAMP,
                failures_count INTEGER DEFAULT 0,
                last_renewal_attempt TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        logger.info("  ‚úì –¢–∞–±–ª–∏—Ü–∞ auto_renewal_settings –≥–æ—Ç–æ–≤–∞")
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É auto_renewal_consents
        logger.info("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã auto_renewal_consents...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS auto_renewal_consents (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan_id TEXT,
                amount INTEGER,
                period_days INTEGER DEFAULT 30,
                consent_text TEXT NOT NULL,
                consent_checkbox_state BOOLEAN DEFAULT 1,
                ip_address TEXT,
                user_agent TEXT,
                telegram_chat_id INTEGER,
                message_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        logger.info("  ‚úì –¢–∞–±–ª–∏—Ü–∞ auto_renewal_consents –≥–æ—Ç–æ–≤–∞")
        
        # 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É webhook_logs
        logger.info("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã webhook_logs...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS webhook_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id TEXT,
                status TEXT,
                payment_id TEXT,
                data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        logger.info("  ‚úì –¢–∞–±–ª–∏—Ü–∞ webhook_logs –≥–æ—Ç–æ–≤–∞")
        
        # 6. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É auto_renewal_history
        logger.info("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã auto_renewal_history...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS auto_renewal_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan_id TEXT NOT NULL,
                payment_id TEXT,
                order_id TEXT,
                status TEXT CHECK(status IN ('success', 'failed', 'pending')),
                amount INTEGER,
                error_message TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        logger.info("  ‚úì –¢–∞–±–ª–∏—Ü–∞ auto_renewal_history –≥–æ—Ç–æ–≤–∞")
        
        # 7. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        logger.info("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        indices = [
            ("idx_payments_order", "payments(order_id)"),
            ("idx_payments_user", "payments(user_id)"),
            ("idx_payments_status", "payments(status)"),
            ("idx_user_emails_updated", "user_emails(updated_at)"),
            ("idx_auto_renewal_consents_user", "auto_renewal_consents(user_id, created_at DESC)"),
            ("idx_webhook_logs_order", "webhook_logs(order_id, status)"),
            ("idx_auto_renewal_next_date", "auto_renewal_settings(next_renewal_date)"),
            ("idx_auto_renewal_enabled", "auto_renewal_settings(enabled)"),
            ("idx_renewal_history_user", "auto_renewal_history(user_id, created_at)")
        ]
        
        for index_name, index_def in indices:
            try:
                cursor.execute(f"CREATE INDEX IF NOT EXISTS {index_name} ON {index_def}")
                logger.info(f"  ‚úì –ò–Ω–¥–µ–∫—Å {index_name}")
            except Exception as e:
                logger.warning(f"  ! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º module_subscriptions –µ—Å–ª–∏ –µ—Å—Ç—å
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='module_subscriptions'
        """)
        
        if cursor.fetchone():
            logger.info("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã module_subscriptions...")
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if not check_column_exists(conn, 'module_subscriptions', 'payment_id'):
                try:
                    cursor.execute("ALTER TABLE module_subscriptions ADD COLUMN payment_id TEXT")
                    logger.info("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ payment_id")
                except:
                    pass
            
            if not check_column_exists(conn, 'module_subscriptions', 'is_trial'):
                try:
                    cursor.execute("ALTER TABLE module_subscriptions ADD COLUMN is_trial BOOLEAN DEFAULT 0")
                    logger.info("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ is_trial")
                except:
                    pass
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        logger.info(f"\n{'='*60}")
        logger.info("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        logger.info(f"{'='*60}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM payments")
        payment_count = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' 
            ORDER BY name
        """)
        all_tables = cursor.fetchall()
        
        logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:")
        logger.info(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(all_tables)}")
        logger.info(f"  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ payments: {payment_count}")
        logger.info(f"  ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path.name}")
        
    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        conn.rollback()
        raise
    
    finally:
        conn.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    logger.info("üîç –ü–æ–∏—Å–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
    found_dbs = find_databases()
    
    if not found_dbs:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ –ë–î –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.")
        sys.exit(1)
    
    logger.info(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ë–î: {len(found_dbs)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ë–î
    db_info = []
    for db_path in found_dbs:
        tables, payment_count = check_payment_tables(db_path)
        db_info.append({
            'path': db_path,
            'tables': tables,
            'payment_count': payment_count,
            'has_payments': 'payments' in tables,
            'has_modules': any('module' in t for t in tables),
            'size': db_path.stat().st_size
        })
    
    # –í—ã–±–∏—Ä–∞–µ–º –ë–î –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    target_db = None
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ë–î —Å —Ç–∞–±–ª–∏—Ü–µ–π payments –∏ –∑–∞–ø–∏—Å—è–º–∏
    for info in db_info:
        if info['has_payments'] and info['payment_count'] > 0:
            target_db = info['path']
            logger.info(f"\n‚úì –í—ã–±—Ä–∞–Ω–∞ –ë–î —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏: {target_db}")
            break
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ë–î —Å —Ç–∞–±–ª–∏—Ü–µ–π payments –±–µ–∑ –∑–∞–ø–∏—Å–µ–π
    if not target_db:
        for info in db_info:
            if info['has_payments']:
                target_db = info['path']
                logger.info(f"\n‚úì –í—ã–±—Ä–∞–Ω–∞ –ë–î —Å —Ç–∞–±–ª–∏—Ü–µ–π payments: {target_db}")
                break
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ë–î —Å –º–æ–¥—É–ª—è–º–∏
    if not target_db:
        for info in db_info:
            if info['has_modules']:
                target_db = info['path']
                logger.info(f"\n‚úì –í—ã–±—Ä–∞–Ω–∞ –ë–î —Å –º–æ–¥—É–ª—è–º–∏: {target_db}")
                break
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ë–î
    if not target_db:
        info = max(db_info, key=lambda x: x['size'])
        target_db = info['path']
        logger.info(f"\n‚úì –í—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ë–î: {target_db}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ë–î
    for info in db_info:
        if info['path'] == target_db:
            logger.info(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î:")
            logger.info(f"  ‚Ä¢ –ü—É—Ç—å: {info['path']}")
            logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {info['size'] / 1024:.1f} KB")
            logger.info(f"  ‚Ä¢ –¢–∞–±–ª–∏—Ü: {len(info['tables'])}")
            if info['tables']:
                logger.info(f"  ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(info['tables'][:5])}")
            logger.info(f"  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ payments: {info['payment_count']}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n{'='*60}")
    response = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ {target_db.name}? (y/n): ")
    
    if response.lower() != 'y':
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    try:
        apply_migrations(target_db)
        logger.info("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        logger.info("–ö–æ–º–∞–Ω–¥–∞: sudo systemctl restart ege-bot")
    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
        sys.exit(1)


if __name__ == "__main__":
    main()
# payment/subscription_management.py - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –æ—Ç–º–µ–Ω–∞

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from telegram.constants import ParseMode
from core.error_handler import safe_handler

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
FEEDBACK_REASON = 1
FEEDBACK_TEXT = 2

class SubscriptionManagementUI:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    
    @staticmethod
    @safe_handler()
    async def cmd_manage_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /subscription - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π."""
        user_id = update.effective_user.id
        subscription_manager = context.bot_data.get('subscription_manager')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription = await subscription_manager.get_active_subscription(user_id)
        auto_renewal = await subscription_manager.get_auto_renewal_status(user_id)
        
        if not subscription:
            text = """üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.

–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º."""
            
            keyboard = [[
                InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_start")
            ]]
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            plan_name = subscription.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')
            expires_at = subscription['expires_at'].strftime('%d.%m.%Y')
            days_left = (subscription['expires_at'] - datetime.now()).days
            
            text = f"""üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>

<b>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:</b> {plan_name}
<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏
            if auto_renewal and auto_renewal['enabled']:
                next_payment = subscription.get('amount', 0)
                text += f"""

üîÑ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> ‚úÖ –í–∫–ª—é—á–µ–Ω–æ
üí∞ <b>–°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:</b> {next_payment} ‚ÇΩ
üìÖ <b>–î–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è:</b> {expires_at}"""
            else:
                text += "\n\nüîÑ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> ‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
            keyboard = []
            
            if auto_renewal and auto_renewal['enabled']:
                keyboard.append([
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                       callback_data="cancel_auto_renewal")
                ])
            else:
                keyboard.append([
                    InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                                       callback_data="enable_auto_renewal")
                ])
            
            keyboard.extend([
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", 
                                    callback_data="payment_history")],
                [InlineKeyboardButton("üí≥ –°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", 
                                    callback_data="change_payment_method")],
                [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", 
                                    callback_data="contact_support")],
                [InlineKeyboardButton("üö™ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                                    callback_data="cancel_subscription")]
            ])
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    @staticmethod
    @safe_handler()
    async def cancel_auto_renewal(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        text = """‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ?

–ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –ù–ï –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é

–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?"""
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", 
                                   callback_data="confirm_cancel_auto_renewal"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", 
                                   callback_data="keep_auto_renewal")
            ]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    @staticmethod
    @safe_handler()
    async def confirm_cancel_auto_renewal(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        subscription_manager = context.bot_data.get('subscription_manager')
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
        success = await subscription_manager.disable_auto_renewal(user_id)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
            await subscription_manager.log_cancellation(
                user_id, 
                reason="user_request",
                details="–û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            )
            
            text = """‚úÖ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.

–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç:
‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é

–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –ø–æ—á–µ–º—É —Ä–µ—à–∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?"""
            
            keyboard = [
                [
                    InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", 
                                       callback_data="leave_cancellation_feedback"),
                    InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                                       callback_data="skip_feedback")
                ]
            ]
        else:
            text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = []
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None
        )
    
    @staticmethod
    @safe_handler()
    async def cancellation_feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ–± –æ—Ç–º–µ–Ω–µ."""
        query = update.callback_query
        await query.answer()
        
        text = """üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>

–ü–æ—á–µ–º—É –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:"""
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ", 
                                callback_data="feedback_expensive")],
            [InlineKeyboardButton("üìö –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ", 
                                callback_data="feedback_not_needed")],
            [InlineKeyboardButton("‚ùå –ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ", 
                                callback_data="feedback_quality")],
            [InlineKeyboardButton("üí≥ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π", 
                                callback_data="feedback_payment_issues")],
            [InlineKeyboardButton("üîÑ –•–æ—á—É –ø–ª–∞—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é", 
                                callback_data="feedback_manual_payment")],
            [InlineKeyboardButton("üí¨ –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", 
                                callback_data="feedback_other")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return FEEDBACK_REASON
    
    @staticmethod
    @safe_handler()
    async def handle_feedback_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã."""
        query = update.callback_query
        await query.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É
        reason = query.data.replace('feedback_', '')
        context.user_data['cancellation_reason'] = reason
        
        text = """üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).

–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"."""
        
        keyboard = [[
            InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_detailed_feedback")
        ]]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return FEEDBACK_TEXT
    
    @staticmethod
    @safe_handler()
    async def handle_feedback_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
        user_id = update.effective_user.id
        feedback_text = update.message.text
        reason = context.user_data.get('cancellation_reason', 'unknown')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É
        subscription_manager = context.bot_data.get('subscription_manager')
        await subscription_manager.save_feedback(
            user_id=user_id,
            reason=reason,
            text=feedback_text,
            feedback_type='cancellation'
        )
        
        await update.message.reply_text(
            """‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!</b>

–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.

–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ:
‚Ä¢ /subscription - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
‚Ä¢ /auto_renewal - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ""",
            parse_mode=ParseMode.HTML
        )
        
        return ConversationHandler.END
    
    @staticmethod
    @safe_handler()
    async def contact_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
        query = update.callback_query
        await query.answer()
        
        text = """üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

<b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>

üí¨ <b>Telegram:</b> @obshestvonapalcahsupport
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ü–Ω-–ü—Ç 9:00-18:00 (–ú–°–ö)

<b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>

<b>‚ùì –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ"

<b>‚ùì –ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?</b>
–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞

<b>‚ùì –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É?</b>
–í –º–µ–Ω—é /subscription –≤—ã–±–µ—Ä–∏—Ç–µ "–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"

<b>‚ùì –ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ?</b>
–ó–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", 
                                url="https://t.me/obshestvonapalcahsupport")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                                callback_data="back_to_subscription")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    @staticmethod
    @safe_handler()
    async def payment_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        subscription_manager = context.bot_data.get('subscription_manager')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        payments = await subscription_manager.get_payment_history(user_id, limit=10)
        
        if not payments:
            text = """üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π."""
        else:
            text = """üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n\n"""
            
            for payment in payments:
                date = payment['created_at'].strftime('%d.%m.%Y')
                amount = payment['amount'] / 100  # –ò–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏
                status_emoji = "‚úÖ" if payment['status'] == 'completed' else "‚ùå"
                
                text += f"{status_emoji} {date} - {amount} ‚ÇΩ - {payment.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')}\n"
        
        keyboard = [[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription")
        ]]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def get_subscription_management_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    ui = SubscriptionManagementUI()
    
    # ConversationHandler –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(ui.cancellation_feedback_start, 
                                pattern="^leave_cancellation_feedback$")
        ],
        states={
            FEEDBACK_REASON: [
                CallbackQueryHandler(ui.handle_feedback_reason, 
                                   pattern="^feedback_")
            ],
            FEEDBACK_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ui.handle_feedback_text),
                CallbackQueryHandler(lambda u, c: ConversationHandler.END, 
                                   pattern="^skip_detailed_feedback$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda u, c: ConversationHandler.END)
        ]
    )
    
    return [
        CommandHandler("subscription", ui.cmd_manage_subscription),
        CallbackQueryHandler(ui.cancel_auto_renewal, 
                           pattern="^cancel_auto_renewal$"),
        CallbackQueryHandler(ui.confirm_cancel_auto_renewal, 
                           pattern="^confirm_cancel_auto_renewal$"),
        CallbackQueryHandler(ui.contact_support, 
                           pattern="^contact_support$"),
        CallbackQueryHandler(ui.payment_history, 
                           pattern="^payment_history$"),
        feedback_conv
    ]
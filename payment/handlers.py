# payment/handlers.py - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–¥—É–ª–µ–π
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ (–º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
import logging
from datetime import datetime, timedelta, timezone
import uuid
from typing import Optional, Dict, Any, List
import json
from telegram import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    Update)
from telegram.error import BadRequest
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ContextTypes, 
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from .promo_handler import (
    PromoCodeManager, 
    show_promo_input, 
    handle_promo_input,
    skip_promo,
    retry_promo,
    PROMO_INPUT
)
from .auto_renewal_consent import (
    AutoRenewalConsent, 
    show_auto_renewal_choice,
    SHOWING_TERMS, 
    CONSENT_CHECKBOX, 
    FINAL_CONFIRMATION
)
from core.db import DATABASE_FILE
import re
import aiosqlite
from core.error_handler import safe_handler
from .config import (
    SUBSCRIPTION_PLANS,
    SUBSCRIPTION_PLANS, 
    SUBSCRIPTION_MODE,
    DURATION_DISCOUNTS,
    MODULE_PLANS,
    PAYMENT_ADMIN_CHAT_ID,
    get_plan_price_kopecks
)
from .subscription_manager import SubscriptionManager
from .tinkoff import TinkoffPayment

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_PLAN = 1
CHOOSING_MODULES = 2
CHOOSING_DURATION = 3
CONFIRMING = 4
ENTERING_EMAIL = 5
CHOOSING_AUTO_RENEWAL = 6
FINAL_CONFIRMATION = 7

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
PROMO_INPUT = "promo_input"
CHOOSING_PLAN = "choosing_plan"
CHOOSING_DURATION = "choosing_duration"  
ENTERING_EMAIL = "entering_email"
CONFIRMING = "confirming"
CHOOSING_MODULES = "choosing_modules"  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
AUTO_RENEWAL_CHOICE = "auto_renewal_choice"  # –ù–û–í–û–ï
FINAL_CONSENT = "final_consent"              # –ù–û–í–û–ï
PAYMENT_STATES = [
    CHOOSING_PLAN, CHOOSING_MODULES, CHOOSING_DURATION, 
    PROMO_INPUT,  # –ù–û–í–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ENTERING_EMAIL, FINAL_CONSENT, AUTO_RENEWAL_CHOICE, CONFIRMING
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
subscription_manager = SubscriptionManager()
tinkoff_payment = TinkoffPayment()


@safe_handler()
async def cmd_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    if update.callback_query:
        # –í—ã–∑–æ–≤ –∏–∑ callback - –∏—Å–ø–æ–ª—å–∑—É–µ–º show_modular_interface
        return await show_modular_interface(update, context)
    elif update.message:
        # –í—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if SUBSCRIPTION_MODE == 'modular':
            return await show_modular_interface(update, context)
        else:
            return await show_unified_plans(update, context)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        logger.error("cmd_subscribe called without message or callback_query")
        return ConversationHandler.END

@safe_handler()
async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
    
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î
        async with aiosqlite.connect('bot_database.db') as conn:
            cursor = await conn.execute("""
                SELECT order_id, status, plan_id, amount
                FROM payments
                WHERE user_id = ?
                ORDER BY created_at DESC
                LIMIT 1
            """, (user_id))
            
            payment = await cursor.fetchone()
            
            if not payment:
                await query.edit_message_text(
                    "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω."
                )
                return
            
            order_id, status, plan_id, amount = payment
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ Tinkoff
            from payment.tinkoff import TinkoffPayment
            tinkoff = TinkoffPayment()
            payment_status = await tinkoff.check_payment_status(order_id)
            
            if payment_status == 'CONFIRMED':
                # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
                await query.edit_message_text(
                    "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                    "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_subscriptions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
                    parse_mode=ParseMode.HTML
                )
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
                if status != 'completed':
                    await subscription_manager.activate_subscription_from_payment(order_id)
                    
            elif payment_status in ['NEW', 'FORM_SHOWED', 'DEADLINE_EXPIRED']:
                # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
                await query.edit_message_text(
                    "‚è≥ <b>–ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {payment_status}\n"
                    f"–°—É–º–º–∞: {amount}‚ÇΩ\n\n"
                    "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="check_payment")
                    ]])
                )
            elif payment_status in ['REJECTED', 'CANCELED', 'REFUNDED']:
                # –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω/–æ—Ç–º–µ–Ω–µ–Ω
                await query.edit_message_text(
                    f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {payment_status}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", callback_data="payment_back")
                    ]])
                )
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                await query.edit_message_text(
                    f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_status}\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."
                )
                
    except Exception as e:
        logger.error(f"Error checking payment status: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

def validate_email(email: str) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, error_message).
    """
    if not email:
        return False, "Email –Ω–µ —É–∫–∞–∑–∞–Ω"
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    email = email.strip().lower()
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if not re.match(email_pattern, email):
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(email) < 6:  # a@b.co –º–∏–Ω–∏–º—É–º
        return False, "Email —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
    
    if len(email) > 100:
        return False, "Email —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
    domain = email.split('@')[1]
    
    # –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—á–∞—Ç–æ–∫
    common_typos = {
        'gmail.con': 'gmail.com',
        'gmail.co': 'gmail.com',
        'gmail.ru': 'gmail.com',
        'gmai.com': 'gmail.com',
        'gmial.com': 'gmail.com',
        'gnail.com': 'gmail.com',
        'yamdex.ru': 'yandex.ru',
        'yadex.ru': 'yandex.ru',
        'yandex.com': 'yandex.ru',
        'mail.ri': 'mail.ru',
        'mail.tu': 'mail.ru',
        'maio.ru': 'mail.ru',
        'maol.ru': 'mail.ru',
        'mali.ru': 'mail.ru',
        'outlok.com': 'outlook.com',
        'outlok.ru': 'outlook.com',
        'hotmial.com': 'hotmail.com',
        'hotmai.com': 'hotmail.com'
    }
    
    if domain in common_typos:
        return False, f"–í–æ–∑–º–æ–∂–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞. –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É @{common_typos[domain]}?"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    invalid_domains = ['gmail.con', 'gmail.co', 'test.com', 'example.com']
    if domain in invalid_domains:
        return False, f"–î–æ–º–µ–Ω {domain} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–µ–∫ –≤ –¥–æ–º–µ–Ω–µ
    if '..' in domain:
        return False, "–î–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –¥–æ–º–µ–Ω–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã"
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ–º–µ–Ω–∞
    if len(domain) < 4:  # x.co –º–∏–Ω–∏–º—É–º
        return False, "–î–æ–º–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
    
    return True, ""

async def show_unified_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –µ–¥–∏–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await subscription_manager.check_active_subscription(user_id)
    
    if subscription:
        expires = subscription['expires_at'].strftime('%d.%m.%Y')
        text = f"""‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

–ü–ª–∞–Ω: {SUBSCRIPTION_PLANS[subscription['plan_id']]['name']}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if update.message:
            await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(text, parse_mode=ParseMode.HTML)
        
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
    text = "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    keyboard = []
    for plan_id, plan in SUBSCRIPTION_PLANS.items():
        text += f"<b>{plan['name']}</b>\n"
        text += f"üí∞ {plan['price_rub']} ‚ÇΩ\n"
        text += f"üìù {plan['description']}\n"
        for feature in plan.get('features', []):
            text += f"  {feature}\n"
        text += "\n"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{plan['name']} - {plan['price_rub']} ‚ÇΩ",
                callback_data=f"pay_plan_{plan_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if update.message:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        try:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception:
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    return CHOOSING_PLAN


async def show_modular_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–ø–∏—Å–æ–∫."""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        async def safe_edit_message(text, reply_markup, parse_mode=None):  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä parse_mode
            try:
                await query.edit_message_text(
                    text,
                    parse_mode=parse_mode or ParseMode.HTML,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–ª–∏ HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    reply_markup=reply_markup
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    raise
                
        edit_func = safe_edit_message
    else:
        # –í—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /subscribe
        edit_func = lambda text, reply_markup, parse_mode=ParseMode.HTML: update.message.reply_text(
            text, 
            parse_mode=parse_mode, 
            reply_markup=reply_markup
        )
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    has_trial = await subscription_manager.has_used_trial(user_id)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ get_user_modules
    modules_data = await subscription_manager.get_user_modules(user_id)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥—ã –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    active_modules = [module['module_code'] for module in modules_data] if modules_data else []
    
    text = "üíé <b>–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
    
    if modules_data:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º modules_data –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –º–æ–¥—É–ª–µ–π
        text += "‚úÖ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
        module_names = {
            'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
            'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
            'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
            'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
            'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
        }
        for module in modules_data:
            name = module_names.get(module['module_code'], module['module_code'])
            expires = module['expires_at'].strftime('%d.%m.%Y')
            text += f"‚Ä¢ {name} (–¥–æ {expires})\n"
        text += "\n"
    
    text += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n"
    
    # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if not has_trial:
        text += "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> ‚Äî 1‚ÇΩ\n"
        text += "   ‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π\n"
        text += "   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã\n\n"
    
    # –ü–∞–∫–µ—Ç "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å"
    text += "üéØ <b>–ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª</b> ‚Äî 499‚ÇΩ/–º–µ—Å\n"
    text += "   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 19 (–ü—Ä–∏–º–µ—Ä—ã)\n"
    text += "   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 20 (–°—É–∂–¥–µ–Ω–∏—è)\n"
    text += "   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 25 (–†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç)\n"
    text += "   <i>–≠–∫–æ–Ω–æ–º–∏—è 98‚ÇΩ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ–∫—É–ø–∫–æ–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏</i>\n\n"
    
    text += "üëë <b>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> ‚Äî 999‚ÇΩ/–º–µ—Å\n"
    text += "   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏\n"
    text += "   ‚Ä¢ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ (19, 20, 24, 25)\n"
    text += "   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
    text += "   <i>–≠–∫–æ–Ω–æ–º–∏—è 346‚ÇΩ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ–∫—É–ø–∫–æ–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏</i>\n\n"
    
    text += "üìö –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏\n"
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏
    if not has_trial:
        keyboard.append([
            InlineKeyboardButton(
                "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 1‚ÇΩ (7 –¥–Ω–µ–π)",
                callback_data="pay_trial"
            )
        ])
    
    keyboard.extend([
        [InlineKeyboardButton(
            "üëë –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - 999‚ÇΩ/–º–µ—Å",
            callback_data="pay_package_full"
        )],
        [InlineKeyboardButton(
            "üéØ –ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª - 499‚ÇΩ/–º–µ—Å",
            callback_data="pay_package_second"
        )],
        [InlineKeyboardButton(
            "üìö –í—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏",
            callback_data="pay_individual_modules"
        )]
    ])
    
    if active_modules:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º active_modules –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard.append([
            InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
    ])
    
    await edit_func(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º CHOOSING_PLAN —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ ConversationHandler
    if update.message:
        # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe - –º—ã –≤ ConversationHandler
        return CHOOSING_PLAN
    elif update.callback_query:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
        if update.callback_query.data in ["subscribe", "subscribe_start"]:
            # –≠—Ç–∏ callbacks —è–≤–ª—è—é—Ç—Å—è entry_points –≤ ConversationHandler
            return CHOOSING_PLAN
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö callbacks (–Ω–∞–ø—Ä–∏–º–µ—Ä, my_subscriptions) –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return


@safe_handler()
async def handle_plan_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–ª—è —Ç—Ä–∏–∞–ª–∞."""
    query = update.callback_query
    await query.answer()
    
    plan_id = query.data.replace("pay_", "")
    logger.info(f"Plan selected: {plan_id}")
    
    if plan_id == "trial":
        # –î–ª—è —Ç—Ä–∏–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–∞–∑—É
        plan_id = "trial_7days"
        context.user_data['is_trial'] = True
        context.user_data['selected_plan'] = plan_id
        context.user_data['duration_months'] = 1
        context.user_data['total_price'] = 1  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
        logger.info(f"TRIAL PRICE DEBUG: Set total_price = 1 for user {update.effective_user.id}")
        context.user_data['base_price'] = 1
        context.user_data['plan_name'] = "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π"
        
        logger.info("Trial selected: price set to 1‚ÇΩ")
        
        # –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –¥–ª—è —Ç—Ä–∏–∞–ª–∞
        return await request_email_for_trial(update, context)
        
    elif plan_id == "package_full":
        plan_id = "package_full"
        context.user_data['is_trial'] = False
    elif plan_id == "package_second":
        plan_id = "package_second"
        context.user_data['is_trial'] = False
    elif plan_id == "individual_modules":
        return await show_individual_modules(update, context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    context.user_data['selected_plan'] = plan_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
    from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS
    plan = MODULE_PLANS.get(plan_id) or SUBSCRIPTION_PLANS.get(plan_id)
    
    if not plan:
        logger.error(f"Plan {plan_id} not found in configs!")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
    context.user_data['plan_info'] = plan
    context.user_data['plan_name'] = plan['name']
    context.user_data['base_price'] = plan['price_rub']
    
    logger.info(f"Plan info loaded: {plan['name']}, base price: {plan['price_rub']}‚ÇΩ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return await show_duration_options(update, context)


# –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–∏–º request_email_for_trial:
@safe_handler()
async def request_email_for_trial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    
    # –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    context.user_data['total_price'] = 1
    logger.info(f"TRIAL PRICE DEBUG: Set total_price = 1 for user {update.effective_user.id}")
    context.user_data['duration_months'] = 1
    context.user_data['plan_name'] = "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π"
    
    text = """üéÅ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</b>

–í—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
‚úÖ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>1 ‚ÇΩ</b>

üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:"""
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]]
    
    try:
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.debug("Message already showing trial email request")
            await query.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –≤ —á–∞—Ç", show_alert=False)
        else:
            logger.error(f"Error in request_email_for_trial: {e}")
            await query.message.reply_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    return ENTERING_EMAIL

@safe_handler()
async def request_email_for_trial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    
    text = """üéÅ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</b>

–í—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
‚úÖ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>1 ‚ÇΩ</b>

üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:"""
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]]
    
    try:
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.debug("Message already showing trial email request")
            await query.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –≤ —á–∞—Ç", show_alert=False)
        else:
            logger.error(f"Error in request_email_for_trial: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    return ENTERING_EMAIL

@safe_handler()
async def cmd_debug_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    text = f"üîç <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
    text += f"SUBSCRIPTION_MODE: {SUBSCRIPTION_MODE}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await subscription_manager.check_active_subscription(user_id)
    if subscription:
        text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:</b>\n"
        text += f"–ü–ª–∞–Ω: {subscription.get('plan_id')}\n"
        text += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {subscription.get('expires_at')}\n"
        text += f"–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: {subscription.get('active_modules', [])}\n\n"
    else:
        text += "‚ùå <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏
    if SUBSCRIPTION_MODE == 'modular':
        modules = await subscription_manager.get_user_modules(user_id)
        if modules:
            text += "üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            for module in modules:
                text += f"‚Ä¢ {module['module_code']} –¥–æ {module['expires_at']}\n"
        else:
            text += "üì¶ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π</b>\n"
        
        text += "\n<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º:</b>\n"
        for module_code in ['test_part', 'task19', 'task20', 'task24', 'task25']:
            has_access = await subscription_manager.check_module_access(user_id, module_code)
            text += f"‚Ä¢ {module_code}: {'‚úÖ' if has_access else '‚ùå'}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    try:
        async with aiosqlite.connect(DATABASE_FILE) as conn:
            cursor = await conn.execute(
                """
                SELECT order_id, plan_id, status, created_at 
                FROM payments 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT 5
                """,
                (user_id)
            )
            payments = await cursor.fetchall()
            
            if payments:
                text += "\nüí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
                for payment in payments:
                    text += f"‚Ä¢ {payment[1]} - {payment[2]} ({payment[3]})\n"
    except Exception as e:
        logger.error(f"Error getting payments: {e}")
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@safe_handler()
async def show_individual_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    query = update.callback_query
    
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    if query:
        await query.answer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'selected_modules' not in context.user_data:
        context.user_data['selected_modules'] = []
    
    selected = context.user_data['selected_modules']
    
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–¥—É–ª—å —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:\n\n"
    
    keyboard = []
    total_price = 0
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ —Ç–∏–ø–∞–º
    individual_modules = {
        k: v for k, v in MODULE_PLANS.items() 
        if v.get('type') == 'individual'
    }
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not individual_modules:
        logger.error("No individual modules found in MODULE_PLANS")
        logger.error(f"MODULE_PLANS keys: {list(MODULE_PLANS.keys())}")
        error_text = "‚ùå –ú–æ–¥—É–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        error_keyboard = [[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_modules")
        ]]
        
        if query:
            try:
                await query.edit_message_text(
                    error_text,
                    reply_markup=InlineKeyboardMarkup(error_keyboard)
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    logger.error(f"Error editing message: {e}")
                    raise
        else:
            await update.message.reply_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(error_keyboard)
            )
        return CHOOSING_MODULES
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for module_id, module in individual_modules.items():
        icon = "‚úÖ" if module_id in selected else "‚¨ú"
        button_text = f"{icon} {module['name']} - {module['price_rub']}‚ÇΩ"
        
        keyboard.append([
            InlineKeyboardButton(button_text, callback_data=f"toggle_{module_id}")
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä—è–¥–æ–º
        keyboard[-1].append(
            InlineKeyboardButton("‚ÑπÔ∏è", callback_data=f"info_{module_id}")
        )
        
        if module_id in selected:
            total_price += module['price_rub']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
    if selected:
        text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total_price}‚ÇΩ/–º–µ—Å—è—Ü</b>\n"
        text += f"üìã –í—ã–±—Ä–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {len(selected)}\n"
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        keyboard.append([
            InlineKeyboardButton(
                f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ ({len(selected)})",
                callback_data="proceed_with_modules"
            )
        ])
    else:
        text += "\nüí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</i>"
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="back_to_modules")
    ])
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        try:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except BadRequest as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "Message is not modified" in str(e):
                logger.debug("Message content unchanged in show_individual_modules")
                # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å alert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await query.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è", show_alert=False)
            else:
                # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.error(f"Error editing message in show_individual_modules: {e}")
                try:
                    await query.message.reply_text(
                        text,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as send_error:
                    logger.error(f"Failed to send new message: {send_error}")
                    raise
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç query (–≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    return CHOOSING_MODULES

@safe_handler()
async def toggle_module_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è (–¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)."""
    query = update.callback_query
    await query.answer()
    
    module_id = query.data.replace("toggle_", "")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'selected_modules' not in context.user_data:
        context.user_data['selected_modules'] = []
    
    selected = context.user_data['selected_modules']
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
    if module_id in selected:
        selected.remove(module_id)
        await query.answer(f"‚ùå –ú–æ–¥—É–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=False)
    else:
        selected.append(module_id)
        module_name = MODULE_PLANS.get(module_id, {}).get('name', '–ú–æ–¥—É–ª—å')
        await query.answer(f"‚úÖ {module_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    return await show_individual_modules(update, context)

@safe_handler()
async def show_module_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ."""
    query = update.callback_query
    
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º module_id –∏–∑ callback_data
    module_id = query.data.replace("info_", "")
    
    # –ò—â–µ–º –º–æ–¥—É–ª—å –≤ MODULE_PLANS
    module = MODULE_PLANS.get(module_id)
    
    if not module:
        await query.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return CHOOSING_MODULES
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    info_lines = []
    info_lines.append(f"üìö <b>{module['name']}</b>\n")
    info_lines.append(f"<i>{module.get('description', '')}</i>\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'detailed_description' in module:
        info_lines.append("\n<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>")
        for item in module.get('detailed_description', []):
            info_lines.append(f"  ‚Ä¢ {item}")
    elif 'features' in module:
        info_lines.append("\n<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>")
        for feature in module.get('features', []):
            info_lines.append(f"  ‚Ä¢ {feature}")
    
    info_lines.append(f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {module['price_rub']}‚ÇΩ/–º–µ—Å—è—Ü")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–∞—Ö –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    if DURATION_DISCOUNTS:
        info_lines.append("\n<b>–°–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤:</b>")
        for months, discount_info in DURATION_DISCOUNTS.items():
            if months > 1:
                total = int(module['price_rub'] * discount_info['multiplier'])
                saved = (module['price_rub'] * months) - total
                info_lines.append(f"  ‚Ä¢ {discount_info['label']}: {total}‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è {saved}‚ÇΩ)")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    full_text = "\n".join(info_lines)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_modules")
    ]]
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        await query.edit_message_text(
            full_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            alert_text = (
                f"{module['name']}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {module['price_rub']}‚ÇΩ/–º–µ—Å\n"
                f"{module.get('description', '')[:100]}"
            )
            await query.answer(alert_text, show_alert=True)
        else:
            logger.error(f"Error editing message in show_module_info: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.message.reply_text(
                    full_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.HTML
                )
            except Exception as send_error:
                logger.error(f"Failed to send new message: {send_error}")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
                await query.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    show_alert=True
                )
    
    return CHOOSING_MODULES

@safe_handler()
async def back_to_module_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª–µ–π –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ."""
    query = update.callback_query
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    if query:
        await query.answer()
    
    # –í—ã–∑—ã–≤–∞–µ–º show_individual_modules –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    return await show_individual_modules(update, context)
    
# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏:

@safe_handler()
async def proceed_with_selected_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏."""
    query = update.callback_query
    await query.answer()
    
    selected = context.user_data.get('selected_modules', [])
    
    if not selected:
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å", show_alert=True)
        return CHOOSING_MODULES
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    valid_modules = []
    for module_id in selected:
        if module_id in MODULE_PLANS:
            valid_modules.append(module_id)
        else:
            logger.warning(f"Invalid module_id in selection: {module_id}")
    
    if not valid_modules:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        context.user_data['selected_modules'] = []
        return await show_individual_modules(update, context)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –º–æ–¥—É–ª–∏
    selected = valid_modules
    context.user_data['selected_modules'] = selected
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    total_price = sum(MODULE_PLANS[m]['price_rub'] for m in selected)
    module_names = [MODULE_PLANS[m]['name'] for m in selected]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ custom –ø–ª–∞–Ω
    # –£–ø—Ä–æ—â–∞–µ–º ID –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –∏–º–µ–Ω
    modules_short = [m.replace('module_', '').replace('_', '') for m in selected]
    custom_plan_id = f"custom_{'_'.join(modules_short[:3])}"  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    if len(modules_short) > 3:
        custom_plan_id += f"_{len(modules_short)}m"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –º–æ–¥—É–ª–µ–π
    
    context.user_data['selected_plan'] = custom_plan_id
    context.user_data['custom_plan'] = {
        'name': f"–ö–æ–º–ø–ª–µ–∫—Ç: {', '.join(module_names[:2])}" + (f" –∏ –µ—â–µ {len(module_names)-2}" if len(module_names) > 2 else ""),
        'price_rub': total_price,
        'modules': [m.replace('module_', '') for m in selected],
        'type': 'custom',
        'duration_days': 30
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Created custom plan: {custom_plan_id} with modules: {selected}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return await show_duration_options(update, context)

@safe_handler()
async def show_duration_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    context.user_data['in_payment_process'] = True
    
    plan_id = context.user_data['selected_plan']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω
    if plan_id.startswith('custom_'):
        plan = context.user_data.get('custom_plan')
        if not plan:
            logger.error(f"Custom plan data not found for {plan_id}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return ConversationHandler.END
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏—â–µ–º –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö
        plan = MODULE_PLANS.get(plan_id)
        if not plan:
            plan = SUBSCRIPTION_PLANS.get(plan_id)
        
        if not plan:
            logger.error(f"Plan not found in show_duration_options: {plan_id}")
            logger.error(f"Available MODULE_PLANS: {list(MODULE_PLANS.keys())}")
            logger.error(f"Available SUBSCRIPTION_PLANS: {list(SUBSCRIPTION_PLANS.keys())}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = f"<b>{plan['name']}</b>\n\n"
    text += "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    keyboard = []
    base_price = plan['price_rub']
    
    for months, discount_info in DURATION_DISCOUNTS.items():
        multiplier = discount_info['multiplier']
        label = discount_info['label']
        total_price = int(base_price * multiplier)
        
        if months > 1:
            saved = (base_price * months) - total_price
            button_text = f"{label} - {total_price}‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è {saved}‚ÇΩ)"
        else:
            button_text = f"{label} - {total_price}‚ÇΩ"
        
        keyboard.append([
            InlineKeyboardButton(button_text, callback_data=f"duration_{months}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞–Ω–∞
    if plan_id.startswith('custom_'):
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª–µ–π", callback_data="back_to_module_selection")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_plans")
        ])
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    except BadRequest as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if "Message is not modified" in str(e):
            logger.debug(f"Message already showing duration options for plan {plan_id}")
            # –ú–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=False)
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"Error editing message in show_duration_options: {e}")
            try:
                await query.message.reply_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.HTML
                )
            except Exception as send_error:
                logger.error(f"Failed to send new message: {send_error}")
                raise
    
    return CHOOSING_DURATION

@safe_handler()
async def handle_duration_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–æ–º–æ–∫–æ–¥—É."""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"handle_duration_selection called with data: {query.data}")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ callback_data
        duration = int(query.data.split('_')[1])
        context.user_data['duration_months'] = duration
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        plan_id = context.user_data.get('selected_plan')
        
        if not plan_id:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /subscribe"
            )
            return ConversationHandler.END
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 100, —Ç–∞–∫ –∫–∞–∫ calculate_subscription_price 
        # –∏–∑ payment/handlers.py —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö
        if plan_id.startswith('custom_'):
            # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            custom_plan = context.user_data.get('custom_plan')
            if custom_plan:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É–±–ª–∏
                total_price = calculate_subscription_price(
                    plan_id, 
                    duration, 
                    custom_plan_data=custom_plan
                )  # –ë–ï–ó –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 100!
            else:
                # –ï—Å–ª–∏ custom_plan –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥—É–ª–µ–π
                modules = context.user_data.get('selected_modules', [])
                total_price = calculate_custom_price(modules, duration)
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ handlers.py
            # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö
            total_price = calculate_subscription_price(plan_id, duration)  # –ë–ï–ó –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 100!
        
        # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['total_price'] = total_price
        context.user_data['original_price'] = total_price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        context.user_data['selected_duration'] = duration
        
        logger.info(f"Selected duration: {duration} months, calculated price: {total_price}‚ÇΩ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS, DURATION_DISCOUNTS
        
        if plan_id.startswith('custom_'):
            plan_info = context.user_data.get('custom_plan', {})
            plan_name = plan_info.get('name', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞')
        elif plan_id in MODULE_PLANS:
            plan_info = MODULE_PLANS[plan_id]
            plan_name = plan_info['name']
        elif plan_id in SUBSCRIPTION_PLANS:
            plan_info = SUBSCRIPTION_PLANS[plan_id]
            plan_name = plan_info['name']
        else:
            plan_name = plan_id
            plan_info = {}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–ª–∞–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
        context.user_data['plan_name'] = plan_name
        
        # ==== –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è ====
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        from .promo_handler import show_promo_input
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        return await show_promo_input(update, context)
        
    except ValueError:
        logger.error(f"Invalid duration in callback_data: {query.data}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in handle_duration_selection: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

@safe_handler()
async def handle_back_to_duration_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return await show_duration_options(update, context)


# 3. –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–ª–∏—Ç—å/–î–æ–±–∞–≤–∏—Ç—å"
@safe_handler()
async def handle_payment_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–ª–∏—Ç—å/–î–æ–±–∞–≤–∏—Ç—å' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –Ω–∞—á–∞–ª—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_keys = ['selected_plan', 'selected_modules', 'custom_plan', 
                   'duration_months', 'total_price', 'plan_name']
    for key in payment_keys:
        context.user_data.pop(key, None)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    return await show_modular_interface(update, context)


@safe_handler()
async def request_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
        is_callback = True
    else:
        message = update.message
        is_callback = False
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    plan_id = context.user_data.get('selected_plan')
    duration = context.user_data.get('duration_months', 1)
    total_price = context.user_data.get('total_price')
    plan_name = context.user_data.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')
    
    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if not total_price:
        from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS
        plan = MODULE_PLANS.get(plan_id) or SUBSCRIPTION_PLANS.get(plan_id)
        if plan:
            total_price = calculate_subscription_price(plan_id, duration, plan)
            context.user_data['total_price'] = total_price
        else:
            total_price = 999 * duration  # Fallback
    
    text = f"""üìß <b>–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞</b>

üì¶ –ü–ª–∞–Ω: <b>{plan_name}</b>
‚è± –°—Ä–æ–∫: <b>{duration} –º–µ—Å.</b>
üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{total_price} ‚ÇΩ</b>

‚úâÔ∏è –ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"""
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º try/except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ "Message is not modified"
    try:
        if is_callback:
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –Ω–µ –∏–∑ callback, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.reply_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            logger.debug("Message already showing email request")
            # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if is_callback:
                await query.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –≤ —á–∞—Ç", show_alert=False)
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"Error in request_email: {e}")
            await message.reply_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    return ENTERING_EMAIL

@safe_handler()
async def handle_email_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ email –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    email = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
            ]])
        )
        return ENTERING_EMAIL
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    context.user_data['email'] = email
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –ë–î
    try:
        from payment.subscription_manager import SubscriptionManager
        subscription_manager = SubscriptionManager()
        
        import aiosqlite
        async with aiosqlite.connect(subscription_manager.database_file) as conn:
            await conn.execute(
                """
                INSERT OR REPLACE INTO user_emails (user_id, email, updated_at)
                VALUES (?, ?, CURRENT_TIMESTAMP)
                """,
                (user_id, email)
            )
            await conn.commit()
            
    except Exception as e:
        logger.error(f"Error saving email: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 100% —Å–∫–∏–¥–∫–∞ (–∏–ª–∏ –ø–æ—á—Ç–∏ 100%)
    promo_code = context.user_data.get('promo_code')
    total_price = context.user_data.get('total_price', 999)
    original_price = context.user_data.get('original_price', total_price)
    
    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ 1 —Ä—É–±–ª—å –∏ –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ —Å –±–æ–ª—å—à–æ–π —Å–∫–∏–¥–∫–æ–π
    if total_price == 1 and promo_code and original_price > 100:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å 1 —Ä—É–±–ª—å
        text = f"""üéâ <b>–ü–æ—á—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

–ë–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–º–æ–∫–æ–¥—É <code>{promo_code}</code> –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ 1 ‚ÇΩ!

–≠—Ç–æ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂, —Ç—Ä–µ–±—É–µ–º—ã–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.

–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"""
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 ‚ÇΩ", callback_data="pay_one_ruble")],
            [InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="activate_free")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
        ]
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return CONFIRMING
    
    logger.info(f"User {user_id} entered email: {email}")
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
    await update.message.reply_text(
        f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email}\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã...",
        parse_mode=ParseMode.HTML
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    from .auto_renewal_consent import show_auto_renewal_choice
    return await show_auto_renewal_choice(update, context)


@safe_handler()
async def handle_free_activation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ 100% —Å–∫–∏–¥–∫–µ."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    plan_id = context.user_data.get('selected_plan')
    duration_months = context.user_data.get('duration_months', 1)
    promo_code = context.user_data.get('promo_code')
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é
    subscription_manager = context.bot_data.get('subscription_manager')
    
    if subscription_manager:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ "–ø–ª–∞—Ç–µ–∂–µ" —Å –Ω—É–ª–µ–≤–æ–π —Å—É–º–º–æ–π
        order_id = f"free_{user_id}_{int(datetime.now().timestamp())}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        success = await subscription_manager.activate_subscription(
            user_id=user_id,
            plan_id=plan_id,
            duration_months=duration_months,
            order_id=order_id,
            payment_method="promo_100"
        )
        
        if success:
            text = f"""üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–º–æ–∫–æ–¥—É <code>{promo_code}</code>
üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration_months} –º–µ—Å—è—Ü(–µ–≤)

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_subscriptions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."""
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    else:
        text = "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
        ]])
    )
    
    return ConversationHandler.END

@safe_handler()
async def handle_pay_one_ruble(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å –æ–ø–ª–∞—Ç–æ–π 1 —Ä—É–±–ª—è."""
    query = update.callback_query
    await query.answer()
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 1 —Ä—É–±–ª—å
    context.user_data['total_price'] = 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –æ–ø–ª–∞—Ç—ã
    return await handle_payment_confirmation_with_recurrent(update, context)

@safe_handler()
async def handle_email_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ email."""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("use_email_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ callback_data
        email = query.data.replace("use_email_", "")
        context.user_data['email'] = email
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        user_id = update.effective_user.id
        try:
            from payment.subscription_manager import SubscriptionManager
            subscription_manager = SubscriptionManager()
            
            import aiosqlite
            async with aiosqlite.connect(subscription_manager.database_file) as conn:
                await conn.execute(
                    """
                    INSERT OR REPLACE INTO user_emails (user_id, email, updated_at)
                    VALUES (?, ?, CURRENT_TIMESTAMP)
                    """,
                    (user_id, email)
                )
                await conn.commit()
                
        except Exception as e:
            logger.error(f"Error saving email: {e}")
        
        await query.edit_message_text(
            f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email}\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã..."
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        from .auto_renewal_consent import show_auto_renewal_choice
        return await show_auto_renewal_choice(update, context)
    
    elif query.data == "retry_email":
        await query.edit_message_text(
            "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:"
        )
        return ENTERING_EMAIL

def calculate_custom_price(modules, duration):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –º–æ–¥—É–ª–µ–π —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫."""
    from payment.config import MODULE_PLANS, DURATION_DISCOUNTS
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –º–µ—Å—è—á–Ω—É—é —Ü–µ–Ω—É
    base_price = 0
    for module_id in modules:
        if module_id in MODULE_PLANS:
            base_price += MODULE_PLANS[module_id]['price_rub']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    if duration in DURATION_DISCOUNTS:
        multiplier = DURATION_DISCOUNTS[duration]['multiplier']
        total_price = int(base_price * multiplier)
    else:
        total_price = base_price * duration
    
    return total_price

@safe_handler()
async def show_auto_renewal_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ email."""
    query = update.callback_query
    if query:
        await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    plan_id = context.user_data.get('selected_plan')
    duration = context.user_data.get('duration_months', 1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    if plan_id.startswith('custom_'):
        modules = context.user_data.get('selected_modules', [])
        monthly_price = calculate_custom_price(modules, 1)
        plan_name = f"–ü–∞–∫–µ—Ç –∏–∑ {len(modules)} –º–æ–¥—É–ª–µ–π"
    else:
        from .config import MODULE_PLANS, SUBSCRIPTION_PLANS
        plan = MODULE_PLANS.get(plan_id) or SUBSCRIPTION_PLANS.get(plan_id)
        monthly_price = plan['price_rub']
        plan_name = plan['name']
    
    # –¢–µ–∫—Å—Ç —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢-–ë–∞–Ω–∫–∞)
    text = f"""üîÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>

<b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:</b>
üì¶ {plan_name}
‚è± –ü–µ—Ä–≤—ã–π –ø–µ—Ä–∏–æ–¥: {duration} –º–µ—Å.
üí∞ –î–∞–ª–µ–µ: {monthly_price} ‚ÇΩ/–º–µ—Å—è—Ü

<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–ª–∞—Ç—ã:</b>

‚úÖ <b>–° –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ {monthly_price} ‚ÇΩ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ /my_subscriptions
‚Ä¢ –ü–µ—Ä–≤–æ–µ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ: {(datetime.now() + timedelta(days=30*duration)).strftime('%d.%m.%Y')}

‚ùå <b>–ë–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>
‚Ä¢ –†–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–∞ {duration} –º–µ—Å.
‚Ä¢ –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
‚Ä¢ –†–∏—Å–∫ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –ø—Ä–∏ –∑–∞–±—ã–≤—á–∏–≤–æ—Å—Ç–∏

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –í—ã–±–∏—Ä–∞—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    
    keyboard = [
        [InlineKeyboardButton(
            "‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
            callback_data="consent_auto_renewal"
        )],
        [InlineKeyboardButton(
            "‚ùå –û–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è", 
            callback_data="no_auto_renewal"
        )],
        [InlineKeyboardButton(
            "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö", 
            callback_data="auto_renewal_terms"
        )]
    ]
    
    if query:
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return AUTO_RENEWAL_CHOICE  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@safe_handler()
async def handle_auto_renewal_consent_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—é."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "consent_auto_renewal":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —á–µ–∫-–±–æ–∫—Å–æ–º
        await show_final_consent_screen(update, context)
        return FINAL_CONSENT
        
    elif query.data == "no_auto_renewal":
        context.user_data['enable_auto_renewal'] = False
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ –±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        return await handle_payment_confirmation_with_recurrent(update, context)
        
    elif query.data == "auto_renewal_terms":
        await show_auto_renewal_terms(update, context)
        return AUTO_RENEWAL_CHOICE

@safe_handler()
async def show_final_consent_screen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–æ–≥–ª–∞—Å–∏—è —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–∫-–±–æ–∫—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    plan_id = context.user_data.get('selected_plan')
    duration = context.user_data.get('duration_months', 1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É
    if plan_id.startswith('custom_'):
        modules = context.user_data.get('selected_modules', [])
        monthly_price = calculate_custom_price(modules, 1)
        total_price = calculate_custom_price(modules, duration)
    else:
        plan_info = SUBSCRIPTION_PLANS.get(plan_id, {})
        monthly_price = plan_info.get('price_rub', 999)
        total_price = calculate_subscription_price(plan_id, duration, plan_info)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è
    consent_given = context.user_data.get('auto_renewal_consent_confirmed', False)
    checkbox = "‚òëÔ∏è" if consent_given else "‚¨ú"
    
    text = f"""üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>

<b>–£—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>
üí≥ –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂: {total_price} ‚ÇΩ (–∑–∞ {duration} –º–µ—Å.)
üîÑ –î–∞–ª–µ–µ: {monthly_price} ‚ÇΩ –µ–∂–µ–º–µ—Å—è—á–Ω–æ
üìÖ –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è: {(datetime.now() + timedelta(days=30*duration)).strftime('%d.%m.%Y')}

<b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b>
{checkbox} –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ {monthly_price} ‚ÇΩ —Å –º–æ–µ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ:

- –°–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
- –Ø –ø–æ–ª—É—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
- –Ø –º–æ–≥—É –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
- –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–æ–∑–≤—Ä–∞—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–µ—Ä–≤–∏—Å–∞
- –ú–æ–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ

<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–µ–∫-–±–æ–∫—Å –≤—ã—à–µ, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ</b>"""
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞-—á–µ–∫–±–æ–∫—Å
    keyboard.append([InlineKeyboardButton(
        f"{checkbox} –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
        callback_data="toggle_consent"
    )])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if consent_given:
        keyboard.append([InlineKeyboardButton(
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
            callback_data="confirm_with_auto_renewal"
        )])
    else:
        keyboard.append([InlineKeyboardButton(
            "‚ö†Ô∏è –û—Ç–º–µ—Ç—å—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
            callback_data="need_consent"
        )])
    
    keyboard.append([InlineKeyboardButton(
        "‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="payment_back"
    )])
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return FINAL_CONSENT

def calculate_subscription_price(plan_id: str, duration_months: int, custom_plan_data: dict = None) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –†–£–ë–õ–Ø–•.
    
    Args:
        plan_id: ID –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        duration_months: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü–∞—Ö
        custom_plan_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è custom –ø–ª–∞–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –†–£–ë–õ–Ø–• (–Ω–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö!)
    """
    from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS, DURATION_DISCOUNTS
    import logging
    
    logger = logging.getLogger(__name__)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
    if plan_id.startswith('custom_') and custom_plan_data:
        base_price = custom_plan_data.get('price_rub', 999)
        logger.info(f"Using custom plan price: {base_price}‚ÇΩ")
    elif plan_id in MODULE_PLANS:
        base_price = MODULE_PLANS[plan_id].get('price_rub', 999)
        logger.info(f"Using MODULE_PLANS price for {plan_id}: {base_price}‚ÇΩ")
    elif plan_id in SUBSCRIPTION_PLANS:
        base_price = SUBSCRIPTION_PLANS[plan_id].get('price_rub', 999)
        logger.info(f"Using SUBSCRIPTION_PLANS price for {plan_id}: {base_price}‚ÇΩ")
    else:
        # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        base_price = 999
        logger.warning(f"Unknown plan {plan_id}, using default price: {base_price}‚ÇΩ")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if plan_id == 'trial_7days':
        logger.info(f"Trial period detected, returning 1‚ÇΩ")
        return 1
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if duration_months in DURATION_DISCOUNTS:
        multiplier = DURATION_DISCOUNTS[duration_months].get('multiplier', duration_months)
        total_price = int(base_price * multiplier)
        logger.info(f"Applied discount for {duration_months} months: {base_price}‚ÇΩ √ó {multiplier} = {total_price}‚ÇΩ")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è —ç—Ç–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ø—Ä–æ—Å—Ç–æ —É–º–Ω–æ–∂–∞–µ–º
        total_price = base_price * duration_months
        logger.info(f"No discount for {duration_months} months, total={total_price}‚ÇΩ")
    
    logger.info(f"Final calculation: plan={plan_id}, base={base_price}‚ÇΩ, duration={duration_months}m, total={total_price}‚ÇΩ")
    
    return total_price

def get_price_in_kopecks(price_in_rubles: int) -> int:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –∏–∑ —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∏ –¥–ª—è API."""
    return price_in_rubles * 100

@safe_handler()
async def toggle_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è."""
    query = update.callback_query
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current = context.user_data.get('auto_renewal_consent_confirmed', False)
    context.user_data['auto_renewal_consent_confirmed'] = not current
    
    if not current:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è
        context.user_data['consent_timestamp'] = datetime.now().isoformat()
        context.user_data['consent_user_id'] = update.effective_user.id
        await query.answer("‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ", show_alert=False)
    else:
        await query.answer("–°–æ–≥–ª–∞—Å–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
    return await show_final_consent_screen(update, context)

@safe_handler()
async def confirm_with_auto_renewal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —è–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è."""
    query = update.callback_query
    
    if not context.user_data.get('auto_renewal_consent_confirmed', False):
        await query.answer(
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
            show_alert=True
        )
        return FINAL_CONSENT
    
    await query.answer("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    context.user_data['enable_auto_renewal'] = True
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
    return await handle_payment_confirmation_with_recurrent(update, context)

@safe_handler()
async def show_auto_renewal_terms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    text = """üìú <b>–£—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏</b>

<b>1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è</b>
‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
‚Ä¢ –°–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ –≤ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
‚Ä¢ –£—Å–ª—É–≥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ò–ü "–§—Ä–æ–ª–æ–≤ –†–æ–º–∞–Ω –ê–Ω—Ç–æ–Ω–æ–≤–∏—á" (–ò–ù–ù: 772459778593)

<b>2. –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–ø–∏—Å–∞–Ω–∏—è</b>
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∫–∞—Ä—Ç—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç–µ
‚Ä¢ –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–µ–ª–∞–µ—Ç—Å—è 3 –ø–æ–ø—ã—Ç–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è

<b>3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>
‚Ä¢ –ó–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ email –∏ –≤ Telegram
‚Ä¢ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏

<b>4. –û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç</b>
‚Ä¢ –û—Ç–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ /my_subscriptions
‚Ä¢ –û—Ç–º–µ–Ω–∞ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
‚Ä¢ –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –ó–æ–ó–ü–ü

<b>5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢-–ë–∞–Ω–∫ (–ª–∏—Ü–µ–Ω–∑–∏—è –¶–ë –†–§ ‚Ññ2673)
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É PCI DSS
‚Ä¢ –ó–∞—â–∏—Ç–∞ 3D-Secure

<b>6. –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>
üì± Telegram: @obshestvonapalcahsupport

<b>–ù–∞–∂–∏–º–∞—è "–°–æ–≥–ª–∞—Å–µ–Ω", –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</b>"""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="payment_back")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_auto_renewal_options")]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_payment_confirmation_with_recurrent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π, duration_months –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ email (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        query = None
        message = update.message
    
    plan_id = context.user_data.get('selected_plan')
    duration_months = context.user_data.get('duration_months', 1)
    user_email = context.user_data.get('email')  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'user_email' –Ω–∞ 'email'
    user_id = update.effective_user.id
    enable_auto_renewal = context.user_data.get('enable_auto_renewal', False)
    
    # ==== –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ ====
    promo_code = context.user_data.get('promo_code')
    promo_discount = context.user_data.get('promo_discount', 0)
    original_price = context.user_data.get('original_price')
    promo_data = context.user_data.get('promo_data')
    
    if not all([plan_id, user_email]):
        error_text = (
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /subscribe"
        )
        
        if query:
            await query.edit_message_text(error_text)
        else:
            await message.reply_text(error_text)
        return ConversationHandler.END
    
    # ==== –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ====
    if promo_code and 'total_price' in context.user_data:
        # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
        total_price_rub = context.user_data['total_price']
    else:
        # –ò–Ω–∞—á–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ü–µ–Ω—É
        if plan_id.startswith('custom_'):
            modules = context.user_data.get('selected_modules', [])
            custom_plan_data = {
                'price_rub': calculate_custom_price(modules, 1),
                'modules': modules
            }
            total_price_rub = calculate_subscription_price(plan_id, duration_months, custom_plan_data)
        else:
            from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS
            plan_info = SUBSCRIPTION_PLANS.get(plan_id, MODULE_PLANS.get(plan_id))
            total_price_rub = calculate_subscription_price(plan_id, duration_months, plan_info)
    
    # ==== –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è Tinkoff ====
    if total_price_rub < 1:
        logger.warning(f"Price too low for Tinkoff: {total_price_rub}‚ÇΩ, setting to minimum 1‚ÇΩ")
        total_price_rub = 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['total_price'] = 1
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
    total_price_kopecks = total_price_rub * 100
    
    # ==== –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–ø–µ–µ–∫ ====
    if total_price_kopecks < 100:
        logger.error(f"Invalid amount in kopecks: {total_price_kopecks}")
        total_price_kopecks = 100
    
    # ==== –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ ====
    if not original_price:
        original_price = total_price_rub
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫
        from payment.subscription_manager import SubscriptionManager
        subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id
        order_id = f"order_{user_id}_{int(datetime.now().timestamp())}"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS
        if plan_id.startswith('custom_'):
            plan_name = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –º–æ–¥—É–ª–µ–π"
        else:
            plan_info = SUBSCRIPTION_PLANS.get(plan_id, MODULE_PLANS.get(plan_id, {}))
            plan_name = plan_info.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        if duration_months == 1:
            description = f"{plan_name} (1 –º–µ—Å—è—Ü)"
        else:
            description = f"{plan_name} ({duration_months} –º–µ—Å—è—Ü–µ–≤)"
        
        # ==== –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ ====
        if promo_code:
            description += f" —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º {promo_code}"
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç TinkoffPayment
        from payment.tinkoff import TinkoffPayment
        tinkoff = TinkoffPayment()
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ build_receipt_item
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —á–µ–∫ –≤—Ä—É—á–Ω—É—é
        receipt_items = [{
            "Name": description[:64],
            "Price": total_price_kopecks,
            "Quantity": 1,
            "Amount": total_price_kopecks,
            "Tax": "none",
            "PaymentMethod": "full_payment",
            "PaymentObject": "service"
        }]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ build_receipt_item, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if hasattr(tinkoff, 'build_receipt_item'):
            receipt_items = [
                tinkoff.build_receipt_item(
                    name=description[:64],
                    price_kopecks=total_price_kopecks
                )
            ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
        payment_result = await tinkoff.init_payment(
            order_id=order_id,
            amount_kopecks=total_price_kopecks,
            description=description,
            user_email=user_email,
            receipt_items=receipt_items,
            user_data={
                "user_id": str(user_id),
                "email": user_email,
                "plan_id": plan_id,
                "duration_months": str(duration_months),
                "enable_auto_renewal": str(enable_auto_renewal),
                "modules": ','.join(context.user_data.get('selected_modules', [])) if plan_id.startswith('custom_') else '',
                "promo_code": promo_code or "",  # ==== –ù–û–í–û–ï ====
                "promo_discount": str(promo_discount) if promo_discount else "0",  # ==== –ù–û–í–û–ï ====
                "original_price": str(original_price * 100) if promo_code else ""  # ==== –ù–û–í–û–ï ====
            },
            enable_recurrent=enable_auto_renewal,
            customer_key=str(user_id) if enable_auto_renewal else None
        )
        
        if payment_result.get("success"):
            payment_url = payment_result.get("payment_url")
            payment_id = payment_result.get("payment_id")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            try:
                import aiosqlite
                import json
                async with aiosqlite.connect(subscription_manager.database_file) as conn:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = {
                        'duration_months': duration_months,
                        'enable_recurrent': enable_auto_renewal,
                        'email': user_email,
                        'plan_name': plan_name,
                        'promo_code': promo_code,  # ==== –ù–û–í–û–ï ====
                        'promo_discount': promo_discount,  # ==== –ù–û–í–û–ï ====
                        'original_price': original_price * 100 if promo_code else None  # ==== –ù–û–í–û–ï ====
                    }
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏
                    if plan_id.startswith('custom_'):
                        metadata['modules'] = ','.join(context.user_data.get('selected_modules', []))
                    
                    await conn.execute(
                        """
                        INSERT INTO payments (
                            order_id, user_id, payment_id, amount_kopecks,
                            status, created_at, plan_id, metadata,
                            auto_renewal_enabled, promo_code, promo_discount
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """,
                        (
                            order_id, 
                            user_id, 
                            payment_id, 
                            total_price_kopecks,
                            'NEW', 
                            datetime.now().isoformat(), 
                            plan_id,
                            json.dumps(metadata),
                            1 if enable_auto_renewal else 0,
                            promo_code,  # ==== –ù–û–í–û–ï ====
                            promo_discount  # ==== –ù–û–í–û–ï ====
                        )
                    )
                    await conn.commit()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    cursor = await conn.execute(
                        "SELECT name FROM sqlite_master WHERE type='table' AND name='user_emails'"
                    )
                    if await cursor.fetchone():
                        await conn.execute(
                            """
                            INSERT OR REPLACE INTO user_emails (user_id, email, updated_at)
                            VALUES (?, ?, CURRENT_TIMESTAMP)
                            """,
                            (user_id, user_email)
                        )
                        await conn.commit()
                        
                    logger.info(f"Payment info saved: order_id={order_id}, amount={total_price_kopecks} kopecks, promo={promo_code}")
                    
            except Exception as e:
                logger.error(f"Failed to save payment info: {e}")
            
            # ==== –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞ ====
            if promo_code:
                success_text = f"""‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üì¶ –ü–ª–∞–Ω: <b>{plan_name}</b>
‚è± –°—Ä–æ–∫: <b>{duration_months} –º–µ—Å.</b>
üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>
üí∞ –¶–µ–Ω–∞: <s>{original_price} ‚ÇΩ</s>
üéØ –ö –æ–ø–ª–∞—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>{total_price_rub} ‚ÇΩ</b>
üí∏ –í–∞—à–∞ –≤—ã–≥–æ–¥–∞: <b>{promo_discount} ‚ÇΩ</b>
{"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –≤–∫–ª—é—á–µ–Ω–æ" if enable_auto_renewal else "üí≥ –†–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞"}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"""
            else:
                success_text = f"""‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üì¶ –ü–ª–∞–Ω: <b>{plan_name}</b>
‚è± –°—Ä–æ–∫: <b>{duration_months} –º–µ—Å.</b>
üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{total_price_rub} ‚ÇΩ</b>
{"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –≤–∫–ª—é—á–µ–Ω–æ" if enable_auto_renewal else "üí≥ –†–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞"}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"""
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
            ]
            
            if query:
                await query.edit_message_text(
                    success_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.reply_text(
                    success_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.HTML
                )
                
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            error_message = payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            error_code = payment_result.get('error_code', '')
            
            error_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            error_keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="subscribe")],
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]
            
            if query:
                await query.edit_message_text(
                    error_text,
                    reply_markup=InlineKeyboardMarkup(error_keyboard),
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.reply_text(
                    error_text,
                    reply_markup=InlineKeyboardMarkup(error_keyboard),
                    parse_mode=ParseMode.HTML
                )
            
    except Exception as e:
        logger.exception(f"Critical error creating payment: {e}")
        
        critical_error_text = (
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
        )
        
        critical_error_keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="subscribe")],
            [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
        ]
        
        if query:
            await query.edit_message_text(
                critical_error_text,
                reply_markup=InlineKeyboardMarkup(critical_error_keyboard),
                parse_mode=ParseMode.HTML
            )
        else:
            await message.reply_text(
                critical_error_text,
                reply_markup=InlineKeyboardMarkup(critical_error_keyboard),
                parse_mode=ParseMode.HTML
            )
    
    return ConversationHandler.END

async def handle_back_to_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return await show_duration_options(update, context)

async def cancel_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã."""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END

@safe_handler()
async def ask_auto_renewal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    plan_id = context.user_data.get('selected_plan')
    plan_name = context.user_data.get('plan_name', '–ü–æ–¥–ø–∏—Å–∫–∞')
    duration = context.user_data.get('duration_months', 1)
    
    # –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É
    if plan_id == 'trial_7days':
        total_price = 1
    else:
        total_price = context.user_data.get('total_price')
        if not total_price:
            from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS
            plan_info = MODULE_PLANS.get(plan_id) or SUBSCRIPTION_PLANS.get(plan_id)
            if plan_info:
                total_price = calculate_subscription_price(plan_id, duration)
            else:
                total_price = 999 * duration
    
    context.user_data['total_price'] = total_price
    
    text = f"""üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã</b>

üìã <b>–í–∞—à –∑–∞–∫–∞–∑:</b>
‚Ä¢ –¢–∞—Ä–∏—Ñ: {plan_name}
‚Ä¢ –°—Ä–æ–∫: {duration if plan_id != 'trial_7days' else '7 –¥–Ω–µ–π'}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price} ‚ÇΩ</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>

üîÑ <b>–° –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º</b>
–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.

üí≥ <b>–†–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞</b>
–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.
–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –≤—Ä—É—á–Ω—É—é."""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –° –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º", callback_data="consent_auto_renewal")],
        [InlineKeyboardButton("üí≥ –†–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞", callback_data="no_auto_renewal")],
        [InlineKeyboardButton("‚ùì –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="auto_renewal_terms")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_duration")]  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    ]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return AUTO_RENEWAL_CHOICE


@safe_handler()
async def handle_auto_renewal_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É email."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "enable_auto_renewal_payment":
        context.user_data['enable_auto_renewal'] = True
        await query.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")
    else:
        context.user_data['enable_auto_renewal'] = False
        await query.answer("–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–æ")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É email, –∞ –ù–ï —Å—Ä–∞–∑—É –∫ –æ–ø–ª–∞—Ç–µ!
    return await request_email(update, context)

@safe_handler()
async def cmd_my_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /my_subscriptions - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    if SUBSCRIPTION_MODE == 'modular':
        modules = await subscription_manager.get_user_modules(user_id)
        
        if not modules:
            text = "üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
        else:
            text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n\n"
            module_names = {
                'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
                'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
            }
            for module in modules:
                name = module_names.get(module['module_code'], module['module_code'])
                expires = module['expires_at'].strftime('%d.%m.%Y')
                text += f"{name}\n‚îî –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}\n\n"
            
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π."
    else:
        subscription = await subscription_manager.check_active_subscription(user_id)
        if subscription:
            plan = SUBSCRIPTION_PLANS.get(subscription['plan_id'], {})
            expires = subscription['expires_at'].strftime('%d.%m.%Y')
            text = f"""‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

–ü–ª–∞–Ω: {plan.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞')}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
    
    # –î–û–ë–ê–í–õ–ï–ù–û: –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üîÑ –û—Ñ–æ—Ä–º–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="payment_back")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ]
    
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@safe_handler()
async def handle_my_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback my_subscriptions - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    if SUBSCRIPTION_MODE == 'modular':
        modules = await subscription_manager.get_user_modules(user_id)
        
        if not modules:
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–ø–∏—Å–∫–∏
            text = "üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
            text += "üí° –° –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤—ã –ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω—ã!"
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
            ]
            
            try:
                await query.edit_message_text(
                    text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    logger.error(f"Error in handle_my_subscriptions: {e}")
                    raise
        else:
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –º–æ–¥—É–ª–∏
            text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n\n"
            module_names = {
                'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
                'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
            }
            
            for module in modules:
                name = module_names.get(module['module_code'], module['module_code'])
                expires = module['expires_at'].strftime('%d.%m.%Y')
                text += f"‚úÖ {name}\n   ‚îî –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞
            text += "üìä <b>–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            all_modules = ['test_part', 'task19', 'task20', 'task24', 'task25']
            inactive_modules = []
            
            for module_code in all_modules:
                has_access = await subscription_manager.check_module_access(user_id, module_code)
                if not has_access:
                    inactive_modules.append(module_names.get(module_code, module_code))
            
            if inactive_modules:
                text += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(inactive_modules)}\n\n"
            else:
                text += "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º!\n\n"
            
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π."
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å/–î–æ–±–∞–≤–∏—Ç—å", callback_data="payment_back")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
            ]
            
            try:
                await query.edit_message_text(
                    text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    logger.error(f"Error editing message: {e}")
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
    else:
        # –†–µ–∂–∏–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        subscription = await subscription_manager.check_active_subscription(user_id)
        if subscription:
            plan = SUBSCRIPTION_PLANS.get(subscription['plan_id'], {})
            expires = subscription['expires_at'].strftime('%d.%m.%Y')
            text = f"""‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

–ü–ª–∞–Ω: {plan.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞')}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        else:
            text = "üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û—Ñ–æ—Ä–º–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="payment_back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ]
        
        try:
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                logger.error(f"Error editing message: {e}")
                await query.message.reply_text(
                    text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    
    # –í–ê–ñ–ù–û: –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
    # —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ standalone
    return None
    
@safe_handler()
async def handle_back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    context.user_data.pop('in_payment_process', None)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ core
    from core.menu_handlers import handle_to_main_menu
    return await handle_to_main_menu(update, context)

@safe_handler()
async def handle_module_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –º–æ–¥—É–ª—è –∏–∑ callback_data
    module_code = query.data.replace("module_info_", "")
    
    module_info = {
        'test_part': {
            'name': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠',
            'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–Ω–∫—É –∑–∞–¥–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏',
            'features': [
                '‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è 1-16',
                '‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è',
                '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
                '‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏'
            ],
            'price': '149‚ÇΩ/–º–µ—Å'
        },
        'task19': {
            'name': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
            'description': '–ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —è–≤–ª–µ–Ω–∏–π',
            'features': [
                '‚úÖ –ë–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º',
                '‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã',
                '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        },
        'task20': {
            'name': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
            'description': '–¢–µ–∫—Å—Ç —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',
            'features': [
                '‚úÖ –¢–µ–∫—Å—Ç—ã –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º',
                '‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è',
                '‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        },
        'task24': {
            'name': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
            'description': '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞',
            'features': [
                '‚úÖ –ë–∞–∑–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤',
                '‚úÖ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
                '‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                '‚úÖ VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
            ],
            'price': '399‚ÇΩ/–º–µ—Å'
        },
        'task25': {
            'name': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25',
            'description': '–ü–æ–Ω—è—Ç–∏—è –∏ —Ç–µ—Ä–º–∏–Ω—ã',
            'features': [
                '‚úÖ –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –ø–æ–Ω—è—Ç–∏–π',
                '‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
                '‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        }
    }
    
    info = module_info.get(module_code)
    if not info:
        await query.edit_message_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_modules")
            ]])
        )
        return
    
    text = f"<b>{info['name']}</b>\n\n"
    text += f"{info['description']}\n\n"
    text += "<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>\n"
    for feature in info['features']:
        text += f"{feature}\n"
    text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {info['price']}"
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_modules")]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ü–ï–†–ï–î —Ñ—É–Ω–∫—Ü–∏–µ–π register_payment_handlers –≤ —Ñ–∞–π–ª–µ payment/handlers.py

async def standalone_pay_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã –≤–Ω–µ ConversationHandler."""
    query = update.callback_query
    await query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º callback_data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ ConversationHandler
    context.user_data['standalone_callback'] = query.data
    
    # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ handle_plan_selection,
    # —ç–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ ConversationHandler —á–µ—Ä–µ–∑ entry point
    if query.data in ["pay_trial", "pay_package_full", "pay_package_second"]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
        plan_id = query.data.replace("pay_", "")
        
        if plan_id == "trial":
            plan_id = "trial_7days"
            context.user_data['is_trial'] = True
            context.user_data['selected_plan'] = plan_id
            context.user_data['duration_months'] = 1
            context.user_data['total_price'] = 1
            context.user_data['base_price'] = 1
            context.user_data['plan_name'] = "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π"
            
            # –î–ª—è —Ç—Ä–∏–∞–ª–∞ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
            return await request_email_for_trial(update, context)
            
        elif plan_id == "package_full":
            context.user_data['selected_plan'] = "package_full"
            context.user_data['is_trial'] = False
        elif plan_id == "package_second":
            context.user_data['selected_plan'] = "package_second"
            context.user_data['is_trial'] = False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        from payment.config import MODULE_PLANS, SUBSCRIPTION_PLANS
        plan = MODULE_PLANS.get(context.user_data['selected_plan']) or \
               SUBSCRIPTION_PLANS.get(context.user_data['selected_plan'])
        
        if plan:
            context.user_data['plan_info'] = plan
            context.user_data['plan_name'] = plan['name']
            context.user_data['base_price'] = plan['price_rub']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            return await show_duration_options(update, context)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
    elif query.data == "pay_individual_modules":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥—É–ª–µ–π
        return await show_individual_modules(update, context)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        context.user_data.pop('in_payment_process', None)
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return

def register_payment_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º."""
    logger.info("Registering payment handlers...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è
    subscription_manager = app.bot_data.get('subscription_manager', SubscriptionManager())
    consent_handler = AutoRenewalConsent(subscription_manager)
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    payment_conv = ConversationHandler(
        entry_points=[
            CommandHandler("subscribe", cmd_subscribe),
            CallbackQueryHandler(show_modular_interface, pattern="^subscribe$"),
            CallbackQueryHandler(show_modular_interface, pattern="^subscribe_start$"),
            CallbackQueryHandler(standalone_pay_handler, pattern="^pay_trial$"),
            CallbackQueryHandler(standalone_pay_handler, pattern="^pay_package_full$"),
            CallbackQueryHandler(standalone_pay_handler, pattern="^pay_package_second$"),
            CallbackQueryHandler(standalone_pay_handler, pattern="^pay_individual_modules$"),
        ],
        states={
            CHOOSING_PLAN: [
                CallbackQueryHandler(handle_plan_selection, pattern="^pay_"),
                CallbackQueryHandler(show_individual_modules, pattern="^pay_individual_modules$"),
                CallbackQueryHandler(show_modular_interface, pattern="^back_to_main$"),
                CallbackQueryHandler(handle_my_subscriptions, pattern="^my_subscriptions$")
            ],
            PROMO_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_promo_input),
                CallbackQueryHandler(skip_promo, pattern="^skip_promo$"),
                CallbackQueryHandler(retry_promo, pattern="^retry_promo$"),
                CallbackQueryHandler(show_promo_input, pattern="^retry_promo$"),
                CallbackQueryHandler(handle_back_to_duration_selection, pattern="^back_to_duration_selection$"),
                CallbackQueryHandler(cancel_payment, pattern="^cancel_payment$")
            ],
            
            CHOOSING_MODULES: [
                CallbackQueryHandler(toggle_module_selection, pattern="^toggle_"),
                CallbackQueryHandler(show_module_info, pattern="^info_"),
                CallbackQueryHandler(back_to_module_selection, pattern="^back_to_module_selection$"),
                CallbackQueryHandler(proceed_with_selected_modules, pattern="^proceed_with_modules$"),
                CallbackQueryHandler(handle_plan_selection, pattern="^pay_package_"),
                CallbackQueryHandler(show_modular_interface, pattern="^back_to_main$")
            ],
            
            CHOOSING_DURATION: [
                CallbackQueryHandler(handle_duration_selection, pattern="^duration_"),
                CallbackQueryHandler(show_individual_modules, pattern="^back_to_modules$"),
                CallbackQueryHandler(show_modular_interface, pattern="^back_to_plans$")
            ],
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
            CONFIRMING: [
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è 100% —Å–∫–∏–¥–∫–∏
                CallbackQueryHandler(handle_free_activation, pattern="^activate_free$"),
                CallbackQueryHandler(handle_pay_one_ruble, pattern="^pay_one_ruble$"),
                
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                CallbackQueryHandler(
                    handle_auto_renewal_choice, 
                    pattern="^(enable|disable)_auto_renewal_payment$"
                ),
                CallbackQueryHandler(
                    handle_back_to_duration_selection,
                    pattern="^back_to_duration_selection$"
                ),
                CallbackQueryHandler(cancel_payment, pattern="^cancel_payment$"),
            ],
            
            ENTERING_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email_input),
                CallbackQueryHandler(cancel_payment, pattern="^cancel_payment$")
            ],

            AUTO_RENEWAL_CHOICE: [
                CallbackQueryHandler(
                    consent_handler.handle_choice_selection,
                    pattern="^(consent_auto_renewal|choose_auto_renewal|choose_no_auto_renewal|show_auto_renewal_terms)$"
                ),
                CallbackQueryHandler(
                    handle_auto_renewal_choice,
                    pattern="^(no_auto_renewal|auto_renewal_terms)$"
                ),
                CallbackQueryHandler(
                    handle_back_to_duration,
                    pattern="^back_to_duration$"
                ),
                CallbackQueryHandler(
                    cancel_payment,
                    pattern="^cancel_payment$"
                )
            ],
            
            SHOWING_TERMS: [
                CallbackQueryHandler(
                    consent_handler.handle_choice_selection,
                    pattern="^(choose_auto_renewal|choose_no_auto_renewal|show_auto_renewal_terms)$"
                ),
                CallbackQueryHandler(
                    consent_handler.handle_back_navigation,
                    pattern="^back_to_duration$"
                ),
                CallbackQueryHandler(
                    cancel_payment,
                    pattern="^cancel_payment$"
                )
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_payment),
            CallbackQueryHandler(cancel_payment, pattern="^pay_cancel$"),
            CallbackQueryHandler(handle_my_subscriptions, pattern="^my_subscriptions$")
        ],
        allow_reentry=True,
        per_message=False
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler
    app.add_handler(payment_conv, group=-50)
    
    app.add_handler(
        CallbackQueryHandler(
            check_payment_status,
            pattern="^check_payment$"
        ),
        group=-45
    )
    
    app.add_handler(
        CallbackQueryHandler(
            handle_payment_back,
            pattern="^payment_back$"
        ),
        group=-45
    )
    
    app.add_handler(
        CallbackQueryHandler(
            handle_my_subscriptions, 
            pattern="^my_subscriptions$"
        ), 
        group=-45
    )
    
    app.add_handler(
        CommandHandler("my_subscriptions", cmd_my_subscriptions), 
        group=-45
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async def payment_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ payment."""
        from core.menu_handlers import handle_to_main_menu
        context.user_data.pop('in_payment_process', None)
        await handle_to_main_menu(update, context)
        return ConversationHandler.END
    
    app.add_handler(
        CallbackQueryHandler(
            payment_to_main_menu,
            pattern="^(main_menu|to_main_menu)$"
        ),
        group=-45
    )
    
    app.add_handler(
        CallbackQueryHandler(
            handle_back_to_main_menu, 
            pattern="^back_to_main$"
        ), 
        group=-49
    )
    
    app.add_handler(
        CallbackQueryHandler(
            handle_module_info, 
            pattern="^module_info_"
        ), 
        group=-45
    )
    
    # 8. Debug –∫–æ–º–∞–Ω–¥–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try:
        app.add_handler(
            CommandHandler("debug_subscription", cmd_debug_subscription), 
            group=-50
        )
    except NameError:
        logger.info("cmd_debug_subscription not defined, skipping")
    
    logger.info("Payment handlers registered successfully")
    logger.info("ConversationHandler has entry points for all payment buttons")
    logger.info("Priority groups: -50 (ConversationHandler), -45 (standalone)")
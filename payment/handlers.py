# payment/handlers.py - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–¥—É–ª–µ–π
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ (–º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
import logging
from datetime import datetime
from typing import Optional
import json
from telegram import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ContextTypes, 
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
import aiosqlite
from core.error_handler import safe_handler
from .config import (
    SUBSCRIPTION_PLANS, 
    SUBSCRIPTION_MODE,
    DURATION_DISCOUNTS,
    MODULE_PLANS,
    PAYMENT_ADMIN_CHAT_ID,
    get_plan_price_kopecks
)
from .subscription_manager import SubscriptionManager
from .tinkoff import TinkoffPayment

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
CHOOSING_PLAN = "choosing_plan"
CHOOSING_DURATION = "choosing_duration"  
ENTERING_EMAIL = "entering_email"
CONFIRMING = "confirming"
CHOOSING_MODULES = "choosing_modules"  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
PAYMENT_STATES = [CHOOSING_PLAN, CHOOSING_MODULES, CHOOSING_DURATION, ENTERING_EMAIL, CONFIRMING]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
subscription_manager = SubscriptionManager()
tinkoff_payment = TinkoffPayment()


@safe_handler()
async def cmd_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å message (–∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ /subscribe)
    if not update.message:
        logger.warning("cmd_subscribe called without message")
        return ConversationHandler.END
    
    if SUBSCRIPTION_MODE == 'modular':
        return await show_modular_interface(update, context)
    else:
        return await show_unified_plans(update, context)


async def show_unified_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –µ–¥–∏–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await subscription_manager.check_active_subscription(user_id)
    
    if subscription:
        expires = subscription['expires_at'].strftime('%d.%m.%Y')
        text = f"""‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

–ü–ª–∞–Ω: {SUBSCRIPTION_PLANS[subscription['plan_id']]['name']}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if update.message:
            await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(text, parse_mode=ParseMode.HTML)
        
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
    text = "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    keyboard = []
    for plan_id, plan in SUBSCRIPTION_PLANS.items():
        text += f"<b>{plan['name']}</b>\n"
        text += f"üí∞ {plan['price_rub']} ‚ÇΩ\n"
        text += f"üìù {plan['description']}\n"
        for feature in plan.get('features', []):
            text += f"  {feature}\n"
        text += "\n"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{plan['name']} - {plan['price_rub']} ‚ÇΩ",
                callback_data=f"pay_plan_{plan_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if update.message:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        try:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception:
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    return CHOOSING_PLAN


async def show_modular_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        edit_func = query.edit_message_text
    else:
        # –í—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /subscribe
        edit_func = update.message.reply_text
    
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    has_trial = await subscription_manager.has_used_trial(user_id)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ get_user_modules
    modules_data = await subscription_manager.get_user_modules(user_id)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥—ã –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    active_modules = [module['module_code'] for module in modules_data] if modules_data else []
    
    text = "üíé <b>–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
    
    if modules_data:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º modules_data –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –º–æ–¥—É–ª–µ–π
        text += "‚úÖ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
        module_names = {
            'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
            'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
            'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
            'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
            'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
        }
        for module in modules_data:
            name = module_names.get(module['module_code'], module['module_code'])
            expires = module['expires_at'].strftime('%d.%m.%Y')
            text += f"‚Ä¢ {name} (–¥–æ {expires})\n"
        text += "\n"
    
    text += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n"
    
    # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if not has_trial:
        text += "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> ‚Äî 1‚ÇΩ\n"
        text += "   ‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π\n"
        text += "   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã\n\n"
    
    # –ü–∞–∫–µ—Ç "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å"
    text += "üéØ <b>–ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª</b> ‚Äî 499‚ÇΩ/–º–µ—Å\n"
    text += "   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 19 (–ü—Ä–∏–º–µ—Ä—ã)\n"
    text += "   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 20 (–°—É–∂–¥–µ–Ω–∏—è)\n"
    text += "   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 25 (–†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç)\n"
    text += "   <i>–≠–∫–æ–Ω–æ–º–∏—è 98‚ÇΩ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ–∫—É–ø–∫–æ–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏</i>\n\n"
    
    text += "üëë <b>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> ‚Äî 999‚ÇΩ/–º–µ—Å\n"
    text += "   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏\n"
    text += "   ‚Ä¢ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ (19, 20, 24, 25)\n"
    text += "   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
    text += "   <i>–≠–∫–æ–Ω–æ–º–∏—è 346‚ÇΩ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ–∫—É–ø–∫–æ–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏</i>\n\n"
    
    text += "üìö –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏\n"
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏
    if not has_trial:
        keyboard.append([
            InlineKeyboardButton(
                "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 1‚ÇΩ (7 –¥–Ω–µ–π)",
                callback_data="pay_trial"
            )
        ])
    
    keyboard.extend([
        [InlineKeyboardButton(
            "üëë –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - 999‚ÇΩ/–º–µ—Å",
            callback_data="pay_package_full"
        )],
        [InlineKeyboardButton(
            "üéØ –ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª - 499‚ÇΩ/–º–µ—Å",
            callback_data="pay_package_second"
        )],
        [InlineKeyboardButton(
            "üìö –í—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏",
            callback_data="pay_individual_modules"
        )]
    ])
    
    if active_modules:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º active_modules –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard.append([
            InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
    ])
    
    await edit_func(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_PLAN


@safe_handler()
async def handle_plan_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    if query.data == "pay_cancel":
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        context.user_data.pop('in_payment_process', None)
        await query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    if SUBSCRIPTION_MODE == 'modular':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        if query.data == "pay_individual_modules":
            return await show_individual_modules(update, context)
        elif query.data == "pay_trial":
            # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            context.user_data['selected_plan'] = 'trial_7days'
            context.user_data['duration_months'] = 1  # –ò–ó–ú–ï–ù–ï–ù–û —Å 0 –Ω–∞ 1
            context.user_data['is_trial'] = True
            context.user_data['trial_price'] = 100  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (1 —Ä—É–±–ª—å)
            return await request_email(update, context)
        elif query.data.startswith("pay_package_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
            package_name = query.data.replace("pay_package_", "")
            if package_name == "second":
                package = "package_second_part"
            elif package_name == "full":
                package = "package_full"
            else:
                package = f"package_{package_name}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if package not in MODULE_PLANS:
                logger.error(f"Package not found: {package}")
                await query.edit_message_text("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                context.user_data.pop('in_payment_process', None)
                return ConversationHandler.END
                
            context.user_data['selected_plan'] = package
            return await show_duration_options(update, context)
            
        elif query.data.startswith("pay_module_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            module = query.data.replace("pay_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if module not in MODULE_PLANS:
                logger.error(f"Module not found: {module}")
                logger.error(f"Available modules: {list(MODULE_PLANS.keys())}")
                await query.edit_message_text("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                context.user_data.pop('in_payment_process', None)
                return ConversationHandler.END
                
            context.user_data['selected_plan'] = module
            return await show_duration_options(update, context)
    
    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –µ–¥–∏–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    plan_id = query.data.replace("pay_plan_", "")
    
    if plan_id not in SUBSCRIPTION_PLANS:
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.user_data.pop('in_payment_process', None)
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏.")
        return ConversationHandler.END
    
    context.user_data['selected_plan'] = plan_id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
    return await request_email(update, context)

@safe_handler()
async def cmd_debug_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    text = f"üîç <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
    text += f"SUBSCRIPTION_MODE: {SUBSCRIPTION_MODE}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await subscription_manager.check_active_subscription(user_id)
    if subscription:
        text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:</b>\n"
        text += f"–ü–ª–∞–Ω: {subscription.get('plan_id')}\n"
        text += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {subscription.get('expires_at')}\n"
        text += f"–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: {subscription.get('active_modules', [])}\n\n"
    else:
        text += "‚ùå <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏
    if SUBSCRIPTION_MODE == 'modular':
        modules = await subscription_manager.get_user_modules(user_id)
        if modules:
            text += "üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            for module in modules:
                text += f"‚Ä¢ {module['module_code']} –¥–æ {module['expires_at']}\n"
        else:
            text += "üì¶ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π</b>\n"
        
        text += "\n<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º:</b>\n"
        for module_code in ['test_part', 'task19', 'task20', 'task24', 'task25']:
            has_access = await subscription_manager.check_module_access(user_id, module_code)
            text += f"‚Ä¢ {module_code}: {'‚úÖ' if has_access else '‚ùå'}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    try:
        async with aiosqlite.connect(DATABASE_FILE) as conn:
            cursor = await conn.execute(
                """
                SELECT order_id, plan_id, status, created_at 
                FROM payments 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT 5
                """,
                (user_id,)
            )
            payments = await cursor.fetchall()
            
            if payments:
                text += "\nüí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
                for payment in payments:
                    text += f"‚Ä¢ {payment[1]} - {payment[2]} ({payment[3]})\n"
    except Exception as e:
        logger.error(f"Error getting payments: {e}")
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@safe_handler()
async def show_individual_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    query = update.callback_query
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'selected_modules' not in context.user_data:
        context.user_data['selected_modules'] = []
    
    selected = context.user_data['selected_modules']
    
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–¥—É–ª—å —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:\n\n"
    
    keyboard = []
    total_price = 0
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ —Ç–∏–ø–∞–º
    individual_modules = {
        k: v for k, v in MODULE_PLANS.items() 
        if v.get('type') == 'individual'
    }
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not individual_modules:
        logger.error("No individual modules found in MODULE_PLANS")
        logger.error(f"MODULE_PLANS keys: {list(MODULE_PLANS.keys())}")
        await query.edit_message_text(
            "‚ùå –ú–æ–¥—É–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]])
        )
        return CHOOSING_PLAN
    
    # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
    module_order = [
        'module_test_part',
        'module_task19', 
        'module_task20',
        'module_task25',
        'module_task24'
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    modules_added = 0
    for module_id in module_order:
        if module_id not in individual_modules:
            logger.warning(f"Module {module_id} not found in individual_modules")
            continue
            
        module = individual_modules[module_id]
        is_selected = module_id in selected
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±–æ—Ä–∞
        if is_selected:
            status = "‚úÖ"
            total_price += module['price_rub']
        else:
            status = "‚¨ú"
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        button_text = f"{status} {module['name']} - {module['price_rub']}‚ÇΩ"
        
        keyboard.append([
            InlineKeyboardButton(
                button_text,
                callback_data=f"toggle_{module_id}"
            ),
            InlineKeyboardButton(
                "‚ÑπÔ∏è",
                callback_data=f"info_{module_id}"
            )
        ])
        modules_added += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å
    if modules_added == 0:
        logger.error("No modules were added to keyboard")
        await query.edit_message_text(
            "‚ùå –ú–æ–¥—É–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]])
        )
        return CHOOSING_PLAN
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if selected:
        text += "<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n"
        for module_id in selected:
            if module_id in MODULE_PLANS:
                module = MODULE_PLANS[module_id]
                text += f"‚Ä¢ {module['name']} - {module['price_rub']}‚ÇΩ\n"
            else:
                logger.warning(f"Selected module {module_id} not found in MODULE_PLANS")
        
        text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total_price}‚ÇΩ/–º–µ—Å</b>\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–≥–æ–¥–Ω–µ–µ –ª–∏ –≤–∑—è—Ç—å –ø–∞–∫–µ—Ç
        if len(selected) >= 3:
            if total_price > 499 and len(selected) == 3:
                text += "\nüí° <i>–°–æ–≤–µ—Ç: –ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª –∑–∞ 499‚ÇΩ –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è 19, 20, 25!</i>"
            elif total_price > 999:
                text += "\nüí° <i>–°–æ–≤–µ—Ç: ¬´–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø¬ª –∑–∞ 999‚ÇΩ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏!</i>"
    else:
        text += "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å</i>\n"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if selected:
        nav_buttons.append(
            InlineKeyboardButton(
                f"‚úÖ –î–∞–ª–µ–µ (–≤—ã–±—Ä–∞–Ω–æ: {len(selected)})",
                callback_data="proceed_with_modules"
            )
        )
    
    keyboard.append(nav_buttons)
    keyboard.append([
        InlineKeyboardButton("üéØ –ü–∞–∫–µ—Ç ¬´–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å¬ª - 499‚ÇΩ", callback_data="pay_package_second")
    ])
    keyboard.append([
        InlineKeyboardButton("üëë –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - 999‚ÇΩ", callback_data="pay_package_full")
    ])
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_MODULES

@safe_handler()
async def toggle_module_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è."""
    query = update.callback_query
    
    module_id = query.data.replace("toggle_", "")
    
    if 'selected_modules' not in context.user_data:
        context.user_data['selected_modules'] = []
    
    selected = context.user_data['selected_modules']
    
    if module_id in selected:
        selected.remove(module_id)
        await query.answer(f"‚ùå –ú–æ–¥—É–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    else:
        selected.append(module_id)
        module = MODULE_PLANS[module_id]
        await query.answer(f"‚úÖ {module['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    return await show_individual_modules(update, context)

@safe_handler()
async def show_module_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ."""
    query = update.callback_query
    
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º module_id –∏–∑ callback_data
    module_id = query.data.replace("info_", "")
    
    # –ò—â–µ–º –º–æ–¥—É–ª—å –≤ MODULE_PLANS
    module = MODULE_PLANS.get(module_id)
    
    if not module:
        await query.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return CHOOSING_MODULES
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    info_lines = []
    info_lines.append(f"üìö <b>{module['name']}</b>\n")
    info_lines.append(f"<i>{module.get('description', '')}</i>\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'detailed_description' in module:
        info_lines.append("\n<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>")
        for item in module.get('detailed_description', []):
            info_lines.append(f"{item}")
    
    info_lines.append(f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {module['price_rub']}‚ÇΩ/–º–µ—Å—è—Ü")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    full_text = "\n".join(info_lines)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_module_selection")
    ]]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
    try:
        await query.edit_message_text(
            full_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º alert
        alert_text = full_text.replace("<b>", "").replace("</b>", "").replace("<i>", "").replace("</i>", "")
        await query.answer(alert_text[:200], show_alert=True)
    
    return CHOOSING_MODULES

@safe_handler()
async def back_to_module_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª–µ–π –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ."""
    # –í—ã–∑—ã–≤–∞–µ–º show_individual_modules –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    return await show_individual_modules(update, context)
    
# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏:

@safe_handler()
async def proceed_with_selected_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏."""
    query = update.callback_query
    
    selected = context.user_data.get('selected_modules', [])
    
    if not selected:
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å", show_alert=True)
        return CHOOSING_MODULES
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    total_price = sum(MODULE_PLANS[m]['price_rub'] for m in selected)
    module_names = [MODULE_PLANS[m]['name'] for m in selected]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ custom –ø–ª–∞–Ω
    custom_plan_id = f"custom_{'_'.join([m.replace('module_', '') for m in selected])}"
    
    context.user_data['selected_plan'] = custom_plan_id
    context.user_data['custom_plan'] = {
        'name': f"–ö–æ–º–ø–ª–µ–∫—Ç: {', '.join(module_names)}",
        'price_rub': total_price,
        'modules': [m.replace('module_', '') for m in selected],
        'type': 'custom',
        'duration_days': 30
    }
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return await show_duration_options(update, context)

@safe_handler()
async def show_duration_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    context.user_data['in_payment_process'] = True
    
    plan_id = context.user_data['selected_plan']
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º custom –ø–ª–∞–Ω
    if plan_id.startswith('custom_'):
        plan = context.user_data.get('custom_plan')
        if not plan:
            logger.error(f"Custom plan data not found for {plan_id}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return ConversationHandler.END
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏—â–µ–º –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö
        plan = MODULE_PLANS.get(plan_id)
        if not plan:
            plan = SUBSCRIPTION_PLANS.get(plan_id)
        
        if not plan:
            logger.error(f"Plan not found in show_duration_options: {plan_id}")
            logger.error(f"Available MODULE_PLANS: {list(MODULE_PLANS.keys())}")
            logger.error(f"Available SUBSCRIPTION_PLANS: {list(SUBSCRIPTION_PLANS.keys())}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
    
    text = f"<b>{plan['name']}</b>\n\n"
    text += "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    keyboard = []
    base_price = plan['price_rub']
    
    for months, discount_info in DURATION_DISCOUNTS.items():
        multiplier = discount_info['multiplier']
        label = discount_info['label']
        total_price = int(base_price * multiplier)
        
        if months > 1:
            saved = (base_price * months) - total_price
            button_text = f"{label} - {total_price}‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è {saved}‚ÇΩ)"
        else:
            button_text = f"{label} - {total_price}‚ÇΩ"
        
        keyboard.append([
            InlineKeyboardButton(button_text, callback_data=f"duration_{months}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞–Ω–∞
    if plan_id.startswith('custom_'):
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª–µ–π", callback_data="back_to_modules")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_plans")
        ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_DURATION


@safe_handler()
async def handle_duration_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    context.user_data['in_payment_process'] = True
    
    if query.data == "back_to_modules":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª–µ–π
        return await show_individual_modules(update, context)
    elif query.data == "back_to_plans":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–æ–≤
        return await show_modular_interface(update, context)
    
    months = int(query.data.replace("duration_", ""))
    context.user_data['duration_months'] = months
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
    return await request_email(update, context)


@safe_handler()
async def request_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    plan_id = context.user_data.get('selected_plan')
    duration = context.user_data.get('duration_months', 1)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ custom –ø–ª–∞–Ω–æ–≤
    if plan_id.startswith('custom_'):
        plan = context.user_data.get('custom_plan')
        if not plan:
            logger.error(f"Custom plan data not found in request_email for {plan_id}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return ConversationHandler.END
    else:
        plan = MODULE_PLANS.get(plan_id)
        if not plan:
            plan = SUBSCRIPTION_PLANS.get(plan_id)
        
        if not plan:
            logger.error(f"Plan not found in request_email: {plan_id}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if context.user_data.get('is_trial'):
        text = f"""üìù <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</b>

–ü–ª–∞–Ω: {plan['name']}
–°—Ä–æ–∫: 7 –¥–Ω–µ–π
–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 ‚ÇΩ

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"""
    else:
        # –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–æ–≤
        text = f"""üìù <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–ü–ª–∞–Ω: {plan['name']}"""
        
        if SUBSCRIPTION_MODE == 'modular' and duration > 1:
            discount_info = DURATION_DISCOUNTS.get(duration, {})
            text += f"\n–°—Ä–æ–∫: {discount_info.get('label', f'{duration} –º–µ—Å.')}"
        else:
            text += f"\n–°—Ä–æ–∫: {duration} –º–µ—Å."
        
        text += f"\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
    
    await query.edit_message_text(text, parse_mode=ParseMode.HTML)
    return ENTERING_EMAIL

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è payment/handlers.py

# 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ request_email
@safe_handler()
async def request_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    plan_id = context.user_data.get('selected_plan')
    duration = context.user_data.get('duration_months', 1)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ custom –ø–ª–∞–Ω–æ–≤
    if plan_id.startswith('custom_'):
        plan = context.user_data.get('custom_plan')
        if not plan:
            logger.error(f"Custom plan data not found in request_email for {plan_id}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return ConversationHandler.END
    else:
        plan = MODULE_PLANS.get(plan_id)
        if not plan:
            plan = SUBSCRIPTION_PLANS.get(plan_id)
        
        if not plan:
            logger.error(f"Plan not found in request_email: {plan_id}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if context.user_data.get('is_trial'):
        text = f"""üìù <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</b>

–ü–ª–∞–Ω: {plan['name']}
–°—Ä–æ–∫: 7 –¥–Ω–µ–π
–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 ‚ÇΩ

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"""
    else:
        # –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–æ–≤
        text = f"""üìù <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–ü–ª–∞–Ω: {plan['name']}"""
        
        if SUBSCRIPTION_MODE == 'modular' and duration > 1:
            discount_info = DURATION_DISCOUNTS.get(duration, {})
            text += f"\n–°—Ä–æ–∫: {discount_info.get('label', f'{duration} –º–µ—Å.')}"
        else:
            text += f"\n–°—Ä–æ–∫: {duration} –º–µ—Å."
        
        text += f"\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
    
    await query.edit_message_text(text, parse_mode=ParseMode.HTML)
    return ENTERING_EMAIL


# 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle_email_input
@safe_handler()
async def handle_email_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email."""
    # –í–ê–ñ–ù–û: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    logger.info(f"handle_email_input called for user {update.effective_user.id}")
    logger.info(f"Context data: {list(context.user_data.keys())}")
    
    email = update.message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    import re
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if not re.match(email_pattern, email):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å."
        )
        return ENTERING_EMAIL
    
    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email
    context.user_data['user_email'] = email

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    plan_id = context.user_data.get('selected_plan')
    duration = context.user_data.get('duration_months', 1)
    is_trial = context.user_data.get('is_trial', False)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ custom –ø–ª–∞–Ω–æ–≤
    if plan_id.startswith('custom_'):
        plan = context.user_data.get('custom_plan')
        if not plan:
            logger.error(f"Custom plan data not found in handle_email_input for {plan_id}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return ConversationHandler.END
    else:
        plan = MODULE_PLANS.get(plan_id)
        if not plan:
            plan = SUBSCRIPTION_PLANS.get(plan_id)
        
        if not plan:
            logger.error(f"Plan not found in handle_email_input: {plan_id}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if is_trial:
        text = f"""üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

‚úÖ –ü–ª–∞–Ω: {plan['name']}
üìß Email: {email}
üìÖ –°—Ä–æ–∫: 7 –¥–Ω–µ–π
üí∞ –ö –æ–ø–ª–∞—Ç–µ: 1 ‚ÇΩ

–í—Å–µ –≤–µ—Ä–Ω–æ?"""
    else:
        # –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
        if SUBSCRIPTION_MODE == 'modular' and duration > 1:
            from .config import DURATION_DISCOUNTS
            discount_info = DURATION_DISCOUNTS.get(duration, {})
            
            # –î–ª—è custom –ø–ª–∞–Ω–æ–≤ —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            base_price = plan['price_rub']
            multiplier = discount_info.get('multiplier', duration)
            total_price = int(base_price * multiplier)
            
            text = f"""üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

‚úÖ –ü–ª–∞–Ω: {plan['name']}
üìß Email: {email}
üìÖ –°—Ä–æ–∫: {discount_info.get('label', f'{duration} –º–µ—Å.')}
üí∞ –ö –æ–ø–ª–∞—Ç–µ: {total_price} ‚ÇΩ

–í—Å–µ –≤–µ—Ä–Ω–æ?"""
        else:
            total_price = plan['price_rub'] * duration
            text = f"""üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

‚úÖ –ü–ª–∞–Ω: {plan['name']}
üìß Email: {email}
üìÖ –°—Ä–æ–∫: {duration} –º–µ—Å.
üí∞ –ö –æ–ø–ª–∞—Ç–µ: {total_price} ‚ÇΩ

–í—Å–µ –≤–µ—Ä–Ω–æ?"""

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_payment")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")]
    ]

    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CONFIRMING

@safe_handler()
async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π custom –ø–ª–∞–Ω–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "pay_cancel":
        context.user_data.pop('in_payment_process', None)
        await query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    plan_id = context.user_data['selected_plan']
    duration = context.user_data.get('duration_months', 1)
    email = context.user_data['user_email']
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞–Ω–æ–≤
    if plan_id.startswith('custom_'):
        plan = context.user_data.get('custom_plan')
        if not plan:
            logger.error(f"Custom plan data not found for {plan_id}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.pop('in_payment_process', None)
            return ConversationHandler.END
        # –î–ª—è custom –ø–ª–∞–Ω–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫
        modules_to_activate = plan.get('modules', [])
    else:
        # –ò—â–µ–º –ø–ª–∞–Ω —Å–Ω–∞—á–∞–ª–∞ –≤ MODULE_PLANS, –ø–æ—Ç–æ–º –≤ SUBSCRIPTION_PLANS
        plan = MODULE_PLANS.get(plan_id)
        if not plan:
            plan = SUBSCRIPTION_PLANS.get(plan_id)
        
        if not plan:
            logger.error(f"Plan not found: {plan_id}")
            logger.error(f"Available MODULE_PLANS: {list(MODULE_PLANS.keys())}")
            logger.error(f"Available SUBSCRIPTION_PLANS: {list(SUBSCRIPTION_PLANS.keys())}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            context.user_data.pop('in_payment_process', None)
            return ConversationHandler.END
        
        modules_to_activate = plan.get('modules', [])
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–ª–∞–Ω–∞
    if context.user_data.get('is_trial'):
        # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 1 —Ä—É–±–ª—å
        amount_kopecks = 100
    elif plan_id.startswith('custom_'):
        # Custom –ø–ª–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
        from .config import DURATION_DISCOUNTS
        base_price = plan['price_rub']
        if duration in DURATION_DISCOUNTS:
            multiplier = DURATION_DISCOUNTS[duration]['multiplier']
            total_price = int(base_price * multiplier)
        else:
            total_price = base_price * duration
        amount_kopecks = total_price * 100
    else:
        # –û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω
        from .config import get_plan_price_kopecks
        amount_kopecks = get_plan_price_kopecks(plan_id, duration)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    try:
        tinkoff_payment = TinkoffPayment()
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º order_id —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º sub_ —Å—Ä–∞–∑—É
        order_id = f"sub_{user_id}_{plan_id}_{int(datetime.now().timestamp())}"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ create_payment —Å amount_kopecks
        # create_payment –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (payment_url, order_id)
        try:
            if context.user_data.get('is_trial'):
                payment_url, returned_order_id = await tinkoff_payment.create_payment(
                    amount_kopecks=amount_kopecks,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: amount -> amount_kopecks
                    order_id=order_id,  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π order_id —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º sub_
                    description=f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π",
                    customer_email=email,
                    user_id=user_id,
                    bot_username=context.bot.username  # –ü–µ—Ä–µ–¥–∞–µ–º username –±–æ—Ç–∞
                )
            else:
                payment_url, returned_order_id = await tinkoff_payment.create_payment(
                    amount_kopecks=amount_kopecks,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: amount -> amount_kopecks
                    order_id=order_id,  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π order_id —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º sub_
                    description=f"–ü–æ–¥–ø–∏—Å–∫–∞: {plan['name']} –Ω–∞ {duration} –º–µ—Å.",
                    customer_email=email,
                    user_id=user_id,
                    bot_username=context.bot.username  # –ü–µ—Ä–µ–¥–∞–µ–º username –±–æ—Ç–∞
                )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π order_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—Ç –∂–µ)
            if returned_order_id != order_id:
                logger.warning(f"Order ID mismatch: sent {order_id}, received {returned_order_id}")
                order_id = returned_order_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª API
            
            payment_id = order_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º order_id –∫–∞–∫ payment_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞ save_payment_info –≤–º–µ—Å—Ç–æ save_payment
            await subscription_manager.save_payment_info(
                user_id=user_id,
                order_id=order_id,
                plan_id=plan_id,
                amount=amount_kopecks // 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä—É–±–ª–∏
                email=email,
                modules=modules_to_activate if plan_id.startswith('custom_') else None
            )
            
            # –î–ª—è custom –ø–ª–∞–Ω–æ–≤ –º–æ–¥—É–ª–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ webhook –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            # metadata —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ save_payment_info
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            text = f"""‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!</b>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")]
            ]
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            if PAYMENT_ADMIN_CHAT_ID:
                admin_text = f"""üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:
                
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.mention_html()}
–ü–ª–∞–Ω: {plan['name']}
–°—É–º–º–∞: {amount_kopecks // 100}‚ÇΩ
Email: {email}"""
                
                try:
                    await context.bot.send_message(
                        PAYMENT_ADMIN_CHAT_ID,
                        admin_text,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin: {e}")
                    
        except Exception as payment_error:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            logger.error(f"Payment creation failed: {payment_error}")
            error_msg = str(payment_error)
            
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:\n{error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="subscribe")
                ]])
            )
    
    except Exception as e:
        logger.error(f"Payment creation error: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    context.user_data.pop('in_payment_process', None)
    return ConversationHandler.END

async def cancel_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã."""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END


@safe_handler()
async def cmd_my_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /my_subscriptions - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    if SUBSCRIPTION_MODE == 'modular':
        modules = await subscription_manager.get_user_modules(user_id)
        
        if not modules:
            text = "üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
        else:
            text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n\n"
            module_names = {
                'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
                'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
            }
            for module in modules:
                name = module_names.get(module['module_code'], module['module_code'])
                expires = module['expires_at'].strftime('%d.%m.%Y')
                text += f"{name}\n‚îî –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}\n\n"
            
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π."
    else:
        subscription = await subscription_manager.check_active_subscription(user_id)
        if subscription:
            plan = SUBSCRIPTION_PLANS.get(subscription['plan_id'], {})
            expires = subscription['expires_at'].strftime('%d.%m.%Y')
            text = f"""‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

–ü–ª–∞–Ω: {plan.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞')}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
    
    # –î–û–ë–ê–í–õ–ï–ù–û: –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üîÑ –û—Ñ–æ—Ä–º–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="subscribe")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ]
    
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@safe_handler()
async def handle_my_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback my_subscriptions."""
    query = update.callback_query
    await query.answer()
    
    # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∑–æ–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if query.data == "my_subscriptions" and context.user_data.get('from_menu'):
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –º–µ–Ω—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ
        context.user_data['show_back_to_menu'] = True
    
    user_id = query.from_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    if SUBSCRIPTION_MODE == 'modular':
        modules = await subscription_manager.get_user_modules(user_id)
        
        if not modules:
            text = "üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
        else:
            text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n\n"
            module_names = {
                'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
                'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
            }
            for module in modules:
                name = module_names.get(module['module_code'], module['module_code'])
                expires = module['expires_at'].strftime('%d.%m.%Y')
                text += f"{name}\n‚îî –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}\n\n"
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞
            text += "üìä <b>–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            all_modules = ['test_part', 'task19', 'task20', 'task24', 'task25']
            for module_code in all_modules:
                has_access = await subscription_manager.check_module_access(user_id, module_code)
                status = "‚úÖ" if has_access else "‚ùå"
                module_name = module_names.get(module_code, module_code)
                text += f"   {status} {module_name}\n"
    else:
        subscription = await subscription_manager.check_active_subscription(user_id)
        if subscription:
            plan = SUBSCRIPTION_PLANS.get(subscription['plan_id'], {})
            expires = subscription['expires_at'].strftime('%d.%m.%Y')
            text = f"""‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

–ü–ª–∞–Ω: {plan.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞')}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}"""
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û—Ñ–æ—Ä–º–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="subscribe")]
    ]
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END
    
@safe_handler()
async def handle_back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    context.user_data.pop('in_payment_process', None)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ core
    from core.menu_handlers import handle_to_main_menu
    return await handle_to_main_menu(update, context)

@safe_handler()
async def handle_module_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –º–æ–¥—É–ª—è –∏–∑ callback_data
    module_code = query.data.replace("module_info_", "")
    
    module_info = {
        'test_part': {
            'name': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠',
            'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–Ω–∫—É –∑–∞–¥–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏',
            'features': [
                '‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è 1-16',
                '‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è',
                '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
                '‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏'
            ],
            'price': '149‚ÇΩ/–º–µ—Å'
        },
        'task19': {
            'name': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
            'description': '–ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —è–≤–ª–µ–Ω–∏–π',
            'features': [
                '‚úÖ –ë–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º',
                '‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã',
                '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        },
        'task20': {
            'name': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
            'description': '–¢–µ–∫—Å—Ç —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',
            'features': [
                '‚úÖ –¢–µ–∫—Å—Ç—ã –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º',
                '‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è',
                '‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        },
        'task24': {
            'name': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
            'description': '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞',
            'features': [
                '‚úÖ –ë–∞–∑–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤',
                '‚úÖ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
                '‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                '‚úÖ VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
            ],
            'price': '399‚ÇΩ/–º–µ—Å'
        },
        'task25': {
            'name': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25',
            'description': '–ü–æ–Ω—è—Ç–∏—è –∏ —Ç–µ—Ä–º–∏–Ω—ã',
            'features': [
                '‚úÖ –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –ø–æ–Ω—è—Ç–∏–π',
                '‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
                '‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        }
    }
    
    info = module_info.get(module_code)
    if not info:
        await query.edit_message_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe")
            ]])
        )
        return
    
    text = f"<b>{info['name']}</b>\n\n"
    text += f"{info['description']}\n\n"
    text += "<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>\n"
    for feature in info['features']:
        text += f"{feature}\n"
    text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {info['price']}"
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe")]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def register_payment_handlers(app: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    
    payment_conv = ConversationHandler(
        entry_points=[
            CommandHandler("subscribe", cmd_subscribe),
            CallbackQueryHandler(show_modular_interface, pattern="^subscribe$"),
            CallbackQueryHandler(show_modular_interface, pattern="^subscribe_start$")
        ],
        states={
            CHOOSING_PLAN: [
                CallbackQueryHandler(handle_plan_selection, pattern="^pay_"),
                CallbackQueryHandler(show_individual_modules, pattern="^pay_individual_modules$"),
                CallbackQueryHandler(show_modular_interface, pattern="^back_to_main$")
            ],
            CHOOSING_MODULES: [  # –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
                CallbackQueryHandler(toggle_module_selection, pattern="^toggle_"),
                CallbackQueryHandler(show_module_info, pattern="^info_"),
                CallbackQueryHandler(back_to_module_selection, pattern="^back_to_module_selection$"),
                CallbackQueryHandler(proceed_with_selected_modules, pattern="^proceed_with_modules$"),
                CallbackQueryHandler(handle_plan_selection, pattern="^pay_package_"),
                CallbackQueryHandler(show_modular_interface, pattern="^back_to_main$")
            ],
            CHOOSING_DURATION: [
                CallbackQueryHandler(handle_duration_selection, pattern="^duration_"),
                CallbackQueryHandler(show_individual_modules, pattern="^back_to_modules$"),
                CallbackQueryHandler(show_modular_interface, pattern="^back_to_plans$")
            ],
            ENTERING_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email_input)
            ],
            CONFIRMING: [
                CallbackQueryHandler(handle_payment_confirmation, pattern="^confirm_payment$"),
                CallbackQueryHandler(cmd_subscribe, pattern="^pay_cancel$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_payment),
            CallbackQueryHandler(cancel_payment, pattern="^pay_cancel$")
        ],
        allow_reentry=True
    )
    
    async def my_subscriptions_standalone(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ my_subscriptions."""
        await handle_my_subscriptions(update, context)
        return ConversationHandler.END
    
    app.add_handler(
        CallbackQueryHandler(
            my_subscriptions_standalone, 
            pattern="^my_subscriptions$"
        ), 
        group=-45  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ —á–µ–º —É –æ–±—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–æ –Ω–∏–∂–µ —á–µ–º —É ConversationHandler
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è main_menu –∏–∑ payment
    async def payment_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ payment."""
        from core.menu_handlers import handle_to_main_menu
        await handle_to_main_menu(update, context)
        return ConversationHandler.END
    
    app.add_handler(
        CallbackQueryHandler(
            payment_to_main_menu,
            pattern="^(main_menu|to_main_menu)$"
        ),
        group=-45
    )
    
    app.add_handler(payment_conv, group=-50)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–∂–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    app.add_handler(CommandHandler("my_subscriptions", cmd_my_subscriptions), group=-50)
    app.add_handler(CallbackQueryHandler(handle_my_subscriptions, pattern="^my_subscriptions$"), group=-50)
    app.add_handler(
        CallbackQueryHandler(handle_back_to_main_menu, pattern="^back_to_main$"), 
        group=-49  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á—É—Ç—å –Ω–∏–∂–µ, —á—Ç–æ–±—ã ConversationHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø–µ—Ä–≤—ã–º
    )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª—è—Ö
    app.add_handler(CommandHandler("debug_subscription", cmd_debug_subscription), group=-50)
    
    logger.info("Payment handlers registered with priority")
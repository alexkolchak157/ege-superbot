# payment/handlers.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏."""
import logging
from datetime import datetime
from typing import Optional

from telegram import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    Update,
    WebAppInfo
)
from telegram.constants import ParseMode
from telegram.ext import (
    ContextTypes, 
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

from core import db, states
from core.error_handler import safe_handler
from core.utils import safe_edit_message

from .config import SUBSCRIPTION_PLANS, PAYMENT_ADMIN_CHAT_ID
from .subscription_manager import SubscriptionManager
from .tinkoff import TinkoffPayment

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
PAYMENT_CHOOSING_PLAN = "payment_choosing_plan"
PAYMENT_ENTERING_EMAIL = "payment_entering_email"
PAYMENT_CONFIRMING = "payment_confirming"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
subscription_manager = SubscriptionManager()
tinkoff_payment = TinkoffPayment()


@safe_handler()
async def cmd_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await subscription_manager.check_active_subscription(user_id)
    
    if subscription:
        expires = subscription['expires_at'].strftime('%d.%m.%Y')
        text = f"""‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

–ü–ª–∞–Ω: {SUBSCRIPTION_PLANS[subscription['plan_id']]['name']}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
    text = "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    keyboard = []
    for plan_id, plan in SUBSCRIPTION_PLANS.items():
        text += f"<b>{plan['name']}</b>\n"
        text += f"üí∞ {plan['price_rub']} ‚ÇΩ\n"
        text += f"üìù {plan['description']}\n"
        for feature in plan['features']:
            text += f"  {feature}\n"
        text += "\n"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{plan['name']} - {plan['price_rub']} ‚ÇΩ",
                callback_data=f"pay_plan_{plan_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")
    ])
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return PAYMENT_CHOOSING_PLAN


@safe_handler()
async def handle_plan_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    
    if query.data == "pay_cancel":
        await query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    plan_id = query.data.replace("pay_plan_", "")
    if plan_id not in SUBSCRIPTION_PLANS:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return PAYMENT_CHOOSING_PLAN
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    context.user_data['selected_plan'] = plan_id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –¥–ª—è —á–µ–∫–∞
    plan = SUBSCRIPTION_PLANS[plan_id]
    text = f"""–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{plan['name']}</b>
–°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price_rub']} ‚ÇΩ

üìß <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:</b>
(–ù–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru)"""
    
    keyboard = [[
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")
    ]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return PAYMENT_ENTERING_EMAIL


@safe_handler()
async def handle_email_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email."""
    if update.callback_query and update.callback_query.data == "pay_cancel":
        await update.callback_query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    email = update.message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    if "@" not in email or "." not in email:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ü—Ä–∏–º–µ—Ä: example@mail.ru"
        )
        return PAYMENT_ENTERING_EMAIL
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    context.user_data['user_email'] = email
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    plan_id = context.user_data['selected_plan']
    plan = SUBSCRIPTION_PLANS[plan_id]
    
    text = f"""<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>

üì¶ –¢–æ–≤–∞—Ä: {plan['name']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price_rub']} ‚ÇΩ
üìß Email: {email}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="pay_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")]
    ]
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return PAYMENT_CONFIRMING


@safe_handler()
async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞."""
    query = update.callback_query
    
    if query.data == "pay_cancel":
        await query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    await query.edit_message_text("‚è≥ –°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂...")
    
    user_id = query.from_user.id
    plan_id = context.user_data['selected_plan']
    email = context.user_data['user_email']
    plan = SUBSCRIPTION_PLANS[plan_id]
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        from .config import get_plan_price_kopecks
        amount_kopecks = get_plan_price_kopecks(plan_id)
        
        payment_data = await subscription_manager.create_payment(
            user_id=user_id,
            plan_id=plan_id,
            amount_kopecks=amount_kopecks
        )
        
        # 2. –°–æ–∑–¥–∞–µ–º —á–µ–∫
        receipt_items = [
            tinkoff_payment.build_receipt_item(
                name=plan['description'],
                price_kopecks=amount_kopecks
            )
        ]
        
        # 3. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Tinkoff
        result = await tinkoff_payment.init_payment(
            order_id=payment_data['order_id'],
            amount_kopecks=amount_kopecks,
            description=plan['description'],
            user_email=email,
            receipt_items=receipt_items,
            user_data={
                "user_id": str(user_id),
                "plan_id": plan_id
            }
        )
        
        if result['success']:
            # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂
            text = f"""‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!</b>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

üí° –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:
{result['payment_url']}"""
            
            keyboard = [[
                InlineKeyboardButton(
                    "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                    url=result['payment_url']
                )
            ]]
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            if PAYMENT_ADMIN_CHAT_ID:
                admin_text = f"""üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:
                
User: {query.from_user.id} (@{query.from_user.username or 'no_username'})
–ü–ª–∞–Ω: {plan['name']}
–°—É–º–º–∞: {plan['price_rub']} ‚ÇΩ
Order ID: {payment_data['order_id']}"""
                
                try:
                    await context.bot.send_message(
                        PAYMENT_ADMIN_CHAT_ID,
                        admin_text
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin: {e}")
            
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            error_text = f"""‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>

{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
            
            await query.edit_message_text(
                error_text,
                parse_mode=ParseMode.HTML
            )
        
    except Exception as e:
        logger.exception(f"Error creating payment: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
    
    return ConversationHandler.END


@safe_handler()
async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    user_status = await db.get_or_create_user_status(user_id)
    subscription = await subscription_manager.check_active_subscription(user_id)
    
    if subscription:
        plan = SUBSCRIPTION_PLANS[subscription['plan_id']]
        expires = subscription['expires_at'].strftime('%d.%m.%Y %H:%M')
        days_left = (subscription['expires_at'] - datetime.now(subscription['expires_at'].tzinfo)).days
        
        text = f"""‚úÖ <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>

üìã –ü–ª–∞–Ω: {plan['name']}
üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expires}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {user_status['monthly_usage_count']}"""
        
    else:
        text = f"""‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {user_status['monthly_usage_count']} / 50

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    payments = await subscription_manager.get_user_payment_history(user_id)
    if payments:
        text += "\n\nüí∏ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n"
        for p in payments[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
            status_emoji = "‚úÖ" if p['status'] == 'confirmed' else "‚è≥"
            date = datetime.fromisoformat(p['created_at']).strftime('%d.%m.%Y')
            text += f"{status_emoji} {date} - {p['amount_kopecks'] // 100} ‚ÇΩ\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)


def register_payment_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
    
    # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    payment_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("subscribe", cmd_subscribe),
            CallbackQueryHandler(cmd_subscribe, pattern="^to_subscription$")
        ],
        states={
            PAYMENT_CHOOSING_PLAN: [
                CallbackQueryHandler(handle_plan_selection, pattern="^pay_")
            ],
            PAYMENT_ENTERING_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email_input),
                CallbackQueryHandler(handle_email_input, pattern="^pay_cancel$")
            ],
            PAYMENT_CONFIRMING: [
                CallbackQueryHandler(handle_payment_confirmation, pattern="^pay_")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda u, c: ConversationHandler.END),
            CallbackQueryHandler(
                lambda u, c: ConversationHandler.END, 
                pattern="^pay_cancel$"
            )
        ],
        name="payment_conversation",
        persistent=True
    )
    
    app.add_handler(payment_conv_handler)
    app.add_handler(CommandHandler("status", cmd_status))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–¥–ø–∏—Å–∫–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
    app.add_handler(
        CallbackQueryHandler(cmd_subscribe, pattern="^to_subscription$"),
        group=1
    )
# payment/handlers.py - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–¥—É–ª–µ–π
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ (–º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
import logging
from datetime import datetime
from typing import Optional

from telegram import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ContextTypes, 
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

from core.error_handler import safe_handler
from .config import (
    SUBSCRIPTION_PLANS, 
    SUBSCRIPTION_MODE,
    DURATION_DISCOUNTS,
    MODULE_PLANS,
    PAYMENT_ADMIN_CHAT_ID
)
from .subscription_manager import SubscriptionManager
from .tinkoff import TinkoffPayment

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
CHOOSING_PLAN = "choosing_plan"
CHOOSING_DURATION = "choosing_duration"  
ENTERING_EMAIL = "entering_email"
CONFIRMING = "confirming"

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ middleware
PAYMENT_STATES = [CHOOSING_PLAN, CHOOSING_DURATION, ENTERING_EMAIL, CONFIRMING]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
subscription_manager = SubscriptionManager()
tinkoff_payment = TinkoffPayment()


@safe_handler()
async def cmd_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å message (–∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ /subscribe)
    if not update.message:
        logger.warning("cmd_subscribe called without message")
        return ConversationHandler.END
    
    if SUBSCRIPTION_MODE == 'modular':
        return await show_modular_interface(update, context)
    else:
        return await show_unified_plans(update, context)


async def show_unified_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –µ–¥–∏–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await subscription_manager.check_active_subscription(user_id)
    
    if subscription:
        expires = subscription['expires_at'].strftime('%d.%m.%Y')
        text = f"""‚úÖ <b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

–ü–ª–∞–Ω: {SUBSCRIPTION_PLANS[subscription['plan_id']]['name']}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if update.message:
            await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(text, parse_mode=ParseMode.HTML)
        
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
    text = "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    keyboard = []
    for plan_id, plan in SUBSCRIPTION_PLANS.items():
        text += f"<b>{plan['name']}</b>\n"
        text += f"üí∞ {plan['price_rub']} ‚ÇΩ\n"
        text += f"üìù {plan['description']}\n"
        for feature in plan.get('features', []):
            text += f"  {feature}\n"
        text += "\n"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{plan['name']} - {plan['price_rub']} ‚ÇΩ",
                callback_data=f"pay_plan_{plan_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if update.message:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        try:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception:
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    return CHOOSING_PLAN


async def show_modular_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–ø–∏—Å–æ–∫."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    has_trial = await subscription_manager.has_used_trial(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    active_modules = await subscription_manager.get_user_modules(user_id)
    
    text = "üíé <b>–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
    
    if active_modules:
        text += "‚úÖ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
        module_names = {
            'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
            'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
            'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
            'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
            'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
        }
        for module in active_modules:
            name = module_names.get(module['module_code'], module['module_code'])
            expires = module['expires_at'].strftime('%d.%m.%Y')
            text += f"‚Ä¢ {name} (–¥–æ {expires})\n"
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –º–æ–¥—É–ª—å:\n\n"
    
    keyboard = []
    
    # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if not has_trial:
        keyboard.append([
            InlineKeyboardButton(
                "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 1‚ÇΩ (7 –¥–Ω–µ–π)",
                callback_data="pay_trial"
            )
        ])
    
    # –ü–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton(
            "üëë –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - 999‚ÇΩ/–º–µ—Å",
            callback_data="pay_package_full"
        )],
        [InlineKeyboardButton(
            "üéØ –ü–∞–∫–µ—Ç '–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å' - 499‚ÇΩ/–º–µ—Å",
            callback_data="pay_package_second_part"
        )],
        [InlineKeyboardButton(
            "üìö –í—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏",
            callback_data="pay_individual_modules"
        )]
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤ - –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏–∑ callback
    if update.message:
        # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    elif update.callback_query:
        # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫–∏
        query = update.callback_query
        await query.answer()
        try:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    return CHOOSING_PLAN


@safe_handler()
async def handle_plan_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    if query.data == "pay_cancel":
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        context.user_data.pop('in_payment_process', None)
        await query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    if SUBSCRIPTION_MODE == 'modular':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        if query.data == "pay_individual_modules":
            return await show_individual_modules(update, context)
        elif query.data == "pay_trial":
            # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            context.user_data['selected_plan'] = 'trial_7days'
            context.user_data['duration_months'] = 0
            context.user_data['is_trial'] = True  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥
            return await request_email(update, context)
        elif query.data.startswith("pay_package_"):
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É package_second -> package_second_part
            package_name = query.data.replace("pay_package_", "")
            if package_name == "second":
                package = "package_second_part"
            else:
                package = f"package_{package_name}"
            context.user_data['selected_plan'] = package
            return await show_duration_options(update, context)
        elif query.data.startswith("pay_module_"):
            module = query.data.replace("pay_", "")
            context.user_data['selected_plan'] = module
            return await show_duration_options(update, context)
    
    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –µ–¥–∏–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    plan_id = query.data.replace("pay_plan_", "")
    
    if plan_id not in SUBSCRIPTION_PLANS:
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.user_data.pop('in_payment_process', None)
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏.")
        return ConversationHandler.END
    
    context.user_data['selected_plan'] = plan_id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
    return await request_email(update, context)


async def show_individual_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
    query = update.callback_query
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:</b>\n\n"
    
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ —Ç–∏–ø–∞–º
    individual_modules = {
        k: v for k, v in MODULE_PLANS.items() 
        if v.get('type') == 'individual'
    }
    
    for module_id, module in individual_modules.items():
        text += f"<b>{module['name']}</b>\n"
        text += f"üí∞ {module['price_rub']}‚ÇΩ/–º–µ—Å—è—Ü\n"
        text += f"üìù {module['description']}\n\n"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{module['name']} - {module['price_rub']}‚ÇΩ",
                callback_data=f"pay_{module_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_PLAN


async def show_duration_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    plan_id = context.user_data['selected_plan']
    plan = MODULE_PLANS.get(plan_id, SUBSCRIPTION_PLANS.get(plan_id))
    
    text = f"<b>{plan['name']}</b>\n\n"
    text += "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    keyboard = []
    base_price = plan['price_rub']
    
    for months, discount_info in DURATION_DISCOUNTS.items():
        multiplier = discount_info['multiplier']
        label = discount_info['label']
        total_price = int(base_price * multiplier)
        
        if months > 1:
            saved = (base_price * months) - total_price
            button_text = f"{label} - {total_price}‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è {saved}‚ÇΩ)"
        else:
            button_text = f"{label} - {total_price}‚ÇΩ"
        
        keyboard.append([
            InlineKeyboardButton(
                button_text,
                callback_data=f"duration_{months}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_plans")
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_DURATION


@safe_handler()
async def handle_duration_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –í–ê–ñ–ù–û: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    if query.data == "back_to_plans":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–æ–≤
        return await show_modular_interface(update, context)
    
    months = int(query.data.replace("duration_", ""))
    context.user_data['duration_months'] = months
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
    return await request_email(update, context)


async def request_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    
    # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    text = """üìß <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è —á–µ–∫–∞:</b>

Email –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —á–µ–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ 54-–§–ó.
–ú—ã –Ω–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫."""
    
    await query.edit_message_text(text, parse_mode=ParseMode.HTML)
    return ENTERING_EMAIL

@safe_handler()
async def handle_email_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email."""
    # –í–ê–ñ–ù–û: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    context.user_data['in_payment_process'] = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    logger.info(f"handle_email_input called for user {update.effective_user.id}")
    logger.info(f"Context data: {list(context.user_data.keys())}")
    
    email = update.message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    import re
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if not re.match(email_pattern, email):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å."
        )
        return ENTERING_EMAIL
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    context.user_data['user_email'] = email
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    plan_id = context.user_data.get('selected_plan')
    plan = MODULE_PLANS.get(plan_id, SUBSCRIPTION_PLANS.get(plan_id))
    
    if not plan:
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.user_data.pop('in_payment_process', None)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    duration = context.user_data.get('duration_months', 1)
    
    if SUBSCRIPTION_MODE == 'modular' and duration > 1:
        from .config import DURATION_DISCOUNTS
        multiplier = DURATION_DISCOUNTS.get(duration, {}).get('multiplier', duration)
        total_price = int(plan['price_rub'] * multiplier)
    else:
        total_price = plan['price_rub'] * duration
    
    text = f"""üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

üì¶ –ü–ª–∞–Ω: {plan['name']}
üìß Email: {email}
‚è± –°—Ä–æ–∫: {duration} –º–µ—Å.
üí∞ –ö –æ–ø–ª–∞—Ç–µ: {total_price} ‚ÇΩ

–í—Å–µ –≤–µ—Ä–Ω–æ?"""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_payment")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pay_cancel")]
    ]
    
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIRMING


@safe_handler()
async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "pay_cancel":
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        context.user_data.pop('in_payment_process', None)
        await query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    await query.edit_message_text("‚è≥ –°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂...")
    
    user_id = query.from_user.id
    plan_id = context.user_data.get('selected_plan')
    email = context.user_data.get('user_email', f"user{user_id}@example.com")
    duration = context.user_data.get('duration_months', 1)
    
    plan = MODULE_PLANS.get(plan_id, SUBSCRIPTION_PLANS.get(plan_id))
    if not plan:
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.user_data.pop('in_payment_process', None)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        if SUBSCRIPTION_MODE == 'modular' and duration > 1:
            from .config import DURATION_DISCOUNTS, get_plan_price_kopecks
            amount_kopecks = get_plan_price_kopecks(plan_id, duration)
        else:
            amount_kopecks = plan['price_rub'] * duration * 100
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_data = await subscription_manager.create_payment(
            user_id=user_id,
            plan_id=plan_id,
            amount_kopecks=amount_kopecks
        )
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫ –¥–ª—è Tinkoff
        receipt_items = [{
            "Name": plan['description'],
            "Price": amount_kopecks,
            "Quantity": 1,
            "Amount": amount_kopecks,
            "Tax": "none",
            "PaymentMethod": "advance",
            "PaymentObject": "service"
        }]
        
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Tinkoff
        result = await tinkoff_payment.init_payment(
            order_id=payment_data['order_id'],
            amount_kopecks=amount_kopecks,
            description=plan['description'],
            user_email=email,
            receipt_items=receipt_items,
            user_data={
                "user_id": str(user_id),
                "plan_id": plan_id,
                "duration_months": str(duration)
            }
        )
        
        if result['success']:
            # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂
            text = f"""‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!</b>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–°—É–º–º–∞: {amount_kopecks // 100} ‚ÇΩ"""
            
            keyboard = [[
                InlineKeyboardButton(
                    "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                    url=result['payment_url']
                )
            ]]
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            context.user_data.pop('in_payment_process', None)
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            context.user_data.pop('in_payment_process', None)
            
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:\n{error}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Error creating payment: {e}")
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.user_data.pop('in_payment_process', None)
        
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return ConversationHandler.END


async def cancel_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã."""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END


@safe_handler()
async def cmd_my_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /my_subscriptions - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = update.effective_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    if SUBSCRIPTION_MODE == 'modular':
        modules = await subscription_manager.get_user_modules(user_id)
        
        if not modules:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
        else:
            text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n\n"
            module_names = {
                'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
                'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25',
                'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24 (–ü—Ä–µ–º–∏—É–º)'
            }
            for module in modules:
                name = module_names.get(module['module_code'], module['module_code'])
                expires = module['expires_at'].strftime('%d.%m.%Y')
                text += f"{name}\n‚îî –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}\n\n"
            
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π."
    else:
        subscription = await subscription_manager.check_active_subscription(user_id)
        if subscription:
            plan = SUBSCRIPTION_PLANS.get(subscription['plan_id'], {})
            expires = subscription['expires_at'].strftime('%d.%m.%Y')
            text = f"""‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

–ü–ª–∞–Ω: {plan.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞')}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
    
    keyboard = [[InlineKeyboardButton("üîÑ –û—Ñ–æ—Ä–º–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="subscribe")]]
    
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


@safe_handler()
async def handle_my_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback my_subscriptions."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–µ
    user_id = query.from_user.id
    subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
    
    if SUBSCRIPTION_MODE == 'modular':
        modules = await subscription_manager.get_user_modules(user_id)
        
        if not modules:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
        else:
            text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n\n"
            module_names = {
                'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
                'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
            }
            for module in modules:
                name = module_names.get(module['module_code'], module['module_code'])
                expires = module['expires_at'].strftime('%d.%m.%Y')
                text += f"{name}\n‚îî –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}\n\n"
    else:
        subscription = await subscription_manager.check_active_subscription(user_id)
        if subscription:
            plan = SUBSCRIPTION_PLANS.get(subscription['plan_id'], {})
            expires = subscription['expires_at'].strftime('%d.%m.%Y')
            text = f"""‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

–ü–ª–∞–Ω: {plan.get('name', '–ü–æ–¥–ø–∏—Å–∫–∞')}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}"""
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û—Ñ–æ—Ä–º–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="subscribe")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@safe_handler()
async def handle_module_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –º–æ–¥—É–ª—è –∏–∑ callback_data
    module_code = query.data.replace("module_info_", "")
    
    module_info = {
        'test_part': {
            'name': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠',
            'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–Ω–∫—É –∑–∞–¥–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏',
            'features': [
                '‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è 1-16',
                '‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è',
                '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
                '‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏'
            ],
            'price': '149‚ÇΩ/–º–µ—Å'
        },
        'task19': {
            'name': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
            'description': '–ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —è–≤–ª–µ–Ω–∏–π',
            'features': [
                '‚úÖ –ë–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º',
                '‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã',
                '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        },
        'task20': {
            'name': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
            'description': '–¢–µ–∫—Å—Ç —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',
            'features': [
                '‚úÖ –¢–µ–∫—Å—Ç—ã –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º',
                '‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è',
                '‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        },
        'task24': {
            'name': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24 (–ü—Ä–µ–º–∏—É–º)',
            'description': '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞',
            'features': [
                '‚úÖ –ë–∞–∑–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤',
                '‚úÖ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
                '‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                '‚úÖ VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
            ],
            'price': '399‚ÇΩ/–º–µ—Å'
        },
        'task25': {
            'name': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25',
            'description': '–ü–æ–Ω—è—Ç–∏—è –∏ —Ç–µ—Ä–º–∏–Ω—ã',
            'features': [
                '‚úÖ –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –ø–æ–Ω—è—Ç–∏–π',
                '‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
                '‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å'
            ],
            'price': '199‚ÇΩ/–º–µ—Å'
        }
    }
    
    info = module_info.get(module_code)
    if not info:
        await query.edit_message_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe")
            ]])
        )
        return
    
    text = f"<b>{info['name']}</b>\n\n"
    text += f"{info['description']}\n\n"
    text += "<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>\n"
    for feature in info['features']:
        text += f"{feature}\n"
    text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {info['price']}"
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe")]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def register_payment_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    
    # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    payment_conv = ConversationHandler(
        entry_points=[
            CommandHandler("subscribe", cmd_subscribe),
            CallbackQueryHandler(show_modular_interface, pattern="^subscribe$"),
            CallbackQueryHandler(show_modular_interface, pattern="^subscribe_start$")
        ],
        states={
            CHOOSING_PLAN: [
                CallbackQueryHandler(handle_plan_selection, pattern="^pay_"),
                CallbackQueryHandler(show_individual_modules, pattern="^pay_individual_modules$"),
                CallbackQueryHandler(show_modular_interface, pattern="^back_to_main$")
            ],
            CHOOSING_DURATION: [
                CallbackQueryHandler(handle_duration_selection, pattern="^duration_"),
                CallbackQueryHandler(show_modular_interface, pattern="^back_to_plans$")
            ],
            ENTERING_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email_input)
            ],
            CONFIRMING: [
                CallbackQueryHandler(handle_payment_confirmation, pattern="^confirm_payment$"),
                CallbackQueryHandler(cmd_subscribe, pattern="^pay_cancel$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_payment),
            CallbackQueryHandler(cancel_payment, pattern="^pay_cancel$")
        ],
        allow_reentry=True
    )
    
    # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º -50, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –î–û middleware (-100)
    app.add_handler(payment_conv, group=-50)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–∂–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    app.add_handler(CommandHandler("my_subscriptions", cmd_my_subscriptions), group=-50)
    app.add_handler(CallbackQueryHandler(handle_my_subscriptions, pattern="^my_subscriptions$"), group=-50)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª—è—Ö
    app.add_handler(CallbackQueryHandler(handle_module_info, pattern="^module_info_"), group=-50)
    
    logger.info("Payment handlers registered with priority")
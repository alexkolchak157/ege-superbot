import logging
import random
from datetime import datetime
from core.state_validator import validate_state_transition, state_validator
import aiosqlite
import os
import csv
import io
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Message
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from core.plugin_loader import build_main_menu
from core import db, states
from core.admin_tools import admin_manager
from core.config import DATABASE_FILE, REQUIRED_CHANNEL
from core.ui_helpers import (create_visual_progress, get_motivational_message,
                             get_personalized_greeting,
                             show_streak_notification, show_thinking_animation)
from core.universal_ui import (AdaptiveKeyboards, MessageFormatter,
                               UniversalUIComponents)
from core.error_handler import safe_handler, auto_answer_callback
from core.utils import check_subscription, send_subscription_required
from . import keyboards, utils
from .loader import AVAILABLE_BLOCKS, QUESTIONS_DATA, QUESTIONS_DICT_FLAT

try:
    from .topic_data import TOPIC_NAMES
except ImportError:
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TOPIC_NAMES –∏–∑ topic_data.py")
    TOPIC_NAMES = {}

try:
    from .cache import questions_cache
except ImportError:
    logging.warning("–ú–æ–¥—É–ª—å cache –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    questions_cache = None

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ (–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏):
def safe_cache_get_by_exam_num(exam_number):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠."""
    if questions_cache:
        return questions_cache.get_by_exam_num(exam_number)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_with_num = []
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                if question.get("exam_number") == exam_number:
                    questions_with_num.append(question)
    return questions_with_num

def safe_cache_get_by_topic(topic):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ."""
    if questions_cache:
        return questions_cache.get_by_topic(topic)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_in_topic = []
    for block_data in QUESTIONS_DATA.values():
        for topic_name, topic_questions in block_data.items():
            if topic_name == topic:
                questions_in_topic.extend(topic_questions)
    return questions_in_topic

def safe_cache_get_by_block(block):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª–æ–∫—É."""
    if questions_cache:
        return questions_cache.get_by_block(block)
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    questions_in_block = []
    for topic_questions in QUESTIONS_DATA.get(block, {}).values():
        questions_in_block.extend(topic_questions)
    return questions_in_block

def safe_cache_get_all_exam_numbers():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –ï–ì–≠."""
    if questions_cache:
        return questions_cache.get_all_exam_numbers()
    
    # Fallback —á–µ—Ä–µ–∑ QUESTIONS_DATA
    exam_numbers = set()
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            for question in topic_questions:
                exam_num = question.get("exam_number")
                if isinstance(exam_num, int):
                    exam_numbers.add(exam_num)
    return sorted(list(exam_numbers))

def init_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    global QUESTIONS_DATA, AVAILABLE_BLOCKS, QUESTIONS_LIST
    try:
        from .loader import get_questions_data, get_questions_list_flat, get_available_blocks
        
        QUESTIONS_DATA = get_questions_data()
        if QUESTIONS_DATA:
            AVAILABLE_BLOCKS = get_available_blocks()
            QUESTIONS_LIST = get_questions_list_flat() or []
            logger.info(f"Loaded {len(AVAILABLE_BLOCKS)} blocks with questions")
            logger.info(f"Total questions: {len(QUESTIONS_LIST)}")
        else:
            logger.warning("get_questions_data() returned None or empty")
            QUESTIONS_DATA = {}
            AVAILABLE_BLOCKS = []
            QUESTIONS_LIST = []
            
    except ImportError as e:
        logger.error(f"Import error loading questions data: {e}")
        QUESTIONS_DATA = {}
        AVAILABLE_BLOCKS = []
        QUESTIONS_LIST = []
    except Exception as e:
        logger.error(f"Error loading questions data: {e}")
        QUESTIONS_DATA = {}
        AVAILABLE_BLOCKS = []
        QUESTIONS_LIST = []

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_data()

# –î–æ–±–∞–≤—å—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ init_data()
def check_data_loaded():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ."""
    global QUESTIONS_DATA, AVAILABLE_BLOCKS, QUESTIONS_LIST  # –û–±—ä—è–≤–ª—è–µ–º global –≤ –Ω–∞—á–∞–ª–µ
    
    if not QUESTIONS_DATA:
        logger.error("CRITICAL: QUESTIONS_DATA is empty after init!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        questions_file_path = os.path.join(
            os.path.dirname(os.path.dirname(__file__)), 
            'data', 
            'questions.json'
        )
        logger.error(f"QUESTIONS_FILE path: {questions_file_path}")
        logger.error(f"File exists: {os.path.exists(questions_file_path)}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        try:
            from .loader import load_questions, get_stats
            data, flat_list = load_questions()
            if data:
                QUESTIONS_DATA = data
                AVAILABLE_BLOCKS = list(data.keys())
                QUESTIONS_LIST = flat_list or []
                logger.info("Successfully loaded questions directly")
                stats = get_stats()
                logger.info(f"Questions stats: {stats}")
            else:
                logger.error("load_questions() returned empty data")
        except Exception as e:
            logger.error(f"Error during direct load: {e}")
            import traceback
            logger.error(traceback.format_exc())
    else:
        logger.info(f"Data loaded successfully: {len(AVAILABLE_BLOCKS)} blocks, {len(QUESTIONS_LIST)} questions")

# –í—ã–∑–æ–≤–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
check_data_loaded()

@safe_handler()
async def dismiss_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üí™")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.message.delete()
    except Exception as e:
        logger.debug(f"Could not delete promo message: {e}")
    
    # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    return


async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
    messages_to_delete = [
        'thinking_message_id',      # "–ò—â—É –≤–æ–ø—Ä–æ—Å..."
        'checking_message_id',      # "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
        'question_message_id',      # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        'feedback_message_id'       # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    ]
    
    for msg_key in messages_to_delete:
        msg_id = context.user_data.pop(msg_key, None)
        if msg_id:
            try:
                await update.effective_message.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=msg_id
                )
            except Exception as e:
                logger.debug(f"Failed to delete {msg_key}: {e}")


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE, states.ANSWERING, None})
async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    keys_to_remove = [
        'current_topic',
        'task19_current_topic', 
        'task20_current_topic',
        'task25_current_topic',
        'task24_current_topic'
    ]
    
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    context.user_data['active_module'] = 'test_part'
    
    # –£–î–ê–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    # if not await utils.check_subscription(query.from_user.id, context.bot):
    #     await utils.send_subscription_required(query, REQUIRED_CHANNEL)
    #     return ConversationHandler.END
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /quiz - –≤—Ö–æ–¥ –≤ —Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å."""
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    keys_to_remove = [
        'current_topic',
        'task19_current_topic', 
        'task20_current_topic',
        'task25_current_topic',
        'task24_current_topic'
    ]
    
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–≥–æ –±–æ—Ç–∞
    
    kb = keyboards.get_initial_choice_keyboard()
    await update.message.reply_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫."""
    context.user_data['conversation_state'] = states.CHOOSING_MODE
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mistakes = await utils.get_user_mistakes(user_id)
    
    if not mistakes:
        text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_part_progress")
        ]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return states.CHOOSING_MODE
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–º–∞–º
    mistakes_by_topic = {}
    for mistake in mistakes:
        topic = mistake.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
        if topic not in mistakes_by_topic:
            mistakes_by_topic[topic] = []
        mistakes_by_topic[topic].append(mistake)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫</b>\n\n"
    
    for topic, topic_mistakes in mistakes_by_topic.items():
        text += f"üìå <b>{topic}</b>\n"
        text += f"   –û—à–∏–±–æ–∫: {len(topic_mistakes)}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        error_types = {}
        for m in topic_mistakes:
            error_type = m.get('error_type', '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')
            error_types[error_type] = error_types.get(error_type, 0) + 1
        
        for error_type, count in error_types.items():
            text += f"   ‚Ä¢ {error_type}: {count}\n"
        text += "\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    if len(mistakes_by_topic) > 3:
        text += "‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ 2-3 —Ç–µ–º–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫\n"
    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏' –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
    text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Ç–µ–º–∞–º\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="test_export_csv")],
        [InlineKeyboardButton("üîÑ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="test_work_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_part_progress")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_exam_num_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠."""
    query = update.callback_query
    context.user_data['user_id'] = query.from_user.id
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
    all_nums = safe_cache_get_all_exam_numbers()
    
    if not all_nums:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", show_alert=True)
        return states.CHOOSING_MODE
    
    kb = keyboards.get_exam_num_keyboard(all_nums)
    await query.edit_message_text(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠:</b>",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    context.user_data['mode'] = 'exam_num'
    return states.CHOOSING_EXAM_NUMBER

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_block_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ –±–ª–æ–∫–∞–º."""
    query = update.callback_query
    context.user_data['user_id'] = query.from_user.id
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    if not AVAILABLE_BLOCKS:
        await query.answer("–ë–ª–æ–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        return states.CHOOSING_MODE
    
    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
    await query.edit_message_text(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:</b>",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    context.user_data['mode'] = 'block'
    return states.CHOOSING_BLOCK

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_random_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—Å–µ–π –±–∞–∑—ã."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    all_questions = []
    for block_data in QUESTIONS_DATA.values():
        for topic_questions in block_data.values():
            all_questions.extend(topic_questions)
    
    if not all_questions:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        return states.CHOOSING_MODE
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
    
    # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = await utils.choose_question(query.from_user.id, all_questions)
    if question_data:
        await send_question(query.message, context, question_data, "random_all")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, states.ANSWERING)
        return states.ANSWERING
    else:
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.edit_text(
            "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_BLOCK})
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    context.user_data['user_id'] = query.from_user.id
    block_name = query.data.split(":", 2)[2]
    if block_name not in AVAILABLE_BLOCKS:
        return states.CHOOSING_BLOCK
    
    context.user_data['selected_block'] = block_name
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
    kb = keyboards.get_mode_keyboard(block_name)
    await query.edit_message_text(
        f"–ë–ª–æ–∫: {block_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    return states.CHOOSING_MODE

@safe_handler()
async def show_progress_enhanced(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    stats = await db.get_user_stats(user_id)
    streaks = await db.get_user_streaks(user_id)
    
    if not stats:
        greeting = get_personalized_greeting({'total_attempts': 0, 'streak': streaks.get('current_daily', 0)})
        text = greeting + MessageFormatter.format_welcome_message(
            "—Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –ï–ì–≠",
            is_new_user=True
        )
    else:
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_correct = sum(correct for _, correct, _ in stats)
        total_answered = sum(total for _, _, total in stats)
        overall_percentage = (total_correct / total_answered * 100) if total_answered > 0 else 0
        
        # –¢–æ–ø —Ç–µ–º—ã
        top_results = []
        for topic, correct, total in sorted(stats, key=lambda x: x[1]/x[2] if x[2] > 0 else 0, reverse=True)[:3]:
            percentage = (correct / total * 100) if total > 0 else 0
            topic_name = TOPIC_NAMES.get(topic, topic)
            top_results.append({
                'topic': topic_name,
                'score': correct,
                'max_score': total
            })
        
        greeting = get_personalized_greeting({'total_attempts': total_answered, 'streak': streaks.get('current_daily', 0)})
        text = greeting + MessageFormatter.format_progress_message({
            'total_attempts': total_answered,
            'average_score': overall_percentage / 100 * 3,  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —à–∫–∞–ª—É 0-3
            'completed': len(stats),
            'total': len(TOPIC_NAMES),
            'total_time': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            'top_results': top_results,
            'current_average': overall_percentage,
            'previous_average': overall_percentage - 5  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–∞
        }, "—Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏
        if streaks:
            text += f"\n\n<b>üî• –°–µ—Ä–∏–∏:</b>\n"
            text += UniversalUIComponents.format_statistics_tree({
                '–î–Ω–µ–π –ø–æ–¥—Ä—è–¥': streaks.get('current_daily', 0),
                '–†–µ–∫–æ—Ä–¥ –¥–Ω–µ–π': streaks.get('max_daily', 0),
                '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥': streaks.get('current_correct', 0),
                '–†–µ–∫–æ—Ä–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö': streaks.get('max_correct', 0)
            })
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = AdaptiveKeyboards.create_progress_keyboard(
        has_detailed_stats=bool(stats),
        can_export=bool(stats),
        module_code="test"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

@safe_handler()
@validate_state_transition({states.ANSWERING})
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    if context.user_data.get('active_module') != 'test_part':
        return states.ANSWERING
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    from core.state_validator import state_validator
    user_id = update.effective_user.id
    current_state = state_validator.get_current_state(user_id)
    
    if current_state != states.ANSWERING:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        state_validator.set_state(user_id, states.ANSWERING)
    
    # –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–†–û–í–ï–†–ö–ò
    thinking_msg = await show_thinking_animation(
        update.message,
        text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['checking_message_id'] = thinking_msg.message_id
    
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    context.user_data['user_answer_message_id'] = update.message.message_id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question_id = context.user_data.get('current_question_id')
    
    if not current_question_id:
        try:
            await thinking_msg.delete()
        except Exception:
            pass
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    question_data = context.user_data.get(f'question_{current_question_id}')
    
    if not question_data:
        try:
            await thinking_msg.delete()
        except Exception:
            pass
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    try:
        correct_answer = question_data.get('answer', '').strip()
        is_correct = user_answer.lower() == correct_answer.lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        question_id = question_data.get('id')
        topic = question_data.get('topic')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        if topic and topic != "N/A":
            await db.update_progress(user_id, topic, is_correct)
        
        if question_id:
            await db.record_answered(user_id, question_id)
        
        if not is_correct and question_id:
            await db.record_mistake(user_id, question_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏
        daily_current, daily_max = await db.update_daily_streak(user_id)
        
        if is_correct:
            correct_current, correct_max = await db.update_correct_streak(user_id)
        else:
            await db.reset_correct_streak(user_id)
            correct_current = 0
            streaks = await db.get_user_streaks(user_id)
            correct_max = streaks.get('max_correct', 0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–∏–∫
        old_correct_streak = context.user_data.get('correct_streak', 0)
        context.user_data['correct_streak'] = correct_current
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        last_mode = context.user_data.get('last_mode', 'random')
        exam_number = context.user_data.get('current_exam_number')
        selected_topic = context.user_data.get('selected_topic')
        selected_block = context.user_data.get('selected_block')
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
        motivational_phrase = None
        try:
            if not is_correct:
                motivational_phrase = await utils.get_random_motivational_phrase()
        except Exception:
            pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await db.get_user_stats(user_id)
        total_correct = sum(correct for _, correct, _ in stats) if stats else 0
        total_answered = sum(total for _, _, total in stats) if stats else 0
        
        # –§–û–†–ú–ò–†–£–ï–ú –ö–†–ê–°–ò–í–´–ô –§–ò–î–ë–ï–ö
        if is_correct:
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢
            feedback = f"<b>{utils.get_random_correct_phrase()}</b>\n"
            feedback += "‚îÄ" * 30 + "\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
            if last_mode == 'exam_num' and exam_number:
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                total_in_mode = len(questions_with_num)
                # –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏
                exam_correct = 0
                for t, c, total in stats:
                    for q in questions_with_num:
                        if q.get('topic') == t:
                            exam_correct += c
                            break
                progress_bar = create_visual_progress(exam_correct, total_in_mode)
                feedback += f"üìä <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{exam_number}:</b>\n"
                feedback += f"{progress_bar}\n"
                feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {exam_correct}/{total_in_mode}\n\n"
            elif last_mode == 'topic' and selected_topic:
                for t, c, total in stats:
                    if t == selected_topic:
                        progress_bar = create_visual_progress(c, total)
                        topic_name = TOPIC_NAMES.get(selected_topic, selected_topic)
                        feedback += f"üìä <b>{topic_name}:</b>\n"
                        feedback += f"{progress_bar}\n"
                        feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {c}/{total}\n\n"
                        break
            else:
                progress_bar = create_visual_progress(total_correct, total_answered)
                feedback += f"üìä <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
                feedback += f"{progress_bar}\n"
                feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {total_correct}/{total_answered}\n\n"
            
            # –°—Ç—Ä–∏–∫–∏ —Å –¥–µ—Ä–µ–≤–æ–º
            feedback += f"üî• <b>–°–µ—Ä–∏–∏:</b>\n"
            feedback += f"‚îú üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: <b>{daily_current}</b>"
            if daily_current == daily_max and daily_max > 1:
                feedback += " üèÜ"
            feedback += "\n"
            
            feedback += f"‚îî ‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: <b>{correct_current}</b>"
            if correct_current == correct_max and correct_max > 1:
                feedback += " üèÜ"
            feedback += "\n"
            
            # Milestone
            milestone_phrase = utils.get_streak_milestone_phrase(correct_current)
            if milestone_phrase and correct_current > old_correct_streak:
                feedback += "\n" + "‚îÄ" * 30 + "\n"
                feedback += f"{milestone_phrase}"
            
            # –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
            if correct_current > old_correct_streak and correct_current == correct_max and correct_max > 1:
                feedback += "\n\nüéä üéâ <b>–ù–û–í–´–ô –õ–ò–ß–ù–´–ô –†–ï–ö–û–†–î!</b> üéâ üéä"
            
            if motivational_phrase:
                feedback += "\n\n" + "‚îÄ" * 30 + "\n"
                feedback += f"üí´ <i>{motivational_phrase}</i>"
                
        else:
            # –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢
            feedback = f"<b>{utils.get_random_incorrect_phrase()}</b>\n"
            feedback += "‚îÄ" * 30 + "\n\n"
            
            feedback += f"‚ùå –í–∞—à –æ—Ç–≤–µ—Ç: <code>{user_answer}</code>\n"
            feedback += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if last_mode == 'exam_num' and exam_number:
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                total_in_mode = len(questions_with_num)
                exam_correct = 0
                for t, c, total in stats:
                    for q in questions_with_num:
                        if q.get('topic') == t:
                            exam_correct += c
                            break
                progress_bar = create_visual_progress(exam_correct, total_in_mode)
                feedback += f"üìä <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{exam_number}:</b>\n"
                feedback += f"{progress_bar}\n\n"
            elif last_mode == 'topic' and selected_topic:
                for t, c, total in stats:
                    if t == selected_topic:
                        progress_bar = create_visual_progress(c, total)
                        topic_name = TOPIC_NAMES.get(selected_topic, selected_topic)
                        feedback += f"üìä <b>{topic_name}:</b>\n"
                        feedback += f"{progress_bar}\n\n"
                        break
            else:
                progress_bar = create_visual_progress(total_correct, total_answered)
                feedback += f"üìä <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
                feedback += f"{progress_bar}\n\n"
            
            # –°—Ç—Ä–∏–∫–∏
            feedback += f"üî• <b>–°–µ—Ä–∏–∏:</b>\n"
            feedback += f"‚îú üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: <b>{daily_current}</b>\n"
            
            if old_correct_streak > 0:
                feedback += f"‚îî ‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: <b>0</b> "
                feedback += f"(–±—ã–ª–æ {old_correct_streak})\n"
                feedback += f"\nüíî <i>–°–µ—Ä–∏—è –∏–∑ {old_correct_streak} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞!</i>"
                if correct_max > 0:
                    feedback += f"\nüìà <i>–í–∞—à —Ä–µ–∫–æ—Ä–¥: {correct_max}</i>"
            else:
                feedback += f"‚îî ‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: <b>0</b>"
            
            if motivational_phrase:
                feedback += "\n\n" + "‚îÄ" * 30 + "\n"
                feedback += f"üí™ <i>{motivational_phrase}</i>"
        
        # –í —Ñ—É–Ω–∫—Ü–∏–∏ check_answer, –Ω–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –≥–¥–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
        has_explanation = bool(question_data.get('explanation'))

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        exam_number = None
        if last_mode == 'exam_num':
            exam_number = context.user_data.get('current_exam_number')

        kb = keyboards.get_next_action_keyboard(
            last_mode, 
            has_explanation=has_explanation,
            exam_number=exam_number  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
        )
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        try:
            await thinking_msg.delete()
        except Exception as e:
            logger.debug(f"Failed to delete checking message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫
        sent_msg = await update.message.reply_text(
            feedback,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        context.user_data['feedback_message_id'] = sent_msg.message_id
        context.user_data['last_answer_correct'] = is_correct
        
        return states.CHOOSING_NEXT_ACTION
        
    except Exception as e:
        logger.error(f"Error in check_answer: {e}")
        
        try:
            await thinking_msg.delete()
        except Exception:
            pass
            
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞")
        return ConversationHandler.END

@safe_handler()
async def handle_next_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    query = update.callback_query
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
    await query.answer()
    action = query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ action –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if not action.startswith("test_"):
        logger.warning(f"Unexpected action in handle_next_action: {action}")
        return states.CHOOSING_NEXT_ACTION
    
    if action == "test_next_show_explanation":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_question_id = context.user_data.get('current_question_id')
        if current_question_id:
            question_data = context.user_data.get(f'question_{current_question_id}')
            if question_data and question_data.get('explanation'):
                explanation_text = question_data['explanation']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ markdown
                explanation_text = utils.md_to_html(explanation_text)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π
                formatted_text = f"üí° <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É</b>\n\n"
                formatted_text += explanation_text
                
                try:
                    sent_msg = await query.message.reply_text(
                        formatted_text,
                        parse_mode=ParseMode.HTML
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    context.user_data.setdefault('extra_messages_to_delete', []).append(sent_msg.message_id)
                except Exception as e:
                    logger.error(f"Error sending explanation: {e}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º show_alert –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ answer()
                await query.answer("–ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
                return states.CHOOSING_NEXT_ACTION
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º show_alert –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ answer()
            await query.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return states.CHOOSING_NEXT_ACTION
        
        # –£–ë–ò–†–ê–ï–ú –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ query.answer()
        return states.CHOOSING_NEXT_ACTION
    
    elif action == "test_next_continue":
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∂–∞—é..."
        try:
            loading_msg = await query.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
        except Exception as e:
            logger.error(f"Error sending loading message: {e}")
            return states.CHOOSING_NEXT_ACTION
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º chat_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        chat_id = query.message.chat_id
        await utils.purge_old_messages(context, chat_id)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await utils.purge_old_messages(context, query.message.chat_id, keep_id=loading_msg.message_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        logger.info("Clearing all question data before loading next question")
        keys_to_remove = []
        for key in context.user_data.keys():
            if key.startswith('question_'):
                keys_to_remove.append(key)
        for key in keys_to_remove:
            context.user_data.pop(key, None)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ä–µ–∂–∏–º–µ
        last_mode = context.user_data.get('last_mode')
        
        if last_mode == 'random_all':
            all_questions = []
            for block_data in QUESTIONS_DATA.values():
                for topic_questions in block_data.values():
                    all_questions.extend(topic_questions)
            
            question_data = await utils.choose_question(query.from_user.id, all_questions)
            if question_data:
                await send_question(loading_msg, context, question_data, "random_all")
                return states.ANSWERING
            else:
                kb = keyboards.get_initial_choice_keyboard()
                await loading_msg.edit_text(
                    "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                    reply_markup=kb
                )
                return states.CHOOSING_MODE
        
        elif last_mode == 'exam_num':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º –ï–ì–≠
            exam_number = context.user_data.get('current_exam_number')
            if exam_number:
                questions_with_num = safe_cache_get_by_exam_num(exam_number)
                
                question_data = await utils.choose_question(query.from_user.id, questions_with_num)
                if question_data:
                    await send_question(loading_msg, context, question_data, "exam_num")
                    return states.ANSWERING
                else:
                    kb = keyboards.get_initial_choice_keyboard()
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_MODE
        
        elif last_mode == 'block':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –±–ª–æ–∫–æ–º
            selected_block = context.user_data.get('selected_block')
            if selected_block:
                questions_in_block = safe_cache_get_by_block(selected_block)
                
                question_data = await utils.choose_question(query.from_user.id, questions_in_block)
                if question_data:
                    await send_question(loading_msg, context, question_data, "block")
                    return states.ANSWERING
                else:
                    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_BLOCK
        
        elif last_mode == 'topic':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–π –∂–µ —Ç–µ–º–æ–π
            selected_topic = context.user_data.get('selected_topic')
            selected_block = context.user_data.get('selected_block')
            
            if selected_topic and selected_block:
                questions_in_topic = safe_cache_get_by_topic(selected_topic)
                
                question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
                if question_data:
                    await send_question(loading_msg, context, question_data, "topic")
                    return states.ANSWERING
                else:
                    topics = list(QUESTIONS_DATA.get(selected_block, {}).keys())
                    kb = keyboards.get_topics_keyboard(selected_block, topics)
                    await loading_msg.edit_text(
                        f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
                        reply_markup=kb
                    )
                    return states.CHOOSING_TOPIC
        
        elif last_mode == 'mistakes':
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
            context.user_data['current_mistake_index'] = context.user_data.get('current_mistake_index', 0) + 1
            await send_mistake_question(loading_msg, context)
            return states.REVIEWING_MISTAKES
        
    elif action == "test_next_change_topic":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await utils.purge_old_messages(context, query.message.chat_id)
        
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.reply_text(
            "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    elif action == "test_next_change_block":
        # –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await utils.purge_old_messages(context, query.message.chat_id)
        
        kb = build_main_menu()
        
        await query.message.reply_text(
            "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=kb
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        return states.CHOOSING_NEXT_ACTION

@safe_handler()
async def skip_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    query = update.callback_query
    await query.answer("–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –∏–∑ callback_data
    mode = query.data.split(":")[1] if ":" in query.data else context.user_data.get('last_mode')
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question_id = context.user_data.get('current_question_id')
    if current_question_id:
        context.user_data.pop(f'question_{current_question_id}', None)
    
    # –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –∫–∞–∫ –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    
    loading_msg = await query.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
    
    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == 'random_all':
        all_questions = []
        for block_data in QUESTIONS_DATA.values():
            for topic_questions in block_data.values():
                all_questions.extend(topic_questions)
        
        question_data = await utils.choose_question(query.from_user.id, all_questions)
        if question_data:
            await send_question(loading_msg, context, question_data, "random_all")
            return states.ANSWERING
            
    elif mode == 'exam_num':
        exam_number = context.user_data.get('current_exam_number')
        if exam_number:
            questions_with_num = safe_cache_get_by_exam_num(exam_number)
            question_data = await utils.choose_question(query.from_user.id, questions_with_num)
            if question_data:
                await send_question(loading_msg, context, question_data, "exam_num")
                return states.ANSWERING
                
    elif mode == 'topic':
        selected_topic = context.user_data.get('selected_topic')
        if selected_topic:
            questions_in_topic = safe_cache_get_by_topic(selected_topic)
            question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
            if question_data:
                await send_question(loading_msg, context, question_data, "topic")
                return states.ANSWERING
                
    elif mode == 'block':
        selected_block = context.user_data.get('selected_block')
        if selected_block:
            questions_in_block = safe_cache_get_by_block(selected_block)
            question_data = await utils.choose_question(query.from_user.id, questions_in_block)
            if question_data:
                await send_question(loading_msg, context, question_data, "block")
                return states.ANSWERING
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    kb = keyboards.get_initial_choice_keyboard()
    await loading_msg.edit_text(
        "–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    return states.CHOOSING_MODE

# –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@safe_handler()
async def skip_mistake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    await query.answer("–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")
    
    mistake_ids = context.user_data.get('mistake_ids', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ—à–∏–±–∫–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π
    context.user_data['current_mistake_index'] = current_index + 1
    
    if current_index + 1 < len(mistake_ids):
        await send_mistake_question(query.message, context)
        return states.REVIEWING_MISTAKES
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
        kb = keyboards.get_mistakes_finish_keyboard()
        await query.message.reply_text(
            "‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Å–ø–∏—Å–∫–µ –æ—à–∏–±–æ–∫.",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE

async def cmd_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mistakes - —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    user_id = update.effective_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        await update.message.reply_text("üëç –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
        return ConversationHandler.END
    
    context.user_data['mistake_ids'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['user_id'] = user_id
    
    await update.message.reply_text(
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏. –í—Å–µ–≥–æ: {len(mistake_ids)}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(update.message, context)
    return states.REVIEWING_MISTAKES

async def cmd_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /score - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    stats_raw = await db.get_user_stats(user_id)
    mistake_ids = await db.get_mistake_ids(user_id)
    streaks = await db.get_user_streaks(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    
    if stats_raw:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º
        scores_by_block = {}
        for topic, correct, total in stats_raw:
            block_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫"
            for block, topics in QUESTIONS_DATA.items():
                if topic in topics:
                    block_name = block
                    break
            
            if block_name not in scores_by_block:
                scores_by_block[block_name] = {
                    'correct': 0, 'total': 0, 'topics': []
                }
            
            scores_by_block[block_name]['correct'] += correct
            scores_by_block[block_name]['total'] += total
            
            percentage = (correct / total * 100) if total > 0 else 0
            indicator = "‚úÖ" if percentage >= 80 else "üü°" if percentage >= 50 else "üî¥"
            scores_by_block[block_name]['topics'].append(
                f"  {indicator} –¢–µ–º–∞ {topic}: {correct}/{total} ({percentage:.1f}%)"
            )
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –±–ª–æ–∫–∞–º
        for block_name, data in sorted(scores_by_block.items()):
            block_perc = (data['correct'] / data['total'] * 100) if data['total'] > 0 else 0
            text += f"üìå <b>{block_name}</b> ({block_perc:.1f}%)\n"
            text += "\n".join(data['topics']) + "\n\n"
    
    # –°—Ç—Ä–∏–∫–∏
    text += "‚ú® <b>–°—Ç—Ä–∏–∫–∏:</b>\n"
    text += f"  üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streaks.get('current_daily', 0)} (–º–∞–∫—Å: {streaks.get('max_daily', 0)})\n"
    text += f"  üöÄ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {streaks.get('current_correct', 0)} (–º–∞–∫—Å: {streaks.get('max_correct', 0)})\n\n"
    
    # –û—à–∏–±–∫–∏
    if mistake_ids:
        text += f"‚ùóÔ∏è –£ –≤–∞—Å {len(mistake_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏.\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mistakes –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –Ω–∏–º–∏."
    else:
        text += "üëç –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –æ—à–∏–±–æ–∫ –Ω–µ—Ç!"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE, states.CHOOSING_BLOCK, states.CHOOSING_TOPIC, states.CHOOSING_EXAM_NUMBER})
async def back_to_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏."""
    query = update.callback_query
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    from core.menu_handlers import handle_to_main_menu
    return await handle_to_main_menu(update, context)
    
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE, states.CHOOSING_BLOCK, states.CHOOSING_TOPIC, states.ANSWERING})
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    query = update.callback_query
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    kb = keyboards.get_initial_choice_keyboard()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb
    )
    return states.CHOOSING_MODE

async def send_question(message, context: ContextTypes.DEFAULT_TYPE, 
                        question_data: dict, last_mode: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ–º–æ-–ª–æ–≥–∏–∫–æ–π."""
    
    # ========== 1. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï USER_ID –í –ù–ê–ß–ê–õ–ï ==========
    user_id = context.user_data.get('user_id')
    if not user_id:
        if hasattr(message, 'from_user') and message.from_user:
            user_id = message.from_user.id
        elif hasattr(message, 'chat') and message.chat:
            user_id = message.chat.id
        elif hasattr(message, 'message') and hasattr(message.message, 'chat'):
            user_id = message.message.chat.id
    
    if not user_id:
        logger.error("Cannot determine user_id!")
        await message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return ConversationHandler.END
    
    context.user_data['user_id'] = user_id
    
    # ========== 2. –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –ï–î–ò–ù–´–ô –°–ß–ï–¢–ß–ò–ö ==========
    questions_count = context.user_data.get('test_questions_count', 0) + 1
    context.user_data['test_questions_count'] = questions_count
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # ========== 3. –û–ß–ò–°–¢–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ==========
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ü–ï–†–ï–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    question_id = question_data.get('id')
    keys_to_remove = []
    for key in context.user_data.keys():
        if key.startswith('question_') and key != f'question_{question_id}':
            keys_to_remove.append(key)
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    context.user_data['current_question_id'] = question_id
    context.user_data[f'question_{question_id}'] = question_data
    context.user_data['last_mode'] = last_mode
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–µ–ø–µ—Ä—å user_id –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
    logger.info(f"Question #{questions_count} sent to user {user_id}")
    logger.info(f"SENDING QUESTION: ID={question_id}, "
                f"Answer={question_data.get('answer')}, "
                f"Type={question_data.get('type')}, "
                f"Topic={question_data.get('topic')}, "
                f"Has image={bool(question_data.get('image_url'))}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ –∏ —Ç–µ–º–µ
    if 'block' not in question_data and context.user_data.get('selected_block'):
        question_data['block'] = context.user_data['selected_block']
    if 'topic' not in question_data and context.user_data.get('selected_topic'):
        question_data['topic'] = context.user_data['selected_topic']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠ –¥–ª—è —Ä–µ–∂–∏–º–∞ exam_num
    if last_mode == 'exam_num' and 'exam_number' in question_data:
        context.user_data['current_exam_number'] = question_data['exam_number']
    
    # ========== 4. –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–ü–†–ê–í–ö–ê –í–û–ü–†–û–°–ê ==========
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    text = utils.format_question_text(question_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    skip_keyboard = keyboards.get_question_keyboard(last_mode)
    
    # –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    is_edit_mode = hasattr(message, 'edit_text')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_url = question_data.get('image_url')
    
    try:
        if image_url:
            import os
            
            if os.path.exists(image_url):
                # –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # —Ç–∞–∫ –∫–∞–∫ –Ω–µ–ª—å–∑—è –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ edit
                
                # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if is_edit_mode:
                    try:
                        await message.delete()
                    except Exception as e:
                        logger.debug(f"Could not delete loading message: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è caption
                MAX_CAPTION_LENGTH = 1024
                
                if len(text) <= MAX_CAPTION_LENGTH:
                    # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ caption
                    with open(image_url, 'rb') as photo:
                        sent_msg = await context.bot.send_photo(
                            chat_id=user_id,
                            photo=photo,
                            caption=text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=skip_keyboard
                        )
                    
                    if sent_msg:
                        context.user_data['current_question_message_id'] = sent_msg.message_id
                else:
                    # –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                    logger.info(f"Text too long ({len(text)} chars), sending separately")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    with open(image_url, 'rb') as photo:
                        photo_msg = await context.bot.send_photo(
                            chat_id=user_id,
                            photo=photo,
                            caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∫ –∑–∞–¥–∞–Ω–∏—é"
                        )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    text_msg = await context.bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=skip_keyboard
                    )
                    
                    if text_msg:
                        context.user_data['current_question_message_id'] = text_msg.message_id
                        context.user_data['current_photo_message_id'] = photo_msg.message_id
            else:
                # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                logger.error(f"Image file not found: {image_url}")
                text = "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n" + text
                
                if is_edit_mode:
                    await message.edit_text(
                        text, 
                        parse_mode=ParseMode.HTML,
                        reply_markup=skip_keyboard
                    )
                    context.user_data['current_question_message_id'] = message.message_id
                else:
                    sent_msg = await message.reply_text(
                        text, 
                        parse_mode=ParseMode.HTML,
                        reply_markup=skip_keyboard
                    )
                    if sent_msg:
                        context.user_data['current_question_message_id'] = sent_msg.message_id
        else:
            # –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if is_edit_mode:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∂–∞—é..."
                await message.edit_text(
                    text, 
                    parse_mode=ParseMode.HTML,
                    reply_markup=skip_keyboard
                )
                context.user_data['current_question_message_id'] = message.message_id
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_msg = await message.reply_text(
                    text, 
                    parse_mode=ParseMode.HTML,
                    reply_markup=skip_keyboard
                )
                if sent_msg:
                    context.user_data['current_question_message_id'] = sent_msg.message_id
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        try:
            error_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            if is_edit_mode:
                await message.edit_text(error_text)
            else:
                await message.reply_text(error_text)
        except:
            pass
        return ConversationHandler.END

    # ========== 5. –ü–†–û–ú–û-–õ–û–ì–ò–ö–ê (–ü–ï–†–ï–ù–ï–°–ï–ù–ê –ò–ó TRY-EXCEPT) ==========
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ –∫–∞–∂–¥—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
    if questions_count > 0 and questions_count % 10 == 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –º–æ–¥—É–ª–µ test_part
        if context.user_data.get('active_module') == 'test_part':
            subscription_manager = context.bot_data.get('subscription_manager')
            if subscription_manager:
                try:
                    has_subscription = await subscription_manager.check_active_subscription(user_id)
                    
                    if not has_subscription:
                        import random
                        import asyncio
                        
                        # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π
                        promo_messages = [
                            f"üöÄ <b>–£–∂–µ {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤!</b>\n\n"
                            f"–° –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π –æ—Ç–∫—Ä–æ—é—Ç—Å—è –∑–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –ï–ì–≠:\n"
                            f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 19 - –ü—Ä–∏–º–µ—Ä—ã –∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏\n"
                            f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 20 - –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—É–∂–¥–µ–Ω–∏—è\n"
                            f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 24 - –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤\n"
                            f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 25 - –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã",
                            
                            f"üí™ <b>{questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∑–∞–¥–∏!</b>\n\n"
                            f"–ì–æ—Ç–æ–≤—ã –∫ –∑–∞–¥–∞–Ω–∏—è–º —Å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º?\n"
                            f"–ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –ï–ì–≠!",
                            
                            f"üéØ <b>–¶–µ–ª—ã—Ö {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤!</b>\n\n"
                            f"–û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫:\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π 19-20\n"
                            f"‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –ø–ª–∞–Ω–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–∏—é 24\n"
                            f"‚Ä¢ –¢—Ä–µ–Ω–∞–∂—ë—Ä—É –∑–∞–¥–∞–Ω–∏—è 25",
                            
                            f"üìà <b>{questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–µ—à–µ–Ω–æ!</b>\n\n"
                            f"–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –Ω–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏?"
                        ]
                        
                        promo_text = random.choice(promo_messages)
                        promo_text += "\n\nüíé <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º 7 –¥–Ω–µ–π –∑–∞ 1‚ÇΩ!</b>"
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–º–æ
                        await asyncio.sleep(1)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ  
                        try:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=promo_text,
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton("üíé –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞ 1‚ÇΩ", callback_data="pay_trial")],
                                    [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="subscribe_start")],
                                    [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="dismiss_promo")]
                                ]),
                                parse_mode=ParseMode.HTML
                            )
                            logger.info(f"Promo shown to user {user_id} after {questions_count} questions")
                        except Exception as e:
                            logger.error(f"Error showing promo: {e}")
                
                except Exception as e:
                    logger.error(f"Error checking subscription for promo: {e}")
    
    # ========== 6. –í–û–ó–í–†–ê–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï ==========
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è state_validator –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id:
        from core.state_validator import state_validator
        state_validator.set_state(user_id, states.ANSWERING)
    
    return states.ANSWERING
    
@safe_handler()
async def continue_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–º–æ."""
    query = update.callback_query
    await query.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üí™")
    
    try:
        await query.message.delete()
    except:
        pass
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@safe_handler()  
async def pay_trial_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""
    query = update.callback_query
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    context.user_data['return_to_test'] = True
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –∏–∑ payment –º–æ–¥—É–ª—è
    from payment.handlers import process_payment
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    context.user_data['selected_plan'] = 'trial_7days'
    context.user_data['selected_duration'] = 1
    
    return await process_payment(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def start_exam_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–∞
    context.user_data['exam_mode'] = True
    context.user_data['exam_questions'] = []
    context.user_data['exam_answers'] = {}
    context.user_data['exam_results'] = {}
    context.user_data['exam_current'] = 1
    context.user_data['exam_skipped'] = []
    
    await query.edit_message_text(
        "üéØ <b>–†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞</b>\n\n"
        "–í–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã —Å 1 –ø–æ 16 –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠.\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n"
        "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–æ–ø—Ä–æ—Å—ã...",
        parse_mode=ParseMode.HTML
    )
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ 16
    exam_questions = []
    for exam_num in range(1, 17):
        questions_for_num = safe_cache_get_by_exam_num(exam_num)
        if questions_for_num:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            question = await utils.choose_question(user_id, questions_for_num)
            if question:
                question['exam_position'] = exam_num
                exam_questions.append(question)
    
    if len(exam_questions) < 16:
        await query.message.edit_text(
            f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞.\n"
            f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(exam_questions)}/16\n\n"
            f"–ù–∞—á–∞—Ç—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å", callback_data="exam_start_partial")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="to_test_part_menu")]
            ])
        )
        context.user_data['exam_questions'] = exam_questions
        return states.EXAM_MODE
    
    context.user_data['exam_questions'] = exam_questions
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_exam_question(query.message, context, 0)
    return states.EXAM_MODE

async def send_exam_question(message, context: ContextTypes.DEFAULT_TYPE, index: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ —ç–∫–∑–∞–º–µ–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    exam_questions = context.user_data.get('exam_questions', [])
    
    if index >= len(exam_questions):
        # –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
        await show_exam_results(message, context)
        return
    
    question = exam_questions[index]
    context.user_data['exam_current'] = index + 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    question_id = question.get('id', f'exam_q_{index}')
    context.user_data['current_question_id'] = question_id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    question_type = question.get('type', 'text')
    question_text = None
    
    if isinstance(question, dict):
        # –î–ª—è matching-–≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ instruction
        if question_type == 'matching':
            question_text = question.get('instruction', '')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö –¥–ª—è matching
            if question_text:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–æ–∫
                col1_header = question.get('column1_header', '–°–¢–û–õ–ë–ï–¶ 1')
                col1_options = question.get('column1_options', {})
                col2_header = question.get('column2_header', '–°–¢–û–õ–ë–ï–¶ 2')
                col2_options = question.get('column2_options', {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ü–∏–π
                if col1_options and col2_options:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
                    full_text = question_text + "\n\n"
                    
                    # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
                    full_text += f"<b>{col1_header}:</b>\n"
                    for letter, option in sorted(col1_options.items()):
                        full_text += f"{letter}) {option}\n"
                    
                    full_text += "\n"
                    
                    # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞
                    full_text += f"<b>{col2_header}:</b>\n"
                    for digit, option in sorted(col2_options.items(), key=lambda x: int(x[0]) if x[0].isdigit() else 0):
                        full_text += f"{digit}. {option}\n"
                    
                    question_text = full_text
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
            question_text = (
                question.get('question') or 
                question.get('question_text') or 
                question.get('text') or
                question.get('instruction', '')
            )
    elif isinstance(question, str):
        question_text = question
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    if not question_text:
        import json
        logger.error(f"Empty question text for exam question {index + 1}. Question type: {question_type}. Question data: {json.dumps(question, ensure_ascii=False)[:500]}")
        question_text = f"[–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ {index + 1}]"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üìù <b>–≠–∫–∑–∞–º–µ–Ω ‚Ä¢ –í–æ–ø—Ä–æ—Å {index + 1} –∏–∑ 16</b>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –ï–ì–≠, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º–µ
    if isinstance(question, dict):
        exam_num = question.get('exam_number', question.get('exam_position'))
        if exam_num:
            text += f"\nüìö –ó–∞–¥–∞–Ω–∏–µ –ï–ì–≠ ‚Ññ{exam_num}"
        if question.get('difficulty'):
            text += f" ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {question.get('difficulty')}"
        if question.get('topic'):
            from test_part.keyboards import TOPIC_NAMES
            topic_name = TOPIC_NAMES.get(question.get('topic'), question.get('topic'))
            text += f"\nüìñ –¢–µ–º–∞: {topic_name}"
    
    text += "\n" + "‚îÅ" * 30 + "\n\n"
    text += question_text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç–≤–µ—Ç–∞
    if question_type == 'matching':
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–π
        col1_options = question.get('column1_options', {}) if isinstance(question, dict) else {}
        col1_count = len(col1_options) if col1_options else 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
        text += f"\n\n‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ {col1_count} —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</i>"
    elif question_type == 'multiple_choice':
        text += f"\n\n‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</i>"
    elif question_type == 'single_choice':
        text += f"\n\n‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –æ—Ç–≤–µ—Ç–∞</i>"
    else:
        text += f"\n\n‚úçÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç</i>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if isinstance(question, dict):
        context.user_data[f'question_{question_id}'] = question
        context.user_data[f'exam_answer_{index}'] = question.get('answer')
        context.user_data[f'exam_explanation_{index}'] = question.get('explanation')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —ç–∫–∑–∞–º–µ–Ω–µ
        question['exam_position'] = question.get('exam_number', index + 1)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ keyboards
    from test_part.keyboards import get_exam_question_keyboard
    keyboard = get_exam_question_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_url = question.get('image_url') if isinstance(question, dict) else None
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        import os
        from pathlib import Path
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        BASE_DIR = Path("/opt/ege-bot")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if image_url:
            # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
            if not os.path.isabs(image_url):
                image_path = BASE_DIR / image_url
            else:
                image_path = Path(image_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if image_path.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è caption (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞)
                MAX_CAPTION_LENGTH = 1024
                
                # –ü–æ–ª—É—á–∞–µ–º chat_id
                if hasattr(message, 'chat'):
                    chat_id = message.chat.id
                elif hasattr(message, 'chat_id'):
                    chat_id = message.chat_id
                else:
                    # Fallback - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    chat_id = context.user_data.get('user_id')
                
                if len(text) <= MAX_CAPTION_LENGTH:
                    # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ caption
                    if hasattr(message, 'edit_text'):
                        # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                        try:
                            await message.delete()
                        except:
                            pass
                        
                        with open(image_path, 'rb') as photo:
                            await context.bot.send_photo(
                                chat_id=chat_id,
                                photo=photo,
                                caption=text,
                                reply_markup=keyboard,
                                parse_mode='HTML'
                            )
                    else:
                        # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                        with open(image_path, 'rb') as photo:
                            await message.reply_photo(
                                photo=photo,
                                caption=text,
                                reply_markup=keyboard,
                                parse_mode='HTML'
                            )
                else:
                    # –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω–æ
                    logger.info(f"Text too long for caption ({len(text)} chars), sending separately")
                    
                    if hasattr(message, 'edit_text'):
                        try:
                            await message.delete()
                        except:
                            pass
                    
                    # –°–Ω–∞—á–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    with open(image_path, 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=chat_id,
                            photo=photo,
                            caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –∫ –≤–æ–ø—Ä–æ—Å—É {index + 1}"
                        )
                    
                    # –ó–∞—Ç–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
            else:
                # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                logger.error(f"Image file not found: {image_url}")
                text = "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n" + text
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if hasattr(message, 'reply_text'):
                    await message.reply_text(
                        text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                elif hasattr(message, 'edit_text'):
                    await message.edit_text(
                        text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
        else:
            # –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            if hasattr(message, 'reply_text'):
                await message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            elif hasattr(message, 'edit_text'):
                await message.edit_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                # Fallback
                await message.reply_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
    except Exception as e:
        logger.error(f"Error sending exam question {index + 1}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        text_plain = text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
        await message.reply_text(
            text_plain,
            reply_markup=keyboard
        )

async def show_promo_message(context: ContextTypes.DEFAULT_TYPE, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ N –≤–æ–ø—Ä–æ—Å–æ–≤."""
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    questions_answered = context.user_data.get('test_questions_answered', 0) + 1
    context.user_data['test_questions_answered'] = questions_answered
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ –∫–∞–∂–¥—ã–µ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)
    if questions_answered % 20 == 0:
        subscription_manager = context.bot_data.get('subscription_manager')
        if subscription_manager:
            user_id = context.user_data.get('user_id')
            has_subscription = await subscription_manager.check_active_subscription(user_id)
            
            if not has_subscription:
                # –†–∞–∑–Ω—ã–µ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                promo_variants = [
                    """
ü§ñ <b>–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –ò–ò –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã!</b>

–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å —É—á–∏—Ç–µ–ª—è –∏–ª–∏ –∏—Å–∫–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. 
–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–≤–æ–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –§–ò–ü–ò –∑–∞ —Å–µ–∫—É–Ω–¥—ã!

‚úÖ –ó–∞–¥–∞–Ω–∏—è 19-20: –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–±–æ—Ä–æ–º
‚úÖ –ó–∞–¥–∞–Ω–∏–µ 24: –ø–ª–∞–Ω—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
‚úÖ –ó–∞–¥–∞–Ω–∏–µ 25: –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã

<b>–ü–æ–ø—Ä–æ–±—É–π 7 –¥–Ω–µ–π –≤—Å–µ–≥–æ –∑–∞ 1‚ÇΩ!</b>""",
                    """
üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ–º–∞—Ö</b>

–° –ø–æ–ª–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —Ç—ã –ø–æ–ª—É—á–∏—à—å:
- –£–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

<b>–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–Ω–∞–Ω–∏—è—Ö!</b>
–ü–æ–¥–∫–ª—é—á–∏ –ø—Ä–µ–º–∏—É–º –æ—Ç 199‚ÇΩ/–º–µ—Å—è—Ü""",
                    """
‚ö° <b>–ö–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –Ω–∞ —Å—á–µ—Ç—É!</b>

–ü—Ä–∞–∫—Ç–∏–∫—É–π—Å—è –≥–¥–µ —É–≥–æ–¥–Ω–æ:
- –í —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –ø–æ –¥–æ—Ä–æ–≥–µ –¥–æ–º–æ–π
- –í –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–µ
- –ü–µ—Ä–µ–¥ —Å–Ω–æ–º –≤–º–µ—Å—Ç–æ —Å–æ—Ü—Å–µ—Ç–µ–π

–° –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–æ–º –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏.
<b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî –≤—Å–µ–≥–æ 1‚ÇΩ –Ω–∞ 7 –¥–Ω–µ–π!</b>"""
                ]
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
                import random
                promo_text = random.choice(promo_variants)
                promo_text += "\n\n<i>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 20 –≤–æ–ø—Ä–æ—Å–æ–≤</i>"
                
                promo_keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíé –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞ 1‚ÇΩ", callback_data="pay_trial")],
                    [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="subscribe_start")],
                    [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="continue_test")]
                ])
                
                await message.reply_text(
                    promo_text,
                    reply_markup=promo_keyboard,
                    parse_mode=ParseMode.HTML
                )

@safe_handler()
async def check_exam_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —ç–∫–∑–∞–º–µ–Ω–∞."""
    if not context.user_data.get('exam_mode'):
        return await check_answer(update, context)
    
    user_answer = update.message.text.strip()
    current_question_id = context.user_data.get('current_question_id')
    current_index = context.user_data.get('exam_current', 1) - 1
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    question_data = context.user_data.get(f'question_{current_question_id}')
    
    if not question_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return states.EXAM_MODE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    correct_answer = str(question_data.get('answer', ''))
    question_type = question_data.get('type', 'multiple_choice')
    
    is_correct = utils.normalize_answer(user_answer, question_type) == \
                 utils.normalize_answer(correct_answer, question_type)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    context.user_data['exam_answers'][current_question_id] = {
        'user_answer': user_answer,
        'correct_answer': correct_answer,
        'is_correct': is_correct,
        'question_num': question_data['exam_position']
    }
    
    # –ö—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        f"‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç ({current_index + 1}/{len(context.user_data['exam_questions'])})",
        parse_mode=ParseMode.HTML
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await send_exam_question(update.message, context, current_index + 1)
    return states.EXAM_MODE

@safe_handler()
async def skip_exam_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ —ç–∫–∑–∞–º–µ–Ω–∞."""
    query = update.callback_query
    await query.answer("–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")
    
    current_index = context.user_data.get('exam_current', 1) - 1
    current_question_id = context.user_data.get('current_question_id')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
    context.user_data['exam_skipped'].append(current_question_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await send_exam_question(query.message, context, current_index + 1)
    return states.EXAM_MODE

async def show_exam_results(message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞."""
    exam_questions = context.user_data.get('exam_questions', [])
    exam_answers = context.user_data.get('exam_answers', {})
    exam_skipped = context.user_data.get('exam_skipped', [])
    user_id = context.user_data.get('user_id')
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total = len(exam_questions)
    answered = len(exam_answers)
    skipped = len(exam_skipped)
    correct = sum(1 for a in exam_answers.values() if a['is_correct'])
    incorrect = answered - correct
    
    # –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —à–∫–∞–ª–∞)
    score = correct
    max_score = 16
    percentage = (score / max_score) * 100 if max_score > 0 else 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_text = "üéØ <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–ó–ê–ú–ï–ù–ê</b>\n\n"
    result_text += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    result_text += f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n"
    result_text += f"‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {answered}\n"
    result_text += f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}\n\n"
    
    result_text += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n"
    result_text += f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}\n\n"
    
    result_text += f"üéØ <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{max_score} ({percentage:.1f}%)</b>\n\n"
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage >= 80:
        result_text += "üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –≥–æ—Ç–æ–≤—ã –∫ —ç–∫–∑–∞–º–µ–Ω—É!"
    elif percentage >= 60:
        result_text += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è."
    elif percentage >= 40:
        result_text += "üìö –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å."
    else:
        result_text += "üí™ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞."
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä–∞–º –∑–∞–¥–∞–Ω–∏–π
    result_text += "\n\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—è–º:</b>\n"
    for i in range(1, 17):
        # –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
        question = next((q for q in exam_questions if q['exam_position'] == i), None)
        if question:
            q_id = question['id']
            if q_id in exam_answers:
                if exam_answers[q_id]['is_correct']:
                    result_text += f"‚Ññ{i}: ‚úÖ\n"
                else:
                    result_text += f"‚Ññ{i}: ‚ùå\n"
            elif q_id in exam_skipped:
                result_text += f"‚Ññ{i}: ‚è≠Ô∏è –ø—Ä–æ–ø—É—â–µ–Ω\n"
        else:
            result_text += f"‚Ññ{i}: ‚Äî –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –ë–î
    for q_id, answer_data in exam_answers.items():
        if not answer_data['is_correct']:
            question = context.user_data.get(f'question_{q_id}')
            if question:
                await db.record_mistake(user_id, q_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for question in exam_questions:
        if question['id'] in exam_answers:
            topic = question.get('topic')
            is_correct = exam_answers[question['id']]['is_correct']
            await db.update_progress(user_id, topic, is_correct)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–∞
    context.user_data.pop('exam_mode', None)
    context.user_data.pop('exam_questions', None)
    context.user_data.pop('exam_answers', None)
    context.user_data.pop('exam_results', None)
    context.user_data.pop('exam_current', None)
    context.user_data.pop('exam_skipped', None)
    
    # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ
    subscription_manager = context.bot_data.get('subscription_manager')
    if subscription_manager:
        user_id = context.user_data.get('user_id')
        has_subscription = await subscription_manager.check_active_subscription(user_id)
        
        if not has_subscription:
            if percentage >= 80:
                promo_text = "\n\nüéâ <b>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>\n"
                promo_text += "–ì–æ—Ç–æ–≤—ã –ø–æ–∫–æ—Ä–∏—Ç—å –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –ï–ì–≠?\n"
                promo_text += "ü§ñ –ò–ò –ø–æ–º–æ–∂–µ—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ 19,20,25\n"
                promo_text += "üìù –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–æ–≤ –≤ –∑–∞–¥–∞–Ω–∏–∏ 24\n"
                promo_text += "\n<b>–ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π ‚Äî –≤—Å–µ–≥–æ 1‚ÇΩ!</b>"
            elif percentage >= 60:
                promo_text = "\n\nüí™ <b>–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>\n"
                promo_text += "–° –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–π–¥—ë—Ç –±—ã—Å—Ç—Ä–µ–µ:\n"
                promo_text += "üìä –£–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–π–¥—ë—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã\n"
                promo_text += "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
                promo_text += "\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 7 –¥–Ω–µ–π –∑–∞ 1‚ÇΩ!</b>"
            else:
                promo_text = "\n\nüìö <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π?</b>\n"
                promo_text += "–ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                promo_text += "ü§ñ –ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–∞–∑–±–æ—Ä–æ–º –æ—à–∏–±–æ–∫\n"
                promo_text += "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º\n"
                promo_text += "\n<b>–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞ 1‚ÇΩ!</b>"
            
            result_text += promo_text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            kb = keyboards.get_exam_results_keyboard()
            new_kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üíé –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="pay_trial")],
                *kb.inline_keyboard
            ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await message.reply_text(
        result_text,
        parse_mode=ParseMode.HTML,
        reply_markup=new_kb if not has_subscription else keyboards.get_exam_results_keyboard()
    )

@safe_handler()
async def handle_unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data –≤ test_part."""
    query = update.callback_query
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –≤ test_part: {query.data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à–∏ –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∏
    if query.data in ["test_export_csv", "test_work_mistakes"]:
        logger.error(f"–í–ù–ò–ú–ê–ù–ò–ï: callback {query.data} –ø–æ–ø–∞–ª –≤ handle_unknown_callback!")
    
    await query.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return states.CHOOSING_MODE



async def cmd_export_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export - —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV —Ñ–∞–π–ª."""
    user_id = update.effective_user.id
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
        csv_content = await utils.export_user_stats_csv(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        from io import BytesIO
        file_data = BytesIO(csv_content.encode('utf-8-sig'))  # utf-8-sig –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        file_data.name = f"statistics_{user_id}.csv"
        
        await update.message.reply_document(
            document=file_data,
            filename=f"statistics_{user_id}_{datetime.now().strftime('%Y%m%d')}.csv",
            caption="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV\n\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ Google Sheets –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user {user_id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cmd_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /report - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
    user_id = update.effective_user.id
    
    try:
        report = await utils.generate_detailed_report(user_id)
        await update.message.reply_text(report, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è user {user_id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@safe_handler()
async def abort_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞."""
    query = update.callback_query
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="exam_abort_confirm"),
            InlineKeyboardButton("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", callback_data="exam_continue")
        ]
    ])
    
    await query.edit_message_text(
        "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω?</b>\n\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.EXAM_MODE

@safe_handler()
async def abort_exam_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞."""
    query = update.callback_query
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–∞
    context.user_data.pop('exam_mode', None)
    context.user_data.pop('exam_questions', None)
    context.user_data.pop('exam_answers', None)
    context.user_data.pop('exam_results', None)
    context.user_data.pop('exam_current', None)
    context.user_data.pop('exam_skipped', None)
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "‚ùå –≠–∫–∑–∞–º–µ–Ω –ø—Ä–µ—Ä–≤–∞–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
async def exam_continue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —ç–∫–∑–∞–º–µ–Ω")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_index = context.user_data.get('exam_current', 1) - 1
    await send_exam_question(query.message, context, current_index)
    return states.EXAM_MODE

@safe_handler()
async def start_partial_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ (–º–µ–Ω–µ–µ 16 –≤–æ–ø—Ä–æ—Å–æ–≤)."""
    query = update.callback_query
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_exam_question(query.message, context, 0)
    return states.EXAM_MODE

@safe_handler()
async def exam_detailed_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    # —Å –ø–æ–∫–∞–∑–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
    
    text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä —ç–∫–∑–∞–º–µ–Ω–∞</b>\n\n"
    text += "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã –º–æ–∂–µ—Ç–µ:\n"
    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏\n"
    text += "‚Ä¢ –ü—Ä–æ–π—Ç–∏ —ç–∫–∑–∞–º–µ–Ω –∑–∞–Ω–æ–≤–æ\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîß –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="initial:select_mistakes")],
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —ç–∫–∑–∞–º–µ–Ω", callback_data="initial:exam_mode")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="to_test_part_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º –æ—Ç 1 –¥–æ 16
def safe_cache_get_exam_questions():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ (–Ω–æ–º–µ—Ä–∞ 1-16)."""
    exam_questions = []
    
    for exam_num in range(1, 17):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É
            questions = safe_cache_get_by_exam_num(exam_num)
            if questions:
                exam_questions.append({
                    'exam_num': exam_num,
                    'questions': questions
                })
        except Exception as e:
            logger.error(f"Error getting questions for exam_num {exam_num}: {e}")
            continue
    
    return exam_questions

async def send_mistake_question(message, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
    mistake_queue = context.user_data.get('mistake_queue', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    if current_index >= len(mistake_queue):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
        kb = keyboards.get_mistakes_finish_keyboard()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ reply_text
        if hasattr(message, 'edit_text'):
            await message.edit_text(
                "‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=kb
            )
        else:
            await message.reply_text(
                "‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=kb
            )
        return states.CHOOSING_MODE
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    mistake_id = mistake_queue[current_index]
    question_data = utils.find_question_by_id(mistake_id)
    
    if not question_data:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        context.user_data['current_mistake_index'] = current_index + 1
        return await send_mistake_question(message, context)
    
    # –í–ê–ñ–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
    context.user_data['current_mistake_index'] = current_index + 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await send_question(message, context, question_data, "mistakes")
    return states.REVIEWING_MISTAKES

@safe_handler()
@validate_state_transition({states.REVIEWING_MISTAKES})
async def handle_mistake_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—à–∏–±–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π."""
    
    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    checking_msg = await show_thinking_animation(
        update.message,
        text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç"
    )
    
    user_answer = update.message.text.strip()
    current_question_id = context.user_data.get('current_question_id')
    user_id = update.effective_user.id
    context.user_data['user_answer_message_id'] = update.message.message_id
    if not current_question_id:
        await checking_msg.delete()
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return states.CHOOSING_MODE
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    question_data = context.user_data.get(f'question_{current_question_id}')
    
    if not question_data:
        await checking_msg.delete()
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return states.CHOOSING_MODE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    correct_answer = str(question_data.get('answer', ''))
    question_type = question_data.get('type', 'multiple_choice')
    topic = question_data.get('topic')
    
    is_correct = utils.normalize_answer(user_answer, question_type) == \
                 utils.normalize_answer(correct_answer, question_type)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await db.update_progress(user_id, topic, is_correct)
    
    # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - —É–¥–∞–ª—è–µ–º –∏–∑ –æ—à–∏–±–æ–∫
    if is_correct:
        await db.delete_mistake(user_id, current_question_id)
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        mistake_ids = context.user_data.get('mistake_ids', [])
        current_index = context.user_data.get('current_mistake_index', 0)
        if 0 <= current_index < len(mistake_ids):
            mistake_ids.pop(current_index)
            context.user_data['mistake_ids'] = mistake_ids
    else:
        # –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ—à–∏–±–∫–µ
        context.user_data['current_mistake_index'] = context.user_data.get('current_mistake_index', 0) + 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        feedback = f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞."
    else:
        feedback = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
        feedback += f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n"
        feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    mistake_ids = context.user_data.get('mistake_ids', [])
    current_index = context.user_data.get('current_mistake_index', 0)
    
    kb_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if question_data.get('explanation'):
        kb_buttons.append([
            InlineKeyboardButton(
                "üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ",
                callback_data="test_next_show_explanation",
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if current_index < len(mistake_ids):
        kb_buttons.append([
            InlineKeyboardButton(
                "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞",
                callback_data="test_next_continue",
            )
        ])
    else:
        kb_buttons.append([
            InlineKeyboardButton(
                "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data="test_mistake_finish",
            )
        ])
    
    kb_buttons.append([
        InlineKeyboardButton(
            "üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞",
            callback_data="test_next_change_topic",
        )
    ])
    
    kb = InlineKeyboardMarkup(kb_buttons)
    
    # –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–µ—Ä—è—é..." –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–¥–±–µ–∫–∞
    try:
        await checking_msg.delete()
    except Exception:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫
    sent_msg = await update.message.reply_text(
        feedback,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    context.user_data['feedback_message_id'] = sent_msg.message_id
    context.user_data['last_mode'] = 'mistakes'
    
    return states.CHOOSING_NEXT_ACTION

@safe_handler()
@validate_state_transition({states.REVIEWING_MISTAKES, states.CHOOSING_MODE})
async def mistake_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—à–∏–±–∫–∞–º."""
    query = update.callback_query
    
    action = query.data

    if action == "test_mistake_finish":
        kb = keyboards.get_initial_choice_keyboard()
        await query.edit_message_text(
            "‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    return states.REVIEWING_MISTAKES
    
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE, states.CHOOSING_EXAM_NUMBER})
async def select_exam_num(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è."""
    query = update.callback_query
    context.user_data['user_id'] = query.from_user.id
    
    try:
        exam_number = int(query.data.split(":", 2)[2])
    except (ValueError, IndexError):
        return states.CHOOSING_EXAM_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    context.user_data['current_exam_number'] = exam_number
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
    questions_with_num = safe_cache_get_by_exam_num(exam_number)
    
    if not questions_with_num:
        return states.CHOOSING_EXAM_NUMBER
    
    await query.edit_message_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}...")
    
    # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_data = await utils.choose_question(query.from_user.id, questions_with_num)
    if question_data:
        await send_question(query.message, context, question_data, "exam_num")
        # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, states.ANSWERING)
        return states.ANSWERING
    else:
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è ‚Ññ{exam_number}! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return states.CHOOSING_MODE
        
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mode_random_in_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    context.user_data['user_id'] = query.from_user.id
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        await query.answer("‚ùå –ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
        return states.CHOOSING_BLOCK
    
    questions_in_block = safe_cache_get_by_block(selected_block)
    
    if not questions_in_block:
        await query.answer("‚ùå –í –±–ª–æ–∫–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.edit_message_text(
            f"‚ùå –í –±–ª–æ–∫–µ '{selected_block}' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_BLOCK
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–ª–æ–∫–∞...")
    
    question_data = await utils.choose_question(query.from_user.id, questions_in_block)
    if question_data:
        await send_question(query.message, context, question_data, "block")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, states.ANSWERING)
        return states.ANSWERING
    else:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
            reply_markup=kb
        )
        return states.CHOOSING_BLOCK

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mode_topic_in_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –≤ –±–ª–æ–∫–µ."""
    query = update.callback_query
    context.user_data['user_id'] = query.from_user.id
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        return states.CHOOSING_BLOCK
    
    topics = list(QUESTIONS_DATA[selected_block].keys())
    if not topics:
        return states.CHOOSING_MODE
    
    kb = keyboards.get_topics_keyboard(selected_block, topics)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=kb
    )
    return states.CHOOSING_TOPIC

@safe_handler()
@validate_state_transition({states.CHOOSING_TOPIC})
async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    context.user_data['user_id'] = query.from_user.id
    selected_topic = query.data.replace("topic:", "")
    selected_block = context.user_data.get('selected_block')
    
    if not selected_block or not selected_topic:
        return states.CHOOSING_TOPIC
    
    questions_in_topic = safe_cache_get_by_topic(selected_topic)
    if not questions_in_topic:
        return states.CHOOSING_TOPIC
    
    context.user_data['selected_topic'] = selected_topic
    
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ...")
    
    question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
    if question_data:
        await send_question(query.message, context, question_data, "topic")
        # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:
        from core.state_validator import state_validator
        state_validator.set_state(query.from_user.id, states.ANSWERING)
        return states.ANSWERING
    else:
        topics = list(QUESTIONS_DATA[selected_block].keys())
        kb = keyboards.get_topics_keyboard(selected_block, topics)
        await query.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
            reply_markup=kb
        )
        return states.CHOOSING_TOPIC

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    context.user_data['user_id'] = query.from_user.id
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    user_id = query.from_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        return states.CHOOSING_MODE
    
    context.user_data['mistake_ids'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['user_id'] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è send_mistake_question
    
    await query.edit_message_text(
        f"üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(mistake_ids)}\n"
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É...",
        parse_mode=ParseMode.HTML
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(query.message, context)
    return states.REVIEWING_MISTAKES
    
async def cmd_debug_streaks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug_streaks - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–∫–∞—Ö."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–∫–∏
    streaks = await db.get_user_streaks(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        async with aiosqlite.connect(DATABASE_FILE) as conn:
            cursor = await conn.execute(
                """SELECT current_daily_streak, max_daily_streak, 
                          current_correct_streak, max_correct_streak,
                          last_activity_date
                   FROM users WHERE user_id = ?""",
                (user_id,)
            )
            row = await cursor.fetchone()
            
            if row:
                text = f"üîç <b>–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä–∏–∫–æ–≤ –¥–ª—è user {user_id}:</b>\n\n"
                text += f"<b>–ò–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_streaks:</b>\n"
                text += f"  current_daily: {streaks.get('current_daily', 'None')}\n"
                text += f"  max_daily: {streaks.get('max_daily', 'None')}\n"
                text += f"  current_correct: {streaks.get('current_correct', 'None')}\n"
                text += f"  max_correct: {streaks.get('max_correct', 'None')}\n\n"
                
                text += f"<b>–ü—Ä—è–º–æ –∏–∑ –ë–î:</b>\n"
                text += f"  current_daily_streak: {row[0]}\n"
                text += f"  max_daily_streak: {row[1]}\n"
                text += f"  current_correct_streak: {row[2]}\n"
                text += f"  max_correct_streak: {row[3]}\n"
                text += f"  last_activity_date: {row[4]}\n"
            else:
                text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î: {e}"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é cmd_score
    await cmd_score(query, context)
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    stats = await db.get_user_stats(user_id)
    mistakes = await utils.get_user_mistakes(user_id)
    
    if not stats:
        await query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
        return states.CHOOSING_MODE
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º</b>\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    topics_analysis = []
    for topic, correct, total in stats:
        if total > 0:
            percentage = (correct / total * 100)
            topic_name = TOPIC_NAMES.get(topic, topic)
            topics_analysis.append((topic_name, correct, total, percentage))
    
    topics_analysis.sort(key=lambda x: x[3], reverse=True)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    excellent = [t for t in topics_analysis if t[3] >= 90]
    good = [t for t in topics_analysis if 70 <= t[3] < 90]
    average = [t for t in topics_analysis if 50 <= t[3] < 70]
    weak = [t for t in topics_analysis if t[3] < 50]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
    if excellent:
        text += "üåü <b>–û—Ç–ª–∏—á–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ:</b>\n"
        for topic_name, correct, total, percentage in excellent:
            text += f"‚Ä¢ {topic_name}: {correct}/{total} ({percentage:.0f}%)\n"
        text += "\n"
    
    if good:
        text += "‚úÖ <b>–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å:</b>\n"
        for topic_name, correct, total, percentage in good:
            text += f"‚Ä¢ {topic_name}: {correct}/{total} ({percentage:.0f}%)\n"
        text += "\n"
    
    if average:
        text += "üìù <b>–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å:</b>\n"
        for topic_name, correct, total, percentage in average:
            text += f"‚Ä¢ {topic_name}: {correct}/{total} ({percentage:.0f}%)\n"
        text += "\n"
    
    if weak:
        text += "‚ùó <b>–¢—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:</b>\n"
        for topic_name, correct, total, percentage in weak:
            text += f"‚Ä¢ {topic_name}: {correct}/{total} ({percentage:.0f}%)\n"
        text += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
    if mistakes:
        mistakes_by_topic = {}
        for mistake in mistakes:
            topic = mistake.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
            if topic not in mistakes_by_topic:
                mistakes_by_topic[topic] = []
            mistakes_by_topic[topic].append(mistake)
        
        text += "üìå <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:</b>\n"
        for topic, topic_mistakes in sorted(mistakes_by_topic.items(), 
                                          key=lambda x: len(x[1]), reverse=True)[:5]:
            text += f"‚Ä¢ {topic}: {len(topic_mistakes)} –æ—à–∏–±–æ–∫\n"
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += "\nüí° <b>–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
    if weak:
        text += f"1. –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ —Ç–µ–º–∞–º: {', '.join([t[0] for t in weak[:3]])}\n"
    if len(mistakes) > 5:
        text += "2. –ü—Ä–æ–π–¥–∏—Ç–µ ¬´–†–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏¬ª\n"
    text += "3. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="test_export_csv")],
        [InlineKeyboardButton("üîß –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="test_work_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_part_progress")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
    
@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def detailed_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –Ω–∞–≥–ª—è–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['conversation_state'] = states.CHOOSING_MODE
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    stats = await db.get_user_stats(user_id)
    mistakes = await db.get_mistake_ids(user_id)
    streaks = await db.get_user_streaks(user_id)
    
    if not stats:
        # –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text = MessageFormatter.format_welcome_message(
            "—Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –ï–ì–≠",
            is_new_user=True
        )
        kb = keyboards.get_initial_choice_keyboard()
    else:
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_correct = sum(correct for _, correct, _ in stats)
        total_answered = sum(total for _, _, total in stats)
        overall_percentage = (total_correct / total_answered * 100) if total_answered > 0 else 0
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–º—ã (–º–µ–Ω—å—à–µ 60% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö)
        weak_topics = []
        for topic, correct, total in stats:
            if total > 0 and (correct / total) < 0.6:
                topic_name = TOPIC_NAMES.get(topic, topic)
                percentage = (correct / total * 100)
                weak_topics.append((topic_name, percentage))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–º—ã –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
        weak_topics.sort(key=lambda x: x[1])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = f"üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        
        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = UniversalUIComponents.create_progress_bar(
            total_correct, total_answered, width=15, show_percentage=True
        )
        text += f"<b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress_bar}\n"
        text += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {total_correct} –∏–∑ {total_answered}\n\n"
        
        # –°—Ç—Ä–∏–∫–∏
        if streaks:
            text += f"<b>üî• –°–µ—Ä–∏–∏:</b>\n"
            if streaks.get('current_daily', 0) > 0:
                text += f"‚Ä¢ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streaks['current_daily']} (—Ä–µ–∫–æ—Ä–¥: {streaks.get('max_daily', 0)})\n"
            if streaks.get('current_correct', 0) > 0:
                text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥: {streaks['current_correct']} (—Ä–µ–∫–æ—Ä–¥: {streaks.get('max_correct', 0)})\n"
            text += "\n"
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–º—ã (–º–∞–∫—Å–∏–º—É–º 5)
        if weak_topics:
            text += "<b>üìç –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:</b>\n"
            for topic_name, percentage in weak_topics[:5]:
                color = UniversalUIComponents.get_color_for_score(percentage, 100)
                text += f"{color} {topic_name}: {percentage:.0f}%\n"
            text += "\n"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        if len(mistakes) > 0:
            text += f"<b>‚ùó –û—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏:</b> {len(mistakes)}\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        if len(mistakes) > 10:
            text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º ¬´–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏¬ª\n"
        if weak_topics:
            text += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Ç–µ–º–∞–º\n"
        if overall_percentage > 80:
            text += "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã\n"
        elif overall_percentage < 60:
            text += "‚Ä¢ –£–¥–µ–ª–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∞–∫—Ç–∏–∫–æ–π\n"
        
        subscription_manager = context.bot_data.get('subscription_manager')
        if subscription_manager:
            user_id = query.from_user.id
            has_subscription = await subscription_manager.check_active_subscription(user_id)
            
            if not has_subscription and total_answered >= 20:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ –≤ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                text += "\n\n<b>üíé –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!</b>\n"
                text += "ü§ñ –ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π 19-20 –∑–∞ —Å–µ–∫—É–Ω–¥—ã\n"
                text += "üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–∞–±—ã–º –º–µ—Å—Ç–∞–º\n" 
                text += "üìö –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ —Å —Ä–∞–∑–±–æ—Ä–∞–º–∏\n"
                text += "\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 7 –¥–Ω–µ–π –≤—Å–µ–≥–æ –∑–∞ 1‚ÇΩ!</b>"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="pay_trial")],
                    *kb.inline_keyboard  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
                ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def work_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        text = "üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏!"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="test_back_to_mode")
        ]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –∏ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    context.user_data['mode'] = 'mistakes'
    context.user_data['mistake_queue'] = mistake_ids.copy()
    context.user_data['mistakes_total'] = len(mistake_ids)
    context.user_data['mistakes_completed'] = 0
    context.user_data['mistake_ids'] = list(mistake_ids)
    context.user_data['current_mistake_index'] = 0
    context.user_data['user_id'] = user_id
    
    text = f"""üîÑ <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>

–£ –≤–∞—Å {len(mistake_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏.

–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–Ω–æ–≤–æ. 
–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"""
    
    # –î–û–ë–ê–í–ò–¢–¨: –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–µ–º–∏—É–º
    if len(mistake_ids) > 10:
        subscription_manager = context.bot_data.get('subscription_manager')
        if subscription_manager:
            has_subscription = await subscription_manager.check_active_subscription(user_id)
            
            if not has_subscription:
                text = f"üìö <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
                text += f"–£ –≤–∞—Å {len(mistake_ids)} –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                text += "üí° <b>–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?</b>\n"
                text += "–° –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
                text += "‚Ä¢ ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫\n"
                text += "‚Ä¢ üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤\n"
                text += "‚Ä¢ ‚úçÔ∏è –¢—Ä–µ–Ω–∞–∂—ë—Ä –∑–∞–¥–∞–Ω–∏–π –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏\n\n"
                text += "<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 7 –¥–Ω–µ–π –∑–∞ 1‚ÇΩ!</b>\n\n"
                text += "–ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏:"
                
                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="pay_trial")],
                    [InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="start_mistakes_work")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="to_test_part_menu")]
                ])
                
                await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
                return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_work_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    return await work_mistakes(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_start_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤ work_mistakes
    if 'mistake_ids' not in context.user_data or not context.user_data['mistake_ids']:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="test_back_to_mode")
        ]])
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=kb
        )
        return states.CHOOSING_MODE
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
    await send_mistake_question(query.message, context)
    
    return states.REVIEWING_MISTAKES

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV."""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        mistakes = await utils.get_user_mistakes(user_id)
        stats = await db.get_user_stats(user_id)
        
        if not stats:
            await query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return states.CHOOSING_MODE
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Excel
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ; –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Excel
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        writer.writerow(['–û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–û–í–û–ô –ß–ê–°–¢–ò –ï–ì–≠ –ü–û –û–ë–©–ï–°–¢–í–û–ó–ù–ê–ù–ò–Æ'])
        writer.writerow([f'–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime("%d.%m.%Y %H:%M")}'])
        writer.writerow([f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}'])
        writer.writerow([])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        writer.writerow(['=' * 20 + ' –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ' + '=' * 20])
        writer.writerow([])
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        writer.writerow(['–¢–µ–º–∞', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', '–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤', '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö', '–û—Ü–µ–Ω–∫–∞'])
        
        total_correct = 0
        total_answered = 0
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–∞–º —Å –æ—Ü–µ–Ω–∫–æ–π
        for topic, correct, answered in stats:
            percentage = (correct / answered * 100) if answered > 0 else 0
            topic_name = TOPIC_NAMES.get(topic, topic)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
            if percentage >= 90:
                grade = '–û—Ç–ª–∏—á–Ω–æ'
            elif percentage >= 70:
                grade = '–•–æ—Ä–æ—à–æ'
            elif percentage >= 50:
                grade = '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'
            else:
                grade = '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'
            
            writer.writerow([topic_name, correct, answered, f'{percentage:.1f}%', grade])
            total_correct += correct
            total_answered += answered
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        writer.writerow([])
        total_percentage = (total_correct/total_answered*100 if total_answered > 0 else 0)
        writer.writerow(['–ò–¢–û–ì–û:', total_correct, total_answered, f'{total_percentage:.1f}%', ''])
        writer.writerow([])
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        if mistakes:
            writer.writerow(['=' * 20 + ' –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö ' + '=' * 20])
            writer.writerow([])
            writer.writerow(['‚Ññ', 'ID –≤–æ–ø—Ä–æ—Å–∞', '–¢–µ–º–∞', '–¢–∏–ø –æ—à–∏–±–∫–∏', '–ù–æ–º–µ—Ä –≤ –ï–ì–≠'])
            
            for idx, mistake in enumerate(mistakes, 1):
                writer.writerow([
                    idx,
                    mistake.get('question_id', 'N/A'),
                    mistake.get('topic', '–ë–µ–∑ —Ç–µ–º—ã'),
                    mistake.get('error_type', '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç'),
                    mistake.get('exam_number', 'N/A')
                ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        writer.writerow([])
        writer.writerow(['=' * 20 + ' –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ' + '=' * 20])
        writer.writerow([])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Ç–µ–º—ã
        weak_topics = []
        for topic, correct, answered in stats:
            if answered > 0 and (correct / answered) < 0.6:
                topic_name = TOPIC_NAMES.get(topic, topic)
                percentage = (correct / answered * 100)
                weak_topics.append((topic_name, percentage))
        
        if weak_topics:
            writer.writerow(['–¢–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:'])
            for topic_name, percentage in sorted(weak_topics, key=lambda x: x[1]):
                writer.writerow([f'- {topic_name} ({percentage:.0f}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)'])
        
        if len(mistakes) > 10:
            writer.writerow(['- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏"'])
        
        if total_percentage > 80:
            writer.writerow(['- –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'])
        elif total_percentage < 60:
            writer.writerow(['- –£–¥–µ–ª–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑—É—á–µ–Ω–∏—é —Ç–µ–æ—Ä–∏–∏'])
        
        # –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        output.seek(0)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTF-8 BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        bio = io.BytesIO()
        bio.write('\ufeff'.encode('utf-8'))  # BOM –¥–ª—è Excel
        bio.write(output.getvalue().encode('utf-8'))
        bio.seek(0)
        bio.name = f'test_statistics_{user_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await query.message.reply_document(
            document=bio,
            caption="üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    "üí° –°–æ–≤–µ—Ç: –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel, –≤—ã–¥–µ–ª–∏—Ç–µ –≤—Å–µ —è—á–µ–π–∫–∏ (Ctrl+A) "
                    "–∏ –¥–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã.",
            filename=bio.name,
            parse_mode=ParseMode.HTML
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_part_progress")
        ]])
        
        await query.message.reply_text(
            "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=kb
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ", show_alert=True)
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def work_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    mistake_ids = await db.get_mistake_ids(user_id)
    
    if not mistake_ids:
        text = "üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏!"
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="test_back_to_mode")
        ]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –∏ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    context.user_data['mode'] = 'mistakes'
    context.user_data['mistake_queue'] = mistake_ids.copy()
    context.user_data['mistakes_total'] = len(mistake_ids)
    context.user_data['mistakes_completed'] = 0
    
    text = f"""üîÑ <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>

–£ –≤–∞—Å {len(mistake_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏.

–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–Ω–æ–≤–æ. 
–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å", callback_data="test_start_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_back_to_mode")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    return await work_mistakes(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    return await select_random_all(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def test_start_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
    if 'mistake_queue' not in context.user_data:
        await query.answer("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return states.CHOOSING_MODE
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –æ—à–∏–±–∫–∏
    context.user_data['current_mistake_index'] = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    await send_mistake_question(query.message, context)
    
    return states.REVIEWING_MISTAKES

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    user_data = await db.get_user_status(user_id)
    is_subscribed = user_data.get('is_subscribed', False)
    
    if is_subscribed:
        text = """‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>

–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    else:
        text = """‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>

–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ –î–æ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."""
    
    kb_buttons = []
    if not is_subscribed:
        kb_buttons.append([
            InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url="https://example.com/subscribe")
        ])
    
    kb_buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_back_to_mode")
    ])
    
    kb = InlineKeyboardMarkup(kb_buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def test_back_to_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    return await back_to_mode(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ work_mistakes."""
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º work_mistakes –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    return await work_mistakes(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def select_practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏ - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã."""
    return await select_random_all(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def reset_progress_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="test_reset_do"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="to_test_part_menu")
        ]
    ])
    
    await query.edit_message_text(
        "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤–µ—Å—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å, –≤–∫–ª—é—á–∞—è:\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫\n"
        "‚Ä¢ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç—Ä–∏–∫–∏\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def reset_progress_do(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ test_part."""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        await db.reset_user_progress(user_id)
        
        # –û—á–∏—â–∞–µ–º –¢–û–õ–¨–ö–û –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ test_part
        keys_to_remove = [
            'mistake_ids',
            'current_mistake_index',
            'current_topic',
            'current_question_id',
            'user_id'
        ]
        
        for key in keys_to_remove:
            context.user_data.pop(key, None)
        
        # –ù–ï –¢–†–û–ì–ê–ï–ú –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π!
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞—Ç–Ω–æ
        context.user_data['active_module'] = 'test_part'
        
        kb = keyboards.get_initial_choice_keyboard()
        await query.edit_message_text(
            "‚úÖ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error resetting progress for user {user_id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="to_test_part_menu")
            ]])
        )
    
    return states.CHOOSING_MODE

@safe_handler()
async def back_to_test_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
    context.user_data['active_module'] = 'test_part'
    
    kb = keyboards.get_initial_choice_keyboard()
    await query.edit_message_text(
        "üìö <b>–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ï–ì–≠</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
# payment/admin_commands.py
"""–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
import logging
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, Application
from telegram.constants import ParseMode
from functools import wraps

from core import config
from .subscription_manager import SubscriptionManager

logger = logging.getLogger(__name__)


def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤."""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admin_ids = []
        if hasattr(config, 'ADMIN_IDS') and config.ADMIN_IDS:
            if isinstance(config.ADMIN_IDS, str):
                admin_ids = [int(id.strip()) for id in config.ADMIN_IDS.split(',') if id.strip()]
            elif isinstance(config.ADMIN_IDS, list):
                admin_ids = [int(id) for id in config.ADMIN_IDS]
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        return await func(update, context)
    
    return wrapper


@admin_only
async def cmd_grant_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_subscription <user_id> <plan_id>"""
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_subscription <user_id> <plan_id>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:\n"
            "‚Ä¢ trial_7days - –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            "‚Ä¢ package_second_part - –ø–∞–∫–µ—Ç '–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å'\n"
            "‚Ä¢ package_full - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ module_test_part - —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å\n"
            "‚Ä¢ module_task19 - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ 19\n"
            "‚Ä¢ module_task20 - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ 20\n"
            "‚Ä¢ module_task25 - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ 25\n"
            "‚Ä¢ module_task24 - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ 24"
        )
        return
    
    try:
        user_id = int(context.args[0])
        plan_id = context.args[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–∞–Ω
        if plan_id not in SUBSCRIPTION_PLANS:
            await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω: {plan_id}")
            return
        
        subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π payment_id
        payment_id = f"ADMIN_GRANT_{datetime.now().timestamp()}"
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if SUBSCRIPTION_MODE == 'modular':
            await subscription_manager._activate_modular_subscription(user_id, plan_id, payment_id)
        else:
            await subscription_manager._activate_unified_subscription(user_id, plan_id, payment_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_info = await subscription_manager.get_subscription_info(user_id)
        
        text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        text += f"–ü–ª–∞–Ω: {SUBSCRIPTION_PLANS[plan_id]['name']}\n"
        
        if subscription_info:
            if SUBSCRIPTION_MODE == 'modular':
                text += f"–ú–æ–¥—É–ª–∏: {', '.join(subscription_info.get('modules', []))}\n"
            text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info.get('expires_at')}"
        
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                f"üéÅ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
                f"–ü–ª–∞–Ω: {SUBSCRIPTION_PLANS[plan_id]['name']}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_subscriptions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
            )
        except Exception as e:
            logger.error(f"Failed to notify user: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error granting subscription: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_only
async def cmd_revoke_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
        return
    
    try:
        user_id = int(context.args[0])
        
        subscription_manager = SubscriptionManager()
        success = await subscription_manager.cancel_subscription(user_id)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω–∞"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.exception(f"Error revoking subscription: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_only
async def cmd_payment_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π."""
    try:
        await update.message.reply_text(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/grant <user_id> <plan> - –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            "/revoke <user_id> - –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.exception(f"Error getting payment stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def cmd_check_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    admin_ids = []
    if hasattr(config, 'ADMIN_IDS') and config.ADMIN_IDS:
        if isinstance(config.ADMIN_IDS, str):
            admin_ids = [int(id.strip()) for id in config.ADMIN_IDS.split(',') if id.strip()]
        elif isinstance(config.ADMIN_IDS, list):
            admin_ids = config.ADMIN_IDS
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º BOT_ADMIN_IDS –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(config, 'BOT_ADMIN_IDS') and config.BOT_ADMIN_IDS:
        bot_admin_ids = []
        if isinstance(config.BOT_ADMIN_IDS, str):
            bot_admin_ids = [int(id.strip()) for id in config.BOT_ADMIN_IDS.split(',') if id.strip()]
        elif isinstance(config.BOT_ADMIN_IDS, list):
            bot_admin_ids = config.BOT_ADMIN_IDS
        admin_ids.extend(bot_admin_ids)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    admin_ids = list(set(admin_ids))
    
    if user_id in admin_ids:
        await update.message.reply_text(
            f"‚úÖ <b>–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
            f"üì± –í–∞—à ID: <code>{user_id}</code>\n"
            f"üë• –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {len(admin_ids)}\n"
            f"üìã –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤: {', '.join(map(str, admin_ids))}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/grant &lt;user_id&gt; &lt;plan&gt; - –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            f"/revoke &lt;user_id&gt; - –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            f"/payment_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π",
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            f"‚ùå <b>–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n\n"
            f"üì± –í–∞—à ID: <code>{user_id}</code>\n"
            f"üí° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            f"1. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID –≤ —Ñ–∞–π–ª <code>.env</code>:\n"
            f"   <code>ADMIN_IDS={user_id}</code>\n\n"
            f"2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: {len(admin_ids)}",
            parse_mode=ParseMode.HTML
        )

def register_admin_commands(app: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã."""
    app.add_handler(CommandHandler("grant_subscription", cmd_grant_subscription))
    app.add_handler(CommandHandler("revoke", cmd_revoke_subscription))
    app.add_handler(CommandHandler("payment_stats", cmd_payment_stats))
    app.add_handler(CommandHandler("check_admin", cmd_check_admin))
    logger.info("Admin commands registered")
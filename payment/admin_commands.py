# payment/admin_commands.py
"""–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CommandHandler

from core.admin_tools import admin_only
from .subscription_manager import SubscriptionManager
from .config import SUBSCRIPTION_PLANS

logger = logging.getLogger(__name__)

subscription_manager = SubscriptionManager()


@admin_only
async def cmd_grant_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <user_id> <plan_id> [days]"""
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <user_id> <plan_id> [days]\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: {', '.join(SUBSCRIPTION_PLANS.keys())}"
        )
        return
    
    try:
        user_id = int(context.args[0])
        plan_id = context.args[1]
        days = int(context.args[2]) if len(context.args) > 2 else None
        
        if plan_id not in SUBSCRIPTION_PLANS:
            await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω: {plan_id}")
            return
        
        success = await subscription_manager.grant_subscription(
            user_id=user_id,
            plan_id=plan_id,
            days=days,
            reason=f"admin_grant_by_{update.effective_user.id}"
        )
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                plan = SUBSCRIPTION_PLANS[plan_id]
                await context.bot.send_message(
                    user_id,
                    f"üéÅ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ \"{plan['name']}\"!\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
                )
            except:
                pass
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {plan_id} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    except Exception as e:
        logger.exception(f"Error granting subscription: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_only
async def cmd_revoke_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>"""
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
        return
    
    try:
        user_id = int(context.args[0])
        
        success = await subscription_manager.cancel_subscription(user_id)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω–∞"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.exception(f"Error revoking subscription: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_only
async def cmd_payment_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π."""
    
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        text = """üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>

üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/grant - –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/revoke - –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.exception(f"Error getting payment stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


def register_admin_commands(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã."""
    app.add_handler(CommandHandler("grant", cmd_grant_subscription))
    app.add_handler(CommandHandler("revoke", cmd_revoke_subscription))
    app.add_handler(CommandHandler("payment_stats", cmd_payment_stats))
# payment/admin_commands.py
"""–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
import logging
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, Application, CallbackQueryHandler
from telegram.constants import ParseMode
from functools import wraps
import aiosqlite
from core import config
from .subscription_manager import SubscriptionManager
DATABASE_PATH = 'quiz_async.db'
logger = logging.getLogger(__name__)


def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤."""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admin_ids = []
        if hasattr(config, 'ADMIN_IDS') and config.ADMIN_IDS:
            if isinstance(config.ADMIN_IDS, str):
                admin_ids = config.ADMIN_IDS if isinstance(config.ADMIN_IDS, list) else []
            elif isinstance(config.ADMIN_IDS, list):
                admin_ids = [int(id) for id in config.ADMIN_IDS]
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        return await func(update, context)
    
    return wrapper

@admin_only
async def cmd_test_webhook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."""
    import aiohttp
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    test_order_id = f"TEST_{int(datetime.now().timestamp())}"
    user_id = update.effective_user.id
    
    subscription_manager = context.bot_data.get('subscription_manager')
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    await subscription_manager.create_payment(
        user_id=user_id,
        plan_id='trial_7days',
        amount_kopecks=100
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º webhook –æ—Ç Tinkoff
    webhook_data = {
        "TerminalKey": config.TINKOFF_TERMINAL_KEY,
        "OrderId": test_order_id,
        "Status": "CONFIRMED",
        "PaymentId": "12345",
        "Token": "test_token"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    }
    
    webhook_url = f"http://localhost:8080/webhook"  # –ò–ª–∏ –≤–∞—à webhook URL
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(webhook_url, json=webhook_data) as response:
                result = await response.text()
                status = response.status
        
        await update.message.reply_text(
            f"üß™ –¢–µ—Å—Ç webhook:\n"
            f"Status: {status}\n"
            f"Response: {result}\n"
            f"Order ID: {test_order_id}"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")


@admin_only
async def cmd_grant_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_subscription <user_id> <plan_id>"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—ã—à–µ
    from .config import SUBSCRIPTION_PLANS, SUBSCRIPTION_MODE
    from datetime import datetime
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_subscription <user_id> <plan_id>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:\n"
            "‚Ä¢ trial_7days - –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            "‚Ä¢ package_second_part - –ø–∞–∫–µ—Ç '–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å'\n"
            "‚Ä¢ package_full - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ module_test_part - —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å\n"
            "‚Ä¢ module_task19 - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ 19\n"
            "‚Ä¢ module_task20 - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ 20\n"
            "‚Ä¢ module_task25 - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ 25\n"
            "‚Ä¢ module_task24 - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ 24"
        )
        return
    
    try:
        user_id = int(context.args[0])
        plan_id = context.args[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–∞–Ω
        if plan_id not in SUBSCRIPTION_PLANS:
            await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω: {plan_id}")
            return
        
        subscription_manager = context.bot_data.get('subscription_manager')
        if not subscription_manager:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            from .subscription_manager import SubscriptionManager
            subscription_manager = SubscriptionManager()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π payment_id
        payment_id = f"ADMIN_GRANT_{int(datetime.now().timestamp())}"
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        try:
            if SUBSCRIPTION_MODE == 'modular':
                await subscription_manager._activate_modular_subscription(user_id, plan_id, payment_id)
            else:
                await subscription_manager._activate_unified_subscription(user_id, plan_id, payment_id)
        except Exception as e:
            logger.error(f"Error activating subscription: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_info = await subscription_manager.get_subscription_info(user_id)
        
        text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        text += f"–ü–ª–∞–Ω: {SUBSCRIPTION_PLANS[plan_id]['name']}\n"
        
        if subscription_info:
            if SUBSCRIPTION_MODE == 'modular':
                modules = subscription_info.get('modules', [])
                if modules:
                    text += f"–ú–æ–¥—É–ª–∏: {', '.join(modules)}\n"
            text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info.get('expires_at')}"
        
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
            await context.bot.send_message(
                user_id,
                f"üéÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –¥–ª—è –≤–∞—Å –ø–æ–¥–ø–∏—Å–∫—É!\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_subscriptions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
            )
        except Exception as e:
            logger.error(f"Failed to notify user {user_id}: {e}")
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        logger.exception(f"Error granting subscription: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_only
async def cmd_promo_usage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    
    if not context.args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            async with aiosqlite.connect(DATABASE_FILE) as conn:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor = await conn.execute("""
                    SELECT 
                        COUNT(DISTINCT promo_code) as total_codes,
                        COUNT(DISTINCT user_id) as unique_users,
                        COUNT(*) as total_uses,
                        SUM(discount_applied) as total_discount
                    FROM promo_usage_log
                """)
                stats = await cursor.fetchone()
                
                text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n"
                
                if stats and stats[0]:
                    text += f"üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {stats[0]}\n"
                    text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[1]}\n"
                    text += f"üîÑ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats[2]}\n"
                    text += f"üí∏ –û–±—â–∞—è —Å–∫–∏–¥–∫–∞: {stats[3] or 0} ‚ÇΩ\n\n"
                else:
                    text += "–ü—Ä–æ–º–æ–∫–æ–¥—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å\n\n"
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                cursor = await conn.execute("""
                    SELECT 
                        p.promo_code,
                        p.user_id,
                        u.first_name,
                        p.discount_applied,
                        p.used_at
                    FROM promo_usage_log p
                    LEFT JOIN users u ON p.user_id = u.user_id
                    ORDER BY p.used_at DESC
                    LIMIT 10
                """)
                recent = await cursor.fetchall()
                
                if recent:
                    text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
                    for code, user_id, name, discount, used_at in recent:
                        user_text = f"{name or 'User'} ({user_id})"
                        text += f"‚Ä¢ <code>{code}</code> - {user_text} - {discount}‚ÇΩ\n"
                
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                text += "/promo_usage <code> - –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–¥—É\n"
                text += "/promo_usage user <user_id> - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                
                await update.message.reply_text(text, parse_mode=ParseMode.HTML)
                
        except Exception as e:
            logger.error(f"Error getting promo usage stats: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    elif context.args[0].lower() == 'user' and len(context.args) > 1:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_id = int(context.args[1])
            
            async with aiosqlite.connect(DATABASE_FILE) as conn:
                cursor = await conn.execute("""
                    SELECT 
                        promo_code,
                        discount_applied,
                        original_price,
                        final_price,
                        order_id,
                        used_at
                    FROM promo_usage_log
                    WHERE user_id = ?
                    ORDER BY used_at DESC
                """, (user_id,))
                
                usage = await cursor.fetchall()
                
                text = f"üîç <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
                
                if usage:
                    total_discount = 0
                    for code, discount, original, final, order_id, used_at in usage:
                        text += f"üìÖ {used_at}\n"
                        text += f"   –ü—Ä–æ–º–æ–∫–æ–¥: <code>{code}</code>\n"
                        text += f"   –°–∫–∏–¥–∫–∞: {discount} ‚ÇΩ\n"
                        text += f"   –¶–µ–Ω–∞: {original/100 if original else 0}‚ÇΩ ‚Üí {final/100 if final else 0}‚ÇΩ\n"
                        if order_id:
                            text += f"   –ó–∞–∫–∞–∑: <code>{order_id}</code>\n"
                        text += "\n"
                        total_discount += discount or 0
                    
                    text += f"üí∞ <b>–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_discount} ‚ÇΩ</b>"
                else:
                    text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥—ã"
                
                await update.message.reply_text(text, parse_mode=ParseMode.HTML)
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        except Exception as e:
            logger.error(f"Error getting user promo history: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        promo_code = context.args[0].upper()
        
        try:
            async with aiosqlite.connect(DATABASE_FILE) as conn:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
                cursor = await conn.execute("""
                    SELECT 
                        discount_percent,
                        discount_amount,
                        usage_limit,
                        used_count,
                        is_active,
                        created_at
                    FROM promo_codes
                    WHERE code = ?
                """, (promo_code,))
                
                promo_info = await cursor.fetchone()
                
                if not promo_info:
                    await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                text = f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code}</b>\n\n"
                
                discount_percent, discount_amount, limit, used, active, created = promo_info
                
                text += f"üìä –°–∫–∏–¥–∫–∞: "
                if discount_percent:
                    text += f"{discount_percent}%\n"
                else:
                    text += f"{discount_amount} ‚ÇΩ\n"
                
                text += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {used}"
                if limit:
                    text += f" –∏–∑ {limit}\n"
                else:
                    text += " (–±–µ–∑ –ª–∏–º–∏—Ç–∞)\n"
                
                text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                text += f"üìÖ –°–æ–∑–¥–∞–Ω: {created}\n\n"
                
                # –ö—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª
                cursor = await conn.execute("""
                    SELECT 
                        p.user_id,
                        u.first_name,
                        u.username,
                        p.discount_applied,
                        p.used_at
                    FROM promo_usage_log p
                    LEFT JOIN users u ON p.user_id = u.user_id
                    WHERE p.promo_code = ?
                    ORDER BY p.used_at DESC
                    LIMIT 20
                """, (promo_code,))
                
                users = await cursor.fetchall()
                
                if users:
                    text += "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏:</b>\n"
                    for user_id, name, username, discount, used_at in users:
                        user_text = f"{name or 'User'}"
                        if username:
                            user_text += f" (@{username})"
                        user_text += f" [{user_id}]"
                        
                        text += f"‚Ä¢ {user_text}\n"
                        text += f"   {used_at} | -{discount}‚ÇΩ\n"
                else:
                    text += "–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª"
                
                await update.message.reply_text(text, parse_mode=ParseMode.HTML)
                
        except Exception as e:
            logger.error(f"Error getting promo details: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_only
async def cmd_check_user_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_user_subscription <user_id>"""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_user_subscription <user_id>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /check_user_subscription 7390670490"
        )
        return
    
    try:
        user_id = int(context.args[0])
        subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
        
        text = f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = await subscription_manager.check_active_subscription(user_id)
        if subscription:
            text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:</b>\n"
            text += f"–ü–ª–∞–Ω: {subscription.get('plan_id')}\n"
            text += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {subscription.get('expires_at')}\n"
            
            if SUBSCRIPTION_MODE == 'modular':
                text += f"–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: {', '.join(subscription.get('active_modules', []))}\n"
        else:
            text += "‚ùå <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏ (–µ—Å–ª–∏ –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
        if SUBSCRIPTION_MODE == 'modular':
            text += "\nüì¶ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º:</b>\n"
            modules = await subscription_manager.get_user_modules(user_id)
            
            if modules:
                for module in modules:
                    text += f"‚Ä¢ {module['module_code']} –¥–æ {module['expires_at']}\n"
            else:
                text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        text += "\nüí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n"
        try:
            async with aiosqlite.connect(DATABASE_FILE) as conn:
                cursor = await conn.execute(
                    """
                    SELECT order_id, plan_id, status, amount_kopecks, created_at 
                    FROM payments 
                    WHERE user_id = ? 
                    ORDER BY created_at DESC 
                    LIMIT 5
                    """,
                    (user_id,)
                )
                payments = await cursor.fetchall()
                
                if payments:
                    for payment in payments:
                        order_id, plan_id, status, amount, created_at = payment
                        text += f"‚Ä¢ {plan_id} - {status} - {amount/100:.2f}‚ÇΩ ({created_at})\n"
                else:
                    text += "–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π\n"
        except Exception as e:
            logger.error(f"Error getting payment history: {e}")
            text += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        logger.exception(f"Error checking user subscription: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_only
async def cmd_revoke_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
        return
    
    try:
        user_id = int(context.args[0])
        
        subscription_manager = SubscriptionManager()
        success = await subscription_manager.cancel_subscription(user_id)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω–∞"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.exception(f"Error revoking subscription: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@admin_only
async def cmd_activate_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç pending –ø–ª–∞—Ç–µ–∂ –≤—Ä—É—á–Ω—É—é. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate_payment <order_id>"""
    if not context.args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ pending –ø–ª–∞—Ç–µ–∂–µ–π
        try:
            async with aiosqlite.connect(DATABASE_FILE) as conn:
                cursor = await conn.execute(
                    """
                    SELECT order_id, user_id, plan_id, amount_kopecks, created_at
                    FROM payments 
                    WHERE status = 'pending'
                    ORDER BY created_at DESC
                    LIMIT 10
                    """
                )
                pending_payments = await cursor.fetchall()
                
                if not pending_payments:
                    await update.message.reply_text("‚úÖ –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                    return
                
                text = "‚ö†Ô∏è <b>–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n\n"
                for payment in pending_payments:
                    order_id, user_id, plan_id, amount, created_at = payment
                    text += f"<code>{order_id}</code>\n"
                    text += f"‚îú User: {user_id}\n"
                    text += f"‚îú –ü–ª–∞–Ω: {plan_id}\n"
                    text += f"‚îú –°—É–º–º–∞: {amount/100:.2f} —Ä—É–±.\n"
                    text += f"‚îî –°–æ–∑–¥–∞–Ω: {created_at}\n\n"
                
                text += "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                text += "<code>/activate_payment ORDER_ID</code>"
                
                await update.message.reply_text(text, parse_mode=ParseMode.HTML)
                
        except Exception as e:
            logger.error(f"Error listing pending payments: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    order_id = context.args[0]
    
    try:
        subscription_manager = context.bot_data.get('subscription_manager', SubscriptionManager())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–∞—Ç–µ–∂
        async with aiosqlite.connect(DATABASE_FILE) as conn:
            cursor = await conn.execute(
                "SELECT user_id, plan_id, status FROM payments WHERE order_id = ?",
                (order_id,)
            )
            payment = await cursor.fetchone()
            
            if not payment:
                await update.message.reply_text(f"‚ùå –ü–ª–∞—Ç–µ–∂ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            user_id, plan_id, status = payment
            
            if status != 'pending':
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {order_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {status}"
                )
                return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        payment_id = f"ADMIN_ACTIVATE_{datetime.now().timestamp()}"
        success = await subscription_manager.activate_subscription(
            order_id=order_id,
            payment_id=payment_id
        )
        
        if success:
            text = f"‚úÖ –ü–ª–∞—Ç–µ–∂ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            text += f"Order ID: <code>{order_id}</code>\n"
            text += f"User ID: {user_id}\n"
            text += f"–ü–ª–∞–Ω: {plan_id}\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            subscription_info = await subscription_manager.get_subscription_info(user_id)
            if subscription_info:
                if SUBSCRIPTION_MODE == 'modular':
                    text += f"–ú–æ–¥—É–ª–∏: {', '.join(subscription_info.get('modules', []))}\n"
                text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info.get('expires_at')}"
            
            await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {order_id}\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            )
            
    except Exception as e:
        logger.exception(f"Error activating payment: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@admin_only
async def cmd_check_webhook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook."""
    from payment.config import WEBHOOK_BASE_URL, WEBHOOK_PATH, TINKOFF_TERMINAL_KEY
    
    text = "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook:</b>\n\n"
    
    if WEBHOOK_BASE_URL:
        webhook_url = f"{WEBHOOK_BASE_URL}{WEBHOOK_PATH}"
        text += f"‚úÖ URL: <code>{webhook_url}</code>\n"
        text += f"‚úÖ Terminal Key: <code>{TINKOFF_TERMINAL_KEY[:8]}...</code>\n\n"
        text += "‚ö†Ô∏è <b>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç URL:</b>\n"
        text += "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Tinkoff\n"
        text += "‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS\n\n"
        text += f"<b>–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:</b>\n"
        text += f"<code>curl -X POST {webhook_url}</code>"
    else:
        text += "‚ùå <b>WEBHOOK_BASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n"
        text += "–î–æ–±–∞–≤—å—Ç–µ –≤ .env:\n"
        text += "<code>WEBHOOK_BASE_URL=https://yourdomain.com</code>\n\n"
        text += "‚ö†Ô∏è –ë–µ–∑ webhook –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)
    
@admin_only
async def cmd_payment_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
    try:
        import aiosqlite
        from payment.config import DATABASE_PATH, SUBSCRIPTION_MODE
        from datetime import datetime, timedelta, timezone
        
        await update.message.reply_text("‚è≥ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor = await db.execute("""
                SELECT 
                    COUNT(DISTINCT user_id) as total_users,
                    COUNT(*) as total_payments,
                    SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed_payments,
                    SUM(CASE WHEN status = 'completed' THEN amount_kopecks ELSE 0 END) as total_revenue
                FROM payments
            """)
            stats = await cursor.fetchone()
            total_users, total_payments, completed_payments, total_revenue = stats
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º
            cursor = await db.execute("""
                SELECT plan_id, COUNT(*) as count, SUM(amount_kopecks) as revenue
                FROM payments
                WHERE status = 'completed'
                GROUP BY plan_id
                ORDER BY count DESC
            """)
            plan_stats = await cursor.fetchall()
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if SUBSCRIPTION_MODE == 'modular':
                # –î–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                cursor = await db.execute("""
                    SELECT COUNT(DISTINCT user_id) as active_users
                    FROM module_subscriptions
                    WHERE is_active = 1 AND expires_at > datetime('now')
                """)
                active_subs = await cursor.fetchone()
                active_users = active_subs[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
                cursor = await db.execute("""
                    SELECT module_code, COUNT(DISTINCT user_id) as users
                    FROM module_subscriptions
                    WHERE is_active = 1 AND expires_at > datetime('now')
                    GROUP BY module_code
                """)
                module_stats = await cursor.fetchall()
            else:
                # –î–ª—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                cursor = await db.execute("""
                    SELECT COUNT(DISTINCT user_id) as active_users
                    FROM user_subscriptions
                    WHERE status = 'active' AND expires_at > datetime('now')
                """)
                active_subs = await cursor.fetchone()
                active_users = active_subs[0]
                module_stats = []
            
            # –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            cursor = await db.execute("""
                SELECT 
                    COUNT(*) as recent_payments,
                    SUM(CASE WHEN status = 'completed' THEN amount_kopecks ELSE 0 END) as recent_revenue
                FROM payments
                WHERE created_at > datetime('now', '-30 days')
            """)
            recent = await cursor.fetchone()
            recent_payments, recent_revenue = recent
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
            
            text += "üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            text += f"üí≥ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            text += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {completed_payments}\n"
            text += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue/100:.2f}‚ÇΩ\n\n"
            
            text += "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
            text += f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            
            if module_stats:
                text += "\n<b>–ü–æ –º–æ–¥—É–ª—è–º:</b>\n"
                module_names = {
                    'test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                    'task19': 'üéØ –ó–∞–¥–∞–Ω–∏–µ 19',
                    'task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
                    'task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                    'task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
                }
                for module_code, users in module_stats:
                    name = module_names.get(module_code, module_code)
                    text += f"‚Ä¢ {name}: {users} –ø–æ–ª—å–∑.\n"
            
            text += f"\nüìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>\n"
            text += f"üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: {recent_payments}\n"
            text += f"üí∞ –î–æ—Ö–æ–¥: {recent_revenue/100:.2f}‚ÇΩ\n"
            
            if plan_stats:
                text += "\nüíé <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n"
                plan_names = {
                    'trial_7days': 'üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
                    'package_second_part': 'üéØ –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å',
                    'package_full': 'üëë –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø',
                    'module_test_part': 'üìù –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å',
                    'module_task19': 'üí° –ó–∞–¥–∞–Ω–∏–µ 19',
                    'module_task20': 'üìñ –ó–∞–¥–∞–Ω–∏–µ 20',
                    'module_task24': 'üíé –ó–∞–¥–∞–Ω–∏–µ 24',
                    'module_task25': '‚úçÔ∏è –ó–∞–¥–∞–Ω–∏–µ 25'
                }
                for plan_id, count, revenue in plan_stats[:5]:  # –¢–æ–ø-5 –ø–ª–∞–Ω–æ–≤
                    name = plan_names.get(plan_id, plan_id)
                    text += f"‚Ä¢ {name}: {count} —à—Ç. ({revenue/100:.0f}‚ÇΩ)\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="admin:export_payments")],
                [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="admin:list_active_users")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:refresh_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text, 
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.exception(f"Error getting payment stats: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def cmd_check_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    admin_ids = []
    if hasattr(config, 'ADMIN_IDS') and config.ADMIN_IDS:
        if isinstance(config.ADMIN_IDS, str):
            admin_ids = config.ADMIN_IDS if isinstance(config.ADMIN_IDS, list) else []
        elif isinstance(config.ADMIN_IDS, list):
            admin_ids = config.ADMIN_IDS
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º BOT_ADMIN_IDS –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(config, 'BOT_ADMIN_IDS'):
        if isinstance(config.BOT_ADMIN_IDS, list):
            bot_admin_ids = config.BOT_ADMIN_IDS
        elif isinstance(config.BOT_ADMIN_IDS, str):
            bot_admin_ids = [int(id.strip()) for id in config.BOT_ADMIN_IDS.split(',') if id.strip()]
        else:
            bot_admin_ids = []
    else:
        bot_admin_ids = admin_ids  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π ADMIN_IDS
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    admin_ids = list(set(admin_ids))
    
    if user_id in admin_ids:
        await update.message.reply_text(
            f"‚úÖ <b>–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
            f"üì± –í–∞—à ID: <code>{user_id}</code>\n"
            f"üë• –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {len(admin_ids)}\n"
            f"üìã –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤: {', '.join(map(str, admin_ids))}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/grant &lt;user_id&gt; &lt;plan&gt; - –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            f"/revoke &lt;user_id&gt; - –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            f"/payment_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π",
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            f"‚ùå <b>–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n\n"
            f"üì± –í–∞—à ID: <code>{user_id}</code>\n"
            f"üí° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            f"1. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID –≤ —Ñ–∞–π–ª <code>.env</code>:\n"
            f"   <code>ADMIN_IDS={user_id}</code>\n\n"
            f"2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: {len(admin_ids)}",
            parse_mode=ParseMode.HTML
        )

@admin_only
async def cmd_subscribers_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    try:
        import aiosqlite
        from payment.config import DATABASE_PATH, SUBSCRIPTION_MODE
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            if SUBSCRIPTION_MODE == 'modular':
                cursor = await db.execute("""
                    SELECT COUNT(DISTINCT user_id) 
                    FROM module_subscriptions
                    WHERE is_active = 1 AND expires_at > datetime('now')
                """)
            else:
                cursor = await db.execute("""
                    SELECT COUNT(DISTINCT user_id)
                    FROM user_subscriptions
                    WHERE status = 'active' AND expires_at > datetime('now')
                """)
            
            active_count = (await cursor.fetchone())[0]
            
            # –î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor = await db.execute("""
                SELECT 
                    COUNT(*) as today_payments,
                    SUM(CASE WHEN status = 'completed' THEN amount_kopecks ELSE 0 END) as today_revenue
                FROM payments
                WHERE date(created_at) = date('now')
            """)
            today_payments, today_revenue = await cursor.fetchone()
            today_revenue = today_revenue or 0
            
            # –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü
            cursor = await db.execute("""
                SELECT SUM(amount_kopecks)
                FROM payments
                WHERE status = 'completed' 
                AND created_at > datetime('now', '-30 days')
            """)
            month_revenue = (await cursor.fetchone())[0] or 0
            
            text = f"""üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{active_count}</b>

üí∞ <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {today_payments}
‚Ä¢ –î–æ—Ö–æ–¥: {today_revenue/100:.2f}‚ÇΩ

üìÖ <b>–ó–∞ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –î–æ—Ö–æ–¥: {month_revenue/100:.2f}‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {month_revenue/100/max(active_count, 1):.2f}‚ÇΩ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /payment_stats –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
            
            await update.message.reply_text(text, parse_mode=ParseMode.HTML)
            
    except Exception as e:
        logger.exception(f"Error getting quick stats: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_only
async def cmd_list_active_subscribers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    try:
        import aiosqlite
        from payment.config import DATABASE_PATH, SUBSCRIPTION_MODE
        from datetime import datetime
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            if SUBSCRIPTION_MODE == 'modular':
                # –î–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                cursor = await db.execute("""
                    SELECT DISTINCT 
                        ms.user_id,
                        GROUP_CONCAT(ms.module_code) as modules,
                        MIN(ms.expires_at) as earliest_expiry,
                        MAX(ms.expires_at) as latest_expiry
                    FROM module_subscriptions ms
                    WHERE ms.is_active = 1 AND ms.expires_at > datetime('now')
                    GROUP BY ms.user_id
                    ORDER BY ms.user_id
                """)
            else:
                # –î–ª—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                cursor = await db.execute("""
                    SELECT 
                        us.user_id,
                        us.plan_id,
                        us.expires_at
                    FROM user_subscriptions us
                    WHERE us.status = 'active' AND us.expires_at > datetime('now')
                    ORDER BY us.user_id
                """)
            
            subscribers = await cursor.fetchall()
            
            if not subscribers:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ ({len(subscribers)} —á–µ–ª.)</b>\n\n"
            
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 20
            for i, sub in enumerate(subscribers[:20]):
                if SUBSCRIPTION_MODE == 'modular':
                    user_id, modules, earliest, latest = sub
                    text += f"{i+1}. User {user_id}\n"
                    text += f"   –ú–æ–¥—É–ª–∏: {modules}\n"
                    text += f"   –î–æ: {latest[:10]}\n\n"
                else:
                    user_id, plan_id, expires_at = sub
                    text += f"{i+1}. User {user_id}\n"
                    text += f"   –ü–ª–∞–Ω: {plan_id}\n"
                    text += f"   –î–æ: {expires_at[:10]}\n\n"
            
            if len(subscribers) > 20:
                text += f"... –∏ –µ—â–µ {len(subscribers) - 20} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            keyboard = [[
                InlineKeyboardButton(
                    "üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫", 
                    callback_data="admin:export_subscribers"
                )
            ]]
            
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.exception(f"Error listing subscribers: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª payment/admin_commands.py –ü–ï–†–ï–î —Ñ—É–Ω–∫—Ü–∏–µ–π register_admin_commands

# ====================== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò ======================

@admin_only
async def handle_refresh_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π."""
    query = update.callback_query
    await query.answer("–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        import aiosqlite
        from datetime import datetime, timedelta
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            cursor = await db.execute("""
                SELECT 
                    COUNT(*) as total_payments,
                    COUNT(CASE WHEN status = 'completed' THEN 1 END) as successful,
                    COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed,
                    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
                    SUM(CASE WHEN status = 'completed' THEN amount ELSE 0 END) as total_revenue,
                    AVG(CASE WHEN status = 'completed' THEN amount ELSE NULL END) as avg_payment
                FROM payments
                WHERE created_at > datetime('now', '-30 days')
            """)
            stats = await cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º
            cursor = await db.execute("""
                SELECT plan_id, COUNT(*) as count, SUM(amount) as revenue
                FROM payments
                WHERE status = 'completed' AND created_at > datetime('now', '-30 days')
                GROUP BY plan_id
                ORDER BY count DESC
                LIMIT 5
            """)
            top_plans = await cursor.fetchall()
            
            text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (30 –¥–Ω–µ–π)</b>

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats[0]}
‚îú ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats[1]}
‚îú ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats[2]}
‚îú ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats[3]}
‚îú üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats[4] // 100 if stats[4] else 0} ‚ÇΩ
‚îî üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats[5] // 100 if stats[5] else 0} ‚ÇΩ

üèÜ <b>–¢–æ–ø –ø–ª–∞–Ω–æ–≤:</b>"""
            
            for i, (plan_id, count, revenue) in enumerate(top_plans, 1):
                text += f"\n{i}. {plan_id}: {count} —à—Ç. ({revenue // 100} ‚ÇΩ)"
            
            keyboard = [
                [
                    InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="admin:export_payments"),
                    InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="admin:payment_charts")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_stats")]
            ]
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"Error refreshing stats: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_stats")
            ]])
        )


@admin_only
async def handle_export_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –≤ CSV —Ñ–∞–π–ª."""
    query = update.callback_query
    await query.answer("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        import aiosqlite
        import csv
        from io import StringIO, BytesIO
        from datetime import datetime
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute("""
                SELECT 
                    p.order_id,
                    p.user_id,
                    p.plan_id,
                    p.amount,
                    p.status,
                    p.created_at,
                    p.completed_at,
                    u.username,
                    u.first_name,
                    u.last_name
                FROM payments p
                LEFT JOIN users u ON p.user_id = u.user_id
                ORDER BY p.created_at DESC
                LIMIT 5000
            """)
            payments = await cursor.fetchall()
            
            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            output = StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'Order ID', 'User ID', 'Username', 'Full Name', 
                'Plan', 'Amount (RUB)', 'Status', 
                'Created', 'Completed'
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for payment in payments:
                full_name = f"{payment[8] or ''} {payment[9] or ''}".strip()
                writer.writerow([
                    payment[0],  # order_id
                    payment[1],  # user_id
                    payment[7] or 'N/A',  # username
                    full_name or 'N/A',  # full name
                    payment[2],  # plan_id
                    payment[3] // 100 if payment[3] else 0,  # amount in rubles
                    payment[4],  # status
                    payment[5],  # created_at
                    payment[6] or 'N/A'  # completed_at
                ])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
            csv_data = output.getvalue().encode('utf-8-sig')  # UTF-8 with BOM –¥–ª—è Excel
            csv_file = BytesIO(csv_data)
            csv_file.name = f"payments_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await query.message.reply_document(
                document=csv_file,
                filename=csv_file.name,
                caption=f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
                       f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                       f"üìù –ó–∞–ø–∏—Å–µ–π: {len(payments)}\n"
                       f"üíæ –§–æ—Ä–º–∞—Ç: CSV (Excel-compatible)",
                parse_mode=ParseMode.HTML
            )
            
            await query.edit_message_text(
                "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:refresh_stats")
                ]])
            )
            
    except Exception as e:
        logger.error(f"Error exporting payments: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_stats")
            ]])
        )


@admin_only
async def sales_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂."""
    query = update.callback_query
    await query.answer()
    
    try:
        import aiosqlite
        from datetime import datetime, timedelta
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor = await db.execute("""
                SELECT 
                    COUNT(*) as count,
                    SUM(amount) as revenue
                FROM payments
                WHERE status = 'completed' 
                AND DATE(created_at) = DATE('now')
            """)
            today = await cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
            cursor = await db.execute("""
                SELECT 
                    COUNT(*) as count,
                    SUM(amount) as revenue
                FROM payments
                WHERE status = 'completed' 
                AND DATE(created_at) = DATE('now', '-1 day')
            """)
            yesterday = await cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
            cursor = await db.execute("""
                SELECT 
                    COUNT(*) as count,
                    SUM(amount) as revenue
                FROM payments
                WHERE status = 'completed' 
                AND created_at > datetime('now', '-7 days')
            """)
            week = await cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
            cursor = await db.execute("""
                SELECT 
                    COUNT(*) as count,
                    SUM(amount) as revenue
                FROM payments
                WHERE status = 'completed' 
                AND created_at > datetime('now', '-30 days')
            """)
            month = await cursor.fetchone()
            
            text = f"""üí∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</b>

üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚îú –ü—Ä–æ–¥–∞–∂: {today[0]}
‚îî –î–æ—Ö–æ–¥: {today[1] // 100 if today[1] else 0} ‚ÇΩ

üìÖ <b>–í—á–µ—Ä–∞:</b>
‚îú –ü—Ä–æ–¥–∞–∂: {yesterday[0]}
‚îî –î–æ—Ö–æ–¥: {yesterday[1] // 100 if yesterday[1] else 0} ‚ÇΩ

üìÖ <b>–ó–∞ 7 –¥–Ω–µ–π:</b>
‚îú –ü—Ä–æ–¥–∞–∂: {week[0]}
‚îú –î–æ—Ö–æ–¥: {week[1] // 100 if week[1] else 0} ‚ÇΩ
‚îî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {week[1] // week[0] // 100 if week[0] > 0 else 0} ‚ÇΩ

üìÖ <b>–ó–∞ 30 –¥–Ω–µ–π:</b>
‚îú –ü—Ä–æ–¥–∞–∂: {month[0]}
‚îú –î–æ—Ö–æ–¥: {month[1] // 100 if month[1] else 0} ‚ÇΩ
‚îî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {month[1] // month[0] // 100 if month[0] > 0 else 0} ‚ÇΩ"""
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ü–æ –ø–ª–∞–Ω–∞–º", callback_data="admin:stats_by_plan"),
                    InlineKeyboardButton("üë• –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin:stats_by_user")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_stats")]
            ]
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"Error showing sales stats: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_stats")
            ]])
        )


@admin_only
async def payment_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π."""
    query = update.callback_query
    await query.answer()
    
    try:
        import aiosqlite
        from datetime import datetime
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute("""
                SELECT 
                    p.order_id,
                    p.user_id,
                    u.username,
                    p.plan_id,
                    p.amount,
                    p.status,
                    p.created_at
                FROM payments p
                LEFT JOIN users u ON p.user_id = u.user_id
                ORDER BY p.created_at DESC
                LIMIT 10
            """)
            payments = await cursor.fetchall()
            
            text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)</b>\n\n"
            
            status_emoji = {
                'completed': '‚úÖ',
                'pending': '‚è≥',
                'failed': '‚ùå',
                'refunded': '‚Ü©Ô∏è'
            }
            
            for payment in payments:
                created = datetime.fromisoformat(payment[6])
                username = f"@{payment[2]}" if payment[2] else f"ID:{payment[1]}"
                status = status_emoji.get(payment[5], '‚ùì')
                
                text += f"{status} <b>{created.strftime('%d.%m %H:%M')}</b>\n"
                text += f"‚îú {username}\n"
                text += f"‚îú –ü–ª–∞–Ω: {payment[3]}\n"
                text += f"‚îú –°—É–º–º–∞: {payment[4] // 100} ‚ÇΩ\n"
                text += f"‚îî ID: <code>{payment[0][:20]}</code>\n\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="admin:search_payment"),
                    InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin:export_payments")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_stats")]
            ]
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"Error showing payment history: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payment_stats")
            ]])
        )


@admin_only
async def export_payments_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–ª–∏–∞—Å –¥–ª—è handle_export_payments."""
    return await handle_export_payments(update, context)


@admin_only
async def handle_list_active_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        import aiosqlite
        from datetime import datetime
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            if SUBSCRIPTION_MODE == 'modular':
                cursor = await db.execute("""
                    SELECT DISTINCT 
                        ms.user_id,
                        u.username,
                        u.first_name,
                        u.last_name,
                        GROUP_CONCAT(ms.module_code) as modules,
                        MIN(ms.expires_at) as expires_soon
                    FROM module_subscriptions ms
                    LEFT JOIN users u ON ms.user_id = u.user_id
                    WHERE ms.is_active = 1 AND ms.expires_at > datetime('now')
                    GROUP BY ms.user_id
                    ORDER BY ms.expires_at DESC
                    LIMIT 20
                """)
            else:
                cursor = await db.execute("""
                    SELECT 
                        us.user_id,
                        u.username,
                        u.first_name,
                        u.last_name,
                        us.plan_id,
                        us.expires_at
                    FROM user_subscriptions us
                    LEFT JOIN users u ON us.user_id = u.user_id
                    WHERE us.status = 'active' AND us.expires_at > datetime('now')
                    ORDER BY us.expires_at DESC
                    LIMIT 20
                """)
            
            users = await cursor.fetchall()
            
            text = f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (—Ç–æ–ø 20)</b>\n\n"
            
            for i, user in enumerate(users, 1):
                username = f"@{user[1]}" if user[1] else f"ID:{user[0]}"
                full_name = f"{user[2] or ''} {user[3] or ''}".strip()
                
                if SUBSCRIPTION_MODE == 'modular':
                    modules = user[4]
                    expires = datetime.fromisoformat(user[5])
                    text += f"{i}. {username}"
                    if full_name:
                        text += f" ({full_name})"
                    text += f"\n‚îú –ú–æ–¥—É–ª–∏: {modules}\n"
                    text += f"‚îî –î–æ: {expires.strftime('%d.%m.%Y')}\n\n"
                else:
                    plan = user[4]
                    expires = datetime.fromisoformat(user[5])
                    text += f"{i}. {username}"
                    if full_name:
                        text += f" ({full_name})"
                    text += f"\n‚îú –ü–ª–∞–Ω: {plan}\n"
                    text += f"‚îî –î–æ: {expires.strftime('%d.%m.%Y')}\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor = await db.execute("""
                SELECT COUNT(DISTINCT user_id) 
                FROM module_subscriptions 
                WHERE is_active = 1 AND expires_at > datetime('now')
            """ if SUBSCRIPTION_MODE == 'modular' else """
                SELECT COUNT(*) 
                FROM user_subscriptions 
                WHERE status = 'active' AND expires_at > datetime('now')
            """)
            total = await cursor.fetchone()
            
            text += f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {total[0]}"
            
            keyboard = [
                [
                    InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö", callback_data="admin:export_users"),
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="admin:search_user")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]
            ]
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"Error listing active users: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")
            ]])
        )


@admin_only
async def handle_payment_charts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–∑–∞–≥–ª—É—à–∫–∞)."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìà <b>–ì—Ä–∞—Ñ–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –±—É–¥—É—Ç:\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º\n"
        "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–ª–∞–Ω–∞–º\n"
        "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–≥–æ—Ä—Ç",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:refresh_stats")
        ]])
    )


@admin_only
async def handle_stats_by_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞–Ω–∞–º."""
    query = update.callback_query
    await query.answer()
    
    try:
        import aiosqlite
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute("""
                SELECT 
                    plan_id,
                    COUNT(*) as sales_count,
                    SUM(amount) as total_revenue,
                    AVG(amount) as avg_amount
                FROM payments
                WHERE status = 'completed'
                GROUP BY plan_id
                ORDER BY total_revenue DESC
            """)
            plans = await cursor.fetchall()
            
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º</b>\n\n"
            
            for plan in plans:
                text += f"<b>{plan[0]}</b>\n"
                text += f"‚îú –ü—Ä–æ–¥–∞–∂: {plan[1]}\n"
                text += f"‚îú –î–æ—Ö–æ–¥: {plan[2] // 100 if plan[2] else 0} ‚ÇΩ\n"
                text += f"‚îî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {plan[3] // 100 if plan[3] else 0} ‚ÇΩ\n\n"
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:sales_stats")
                ]])
            )
            
    except Exception as e:
        logger.error(f"Error showing stats by plan: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_only
async def handle_stats_by_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º."""
    query = update.callback_query
    await query.answer()
    
    try:
        import aiosqlite
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute("""
                SELECT 
                    p.user_id,
                    u.username,
                    u.first_name,
                    COUNT(*) as payment_count,
                    SUM(p.amount) as total_spent
                FROM payments p
                LEFT JOIN users u ON p.user_id = u.user_id
                WHERE p.status = 'completed'
                GROUP BY p.user_id
                ORDER BY total_spent DESC
                LIMIT 10
            """)
            users = await cursor.fetchall()
            
            text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º</b>\n\n"
            
            for i, user in enumerate(users, 1):
                username = f"@{user[1]}" if user[1] else f"ID:{user[0]}"
                text += f"{i}. {username}"
                if user[2]:
                    text += f" ({user[2]})"
                text += f"\n‚îú –ü–ª–∞—Ç–µ–∂–µ–π: {user[3]}\n"
                text += f"‚îî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user[4] // 100} ‚ÇΩ\n\n"
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:sales_stats")
                ]])
            )
            
    except Exception as e:
        logger.error(f"Error showing stats by user: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# ====================== –ö–û–ù–ï–¶ –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –§–£–ù–ö–¶–ò–ô ======================

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ register_admin_commands:
def register_admin_commands(app: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
    app.add_handler(CommandHandler("grant_subscription", cmd_grant_subscription))
    app.add_handler(CommandHandler("activate_payment", cmd_activate_payment))
    app.add_handler(CommandHandler("check_webhook", cmd_check_webhook))
    app.add_handler(CommandHandler("revoke", cmd_revoke_subscription))
    app.add_handler(CommandHandler("payment_stats", cmd_payment_stats))
    app.add_handler(CommandHandler("stats", cmd_subscribers_count))
    app.add_handler(CommandHandler("check_admin", cmd_check_admin))
    app.add_handler(CommandHandler("list_subscribers", cmd_list_active_subscribers))
    app.add_handler(CommandHandler("promo_usage", cmd_promo_usage))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(
        handle_export_payments, pattern="^admin:export_payments$"
    ))
    app.add_handler(CallbackQueryHandler(
        handle_list_active_users, pattern="^admin:list_active_users$"
    ))
    app.add_handler(CallbackQueryHandler(
        handle_refresh_stats, pattern="^admin:refresh_stats$"
    ))
    
    logger.info("Admin payment commands registered")

import logging
from typing import List, Dict, Any, Optional

from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
)

from . import db
from . import utils
from . import keyboards

from .keyboards import get_initial_choice_keyboard, get_mistakes_nav_keyboard
from .states import (
    CHOOSING_INITIAL_ACTION,
    CHOOSING_BLOCK,
    CHOOSING_MODE,
    CHOOSING_TOPIC,
    CHOOSING_EXAM_NUMBER,
    ANSWERING,
    CHOOSING_NEXT_ACTION,
    REVIEWING_MISTAKES,
    QuizState,
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—à–∏–±–æ–∫ ---
async def send_mistake_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    data = context.user_data
    mistake_ids: List[str] = data.get("mistake_ids", [])
    current_index: int = data.get("current_mistake_index", 0)
    user_id = update.effective_user.id

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
    if not mistake_ids or current_index >= len(mistake_ids):
        await update.message.reply_text("üéâ –í—ã –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    question_id = mistake_ids[current_index]
    question_data = utils.find_question_by_id(question_id)

    # –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    if not question_data:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (ID: {question_id}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", reply_markup=ReplyKeyboardRemove())
        await db.delete_mistake(user_id, question_id)
        mistake_ids = [mid for mid in mistake_ids if mid != question_id]
        context.user_data["mistake_ids"] = mistake_ids
        # –ò–Ω–¥–µ–∫—Å –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º ‚Äî "–ø–µ—Ä–µ–ø—Ä—ã–≥–Ω–µ–º" –∫ —Ç–µ–∫—É—â–µ–º—É (–∏–ª–∏ end, –µ—Å–ª–∏ –≤—Å—ë)
        return await send_mistake_question(update, context)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç
    question_type = utils.get_question_type(question_data)
    correct_answer = str(question_data.get("answer", ""))

    if question_type == "unknown" or correct_answer is None:
        await update.message.reply_text(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º ID {question_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        await db.delete_mistake(user_id, question_id)
        mistake_ids = [mid for mid in mistake_ids if mid != question_id]
        context.user_data["mistake_ids"] = mistake_ids
        return await send_mistake_question(update, context)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
    context.user_data.update(
        current_mistake_question_id=question_id,
        current_mistake_correct_answer=correct_answer,
        current_mistake_question_type=question_type,
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_text_raw = question_data.get("question", "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    block = question_data.get("block", "N/A")
    topic = question_data.get("topic", "N/A")
    topic_display_name = utils.TOPIC_NAMES.get(topic, topic)
    header = f"üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ({current_index + 1} –∏–∑ {len(mistake_ids)})</b>\n"
    header += f"üìö –ë–ª–æ–∫: <b>{block}</b>, üè∑Ô∏è –¢–µ–º–∞: <b>{topic}. {topic_display_name}</b>\n" + "‚ûñ"*10 + "\n\n"

    parts = question_text_raw.split('\n', 1)
    instruction = parts[0].strip()
    options_part = parts[1].strip() if len(parts) > 1 else ""
    formatted_text = header + f"‚ùì <b>{instruction}</b>\n\n"
    formatted_options, first_column_letters = utils.format_question_options(options_part, question_type)
    if formatted_options:
        formatted_text += formatted_options + "\n"

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞
    if question_type == "matching" and first_column_letters:
        letters_str = " ".join(first_column_letters)
        prompt = f"\n{letters_str}\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ {len(first_column_letters)} —Ü–∏—Ñ—Ä –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345):"
    elif question_type == "multiple_choice":
        prompt = "\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 135):"
    elif question_type == "single_choice":
        prompt = "\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:"
    elif question_type == "sequence":
        prompt = "\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 312):"
    else:
        prompt = "\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
    formatted_text += prompt

    await update.message.reply_text(formatted_text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    return REVIEWING_MISTAKES

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mistakes ---
async def cmd_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    user_id = update.effective_user.id
    mistake_ids = await db.get_mistake_ids(user_id)
    if not mistake_ids:
        await update.message.reply_text("üëç –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
        return ConversationHandler.END
    context.user_data["mistake_ids"] = list(mistake_ids)
    context.user_data["current_mistake_index"] = 0
    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(mistake_ids)}.", reply_markup=ReplyKeyboardRemove())
    return await send_mistake_question(update, context)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—à–∏–±–æ–∫ ---
async def handle_mistake_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_answer_raw = update.message.text
    data = context.user_data
    correct_answer = data.get("current_mistake_correct_answer")
    question_id = data.get("current_mistake_question_id")
    question_type = data.get("current_mistake_question_type")
    mistake_ids: List[str] = data.get("mistake_ids", [])
    current_index: int = data.get("current_mistake_index", 0)

    if not correct_answer or not question_id or not question_type:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è üòï. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start")
        context.user_data.clear()
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if question_type in ["single_choice", "multiple_choice", "matching", "sequence"]:
        cleaned_input = user_answer_raw.strip().replace(" ", "").replace(",", "")
        if not cleaned_input.isdigit():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
            return REVIEWING_MISTAKES

    is_correct = utils.normalize_answer(user_answer_raw, question_type) == utils.normalize_answer(correct_answer, question_type)

    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    current_question_data = utils.find_question_by_id(question_id)
    explanation = current_question_data.get("explanation") if current_question_data else None
    buttons = []
    if explanation:
        buttons.append([InlineKeyboardButton("üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ", callback_data="show_explanation")])
    buttons.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥. –æ—à–∏–±–∫–∞", callback_data="next_mistake")])
    buttons.append([InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_mistake")])
    buttons.append([InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="exit_mistakes")])
    kb = InlineKeyboardMarkup(buttons)

    if is_correct:
        feedback_text = utils.get_random_correct_phrase() + " –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞."
        await db.delete_mistake(user_id, question_id)
        if 0 <= current_index < len(mistake_ids) and mistake_ids[current_index] == question_id:
            mistake_ids.pop(current_index)
        context.user_data["mistake_ids"] = mistake_ids
    else:
        feedback_text = f"{utils.get_random_incorrect_phrase()}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>"
        context.user_data["current_mistake_index"] = current_index + 1
    await update.message.reply_text(feedback_text, reply_markup=kb, parse_mode="HTML")
    return REVIEWING_MISTAKES

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è ---
async def cq_mistake_show_explanation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    question_id = context.user_data.get("current_mistake_question_id")
    if not question_id:
        await query.message.reply_text("–û—à–∏–±–∫–∞, –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return REVIEWING_MISTAKES
    question_data = utils.find_question_by_id(question_id)
    explanation = question_data.get("explanation") if question_data else None
    if explanation:
        await query.message.reply_text(f"üí¨ <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É</b> (ID: <code>{question_id}</code>)\n\n{explanation}", parse_mode="HTML")
    else:
        await query.message.reply_text("–ö —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è.")
    return REVIEWING_MISTAKES

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—à–∏–±–∫–∞–º (—Å–ª–µ–¥—É—é—â–∏–π, –ø—Ä–æ–ø—É—Å–∫, –≤—ã—Ö–æ–¥) ---
async def cq_next_mistake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["current_mistake_index"] = context.user_data.get("current_mistake_index", 0)
    return await send_mistake_question(query, context)

async def cq_skip_mistake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")
    context.user_data["current_mistake_index"] = context.user_data.get("current_mistake_index", 0) + 1
    return await send_mistake_question(query, context)

async def cq_exit_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    kb = get_initial_choice_keyboard()
    await query.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=kb)
    return ConversationHandler.END

# --- ConversationHandler –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—à–∏–±–æ–∫ ---
def register_mistakes_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("mistakes", cmd_mistakes)],
        states={
            REVIEWING_MISTAKES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mistake_answer),
                CallbackQueryHandler(cq_mistake_show_explanation, pattern="^show_explanation$"),
                CallbackQueryHandler(cq_next_mistake, pattern="^next_mistake$"),
                CallbackQueryHandler(cq_skip_mistake, pattern="^skip_mistake$"),
                CallbackQueryHandler(cq_exit_mistakes, pattern="^exit_mistakes$"),
            ]
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)

"""
–¢–µ—Å—Ç—ã –¥–ª—è HintManager - —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –¥–ª—è AI.
"""

import pytest
import asyncio
import aiosqlite
import tempfile
import os
from pathlib import Path
from core.hint_manager import HintManager


@pytest.fixture
async def test_db():
    """–°–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î."""
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fd, db_path = tempfile.mkstemp(suffix='.db')
    os.close(fd)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É –ë–î
    async with aiosqlite.connect(db_path) as db:
        # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        await db.execute("""
            CREATE TABLE users (
                user_id INTEGER PRIMARY KEY
            )
        """)

        await db.execute("""
            CREATE TABLE user_feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                feedback_type TEXT,
                message TEXT,
                status TEXT DEFAULT 'new',
                task_type TEXT,
                topic_name TEXT,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        """)

        await db.execute("""
            CREATE TABLE task_specific_hints (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_type TEXT NOT NULL,
                topic_name TEXT,
                hint_text TEXT NOT NULL,
                hint_category TEXT,
                priority INTEGER DEFAULT 1,
                is_active BOOLEAN DEFAULT 1,
                created_from_complaint_id INTEGER,
                created_by_admin_id INTEGER,
                usage_count INTEGER DEFAULT 0,
                success_rate FLOAT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP,
                FOREIGN KEY (created_from_complaint_id) REFERENCES user_feedback(id)
            )
        """)

        await db.execute("""
            CREATE TABLE hint_application_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                hint_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                topic_name TEXT,
                task_type TEXT,
                was_helpful BOOLEAN,
                applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (hint_id) REFERENCES task_specific_hints(id),
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        """)

        await db.commit()

    yield db_path

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    try:
        os.unlink(db_path)
    except:
        pass


@pytest.mark.asyncio
async def test_create_hint_from_complaint(test_db):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –∂–∞–ª–æ–±—ã."""
    manager = HintManager(test_db)

    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –∂–∞–ª–æ–±—É
    async with aiosqlite.connect(test_db) as db:
        await db.execute("INSERT INTO users (user_id) VALUES (123)")
        cursor = await db.execute(
            "INSERT INTO user_feedback (user_id, feedback_type, message) VALUES (123, 'complaint', 'Test complaint')"
        )
        complaint_id = cursor.lastrowid
        await db.commit()

    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    hint_id = await manager.create_hint_from_complaint(
        complaint_id=complaint_id,
        task_type='task24',
        topic_name='–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏',
        hint_text='–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –≤ –†–æ—Å—Å–∏–∏ –º–Ω–æ–≥–æ–ø–∞—Ä—Ç–∏–π–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.',
        hint_category='factual',
        priority=5,
        admin_id=1
    )

    assert hint_id > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
    async with aiosqlite.connect(test_db) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("SELECT * FROM task_specific_hints WHERE id = ?", (hint_id,))
        hint = await cursor.fetchone()

        assert hint is not None
        assert hint['task_type'] == 'task24'
        assert hint['topic_name'] == '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏'
        assert hint['priority'] == 5
        assert hint['hint_category'] == 'factual'
        assert hint['is_active'] == 1


@pytest.mark.asyncio
async def test_get_active_hints(test_db):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫."""
    manager = HintManager(test_db)

    # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    async with aiosqlite.connect(test_db) as db:
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ 1: –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
        await db.execute("""
            INSERT INTO task_specific_hints
            (task_type, topic_name, hint_text, hint_category, priority, is_active)
            VALUES ('task24', '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ 1', 'factual', 5, 1)
        """)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ 2: –æ–±—â–∞—è –¥–ª—è task24
        await db.execute("""
            INSERT INTO task_specific_hints
            (task_type, topic_name, hint_text, hint_category, priority, is_active)
            VALUES ('task24', NULL, '–ü–æ–¥—Å–∫–∞–∑–∫–∞ 2', 'criteria', 4, 1)
        """)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ 3: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è
        await db.execute("""
            INSERT INTO task_specific_hints
            (task_type, topic_name, hint_text, hint_category, priority, is_active)
            VALUES ('task24', '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ 3', 'factual', 3, 0)
        """)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ 4: –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        await db.execute("""
            INSERT INTO task_specific_hints
            (task_type, topic_name, hint_text, hint_category, priority, is_active)
            VALUES ('task19', '–¢–µ–º–∞ X', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ 4', 'factual', 5, 1)
        """)

        await db.commit()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
    hints = await manager.get_active_hints('task24', '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏')

    assert len(hints) == 2  # –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ 1 –∏ 2 (—Ç–µ–º–∞ + –æ–±—â–∞—è)
    assert hints[0]['priority'] == 5  # –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º
    assert hints[1]['priority'] == 4


@pytest.mark.asyncio
async def test_format_hints_for_prompt(test_db):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞."""
    manager = HintManager(test_db)

    hints = [
        {
            "hint_id": 1,
            "hint_text": "–£—á–∏—Ç—ã–≤–∞–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã.",
            "priority": 5,
            "hint_category": "factual",
            "usage_count": 10,
            "topic_name": "–¢–µ–º–∞ 1"
        },
        {
            "hint_id": 2,
            "hint_text": "–ü—Ä–æ–≤–µ—Ä—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞.",
            "priority": 4,
            "hint_category": "structural",
            "usage_count": 5,
            "topic_name": None
        }
    ]

    formatted = manager.format_hints_for_prompt(hints)

    assert "üîç –í–ê–ñ–ù–´–ï –£–¢–û–ß–ù–ï–ù–ò–Ø –î–õ–Ø –≠–¢–û–ô –ó–ê–î–ê–ß–ò:" in formatted
    assert "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã" in formatted
    assert "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞/–æ—Ç–≤–µ—Ç–∞" in formatted
    assert "–£—á–∏—Ç—ã–≤–∞–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã." in formatted
    assert "–ü—Ä–æ–≤–µ—Ä—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞." in formatted


@pytest.mark.asyncio
async def test_log_hint_usage(test_db):
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏."""
    manager = HintManager(test_db)

    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with aiosqlite.connect(test_db) as db:
        await db.execute("INSERT INTO users (user_id) VALUES (456)")
        await db.execute("""
            INSERT INTO task_specific_hints
            (task_type, topic_name, hint_text, hint_category, priority)
            VALUES ('task24', '–¢–µ–º–∞', '–ü–æ–¥—Å–∫–∞–∑–∫–∞', 'factual', 5)
        """)
        await db.commit()

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    await manager.log_hint_usage(
        hint_id=1,
        user_id=456,
        topic_name='–¢–µ–º–∞',
        task_type='task24'
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    async with aiosqlite.connect(test_db) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("SELECT * FROM hint_application_log WHERE hint_id = 1")
        log = await cursor.fetchone()

        assert log is not None
        assert log['user_id'] == 456
        assert log['topic_name'] == '–¢–µ–º–∞'
        assert log['task_type'] == 'task24'


@pytest.mark.asyncio
async def test_deactivate_hint(test_db):
    """–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏."""
    manager = HintManager(test_db)

    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    async with aiosqlite.connect(test_db) as db:
        await db.execute("""
            INSERT INTO task_specific_hints
            (task_type, hint_text, hint_category, priority, is_active)
            VALUES ('task24', '–ü–æ–¥—Å–∫–∞–∑–∫–∞', 'factual', 5, 1)
        """)
        await db.commit()

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    result = await manager.deactivate_hint(hint_id=1, admin_id=1)
    assert result is True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
    async with aiosqlite.connect(test_db) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("SELECT is_active FROM task_specific_hints WHERE id = 1")
        hint = await cursor.fetchone()
        assert hint['is_active'] == 0


@pytest.mark.asyncio
async def test_update_hint(test_db):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏."""
    manager = HintManager(test_db)

    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    async with aiosqlite.connect(test_db) as db:
        await db.execute("""
            INSERT INTO task_specific_hints
            (task_type, hint_text, hint_category, priority)
            VALUES ('task24', '–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç', 'factual', 3)
        """)
        await db.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º
    result = await manager.update_hint(
        hint_id=1,
        hint_text='–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
        priority=5
    )
    assert result is True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    async with aiosqlite.connect(test_db) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("SELECT * FROM task_specific_hints WHERE id = 1")
        hint = await cursor.fetchone()
        assert hint['hint_text'] == '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'
        assert hint['priority'] == 5


@pytest.mark.asyncio
async def test_get_hint_stats(test_db):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ."""
    manager = HintManager(test_db)

    # –°–æ–∑–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ
    async with aiosqlite.connect(test_db) as db:
        await db.execute("INSERT INTO users (user_id) VALUES (789)")
        await db.execute("INSERT INTO users (user_id) VALUES (790)")

        await db.execute("""
            INSERT INTO task_specific_hints
            (task_type, hint_text, hint_category, priority, usage_count)
            VALUES ('task24', '–ü–æ–¥—Å–∫–∞–∑–∫–∞', 'factual', 5, 10)
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        await db.execute("""
            INSERT INTO hint_application_log (hint_id, user_id, topic_name, task_type)
            VALUES (1, 789, '–¢–µ–º–∞', 'task24')
        """)
        await db.execute("""
            INSERT INTO hint_application_log (hint_id, user_id, topic_name, task_type)
            VALUES (1, 790, '–¢–µ–º–∞', 'task24')
        """)

        await db.commit()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await manager.get_hint_stats(hint_id=1)

    assert stats is not None
    assert stats['usage_count'] == 10
    assert stats['unique_users_count'] == 2
    assert 'last_used' in stats


if __name__ == '__main__':
    pytest.main([__file__, '-v'])

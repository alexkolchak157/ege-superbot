#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ UI/UX
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
"""

import os
import re
from pathlib import Path
from typing import Dict, List, Tuple

class UnificationTester:
    def __init__(self):
        self.modules = ['task19', 'task20', 'task24', 'task25', 'test_part']
        self.results = {}
        
    def check_imports(self, filepath: str) -> Tuple[bool, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_imports = [
            'UniversalUIComponents',
            'AdaptiveKeyboards', 
            'MessageFormatter'
        ]
        
        missing = []
        for imp in required_imports:
            if imp not in content:
                missing.append(imp)
        
        return len(missing) == 0, missing
    
    def check_universal_usage(self, filepath: str) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        usage = {
            'UniversalUIComponents': len(re.findall(r'UniversalUIComponents\.', content)),
            'AdaptiveKeyboards': len(re.findall(r'AdaptiveKeyboards\.', content)),
            'MessageFormatter': len(re.findall(r'MessageFormatter\.', content)),
            'create_progress_bar': len(re.findall(r'create_progress_bar\(', content)),
            'create_score_visual': len(re.findall(r'create_score_visual\(', content)),
            'format_result_message': len(re.findall(r'format_result_message\(', content)),
            'format_progress_message': len(re.findall(r'format_progress_message\(', content)),
            'create_result_keyboard': len(re.findall(r'create_result_keyboard\(', content)),
            'create_menu_keyboard': len(re.findall(r'create_menu_keyboard\(', content)),
        }
        
        return usage
    
    def check_old_components(self, filepath: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        old_patterns = [
            'UIComponents',
            'EnhancedKeyboards',
            'from .ui_components',
            'from .user_interface',
            '‚ñà' * 10,  # –°—Ç–∞—Ä—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
            '‚ñì' * 10,
        ]
        
        found = []
        for pattern in old_patterns:
            if pattern in content and pattern != 'UniversalUIComponents':
                found.append(pattern)
        
        return found
    
    def check_callbacks(self, filepath: str) -> Dict[str, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é callback_data"""
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ callback_data
        callbacks = re.findall(r'callback_data="([^"]+)"', content)
        
        module_code = filepath.split('/')[0].replace('task', 't')
        if module_code == 'test_part':
            module_code = 'test'
        
        non_standard = []
        standard = []
        
        for cb in callbacks:
            if cb == 'to_main_menu' or cb == 'noop':
                standard.append(cb)
            elif cb.startswith(f"{module_code}_"):
                standard.append(cb)
            else:
                non_standard.append(cb)
        
        return {'standard': standard, 'non_standard': non_standard}
    
    def test_module(self, module: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –º–æ–¥—É–ª—å"""
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {module}...")
        
        handlers_path = f"{module}/handlers.py"
        plugin_path = f"{module}/plugin.py"
        
        results = {
            'imports': False,
            'usage': {},
            'old_components': [],
            'callbacks': {},
            'score': 0
        }
        
        if os.path.exists(handlers_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
            imports_ok, missing = self.check_imports(handlers_path)
            results['imports'] = imports_ok
            results['missing_imports'] = missing
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            results['usage'] = self.check_universal_usage(handlers_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            results['old_components'] = self.check_old_components(handlers_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º callbacks
            results['callbacks'] = self.check_callbacks(handlers_path)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º score
            score = 0
            if imports_ok:
                score += 20
            
            # –ó–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            total_usage = sum(results['usage'].values())
            if total_usage > 0:
                score += min(40, total_usage * 5)
            
            # –ó–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not results['old_components']:
                score += 20
            
            # –ó–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ callbacks
            if results['callbacks']:
                std_ratio = len(results['callbacks']['standard']) / (
                    len(results['callbacks']['standard']) + 
                    len(results['callbacks']['non_standard']) + 0.1
                )
                score += int(std_ratio * 20)
            
            results['score'] = min(100, score)
        
        self.results[module] = results
        return results
    
    def print_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç"""
        print("\n" + "=" * 60)
        print("üìä –û–¢–ß–ï–¢ –ü–û –£–ù–ò–§–ò–ö–ê–¶–ò–ò UI/UX")
        print("=" * 60)
        
        total_score = 0
        
        for module, results in self.results.items():
            score = results['score']
            total_score += score
            
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ score
            if score >= 90:
                status = "‚úÖ"
            elif score >= 70:
                status = "‚ö†Ô∏è"
            else:
                status = "‚ùå"
            
            print(f"\n{status} {module}: {score}%")
            
            # –î–µ—Ç–∞–ª–∏
            if not results['imports']:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–º–ø–æ—Ä—Ç—ã: {', '.join(results['missing_imports'])}")
            
            usage = results['usage']
            if sum(usage.values()) == 0:
                print("   ‚ùå –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
            else:
                print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {sum(usage.values())}")
            
            if results['old_components']:
                print(f"   ‚ùå –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(results['old_components'][:3])}")
            
            if results['callbacks'].get('non_standard'):
                print(f"   ‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ callback: {', '.join(results['callbacks']['non_standard'][:3])}")
        
        avg_score = total_score / len(self.results)
        
        print("\n" + "=" * 60)
        print(f"–û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–° –£–ù–ò–§–ò–ö–ê–¶–ò–ò: {avg_score:.1f}%")
        print("=" * 60)
        
        if avg_score >= 90:
            print("üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        elif avg_score >= 70:
            print("üëç –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å.")
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n")
        
        for module in self.modules:
            if os.path.exists(module):
                self.test_module(module)
            else:
                print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.print_report()

if __name__ == "__main__":
    tester = UnificationTester()
    tester.run()
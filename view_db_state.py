# view_db_state.py - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

import sqlite3
from datetime import datetime
from tabulate import tabulate

DB_PATH = "baza8.db"  # –í–∞—à –ø—É—Ç—å –∫ –ë–î

def show_recent_payments():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print("\nüí≥ –ü–û–°–õ–ï–î–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ò:")
    print("=" * 80)
    
    cursor.execute("""
        SELECT 
            order_id,
            user_id,
            plan_id,
            status,
            amount_kopecks / 100.0 as amount_rub,
            created_at,
            payment_id
        FROM payments 
        ORDER BY created_at DESC 
        LIMIT 10
    """)
    
    payments = cursor.fetchall()
    headers = ["Order ID", "User", "Plan", "Status", "–°—É–º–º–∞ ‚ÇΩ", "–°–æ–∑–¥–∞–Ω", "Payment ID"]
    
    if payments:
        print(tabulate(payments, headers=headers, tablefmt="grid"))
    else:
        print("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π")
    
    conn.close()

def show_active_subscriptions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print("\nüì± –ê–ö–¢–ò–í–ù–´–ï –ü–û–î–ü–ò–°–ö–ò (module_subscriptions):")
    print("=" * 80)
    
    cursor.execute("""
        SELECT 
            user_id,
            module_code,
            plan_id,
            expires_at,
            is_trial,
            payment_id
        FROM module_subscriptions 
        WHERE is_active = 1
        ORDER BY user_id, module_code
        LIMIT 20
    """)
    
    subs = cursor.fetchall()
    headers = ["User", "Module", "Plan", "Expires", "Trial", "Payment ID"]
    
    if subs:
        print(tabulate(subs, headers=headers, tablefmt="grid"))
    else:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    
    print("\nüì± –ê–ö–¢–ò–í–ù–´–ï –ü–û–î–ü–ò–°–ö–ò (user_subscriptions):")
    print("=" * 80)
    
    cursor.execute("""
        SELECT 
            user_id,
            plan_id,
            status,
            expires_at,
            payment_id
        FROM user_subscriptions 
        WHERE status = 'active'
        ORDER BY user_id
        LIMIT 20
    """)
    
    subs = cursor.fetchall()
    headers = ["User", "Plan", "Status", "Expires", "Payment ID"]
    
    if subs:
        print(tabulate(subs, headers=headers, tablefmt="grid"))
    else:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ user_subscriptions")
    
    conn.close()

def show_webhook_logs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ webhook –ª–æ–≥–∏."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print("\nüìù –ü–û–°–õ–ï–î–ù–ò–ï WEBHOOK –õ–û–ì–ò:")
    print("=" * 80)
    
    cursor.execute("""
        SELECT 
            order_id,
            status,
            payment_id,
            created_at
        FROM webhook_logs 
        ORDER BY created_at DESC 
        LIMIT 15
    """)
    
    logs = cursor.fetchall()
    headers = ["Order ID", "Status", "Payment ID", "Time"]
    
    if logs:
        print(tabulate(logs, headers=headers, tablefmt="grid"))
    else:
        print("–ù–µ—Ç webhook –ª–æ–≥–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    cursor.execute("""
        SELECT status, COUNT(*) as count
        FROM webhook_logs
        GROUP BY status
        ORDER BY count DESC
    """)
    
    stats = cursor.fetchall()
    if stats:
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        print(tabulate(stats, headers=["Status", "Count"], tablefmt="simple"))
    
    conn.close()

def show_users_with_subscriptions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print("\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–û–î–ü–ò–°–ö–ê–ú–ò:")
    print("=" * 80)
    
    cursor.execute("""
        SELECT DISTINCT 
            u.user_id,
            u.subscription_plan,
            u.is_subscribed,
            COUNT(DISTINCT ms.module_code) as active_modules,
            COUNT(DISTINCT us.plan_id) as active_plans
        FROM users u
        LEFT JOIN module_subscriptions ms ON u.user_id = ms.user_id AND ms.is_active = 1
        LEFT JOIN user_subscriptions us ON u.user_id = us.user_id AND us.status = 'active'
        GROUP BY u.user_id
        HAVING active_modules > 0 OR active_plans > 0
        ORDER BY u.user_id
    """)
    
    users = cursor.fetchall()
    headers = ["User ID", "Plan", "Subscribed", "Active Modules", "Active Plans"]
    
    if users:
        print(tabulate(users, headers=headers, tablefmt="grid"))
    else:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")
    
    conn.close()

def check_test_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print("\nüß™ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    cursor.execute("""
        SELECT COUNT(*) FROM payments WHERE order_id LIKE 'test-%'
    """)
    test_payments = cursor.fetchone()[0]
    print(f"–¢–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {test_payments}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    test_users = [123456, 789, 999]
    for user_id in test_users:
        cursor.execute("""
            SELECT COUNT(*) FROM module_subscriptions 
            WHERE user_id = ? AND is_active = 1
        """, (user_id,))
        modules = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT COUNT(*) FROM payments WHERE user_id = ?
        """, (user_id,))
        payments = cursor.fetchone()[0]
        
        print(f"User {user_id}: {modules} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π, {payments} –ø–ª–∞—Ç–µ–∂–µ–π")
    
    conn.close()

def main():
    print("üîç –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 80)
    print(f"–ë–î: {DB_PATH}")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    show_recent_payments()
    show_active_subscriptions()
    show_webhook_logs()
    show_users_with_subscriptions()
    check_test_data()
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()
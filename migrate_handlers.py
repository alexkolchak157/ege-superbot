#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã handlers.py
"""

import os
import re
import shutil
from datetime import datetime
from typing import List, Tuple, Dict

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
HANDLER_PATTERN = r'(@safe_handler\(\))\s*\n\s*(async def (\w+)\(update: Update, context: ContextTypes\.DEFAULT_TYPE\):)'
ENTRY_HANDLERS = ['entry_from_menu', 'cmd_quiz', 'cmd_start', 'start_task']
MODE_HANDLERS = ['select_mode', 'practice_mode', 'theory_mode', 'progress_mode', 'settings_mode']
ANSWER_HANDLERS = ['check_answer', 'handle_answer', 'handle_mistake_answer']
NAV_HANDLERS = ['back_to_menu', 'back_to_mode', 'show_main_menu']

# –ú–∞–ø–ø–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ —Ç—Ä–µ–±—É–µ–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
HANDLER_STATE_MAP = {
    # Entry points
    'entry_from_menu': '{ConversationHandler.END, None}',
    'cmd_quiz': '{ConversationHandler.END, None}',
    'cmd_start': '{ConversationHandler.END, None}',
    
    # Mode selection handlers
    'select_exam_num_mode': '{states.CHOOSING_MODE}',
    'select_block_mode': '{states.CHOOSING_MODE}',
    'select_random_all': '{states.CHOOSING_MODE}',
    'select_mistakes_mode': '{states.CHOOSING_MODE}',
    'practice_mode': '{states.CHOOSING_MODE}',
    'theory_mode': '{states.CHOOSING_MODE}',
    'progress_mode': '{states.CHOOSING_MODE}',
    'settings_mode': '{states.CHOOSING_MODE}',
    'show_blocks': '{states.CHOOSING_MODE}',
    'train_mode': '{states.CHOOSING_MODE}',
    'exam_mode': '{states.CHOOSING_MODE}',
    
    # Block/Topic selection
    'select_block': '{states.CHOOSING_BLOCK}',
    'select_topic': '{states.CHOOSING_TOPIC}',
    'choose_topic_list': '{states.CHOOSING_MODE}',
    'select_topic_from_block': '{states.CHOOSING_BLOCK}',
    
    # Answer handlers
    'check_answer': '{states.ANSWERING}',
    'handle_answer': '{states.ANSWERING}',
    'handle_mistake_answer': '{states.REVIEWING_MISTAKES}',
    'handle_full_answer': '{states.ANSWERING}',
    'handle_part_answer': '{states.ANSWERING_PARTS}',
    
    # Navigation handlers (multiple states)
    'back_to_menu': '{states.CHOOSING_MODE, states.CHOOSING_BLOCK, states.CHOOSING_TOPIC, states.ANSWERING}',
    'back_to_mode': '{states.CHOOSING_MODE, states.CHOOSING_BLOCK, states.CHOOSING_TOPIC, states.CHOOSING_EXAM_NUMBER}',
    'back_to_main_menu': '{states.CHOOSING_MODE, states.CHOOSING_BLOCK, states.CHOOSING_TOPIC, states.ANSWERING, states.ANSWERING_PARTS}',
    
    # Next action handlers
    'handle_next_action': '{states.CHOOSING_NEXT_ACTION}',
    'mistake_nav': '{states.REVIEWING_MISTAKES, states.CHOOSING_MODE}',
    
    # Specific task handlers
    'start_task': '{states.CHOOSING_MODE, states.CHOOSING_TOPIC}',
    'apply_strictness': '{states.CHOOSING_MODE}',
    'show_criteria': '{states.CHOOSING_MODE}',
    'show_settings': '{states.CHOOSING_MODE}',
}


class HandlersUpdater:
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.content = ""
        self.updated_content = ""
        self.handlers_found = []
        self.handlers_updated = []
        
    def read_file(self):
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞."""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            self.content = f.read()
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞."""
        backup_dir = os.path.join(os.path.dirname(self.file_path), 'backups')
        os.makedirs(backup_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_path = os.path.join(
            backup_dir, 
            f"{os.path.basename(self.file_path)}.{timestamp}.bak"
        )
        
        shutil.copy2(self.file_path, backup_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        
    def add_imports(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
        imports_to_add = [
            "from core.state_validator import validate_state_transition, state_validator",
            "from telegram.ext import ConversationHandler"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        for import_line in imports_to_add:
            if import_line not in self.content:
                # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ core
                import_pattern = r'(from core\.[^\n]+\n)'
                matches = list(re.finditer(import_pattern, self.content))
                
                if matches:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ core
                    last_match = matches[-1]
                    insert_pos = last_match.end()
                    self.content = (
                        self.content[:insert_pos] + 
                        import_line + "\n" + 
                        self.content[insert_pos:]
                    )
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç: {import_line}")
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                    first_import = re.search(r'(import [^\n]+\n|from [^\n]+\n)', self.content)
                    if first_import:
                        insert_pos = first_import.end()
                        self.content = (
                            self.content[:insert_pos] + 
                            "\n" + import_line + "\n" + 
                            self.content[insert_pos:]
                        )
    
    def find_handlers(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ —Ñ–∞–π–ª–µ."""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ async —Ñ—É–Ω–∫—Ü–∏–π —Å @safe_handler
        pattern = r'@safe_handler\(\)[^\n]*\nasync def (\w+)\([^)]+\):'
        
        matches = re.finditer(pattern, self.content)
        for match in matches:
            handler_name = match.group(1)
            self.handlers_found.append((handler_name, match.start()))
            
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.handlers_found)}")
        
    def update_handler(self, handler_name: str, start_pos: int) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä validate_state_transition
        check_pattern = (
            r'@safe_handler\(\)[^\n]*\n'
            r'(@validate_state_transition[^\n]*\n)?'
            r'async def ' + handler_name
        )
        
        match = re.search(check_pattern, self.content[start_pos:start_pos+500])
        if match and match.group(1):  # –£–∂–µ –µ—Å—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
            print(f"‚è≠Ô∏è {handler_name} - —É–∂–µ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return self.content
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        required_states = HANDLER_STATE_MAP.get(handler_name)
        
        if not required_states:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —à–∞–±–ª–æ–Ω—É –∏–º–µ–Ω–∏
            if handler_name.startswith('entry_') or handler_name.startswith('cmd_'):
                required_states = '{ConversationHandler.END, None}'
            elif 'mode' in handler_name or 'select_' in handler_name:
                required_states = '{states.CHOOSING_MODE}'
            elif 'answer' in handler_name:
                required_states = '{states.ANSWERING}'
            elif 'back_' in handler_name or 'nav' in handler_name:
                required_states = '{states.CHOOSING_MODE}'
            else:
                print(f"‚ö†Ô∏è {handler_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return self.content
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
        pattern = r'(@safe_handler\(\))\n(async def ' + handler_name + r'\([^)]+\):)'
        replacement = (
            r'\1\n'
            r'@validate_state_transition(' + required_states + r')\n'
            r'\2'
        )
        
        new_content = re.sub(pattern, replacement, self.content)
        
        if new_content != self.content:
            self.handlers_updated.append(handler_name)
            print(f"‚úÖ {handler_name} - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è {required_states}")
            return new_content
        
        return self.content
    
    def update_all_handlers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
        self.updated_content = self.content
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
        sorted_handlers = sorted(self.handlers_found, key=lambda x: x[1], reverse=True)
        
        for handler_name, start_pos in sorted_handlers:
            self.updated_content = self.update_handler(handler_name, 0)
            self.content = self.updated_content
    
    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
        with open(self.file_path, 'w', encoding='utf-8') as f:
            f.write(self.updated_content)
        
        print(f"\n‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {self.file_path}")
        print(f"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(self.handlers_updated)}")
    
    def process(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {self.file_path}")
        
        if not os.path.exists(self.file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.file_path}")
            return
        
        self.read_file()
        self.create_backup()
        self.add_imports()
        self.find_handlers()
        self.update_all_handlers()
        
        if self.handlers_updated:
            self.save_file()
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π\n")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    handler_files = [
        'test_part/handlers.py',
        'task19/handlers.py',
        'task20/handlers.py',
        'task24/handlers.py',
        'task25/handlers.py',
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º missing_handlers –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists('test_part/missing_handlers.py'):
        handler_files.append('test_part/missing_handlers.py')
    
    total_updated = 0
    
    for file_path in handler_files:
        updater = HandlersUpdater(file_path)
        updater.process()
        total_updated += len(updater.handlers_updated)
    
    print(f"\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {total_updated}")
    print(f"\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã")
    print("3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä—É—á–Ω—É—é")
    print("4. –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö backups/")


if __name__ == "__main__":
    main()
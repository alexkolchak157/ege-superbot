# features/test_part/quiz_handlers.py
from . import db
from . import utils
from . import keyboards
from telegram import Update
from telegram.error import BadRequest
from telegram.ext import MessageHandler, filters
from telegram.ext import (
    ConversationHandler, CommandHandler, CallbackQueryHandler, ContextTypes
)
from .states import (
    CHOOSING_INITIAL_ACTION,
    CHOOSING_BLOCK,
    CHOOSING_MODE,
    CHOOSING_TOPIC,
    CHOOSING_EXAM_NUMBER,
    ANSWERING,
    CHOOSING_NEXT_ACTION,
    REVIEWING_MISTAKES,
)

from .loader import QUESTIONS_DATA, AVAILABLE_BLOCKS

# --- –ù–∞—á–∞–ª–æ –∫–≤–∏–∑–∞ (/quiz) ---
async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞:",
        reply_markup=kb
    )
    return CHOOSING_BLOCK

async def entry_from_main_menu(update, context):
    """–í—Ö–æ–¥ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é (¬´–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å¬ª)."""
    q = update.callback_query
    await q.answer()

    from . import keyboards
    kb = keyboards.get_initial_choice_keyboard()

    try:
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
        if q.message.text != "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:" or q.message.reply_markup != kb:
            await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=kb)
    except BadRequest as e:
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π ¬´–±–µ–∑–æ–±–∏–¥–Ω—ã–π¬ª —Å–ª—É—á–∞–π
        if not str(e).startswith("Message is not modified"):
            raise

    return CHOOSING_MODE

# --- –í—ã–±–æ—Ä –±–ª–æ–∫–∞ ---
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_block = query.data.replace("block:", "")
    if selected_block not in AVAILABLE_BLOCKS:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–ª–æ–∫.", show_alert=True)
        return CHOOSING_BLOCK

    context.user_data['selected_block'] = selected_block
    kb = keyboards.get_mode_keyboard(selected_block)
    await query.edit_message_text(
        f"–ë–ª–æ–∫ '{selected_block}' –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞:",
        reply_markup=kb
    )
    return CHOOSING_MODE

# --- –†–µ–∂–∏–º: —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–ª–æ–∫–∞ ---
async def select_mode_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –∑–∞–Ω–æ–≤–æ:", reply_markup=kb)
        return CHOOSING_BLOCK

    questions_in_block = []
    for topic_questions in QUESTIONS_DATA[selected_block].values():
        questions_in_block.extend(topic_questions)

    if not questions_in_block:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.edit_message_text("–í —ç—Ç–æ–º –±–ª–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:", reply_markup=kb)
        return CHOOSING_BLOCK

    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–ª–æ–∫–∞...")
    question_data = await utils.choose_question(query.from_user.id, questions_in_block)
    if question_data:
        await utils.send_question(update, context, question_data, last_mode="random")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ANSWERING, –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # return ANSWERING
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º None –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        return None
    else:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.message.reply_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ '{selected_block}'! üéâ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫ –∏–ª–∏ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return CHOOSING_BLOCK

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è ConversationHandler ---
def register_quiz_handlers(app):
    quiz_conv = ConversationHandler(
        entry_points=[
            CommandHandler("quiz", start_quiz),
            # ‚¨áÔ∏è –Ω–æ–≤—ã–π entry ‚Äì —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            CallbackQueryHandler(entry_from_main_menu,
                                 pattern=r"^choose_test_part$"),
        ],
        states={
            CHOOSING_BLOCK: [
                CallbackQueryHandler(select_block, pattern=r'^block:.+')
            ],
            CHOOSING_MODE: [
                CallbackQueryHandler(select_mode_random, pattern=r'^mode:random$'),
                CallbackQueryHandler(select_mode_topic, pattern=r'^mode:choose_topic$'),
                CallbackQueryHandler(select_mode_exam_number, pattern=r'^mode:choose_exam_num$'),
            ],
            CHOOSING_TOPIC: [
                CallbackQueryHandler(select_topic, pattern=r'^topic:.+')
            ],
            CHOOSING_EXAM_NUMBER: [
                CallbackQueryHandler(select_exam_number, pattern=r'^examnum:\d+$')
            ],
            ANSWERING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)
            ],
            CHOOSING_NEXT_ACTION: [
                CallbackQueryHandler(handle_next_action, pattern="^(next_random|next_topic|change_topic|to_menu)$"),
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cmd_cancel),
            CallbackQueryHandler(to_menu, pattern="^to_menu$"),
        ],
        allow_reentry=True
    )
    app.add_handler(quiz_conv, group=1)

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ "–ø–æ —Ç–µ–º–µ"
async def select_mode_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –∑–∞–Ω–æ–≤–æ:", reply_markup=kb)
        return CHOOSING_BLOCK

    topic_codes = list(QUESTIONS_DATA.get(selected_block, {}).keys())
    topics_sorted = sorted(topic_codes, key=utils.sort_key_topic_code)
    kb = keyboards.get_topics_keyboard(selected_block, topics_sorted)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=kb
    )
    return CHOOSING_TOPIC
async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_topic = query.data.replace("topic:", "")
    selected_block = context.user_data.get('selected_block')
    if not selected_block or selected_block not in QUESTIONS_DATA:
        kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:", reply_markup=kb)
        return CHOOSING_BLOCK
    if selected_topic not in QUESTIONS_DATA[selected_block]:
        kb = keyboards.get_topics_keyboard(selected_block, sorted(list(QUESTIONS_DATA[selected_block].keys()), key=utils.sort_key_topic_code))
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kb)
        return CHOOSING_TOPIC

    questions_in_topic = QUESTIONS_DATA[selected_block][selected_topic]
    await query.edit_message_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {selected_topic}...")
    question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
    if question_data:
        await utils.send_question(update, context, question_data, last_mode="topic")
        # return ANSWERING  # –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑—É–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤
        return None
    else:
        kb = keyboards.get_topics_keyboard(selected_block, sorted(list(QUESTIONS_DATA[selected_block].keys()), key=utils.sort_key_topic_code))
        await query.message.reply_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–º–µ {selected_topic}! üéâ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
            reply_markup=kb
        )
        return CHOOSING_TOPIC
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    question_data = context.user_data.get('current_question')
    last_mode = context.user_data.get('last_mode', 'random')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å
    if not question_data:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /quiz.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ —Ç–∏–ø
    correct_answer = str(question_data.get("answer", "")).strip()
    question_type = utils.get_question_type(question_data)
    norm_user = utils.normalize_answer(user_answer, question_type)
    norm_correct = utils.normalize_answer(correct_answer, question_type)
    is_correct = norm_user == norm_correct

    # –§–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if is_correct:
        await update.message.reply_text(utils.get_random_correct_phrase())
        # –û–±–Ω–æ–≤–ª—è–µ–º streak, –ø—Ä–æ–≥—Ä–µ—Å—Å, —É–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ mistakes –∏ —Ç.–¥.
        await db.update_correct_streak(user_id)
        await db.update_daily_streak(user_id)
        await db.mark_answered_question(user_id, question_data["id"])
        await db.delete_mistake(user_id, question_data["id"])
    else:
        await update.message.reply_text(
            utils.get_random_incorrect_phrase() +
            f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
        )
        await db.reset_correct_streak(user_id)
        await db.add_mistake(user_id, question_data["id"])

    # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–≤—ã–±—Ä–∞—Ç—å "–µ—â—ë", "–¥—Ä—É–≥—É—é —Ç–µ–º—É", "–≤ –º–µ–Ω—é" –∏ —Ç.–¥.)
    kb = keyboards.get_after_answer_keyboard(last_mode)
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)
    return CHOOSING_NEXT_ACTION

async def handle_next_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    last_mode = context.user_data.get("last_mode", "random")
    selected_block = context.user_data.get("selected_block")
    selected_topic = None

    # –î–ª—è mode: topic —Å–æ—Ö—Ä–∞–Ω—è–π –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    if last_mode == "topic":
        selected_topic = context.user_data.get("current_question", {}).get("topic")

    data = query.data
    # "–ï—â—ë —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
    if data == "next_random":
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ
        questions_in_block = []
        for topic_questions in QUESTIONS_DATA[selected_block].values():
            questions_in_block.extend(topic_questions)
        question_data = await utils.choose_question(query.from_user.id, questions_in_block)
        if question_data:
            await utils.send_question(update, context, question_data, last_mode="random")
            return ANSWERING
        else:
            kb = keyboards.get_blocks_keyboard(AVAILABLE_BLOCKS)
            await query.message.reply_text(
                f"–í —ç—Ç–æ–º –±–ª–æ–∫–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–ª–æ–∫:",
                reply_markup=kb
            )
            return CHOOSING_BLOCK

    # "–ï—â—ë –ø–æ —Ç–µ–º–µ"
    elif data == "next_topic" and selected_block and selected_topic:
        questions_in_topic = QUESTIONS_DATA[selected_block][selected_topic]
        question_data = await utils.choose_question(query.from_user.id, questions_in_topic)
        if question_data:
            await utils.send_question(update, context, question_data, last_mode="topic")
            return ANSWERING
        else:
            kb = keyboards.get_topics_keyboard(selected_block, sorted(list(QUESTIONS_DATA[selected_block].keys()), key=utils.sort_key_topic_code))
            await query.message.reply_text(
                f"–í —Ç–µ–º–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:",
                reply_markup=kb
            )
            return CHOOSING_TOPIC

    # "–î—Ä—É–≥–∞—è —Ç–µ–º–∞"
    elif data == "change_topic" and selected_block:
        topics_sorted = sorted(QUESTIONS_DATA[selected_block].keys(), key=utils.sort_key_topic_code)
        kb = keyboards.get_topics_keyboard(selected_block, topics_sorted)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
            reply_markup=kb
        )
        return CHOOSING_TOPIC

    # "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    elif data == "to_menu":
        kb = keyboards.get_initial_choice_keyboard()
        await query.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
        return CHOOSING_BLOCK  # –ò–ª–∏ CHOOSING_INITIAL_ACTION, –µ—Å–ª–∏ —É —Ç–µ–±—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /quiz.", show_alert=True)
        return ConversationHandler.END

async def select_mode_exam_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    all_nums = set()
    for block in QUESTIONS_DATA.values():
        for topic_qs in block.values():
            for q in topic_qs:
                num = q.get("exam_number")
                if isinstance(num, int):
                    all_nums.add(num)
    if not all_nums:
        await query.answer("–í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –ï–ì–≠.", show_alert=True)
        return CHOOSING_MODE
    kb = keyboards.get_exam_number_keyboard(sorted(all_nums))
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠:", reply_markup=kb
    )
    return CHOOSING_EXAM_NUMBER

async def select_exam_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    num = query.data.replace("examnum:", "")
    try:
        exam_number = int(num)
    except ValueError:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.", show_alert=True)
        return CHOOSING_EXAM_NUMBER

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
    questions_with_num = []
    for block in QUESTIONS_DATA.values():
        for topic_qs in block.values():
            for q in topic_qs:
                if q.get("exam_number") == exam_number:
                    questions_with_num.append(q)
    if not questions_with_num:
        await query.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º.", show_alert=True)
        return CHOOSING_EXAM_NUMBER

    await query.edit_message_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å ‚Ññ{exam_number}‚Ä¶")
    question_data = await utils.choose_question(query.from_user.id, questions_with_num)
    if question_data:
        await utils.send_question(update, context, question_data, last_mode="exam_number")
        return ANSWERING
    else:
        await query.message.reply_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:",
            reply_markup=keyboards.get_exam_number_keyboard(sorted(set(
                q.get("exam_number") for block in QUESTIONS_DATA.values() for topic in block.values() for q in topic if isinstance(q.get("exam_number"), int)
            )))
        )
        return CHOOSING_EXAM_NUMBER

async def to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query if update.callback_query else None
    kb = keyboards.get_initial_choice_keyboard()
    if query:
        await query.answer()
        await query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=kb)
    else:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=kb)
    return CHOOSING_BLOCK  # –ò–ª–∏ CHOOSING_INITIAL_ACTION, –µ—Å–ª–∏ –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω–æ–µ

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = keyboards.get_initial_choice_keyboard()
    if update.message:
        await update.message.reply_text(
            "–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.edit_text(
            "–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb
        )
    return CHOOSING_BLOCK  # –ò–ª–∏ CHOOSING_INITIAL_ACTION

__all__ = [
    'register_quiz_handlers',
    # –¥—Ä—É–≥–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
]

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 fix_payment.py <user_id>
    python3 fix_payment.py <user_id> --order-id <order_id>

–ü—Ä–∏–º–µ—Ä—ã:
    python3 fix_payment.py 6258384661
    python3 fix_payment.py 6258384661 --order-id order_6258384661_1234567890
"""

import sys
import sqlite3
from datetime import datetime, timedelta
import argparse


def fix_payment_for_user(user_id: int, order_id: str = None):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order_id: ID –∑–∞–∫–∞–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂.
    """
    conn = sqlite3.connect('quiz_async.db')
    cursor = conn.cursor()

    print(f"\n{'='*80}")
    print(f"–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}")
    print('='*80)

    # –ï—Å–ª–∏ order_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not order_id:
        cursor.execute(
            """
            SELECT order_id, payment_id, plan_id, status, created_at
            FROM payments
            WHERE user_id = ?
            ORDER BY created_at DESC
            LIMIT 1
            """,
            (user_id,)
        )
        result = cursor.fetchone()

        if not result:
            print(f"‚ùå –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            conn.close()
            return False

        order_id, payment_id, plan_id, status, created_at = result
        print(f"\nüîç –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂:")
        print(f"   Order ID: {order_id}")
        print(f"   Payment ID: {payment_id}")
        print(f"   Plan ID: {plan_id}")
        print(f"   Status: {status}")
        print(f"   Created At: {created_at}")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π order_id
        cursor.execute(
            """
            SELECT payment_id, plan_id, status, created_at, user_id
            FROM payments
            WHERE order_id = ?
            """,
            (order_id,)
        )
        result = cursor.fetchone()

        if not result:
            print(f"‚ùå –ü–ª–∞—Ç–µ–∂ —Å order_id {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return False

        payment_id, plan_id, status, created_at, db_user_id = result

        if db_user_id != user_id:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Order ID {order_id} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {db_user_id}, –∞ –Ω–µ {user_id}!")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
            if response.lower() != 'yes':
                conn.close()
                return False
            user_id = db_user_id

        print(f"\nüîç –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂:")
        print(f"   Order ID: {order_id}")
        print(f"   Payment ID: {payment_id}")
        print(f"   Plan ID: {plan_id}")
        print(f"   Status: {status}")
        print(f"   Created At: {created_at}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    cursor.execute(
        """
        SELECT id, module_code, plan_id, expires_at, is_active
        FROM module_subscriptions
        WHERE user_id = ? AND is_active = 1
        """,
        (user_id,)
    )
    subscriptions = cursor.fetchall()

    print(f"\nüìã –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
    if subscriptions:
        for sub in subscriptions:
            sub_id, module_code, sub_plan_id, expires_at, is_active = sub
            print(f"   - {module_code} (–ø–ª–∞–Ω: {sub_plan_id}, –∏—Å—Ç–µ–∫–∞–µ—Ç: {expires_at})")
    else:
        print(f"   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    if status == 'completed':
        if subscriptions:
            print(f"\n‚úÖ –ü–ª–∞—Ç–µ–∂ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'completed' –∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
            print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
            conn.close()
            return True
        else:
            print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ü–ª–∞—Ç–µ–∂ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'completed', –Ω–æ –ù–ï–¢ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!")
            print(f"   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å.")
    elif status == 'failed':
        if subscriptions:
            print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ü–ª–∞—Ç–µ–∂ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'failed', –ù–û –ï–°–¢–¨ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏!")
            print(f"   –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ 'completed'.")

            response = input("\n–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ 'completed'? (yes/no): ")
            if response.lower() == 'yes':
                cursor.execute(
                    """
                    UPDATE payments
                    SET status = 'completed',
                        completed_at = CURRENT_TIMESTAMP
                    WHERE order_id = ?
                    """,
                    (order_id,)
                )
                conn.commit()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'completed'")
                conn.close()
                return True
            else:
                print(f"‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã")
                conn.close()
                return False
        else:
            print(f"\n‚ö†Ô∏è  –ü–ª–∞—Ç–µ–∂ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'failed' –∏ –ù–ï–¢ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            print(f"   –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.")
            conn.close()
            return False
    elif status in ['pending', 'NEW']:
        print(f"\n‚ö†Ô∏è  –ü–ª–∞—Ç–µ–∂ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{status}' - –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")

        if subscriptions:
            print(f"   –ù–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ - –≤–æ–∑–º–æ–∂–Ω–æ webhook –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
            response = input(f"\n–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ 'completed'? (yes/no): ")
            if response.lower() == 'yes':
                cursor.execute(
                    """
                    UPDATE payments
                    SET status = 'completed',
                        completed_at = CURRENT_TIMESTAMP
                    WHERE order_id = ?
                    """,
                    (order_id,)
                )
                conn.commit()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'completed'")
                conn.close()
                return True
            else:
                print(f"‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã")
                conn.close()
                return False
        else:
            print(f"   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - –ø–ª–∞—Ç–µ–∂ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            conn.close()
            return False

    conn.close()
    return False


def main():
    parser = argparse.ArgumentParser(
        description='–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  %(prog)s 6258384661
  %(prog)s 6258384661 --order-id order_6258384661_1234567890
        """
    )
    parser.add_argument('user_id', type=int, help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--order-id', type=str, help='ID –∑–∞–∫–∞–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')

    args = parser.parse_args()

    try:
        fix_payment_for_user(args.user_id, args.order_id)
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

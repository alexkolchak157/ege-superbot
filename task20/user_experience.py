"""–£–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞."""

from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class UserProgress:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self, user_data: dict):
        self.results = user_data.get('task20_results', [])
        self.achievements = user_data.get('task20_achievements', set())
        self.last_topic_id = user_data.get('task20_last_topic_id')
        self.session_start = user_data.get('task20_session_start')
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not self.results:
            return {
                'total_attempts': 0,
                'average_score': 0,
                'best_score': 0,
                'worst_score': 0,
                'unique_topics': 0,
                'total_time': 0,
                'streak': 0,
                'trend': 'neutral'
            }
        
        scores = [r['score'] for r in self.results]
        unique_topics = len(set(r['topic_id'] for r in self.results))
        
        # –¢—Ä–µ–Ω–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–æ–ø—ã—Ç–æ–∫
        recent_scores = scores[-5:] if len(scores) >= 5 else scores
        if len(recent_scores) >= 2:
            trend = 'up' if recent_scores[-1] > recent_scores[0] else 'down' if recent_scores[-1] < recent_scores[0] else 'neutral'
        else:
            trend = 'neutral'
        
        # –°—Ç—Ä–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        streak = 0
        for score in reversed(scores):
            if score >= 2:
                streak += 1
            else:
                break
        
        return {
            'total_attempts': len(self.results),
            'average_score': sum(scores) / len(scores),
            'best_score': max(scores),
            'worst_score': min(scores),
            'unique_topics': unique_topics,
            'total_time': self._calculate_total_time(),
            'streak': streak,
            'trend': trend
        }
    
    def _calculate_total_time(self) -> int:
        """–ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö."""
        if not self.results:
            return 0
        
        total_minutes = 0
        for i, result in enumerate(self.results):
            if i > 0:
                try:
                    current_time = datetime.fromisoformat(result['timestamp'])
                    prev_time = datetime.fromisoformat(self.results[i-1]['timestamp'])
                    diff = (current_time - prev_time).total_seconds() / 60
                    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—É–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–¥–æ 30 –º–∏–Ω—É—Ç)
                    if diff <= 30:
                        total_minutes += diff
                except:
                    pass
        
        return int(total_minutes)
    
    def get_weak_topics(self, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏."""
        topic_scores = {}
        for result in self.results:
            topic_id = result['topic_id']
            if topic_id not in topic_scores:
                topic_scores[topic_id] = []
            topic_scores[topic_id].append(result['score'])
        
        # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
        weak_topics = []
        for topic_id, scores in topic_scores.items():
            avg_score = sum(scores) / len(scores)
            if avg_score < 2:
                weak_topics.append({
                    'topic_id': topic_id,
                    'average_score': avg_score,
                    'attempts': len(scores),
                    'last_score': scores[-1]
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É
        weak_topics.sort(key=lambda x: x['average_score'])
        return weak_topics[:limit]
    
    def should_show_tip(self) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É."""
        stats = self.get_stats()
        
        if stats['total_attempts'] == 0:
            return "üí° –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–º –∏–∑ –±–ª–æ–∫–∞ '–≠–∫–æ–Ω–æ–º–∏–∫–∞'"
        
        if stats['average_score'] < 1.5:
            return "üí° –°–æ–≤–µ—Ç: –ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' –≤ —Ç–µ–æ—Ä–∏–∏"
        
        if stats['streak'] >= 5:
            return "üî• –û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã"
        
        if stats['trend'] == 'down' and stats['total_attempts'] >= 5:
            return "üìâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–Ω–∏–∂–∞—é—Ç—Å—è. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –∏–ª–∏ –∏–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–∏—é"
        
        return None

class SmartRecommendations:
    """–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    @staticmethod
    def get_next_topic_recommendation(user_progress: UserProgress, topic_selector) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã."""
        stats = user_progress.get_stats()
        
        # –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ - –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã
        if stats['total_attempts'] < 3:
            easy_blocks = ['–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è']
            for block in easy_blocks:
                topic = topic_selector.get_random_from_block(
                    block, 
                    exclude_ids={r['topic_id'] for r in user_progress.results}
                )
                if topic:
                    return topic
        
        # –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö - —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
        if stats['total_attempts'] >= 10:
            weak_topics = user_progress.get_weak_topics()
            if weak_topics:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –¥–∞–≤–Ω–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏
                oldest_weak = min(weak_topics, key=lambda x: x.get('last_attempt', 0))
                return topic_selector.topics_by_id.get(oldest_weak['topic_id'])
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
        return topic_selector.get_recommended_topics(user_progress.results, limit=1)[0] if topic_selector else None

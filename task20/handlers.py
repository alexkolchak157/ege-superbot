# –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ task20/handlers.py
import logging
import os
import csv
import io
import json
from typing import Optional, Dict, List
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

from core import states

# –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å
from .evaluator import Task20AIEvaluator, StrictnessLevel, EvaluationResult, AI_EVALUATOR_AVAILABLE

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
task20_data = {}
evaluator = None  # –í–ê–ñ–ù–û: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∞


async def init_task20_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 20."""
    global task20_data, evaluator
    
    data_file = os.path.join(os.path.dirname(__file__), "task20_topics.json")
    
    try:
        with open(data_file, "r", encoding="utf-8") as f:
            topics_list = json.load(f)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤ –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        all_topics = []
        topic_by_id = {}
        topics_by_block = {}
        blocks = {}
        
        for topic in topics_list:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            all_topics.append(topic)
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ ID
            topic_by_id[topic["id"]] = topic
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º
            block_name = topic.get("block", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            if block_name not in topics_by_block:
                topics_by_block[block_name] = []
                blocks[block_name] = {"topics": []}
            
            topics_by_block[block_name].append(topic)
            blocks[block_name]["topics"].append(topic)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        task20_data = {
            "topics": all_topics,
            "topic_by_id": topic_by_id,
            "topics_by_block": topics_by_block,
            "blocks": blocks
        }
        
        logger.info(f"Loaded {len(all_topics)} topics for task20")
        logger.info(f"Blocks: {list(blocks.keys())}")
        
    except Exception as e:
        logger.error(f"Failed to load task20 data: {e}")
        task20_data = {"topics": [], "blocks": {}, "topics_by_block": {}}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI evaluator
    # –í–∞–∂–Ω–æ: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from .evaluator import Task20AIEvaluator, StrictnessLevel, AI_EVALUATOR_AVAILABLE
    
    logger.info(f"AI_EVALUATOR_AVAILABLE = {AI_EVALUATOR_AVAILABLE}")
    
    if AI_EVALUATOR_AVAILABLE:
        try:
            strictness_level = StrictnessLevel[os.getenv('TASK20_STRICTNESS', 'STANDARD').upper()]
            logger.info(f"Using strictness level: {strictness_level.value}")
        except KeyError:
            strictness_level = StrictnessLevel.STANDARD
            logger.info("Using default strictness level: STANDARD")
        
        try:
            evaluator = Task20AIEvaluator(strictness=strictness_level)
            logger.info(f"Task20 AI evaluator initialized successfully with {strictness_level.value} strictness")
        except Exception as e:
            logger.error(f"Failed to initialize AI evaluator: {e}", exc_info=True)
            evaluator = None
    else:
        logger.warning("AI evaluator not available for task20 - check imports")
        evaluator = None
        
    logger.info(f"Final evaluator status: {'initialized' if evaluator else 'not initialized'}")

async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –∑–∞–¥–∞–Ω–∏–µ 20 –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    user_id = update.effective_user.id
    new_achievements = await achievements_check(context, user_id)
    
    text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 20</b>\n\n"
        "–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å—É–∂–¥–µ–Ω–∏—è (–∞—Ä–≥—É–º–µ–Ω—Ç—ã) "
        "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ–±–æ–±—â–µ–Ω–∏—è.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–ï –ø—Ä–∏–≤–æ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã!\n\n"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if new_achievements:
        text += "üéâ <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        for ach in new_achievements:
            text += f"{ach['name']} - {ach['desc']}\n"
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t20_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t20_theory")],
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ —Å—É–∂–¥–µ–Ω–∏–π", callback_data="t20_examples")],
        [InlineKeyboardButton("üîß –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="t20_mistakes")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t20_progress")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="t20_settings")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

async def cmd_task20(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /task20."""
    text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 20</b>\n\n"
        "–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å—É–∂–¥–µ–Ω–∏—è (–∞—Ä–≥—É–º–µ–Ω—Ç—ã) "
        "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ–±–æ–±—â–µ–Ω–∏—è.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–ï –ø—Ä–∏–≤–æ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t20_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t20_theory")],
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ —Å—É–∂–¥–µ–Ω–∏–π", callback_data="t20_examples")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t20_progress")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="t20_settings")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

async def practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏ - –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üí™ <b>–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –±–ª–æ–∫ —Ç–µ–º", callback_data="t20_select_block")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t20_random_all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def theory_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ç–µ–æ—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    text = """üìö <b>–¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é 20</b>

<b>–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–∏–∏ 20?</b>
–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å—É–∂–¥–µ–Ω–∏—è (–∞—Ä–≥—É–º–µ–Ω—Ç—ã) –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ–±–æ–±—â–µ–Ω–∏—è.

<b>–ö–ª—é—á–µ–≤—ã–µ –æ—Ç–ª–∏—á–∏—è –æ—Ç –∑–∞–¥–∞–Ω–∏—è 19:</b>
‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 19 - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ 20 - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Å—É–∂–¥–µ–Ω–∏—è

<b>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è:</b>
‚Ä¢ 3 –±–∞–ª–ª–∞ - –ø—Ä–∏–≤–µ–¥–µ–Ω—ã 3 —Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞
‚Ä¢ 2 –±–∞–ª–ª–∞ - –ø—Ä–∏–≤–µ–¥–µ–Ω–æ 2 —Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ 1 –±–∞–ª–ª - –ø—Ä–∏–≤–µ–¥–µ–Ω–æ 1 —Å—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ 0 –±–∞–ª–ª–æ–≤ - —Å—É–∂–¥–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

<b>–í–∞–∂–Ω–æ:</b> –ï—Å–ª–∏ –Ω–∞—Ä—è–¥—É —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ —Å—É–∂–¥–µ–Ω–∏—è–º–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ 2 –∏–ª–∏ –±–æ–ª–µ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏, –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –≤ 0 –±–∞–ª–ª–æ–≤!

<b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b> - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ–º—ã —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏
üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –≥—Ä–∞—Ñ–∏–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b> - –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚öôÔ∏è <b>–£—Ä–æ–≤–Ω–∏ —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏</b> - –æ—Ç –º—è–≥–∫–æ–≥–æ –¥–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ö–∞–∫ –ø–∏—Å–∞—Ç—å —Å—É–∂–¥–µ–Ω–∏—è", callback_data="t20_how_to_write")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã", callback_data="t20_good_examples")],
        [InlineKeyboardButton("‚ùå –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏", callback_data="t20_common_mistakes")],
        [InlineKeyboardButton("üî§ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="t20_useful_phrases")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def how_to_write(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–∞–∫ –ø–∏—Å–∞—Ç—å —Å—É–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    text = """üìù <b>–ö–∞–∫ –ø–∏—Å–∞—Ç—å —Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 20</b>

<b>1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—É–∂–¥–µ–Ω–∏—è:</b>
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –æ–±–æ–±—â–∞—é—â–µ–≥–æ —Ç–µ–∑–∏—Å–∞
‚Ä¢ –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—É—é —Å–≤—è–∑—å
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–≤–æ–¥–æ–º –∏–ª–∏ —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º

<b>2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:</b>
‚Ä¢ "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å—É–±—ä–µ–∫—Ç—ã" –≤–º–µ—Å—Ç–æ "–∫–æ–º–ø–∞–Ω–∏—è Apple"
‚Ä¢ "–†–∞–∑–≤–∏—Ç—ã–µ —Å—Ç—Ä–∞–Ω—ã" –≤–º–µ—Å—Ç–æ "–°–®–ê –∏ –ì–µ—Ä–º–∞–Ω–∏—è"
‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" –≤–º–µ—Å—Ç–æ "iPhone 15"

<b>3. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –æ–±–æ–±—â–∞—é—â–∏–µ —Å–ª–æ–≤–∞:</b>
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å—ã: —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫, –ø–æ—Ä–æ–∂–¥–∞–µ—Ç
‚Ä¢ –í–ª–∏—è–Ω–∏–µ: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç
‚Ä¢ –°–≤—è–∑–∏: –æ–±—É—Å–ª–æ–≤–ª–∏–≤–∞–µ—Ç, –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä—É–µ—Ç, –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç

<b>4. –ò–∑–±–µ–≥–∞–π—Ç–µ:</b>
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç –∏ —á–∏—Å–µ–ª
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —Å—Ç—Ä–∞–Ω
‚Ä¢ –ò–º—ë–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª—é–¥–µ–π
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

<b>–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—É–∂–¥–µ–Ω–∏—è:</b>
<i>"–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≥–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–æ–∑–≤–æ–ª—è—è —Ö–æ–∑—è–π—Å—Ç–≤—É—é—â–∏–º —Å—É–±—ä–µ–∫—Ç–∞–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞–Ω–∏—Ü."</i>"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ç–µ–æ—Ä–∏–∏", callback_data="t20_theory")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
    
async def good_examples(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    text = """‚úÖ <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π</b>

<b>–¢–µ–º–∞: –†–æ–ª—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</b>

<u>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</u>
<i>"–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–∞–ø–∏—Ç–∞–ª –æ–±—â–µ—Å—Ç–≤–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–µ—Ä–µ–¥–∞—á—É –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –Ω–∞–≤—ã–∫–æ–≤ –Ω–æ–≤—ã–º –ø–æ–∫–æ–ª–µ–Ω–∏—è–º, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —É—Å–ª–æ–≤–∏–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è."</i>

<b>–ü–æ—á–µ–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ:</b>
‚Ä¢ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è (—Å–∏—Å—Ç–µ–º–∞, –∫–∞–ø–∏—Ç–∞–ª, –ø–æ–∫–æ–ª–µ–Ω–∏—è)
‚Ä¢ –ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–≤—è–∑—å
‚Ä¢ –û–±–æ–±—â–∞—é—â–∏–µ —Å–ª–æ–≤–∞ (—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è)

<b>–¢–µ–º–∞: –í–ª–∏—è–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏</b>

<u>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</u>
<i>"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Å—Ä–µ–¥–∞ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —á—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –≤ —Ü–µ–ª–æ–º."</i>

<b>–ü–æ—á–µ–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ:</b>
‚Ä¢ –ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
‚Ä¢ –ï—Å—Ç—å –æ–±–æ–±—â–µ–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏–∫–∞ –≤ —Ü–µ–ª–æ–º)
‚Ä¢ –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏

<b>–¢–µ–º–∞: –°–ú–ò –∏ –æ–±—â–µ—Å—Ç–≤–æ</b>

<u>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</u>
<i>"–°—Ä–µ–¥—Å—Ç–≤–∞ –º–∞—Å—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è, –ø—Ä–∏–≤–ª–µ–∫–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º –Ω–æ—Ä–º –∏ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è–º, —á—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞."</i>

<b>–ü–æ—á–µ–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ:</b>
‚Ä¢ –£–∫–∞–∑–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª—É—á–∞–π
‚Ä¢ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞
‚Ä¢ –í—ã–≤–æ–¥ –æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ç–µ–æ—Ä–∏–∏", callback_data="t20_theory")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def common_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    text = """‚ùå <b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏ 20</b>

<b>–û—à–∏–±–∫–∞ 1: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤–º–µ—Å—Ç–æ —Å—É–∂–¥–µ–Ω–∏–π</b>

<u>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:</u>
<i>"–í 2020 –≥–æ–¥—É –∫–æ–º–ø–∞–Ω–∏—è Tesla —É–≤–µ–ª–∏—á–∏–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –Ω–∞ 50%, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏."</i>

<b>–ü–æ—á–µ–º—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:</b>
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (2020 –≥–æ–¥)
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (Tesla)
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (50%)

<u>–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:</u>
<i>"–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Ä–æ—Å—Ç—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."</i>

<b>–û—à–∏–±–∫–∞ 2: –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤</b>

<u>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:</u>
<i>"–ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å—Ç—å. –û–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—É–ª—å—Ç—É—Ä—É. –ö—É–ª—å—Ç—É—Ä—ã –º–µ–Ω—è—é—Ç—Å—è."</i>

<b>–ü–æ—á–µ–º—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:</b>
‚Ä¢ –ù–µ—Ç —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–≥–æ —Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
‚Ä¢ –°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

<b>–û—à–∏–±–∫–∞ 3: –ë—ã—Ç–æ–≤—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è</b>

<u>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:</u>
<i>"–í—Å–µ –∑–Ω–∞—é—Ç, —á—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫—É–¥–∞."</i>

<b>–ü–æ—á–µ–º—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:</b>
‚Ä¢ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
‚Ä¢ –ù–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—É—á–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è

<b>–ü–æ–º–Ω–∏—Ç–µ:</b> –°—É–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–≤—É—á–∞—Ç—å –∫–∞–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏, –∞ –Ω–µ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏!"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ç–µ–æ—Ä–∏–∏", callback_data="t20_theory")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def useful_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    text = """üî§ <b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 20</b>

<b>–î–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–ª–∏—è–Ω–∏—è:</b>
‚Ä¢ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—é...
‚Ä¢ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é...
‚Ä¢ –æ–±—É—Å–ª–æ–≤–ª–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ...
‚Ä¢ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã...
‚Ä¢ –æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞...

<b>–î–ª—è –æ–±–æ–±—â–µ–Ω–∏—è:</b>
‚Ä¢ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–±—â–µ—Å—Ç–≤–µ...
‚Ä¢ –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ä—ã–Ω–æ—á–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏...
‚Ä¢ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...
‚Ä¢ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π...
‚Ä¢ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤...

<b>–î–ª—è –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π:</b>
‚Ä¢ –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ —á–µ–≥–æ...
‚Ä¢ —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç...
‚Ä¢ –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É...
‚Ä¢ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ...
‚Ä¢ —ç—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç...

<b>–î–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>
‚Ä¢ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è... –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç...
‚Ä¢ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è... –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤...
‚Ä¢ —ç–≤–æ–ª—é—Ü–∏—è... –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑...
‚Ä¢ –¥–∏–Ω–∞–º–∏–∫–∞... –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...

<b>–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:</b>
‚Ä¢ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é...
‚Ä¢ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∑–∞–¥–∞—á—É...
‚Ä¢ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è...
‚Ä¢ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏...

<b>–®–∞–±–ª–æ–Ω —Å—É–∂–¥–µ–Ω–∏—è:</b>
[–°—É–±—ä–µ–∫—Ç] + [–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±–æ–±—â–∞—é—â–∏–º —Å–ª–æ–≤–æ–º] + [–æ–±—ä–µ–∫—Ç], + [—Å–≤—è–∑–∫–∞] + [—Å–ª–µ–¥—Å—Ç–≤–∏–µ/—Ä–µ–∑—É–ª—å—Ç–∞—Ç]

<b>–ü—Ä–∏–º–µ—Ä:</b>
<i>"–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã</i> (—Å—É–±—ä–µ–∫—Ç) <i>—Ñ–æ—Ä–º–∏—Ä—É—é—Ç</i> (–¥–µ–π—Å—Ç–≤–∏–µ) <i>–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—Å–Ω–æ–≤—É –æ–±—â–µ—Å—Ç–≤–∞</i> (–æ–±—ä–µ–∫—Ç), <i>—á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç</i> (—Å–≤—è–∑–∫–∞) <i>—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π</i> (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)."
"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ç–µ–æ—Ä–∏–∏", callback_data="t20_theory")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def handle_theory_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Ç–µ–æ—Ä–∏–∏."""
    query = update.callback_query
    
    if query.data == "t20_how_to_write":
        return await how_to_write(update, context)
    elif query.data == "t20_good_examples":
        return await good_examples(update, context)
    elif query.data == "t20_common_mistakes":
        return await common_mistakes(update, context)
    elif query.data == "t20_useful_phrases":
        return await useful_phrases(update, context)
    
    return states.CHOOSING_MODE

async def examples_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–Ω–∫ —Å—É–∂–¥–µ–Ω–∏–π - –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    context.user_data['bank_current_idx'] = 0
    
    text = (
        "üè¶ <b>–ë–∞–Ω–∫ —Å—É–∂–¥–µ–Ω–∏–π</b>\n\n"
        "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å—É–∂–¥–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º –∑–∞–¥–∞–Ω–∏—è 20.\n\n"
        "–ò–∑—É—á–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å:\n"
        "‚Ä¢ –ö–∞–∫ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Å—É–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –æ–±–æ–±—â–∞—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
        "‚Ä¢ –ö–∞–∫ –∏–∑–±–µ–≥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –ø–æ—Ä—è–¥–∫—É", callback_data="t20_bank_nav:0")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="t20_bank_search")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task20_results', [])
    achievements = context.user_data.get('task20_achievements', set())
    
    if not results:
        await query.edit_message_text(
            "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
            "–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–∂–∏–º–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí™ –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="t20_practice")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_menu")]
            ]),
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_attempts = len(results)
    total_score = sum(r['score'] for r in results)
    max_possible_score = total_attempts * 3
    average_score = total_score / total_attempts
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º
    blocks_stats = {}
    for result in results:
        block = result['block']
        if block not in blocks_stats:
            blocks_stats[block] = {'attempts': 0, 'total_score': 0, 'topics': set()}
        blocks_stats[block]['attempts'] += 1
        blocks_stats[block]['total_score'] += result['score']
        blocks_stats[block]['topics'].add(result['topic_title'])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–ø—ã—Ç–∫–∞–º
    recent_results = results[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ø—ã—Ç–æ–∫
    recent_score = sum(r['score'] for r in recent_results)
    recent_avg = recent_score / len(recent_results)
    
    text = f"""üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_attempts}
‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: {total_score}/{max_possible_score}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average_score:.1f}/3
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_results)} –ø–æ–ø—ã—Ç–æ–∫: {recent_avg:.1f}/3
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(achievements)}/6

<b>–ü–æ –±–ª–æ–∫–∞–º:</b>"""
    
    for block, stats in blocks_stats.items():
        avg = stats['total_score'] / stats['attempts']
        text += f"\n\n<b>{block}:</b>\n"
        text += f"  ‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫: {stats['attempts']}\n"
        text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg:.1f}/3\n"
        text += f"  ‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {len(stats['topics'])}"
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if total_attempts >= 5:
        if recent_avg > average_score:
            text += "\n\nüìà <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–∞—é—Ç—Å—è!</b>"
        elif recent_avg < average_score:
            text += "\n\nüìâ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–Ω–∏–∂–∞—é—Ç—Å—è. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ —á–∏—Ç–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!</b>"
        else:
            text += "\n\n‚û°Ô∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!</b>"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if average_score < 2:
        text += "\n\nüí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏' –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="t20_detailed_progress")],
        [InlineKeyboardButton("üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="t20_achievements")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data="t20_export")],
        [InlineKeyboardButton("üîß –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="t20_mistakes")],
        [InlineKeyboardButton("üí™ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="t20_practice")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def settings_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    current_level = evaluator.strictness if evaluator else StrictnessLevel.STANDARD
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    user_id = update.effective_user.id
    stats_by_level = context.bot_data.get(f'task20_stats_by_level_{user_id}', {})
    
    text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

<b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {current_level.value}

<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π:</b>

üü¢ <b>–ú—è–≥–∫–∏–π</b>
‚Ä¢ –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–∂–¥–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –Ω–µ–¥–æ—á—ë—Ç–∞–º–∏
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 2.3/3

üü° <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å—Ç—Ä–æ–≥–æ—Å—Ç—å—é –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å—é
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ï–ì–≠
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1.8/3

üî¥ <b>–°—Ç—Ä–æ–≥–∏–π</b>
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º
‚Ä¢ –ö–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1.2/3

üî• <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å
‚Ä¢ –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–π –±–∞–ª–ª
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0.8/3"""
    
    kb_buttons = []
    for level in StrictnessLevel:
        emoji = "‚úÖ" if level == current_level else ""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É—Ä–æ–≤–Ω—è
        level_stats = stats_by_level.get(level.name, {})
        attempts = level_stats.get('attempts', 0)
        avg_score = level_stats.get('avg_score', 0)
        
        button_text = f"{emoji} {level.value}"
        if attempts > 0:
            button_text += f" (–≤–∞—à –±–∞–ª–ª: {avg_score:.1f})"
        
        kb_buttons.append([
            InlineKeyboardButton(
                button_text,
                callback_data=f"t20_set_strictness:{level.name}"
            )
        ])
    
    kb_buttons.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t20_reset_progress")])
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def reset_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é 20?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="t20_confirm_reset"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t20_settings")
            ]
        ]),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def confirm_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    context.user_data['task20_results'] = []
    
    await query.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω", show_alert=True)
    return await settings_mode(update, context)


async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è 20."""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    keys_to_clear = ['current_topic', 'current_block', 'bank_current_idx', 'waiting_for_bank_search']
    for key in keys_to_clear:
        context.user_data.pop(key, None)
    
    return await entry_from_menu(update, context)

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    from core.plugin_loader import build_main_menu
    
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=build_main_menu()
    )
    
    return ConversationHandler.END

async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
    query = update.callback_query
    await query.answer()
    return None

async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±–ª–æ–∫–∞ —Ç–µ–º."""
    query = update.callback_query
    await query.answer()
    
    blocks = list(task20_data.get("blocks", {}).keys())
    
    if not blocks:
        await query.edit_message_text(
            "‚ùå –ë–ª–æ–∫–∏ —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_practice")
            ]])
        )
        return states.CHOOSING_MODE
    
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:</b>"
    
    kb_buttons = []
    for block in blocks:
        topics_count = len(task20_data["topics_by_block"].get(block, []))
        kb_buttons.append([
            InlineKeyboardButton(
                f"{block} ({topics_count} —Ç–µ–º)",
                callback_data=f"t20_block:{block}"
            )
        ])
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_practice")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_BLOCK

def _build_topic_message(topic: Dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ —Ç–µ–º–µ."""
    return (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 20</b>\n\n"
        f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        f"<b>–ë–ª–æ–∫:</b> {topic['block']}\n\n"
        f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {topic['task_text']}\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —Å—É–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å—É–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º\n"
        "‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–æ–±—â–∞—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
        "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"
    )

async def handle_result_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    action = query.data.split("_")[2]  # t20_new_topic -> new, t20_retry -> retry
    
    if action == "retry":
        # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç—É –∂–µ —Ç–µ–º—É
        topic = context.user_data.get('current_topic')
        if topic:
            text = _build_topic_message(topic)
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t20_menu")]
            ])
            await query.edit_message_text(
                text,
                reply_markup=kb,
                parse_mode=ParseMode.HTML
            )
            return states.ANSWERING
        else:
            await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return await return_to_menu(update, context)
    
    elif action == "new":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–æ–≤–æ–π —Ç–µ–º—ã
        return await practice_mode(update, context)
    
    return states.CHOOSING_MODE


async def block_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    block_name = query.data.split(":", 1)[1]
    context.user_data['current_block'] = block_name
    
    topics = task20_data["topics_by_block"].get(block_name, [])
    
    text = f"üìö <b>–ë–ª–æ–∫: {block_name}</b>\n\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–º: {len(topics)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data="t20_list_topics")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t20_random_block")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫–∞–º", callback_data="t20_select_block")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –≤ –±–ª–æ–∫–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    parts = query.data.split(":page:")
    page = int(parts[1]) if len(parts) > 1 else 0
    
    block_name = context.user_data.get('current_block')
    if not block_name:
        await query.edit_message_text(
            "‚ùå –ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_select_block")
            ]])
        )
        return states.CHOOSING_MODE
    
    topics = task20_data["topics_by_block"].get(block_name, [])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 5 —Ç–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    topics_per_page = 5
    total_pages = (len(topics) + topics_per_page - 1) // topics_per_page
    start_idx = page * topics_per_page
    end_idx = min(start_idx + topics_per_page, len(topics))
    
    text = f"üìö <b>{block_name}</b>\n"
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:\n"
    
    kb_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–∞–º–∏
    for topic in topics[start_idx:end_idx]:
        kb_buttons.append([
            InlineKeyboardButton(
                f"{topic['id']}. {topic['title']}",
                callback_data=f"t20_topic:{topic['id']}"
            )
        ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t20_list_topics:page:{page-1}"))
    nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t20_list_topics:page:{page+1}"))
    
    if nav_buttons:
        kb_buttons.append(nav_buttons)
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"t20_block:{block_name}")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_TOPIC

async def random_topic_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã –∏–∑ –≤—Å–µ—Ö."""
    query = update.callback_query
    await query.answer()
    
    import random
    
    topics = task20_data.get("topics", [])
    if not topics:
        await query.edit_message_text(
            "‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_practice")
            ]])
        )
        return states.CHOOSING_MODE
    
    topic = random.choice(topics)
    context.user_data['current_topic'] = topic
    
    text = _build_topic_message(topic)
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t20_practice")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING

async def mistakes_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task20_results', [])
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–º—ã —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏
    low_score_topics = [r for r in results if r['score'] < 2]
    
    if not low_score_topics:
        await query.edit_message_text(
            "üëç <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–º —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_menu")
            ]]),
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    text = f"üîß <b>–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ–º —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏: {len(low_score_topics)}\n\n"
    text += "–¢–µ–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n"
    
    for i, result in enumerate(low_score_topics[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 —Ç–µ–º
        text += f"‚Ä¢ {result['topic_title']} ({result['score']}/3)\n"
    
    text += "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ —Å–ª—É—á–∞–π–Ω–æ–π.</i>"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –æ—à–∏–±–æ–∫", callback_data="t20_random_mistake")],
        [InlineKeyboardButton("üìù –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data="t20_select_mistake")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def random_topic_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã –∏–∑ –±–ª–æ–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    import random
    
    block_name = context.user_data.get('current_block')
    if not block_name:
        await query.edit_message_text(
            "‚ùå –ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_select_block")
            ]])
        )
        return states.CHOOSING_MODE
    
    topics = task20_data["topics_by_block"].get(block_name, [])
    if not topics:
        await query.edit_message_text(
            "‚ùå –í –±–ª–æ–∫–µ –Ω–µ—Ç —Ç–µ–º",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"t20_block:{block_name}")
            ]])
        )
        return states.CHOOSING_MODE
    
    topic = random.choice(topics)
    context.user_data['current_topic'] = topic
    
    text = _build_topic_message(topic)
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"t20_block:{block_name}")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING


async def bank_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–∞–Ω–∫—É —Å—É–∂–¥–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    topic_idx = int(query.data.split(":")[1])
    topics = task20_data.get('topics', [])
    
    if not topics or topic_idx >= len(topics):
        await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return states.CHOOSING_MODE
    
    topic = topics[topic_idx]
    context.user_data['bank_current_idx'] = topic_idx
    
    text = f"""üè¶ <b>–ë–∞–Ω–∫ —Å—É–∂–¥–µ–Ω–∏–π</b>

<b>–¢–µ–º–∞:</b> {topic['title']}
<b>–ë–ª–æ–∫:</b> {topic['block']}

<b>–ó–∞–¥–∞–Ω–∏–µ:</b>
{topic['task_text']}

<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å—É–∂–¥–µ–Ω–∏—è:</b>

"""
    
    for i, example in enumerate(topic.get('example_arguments', []), 1):
        text += f"<b>{i}. {example['type']}</b>\n"
        text += f"<i>{example['argument']}</i>\n\n"
    
    text += "üí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
    text += "‚Ä¢ –°—É–∂–¥–µ–Ω–∏—è –Ω–æ—Å—è—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä\n"
    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±–æ–±—â–∞—é—â–∏–µ —Å–ª–æ–≤–∞\n"
    text += "‚Ä¢ –ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –¥–∞—Ç"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    kb_buttons = []
    nav_row = []
    
    if topic_idx > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t20_bank_nav:{topic_idx-1}"))
    
    nav_row.append(InlineKeyboardButton(f"{topic_idx+1}/{len(topics)}", callback_data="noop"))
    
    if topic_idx < len(topics) - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t20_bank_nav:{topic_idx+1}"))
    
    kb_buttons.append(nav_row)
    kb_buttons.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="t20_bank_search")])
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t20_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Ç–µ–º—ã –≤ –±–∞–Ω–∫–µ —Å—É–∂–¥–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üîç <b>–ü–æ–∏—Å–∫ –≤ –±–∞–Ω–∫–µ —Å—É–∂–¥–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t20_examples")
        ]]),
        parse_mode=ParseMode.HTML
    )
    
    context.user_data['waiting_for_bank_search'] = True
    return states.SEARCHING

async def set_strictness(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    global evaluator
    
    query = update.callback_query
    await query.answer()
    
    level_str = query.data.split(":")[1].upper()
    
    try:
        new_level = StrictnessLevel[level_str]
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º evaluator —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º
        from .evaluator import Task20AIEvaluator, AI_EVALUATOR_AVAILABLE
        
        if AI_EVALUATOR_AVAILABLE:
            evaluator = Task20AIEvaluator(strictness=new_level)
            await query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {new_level.value}", show_alert=True)
            logger.info(f"Task20 strictness changed to {new_level.value}")
        else:
            await query.answer("‚ùå AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return await settings_mode(update, context)
        
    except Exception as e:
        logger.error(f"Error setting strictness: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return states.CHOOSING_MODE


async def handle_settings_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
    query = update.callback_query
    
    if query.data == "t20_reset_progress":
        return await reset_progress(update, context)
    elif query.data == "t20_confirm_reset":
        return await confirm_reset(update, context)
    
    return states.CHOOSING_MODE

async def detailed_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task20_results', [])
    
    if len(results) < 5:
        await query.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
        return await my_progress(update, context)
    
    try:
        import matplotlib
        matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
        import matplotlib.pyplot as plt
        from io import BytesIO
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 10))
        fig.suptitle('–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—é 20', fontsize=16)
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        scores = [r['score'] for r in results]
        attempts = list(range(1, len(scores) + 1))
        
        ax1.plot(attempts, scores, 'b-o', linewidth=2, markersize=8)
        ax1.axhline(y=2, color='orange', linestyle='--', alpha=0.7, label='–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª')
        ax1.axhline(y=3, color='green', linestyle='--', alpha=0.7, label='–ú–∞–∫—Å–∏–º—É–º')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        if len(scores) >= 5:
            window_size = 5
            moving_avg = []
            for i in range(len(scores) - window_size + 1):
                moving_avg.append(sum(scores[i:i+window_size]) / window_size)
            ax1.plot(range(window_size, len(scores) + 1), moving_avg, 'r-', linewidth=2, alpha=0.7, label='–°—Ä–µ–¥–Ω–µ–µ –∑–∞ 5 –ø–æ–ø—ã—Ç–æ–∫')
        
        ax1.set_xlabel('–ü–æ–ø—ã—Ç–∫–∞')
        ax1.set_ylabel('–ë–∞–ª–ª—ã')
        ax1.set_title('–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        ax1.set_ylim(-0.5, 3.5)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
        score_counts = {0: 0, 1: 0, 2: 0, 3: 0}
        for score in scores:
            score_counts[score] += 1
        
        bars = ax2.bar(score_counts.keys(), score_counts.values(), color=['red', 'orange', 'yellow', 'green'])
        ax2.set_xlabel('–ë–∞–ª–ª—ã')
        ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
        ax2.set_xticks([0, 1, 2, 3])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        total = len(scores)
        for bar, (score, count) in zip(bars, score_counts.items()):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height,
                    f'{count}\n({count/total*100:.0f}%)',
                    ha='center', va='bottom')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º
        blocks_data = {}
        for result in results:
            block = result['block']
            if block not in blocks_data:
                blocks_data[block] = []
            blocks_data[block].append(result['score'])
        
        block_names = list(blocks_data.keys())[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –±–ª–æ–∫–æ–≤
        block_avgs = [sum(scores)/len(scores) for block, scores in blocks_data.items()][:5]
        
        bars3 = ax3.bar(range(len(block_names)), block_avgs, color='skyblue')
        ax3.set_xlabel('–ë–ª–æ–∫–∏')
        ax3.set_ylabel('–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª')
        ax3.set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –±–ª–æ–∫–∞–º')
        ax3.set_xticks(range(len(block_names)))
        ax3.set_xticklabels([name[:15] + '...' if len(name) > 15 else name for name in block_names], rotation=45, ha='right')
        ax3.set_ylim(0, 3.5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar in bars3:
            height = bar.get_height()
            ax3.text(bar.get_x() + bar.get_width()/2., height,
                    f'{height:.2f}',
                    ha='center', va='bottom')
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        from datetime import datetime, timedelta
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_scores = {}
        for result in results[-30:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            try:
                date = datetime.fromisoformat(result['timestamp']).date()
                if date not in daily_scores:
                    daily_scores[date] = []
                daily_scores[date].append(result['score'])
            except:
                continue
        
        if daily_scores:
            dates = sorted(daily_scores.keys())
            daily_avgs = [sum(daily_scores[date])/len(daily_scores[date]) for date in dates]
            
            ax4.plot(dates, daily_avgs, 'g-o', linewidth=2, markersize=8)
            ax4.set_xlabel('–î–∞—Ç–∞')
            ax4.set_ylabel('–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª')
            ax4.set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–Ω—è–º')
            ax4.tick_params(axis='x', rotation=45)
            ax4.grid(True, alpha=0.3)
            ax4.set_ylim(0, 3.5)
        else:
            ax4.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', transform=ax4.transAxes)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await query.message.reply_photo(
            photo=buf,
            caption=f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                   f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(results)}\n"
                   f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {sum(scores)/len(scores):.2f}/3\n"
                   f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(scores)}/3\n"
                   f"–ü—Ä–æ—Ü–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {score_counts[3]/total*100:.0f}%",
            parse_mode=ParseMode.HTML
        )
        
    except ImportError:
        await query.answer("–î–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å matplotlib: pip install matplotlib", show_alert=True)
        return await my_progress(update, context)
    except Exception as e:
        logger.error(f"Error creating progress chart: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞", show_alert=True)
        return await my_progress(update, context)
    
    return states.CHOOSING_MODE

async def achievements_check(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    results = context.user_data.get('task20_results', [])
    achievements = context.user_data.get('task20_achievements', set())
    new_achievements = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievement_conditions = {
        'first_perfect': {
            'name': 'üåü –ü–µ—Ä–≤—ã–π –∏–¥–µ–∞–ª',
            'desc': '–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª',
            'check': lambda r: any(res['score'] == 3 for res in r)
        },
        'consistency_5': {
            'name': 'üéØ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
            'desc': '–ü–æ–ª—É—á–∏—Ç—å 3 –±–∞–ª–ª–∞ 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥',
            'check': lambda r: any(all(r[i:i+5]) for i in range(len(r)-4) if all(res['score'] == 3 for res in r[i:i+5]))
        },
        'explorer_10': {
            'name': 'üó∫Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
            'desc': '–ò–∑—É—á–∏—Ç—å 10 —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º',
            'check': lambda r: len(set(res['topic_id'] for res in r)) >= 10
        },
        'persistent_20': {
            'name': 'üí™ –£–ø–æ—Ä—Å—Ç–≤–æ',
            'desc': '–í—ã–ø–æ–ª–Ω–∏—Ç—å 20 –∑–∞–¥–∞–Ω–∏–π',
            'check': lambda r: len(r) >= 20
        },
        'master_50': {
            'name': 'üèÜ –ú–∞—Å—Ç–µ—Ä',
            'desc': '–í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º –≤—ã—à–µ 2.5',
            'check': lambda r: len(r) >= 50 and sum(res['score'] for res in r) / len(r) >= 2.5
        },
        'comeback': {
            'name': 'üî• –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ',
            'desc': '–ü–æ–ª—É—á–∏—Ç—å 3 –±–∞–ª–ª–∞ –ø–æ—Å–ª–µ 3+ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
            'check': lambda r: any(
                r[i]['score'] == 3 and all(r[j]['score'] < 2 for j in range(max(0, i-3), i))
                for i in range(3, len(r))
            )
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for ach_id, ach_data in achievement_conditions.items():
        if ach_id not in achievements and ach_data['check'](results):
            achievements.add(ach_id)
            new_achievements.append(ach_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    context.user_data['task20_achievements'] = achievements
    
    return new_achievements

async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    achievements = context.user_data.get('task20_achievements', set())
    
    all_achievements = {
        'first_perfect': ('üåü –ü–µ—Ä–≤—ã–π –∏–¥–µ–∞–ª', '–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª'),
        'consistency_5': ('üéØ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–ü–æ–ª—É—á–∏—Ç—å 3 –±–∞–ª–ª–∞ 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥'),
        'explorer_10': ('üó∫Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–ò–∑—É—á–∏—Ç—å 10 —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º'),
        'persistent_20': ('üí™ –£–ø–æ—Ä—Å—Ç–≤–æ', '–í—ã–ø–æ–ª–Ω–∏—Ç—å 20 –∑–∞–¥–∞–Ω–∏–π'),
        'master_50': ('üèÜ –ú–∞—Å—Ç–µ—Ä', '–í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º –≤—ã—à–µ 2.5'),
        'comeback': ('üî• –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ', '–ü–æ–ª—É—á–∏—Ç—å 3 –±–∞–ª–ª–∞ –ø–æ—Å–ª–µ 3+ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫')
    }
    
    text = "üèÖ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
    
    # –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if achievements:
        text += "<b>–ü–æ–ª—É—á–µ–Ω–æ:</b>\n"
        for ach_id in achievements:
            if ach_id in all_achievements:
                name, desc = all_achievements[ach_id]
                text += f"{name} - {desc}\n"
        text += "\n"
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    not_achieved = set(all_achievements.keys()) - achievements
    if not_achieved:
        text += "<b>–î–æ—Å—Ç—É–ø–Ω–æ:</b>\n"
        for ach_id in not_achieved:
            name, desc = all_achievements[ach_id]
            text += f"‚ùì {name[2:]} - {desc}\n"
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    text += f"\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {len(achievements)}/{len(all_achievements)}"
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_progress")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def export_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV."""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('task20_results', [])
    
    if not results:
        await query.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return states.CHOOSING_MODE
    
    try:
        import csv
        import io
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–¢–µ–º–∞', '–ë–ª–æ–∫', '–ë–∞–ª–ª', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª'])
        
        # –î–∞–Ω–Ω—ã–µ
        for result in results:
            timestamp = result.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            try:
                from datetime import datetime
                dt = datetime.fromisoformat(timestamp)
                formatted_time = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_time = timestamp
            
            writer.writerow([
                formatted_time,
                result.get('topic_title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                result.get('block', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                result.get('score', 0),
                result.get('max_score', 3)
            ])
        
        # –ü–æ–ª—É—á–∞–µ–º CSV –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        output.seek(0)
        csv_data = output.getvalue()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await query.message.reply_document(
            document=io.BytesIO(csv_data.encode('utf-8-sig')),  # utf-8-sig –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
            filename=f"task20_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            caption="üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é 20"
        )
        
        await query.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"Error exporting results: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ", show_alert=True)
    
    return states.CHOOSING_MODE

async def choose_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –∏ –ø–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    topic_id = int(query.data.split(":")[1])
    topic = task20_data["topic_by_id"].get(topic_id)
    
    if not topic:
        await query.edit_message_text(
            "‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_select_block")
            ]])
        )
        return states.CHOOSING_MODE
    
    context.user_data['current_topic'] = topic
    
    text = _build_topic_message(topic)
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t20_select_block")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING

async def save_stats_by_level(context: ContextTypes.DEFAULT_TYPE, user_id: int, score: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    if not evaluator:
        return
    
    current_level = evaluator.strictness.name
    stats_key = f'task20_stats_by_level_{user_id}'
    
    if stats_key not in context.bot_data:
        context.bot_data[stats_key] = {}
    
    if current_level not in context.bot_data[stats_key]:
        context.bot_data[stats_key][current_level] = {
            'attempts': 0,
            'total_score': 0,
            'avg_score': 0
        }
    
    stats = context.bot_data[stats_key][current_level]
    stats['attempts'] += 1
    stats['total_score'] += score
    stats['avg_score'] = stats['total_score'] / stats['attempts']

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å AI-–ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    user_answer = update.message.text
    topic = context.user_data.get('current_topic')
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info(f"handle_answer called, evaluator = {evaluator}")
    logger.info(f"evaluator type: {type(evaluator) if evaluator else 'None'}")
    
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t20_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    thinking_msg = await update.message.reply_text(
        "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å—É–∂–¥–µ–Ω–∏—è..."
    )
    
    result: Optional[EvaluationResult] = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ evaluator
        if not evaluator:
            logger.warning("Evaluator is None, using basic evaluation")
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ AI
            arguments = [arg.strip() for arg in user_answer.split('\n') if arg.strip()]
            score = min(len(arguments), 3) if len(arguments) <= 3 else 0
            
            feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
            feedback += f"<b>–°—É–∂–¥–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ:</b> {len(arguments)}\n\n"
            
            if len(arguments) >= 3:
                feedback += "‚úÖ –í—ã –ø—Ä–∏–≤–µ–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–∂–¥–µ–Ω–∏–π.\n"
            else:
                feedback += "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç—Ä–∏ —Å—É–∂–¥–µ–Ω–∏—è.\n"
            
            feedback += "\n‚ö†Ô∏è <i>AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.</i>"
            
            # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å—É–∂–¥–µ–Ω–∏—è!
            
            result_data = {
                'topic_id': topic['id'],
                'topic_title': topic['title'],
                'block': topic['block'],
                'answer': user_answer,
                'score': score,
                'max_score': 3,
                'timestamp': datetime.now().isoformat(),
                'arguments_count': len(arguments)
            }
        else:
            # AI-–ø—Ä–æ–≤–µ—Ä–∫–∞
            result = await evaluator.evaluate(
                answer=user_answer,
                topic=topic['title'],
                task_text=topic['task_text'],
                key_points=topic.get('key_points', [])
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
            feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
            feedback += f"<b>–û—Ü–µ–Ω–∫–∞:</b> {result.total_score}/{result.max_score} –±–∞–ª–ª–æ–≤\n\n"
            
            if result.feedback:
                feedback += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{result.feedback}\n"
            
            if result.suggestions:
                feedback += f"\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                for suggestion in result.suggestions:
                    feedback += f"‚Ä¢ {suggestion}\n"
            
            # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å—É–∂–¥–µ–Ω–∏—è!
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –Ω–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
            if result.total_score < result.max_score:
                feedback += "\nüí° <i>–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã—à–µ.</i>"
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            result_data = {
                'topic_id': topic['id'],
                'topic_title': topic['title'],
                'block': topic['block'],
                'answer': user_answer,
                'score': result.total_score,
                'max_score': result.max_score,
                'timestamp': datetime.now().isoformat(),
                'ai_analysis': result.detailed_analysis
            }
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
        try:
            await thinking_msg.delete()
        except:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'task20_results' not in context.user_data:
            context.user_data['task20_results'] = []
        context.user_data['task20_results'].append(result_data)
        await save_stats_by_level(context, user_id, result_data['score'])
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        user_id = update.effective_user.id
        new_achievements = await achievements_check(context, user_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ feedback
        if new_achievements:
            feedback += "\n\nüéâ <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
            for ach in new_achievements:
                feedback += f"{ach['name']} - {ach['desc']}\n"
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t20_retry")],
            [InlineKeyboardButton("üìù –ù–æ–≤–∞—è —Ç–µ–º–∞", callback_data="t20_new_topic")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t20_progress")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t20_menu")]
        ])
        
        await update.message.reply_text(
            feedback,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error in handle_answer: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
        try:
            await thinking_msg.delete()
        except:
            pass
        
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t20_menu")
            ]])
        )
    
    return states.AWAITING_FEEDBACK

async def handle_bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–Ω–∫–µ —Å—É–∂–¥–µ–Ω–∏–π."""
    if not context.user_data.get('waiting_for_bank_search'):
        return
    
    search_query = update.message.text.lower()
    context.user_data['waiting_for_bank_search'] = False
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–º—ã
    matching_topics = []
    for idx, topic in enumerate(task20_data.get('topics', [])):
        if (search_query in topic['title'].lower() or 
            search_query in topic.get('task_text', '').lower() or
            search_query in topic.get('block', '').lower()):
            matching_topics.append((idx, topic))
    
    if not matching_topics:
        await update.message.reply_text(
            "‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t20_bank_search"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_examples")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º: {len(matching_topics)}\n\n"
    
    kb_buttons = []
    for idx, (topic_idx, topic) in enumerate(matching_topics[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        kb_buttons.append([
            InlineKeyboardButton(
                f"{topic['title']}",
                callback_data=f"t20_bank_nav:{topic_idx}"
            )
        ])
    
    if len(matching_topics) > 10:
        text += f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(matching_topics)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</i>"
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t20_examples")])
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –í –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è 20", callback_data="t20_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ])
    )
    return ConversationHandler.END

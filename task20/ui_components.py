"""–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

from typing import List, Dict, Optional, Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime

class UIComponents:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    
    @staticmethod
    def create_progress_bar(current: int, total: int, width: int = 10) -> str:
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
        if total == 0:
            return "‚ñë" * width
        
        percentage = current / total
        filled = int(percentage * width)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        if percentage >= 0.9:
            fill_char = "‚ñà"
        elif percentage >= 0.7:
            fill_char = "‚ñì"
        elif percentage >= 0.5:
            fill_char = "‚ñí"
        else:
            fill_char = "‚ñë"
        
        bar = fill_char * filled + "‚ñë" * (width - filled)
        return f"{bar} {int(percentage * 100)}%"
    
    @staticmethod
    def create_score_visual(score: int, max_score: int = 3) -> str:
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏."""
        if score == max_score:
            return "‚≠ê‚≠ê‚≠ê"
        elif score == max_score - 1:
            return "‚≠ê‚≠ê‚òÜ"
        elif score == max_score - 2:
            return "‚≠ê‚òÜ‚òÜ"
        else:
            return "‚òÜ‚òÜ‚òÜ"
    
    @staticmethod
    def create_trend_indicator(trend: str) -> str:
        """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞."""
        indicators = {
            'up': 'üìà –†–∞—Å—Ç—ë—Ç',
            'down': 'üìâ –ü–∞–¥–∞–µ—Ç',
            'neutral': '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ'
        }
        return indicators.get(trend, '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ')
    
    @staticmethod
    def format_time_spent(minutes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏."""
        if minutes < 60:
            return f"{minutes} –º–∏–Ω"
        else:
            hours = minutes // 60
            mins = minutes % 60
            return f"{hours}—á {mins}–º–∏–Ω"
    
    @staticmethod
    def create_achievement_badge(achievement: Dict) -> str:
        """–°–æ–∑–¥–∞—Ç—å –±–µ–π–¥–∂ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
        rarity_colors = {
            'common': '‚ö™',
            'uncommon': 'üü¢',
            'rare': 'üîµ',
            'epic': 'üü£',
            'legendary': 'üü°'
        }
        
        color = rarity_colors.get(achievement.get('rarity', 'common'), '‚ö™')
        return f"{color} {achievement['icon']} {achievement['name']}"

class EnhancedKeyboards:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    
    @staticmethod
    def create_main_menu_keyboard(user_stats: Dict) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏."""
        buttons = []
        
        # –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        practice_text = "üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞"
        if user_stats.get('streak', 0) > 0:
            practice_text += f" (üî•{user_stats['streak']})"
        buttons.append([InlineKeyboardButton(practice_text, callback_data="t20_practice")])
        
        # –¢–µ–æ—Ä–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        theory_text = "üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã"
        if user_stats.get('total_attempts', 0) == 0:
            theory_text += " üÜï"
        buttons.append([InlineKeyboardButton(theory_text, callback_data="t20_theory")])
        
        # –ë–∞–Ω–∫ —Å—É–∂–¥–µ–Ω–∏–π
        buttons.append([InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ —Å—É–∂–¥–µ–Ω–∏–π", callback_data="t20_examples")])
        
        # –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ —Å —Å—á—ë—Ç—á–∏–∫–æ–º
        mistakes_text = "üîß –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏"
        weak_topics_count = user_stats.get('weak_topics_count', 0)
        if weak_topics_count > 0:
            mistakes_text += f" ({weak_topics_count})"
        buttons.append([InlineKeyboardButton(mistakes_text, callback_data="t20_mistakes")])
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
        progress_text = "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
        if user_stats.get('progress_percent', 0) > 0:
            progress_text += f" ({user_stats['progress_percent']}%)"
        buttons.append([InlineKeyboardButton(progress_text, callback_data="t20_progress")])
        
        buttons.extend([
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="t20_settings")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ])
        
        return InlineKeyboardMarkup(buttons)
    
    @staticmethod
    def create_result_keyboard(score: int, max_score: int = 3) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
        buttons = []
        
        if score == max_score:
            # –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            buttons.append([
                InlineKeyboardButton("üéâ –ù–æ–≤–∞—è —Ç–µ–º–∞", callback_data="t20_new_topic"),
                InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t20_progress")
            ])
        elif score >= max_score * 0.6:
            # –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            buttons.append([
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t20_retry"),
                InlineKeyboardButton("üìù –ù–æ–≤–∞—è —Ç–µ–º–∞", callback_data="t20_new_topic")
            ])
        else:
            # –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            buttons.append([
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t20_retry")
            ])
            buttons.append([
                InlineKeyboardButton("üìö –ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é", callback_data="t20_theory"),
                InlineKeyboardButton("üí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã", callback_data="t20_examples")
            ])
        
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t20_menu")])
        
        return InlineKeyboardMarkup(buttons)
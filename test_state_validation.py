#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
"""

import asyncio
import sys
import os
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_state_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π...\n")
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞...")
    try:
        from core.state_validator import state_validator, validate_state_transition
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤...")
    from core import states
    from telegram.ext import ConversationHandler
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    valid_transitions = [
        (ConversationHandler.END, states.CHOOSING_MODE),
        (states.CHOOSING_MODE, states.CHOOSING_BLOCK),
        (states.CHOOSING_BLOCK, states.CHOOSING_TOPIC),
        (states.CHOOSING_TOPIC, states.ANSWERING),
        (states.ANSWERING, states.CHOOSING_NEXT_ACTION),
    ]
    
    for from_state, to_state in valid_transitions:
        is_valid = state_validator.is_valid_transition(123, from_state, to_state)
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"{status} {state_validator._state_name(from_state)} ‚Üí {state_validator._state_name(to_state)}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤...")
    invalid_transitions = [
        (states.ANSWERING, states.CHOOSING_BLOCK),
        (states.REVIEWING_MISTAKES, states.CHOOSING_EXAM_NUMBER),
    ]
    
    for from_state, to_state in invalid_transitions:
        is_valid = state_validator.is_valid_transition(123, from_state, to_state)
        status = "‚ùå" if not is_valid else "‚úÖ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!)"
        print(f"{status} {state_validator._state_name(from_state)} ‚Üí {state_validator._state_name(to_state)}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞...")
    
    @validate_state_transition({states.CHOOSING_MODE})
    async def test_handler(update, context):
        return states.ANSWERING
    
    # –ú–æ–∫–∞–µ–º Update –∏ Context
    update = Mock()
    update.effective_user = Mock(id=456)
    context = Mock()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state_validator.set_state(456, states.CHOOSING_MODE)
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    try:
        result = await test_handler(update, context)
        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø–µ—Ä–µ—Ö–æ–¥ –≤ {state_validator._state_name(result)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ: {e}")
    
    # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    stats = state_validator.get_stats()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:")
    print(f"   –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['total_transitions']}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['unique_transitions']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥—É–ª—è–º–∏...")
    
    modules_to_check = [
        'test_part.handlers',
        'task19.handlers', 
        'task20.handlers',
        'task25.handlers'
    ]
    
    for module_name in modules_to_check:
        try:
            module = __import__(module_name, fromlist=[''])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            decorated_count = 0
            for attr_name in dir(module):
                attr = getattr(module, attr_name)
                if callable(attr) and hasattr(attr, '__wrapped__'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ü–µ–ø–æ—á–∫–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
                    func = attr
                    while hasattr(func, '__wrapped__'):
                        if hasattr(func, '__name__') and 'validate_state_transition' in str(func):
                            decorated_count += 1
                            break
                        func = func.__wrapped__
            
            status = "‚úÖ" if decorated_count > 0 else "‚ö†Ô∏è"
            print(f"{status} {module_name}: {decorated_count} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è {module_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ({e})")
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


async def test_specific_handler():
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    print("\nüîç –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
    
    try:
        from test_part.handlers import entry_from_menu
        from telegram import Update, CallbackQuery, Message, Chat, User
        from telegram.ext import ContextTypes
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Update
        update = Mock(spec=Update)
        update.effective_user = Mock(spec=User, id=789)
        update.callback_query = Mock(spec=CallbackQuery)
        update.callback_query.from_user = Mock(spec=User, id=789)
        update.callback_query.message = Mock(spec=Message)
        update.callback_query.message.chat = Mock(spec=Chat)
        update.callback_query.edit_message_text = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Context
        context = Mock()
        context.bot = Mock()
        context.user_data = {}
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        result = await entry_from_menu(update, context)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ entry_from_menu –≤–µ—Ä–Ω—É–ª: {result}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_state_validation())
    asyncio.run(test_specific_handler())
import math
import html
from typing import List, Tuple, Optional, Set
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

def build_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é task24."""
    keyboard = [
        [InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="start_train")],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–∞–ª–æ–Ω—ã", callback_data="start_show")],
        [InlineKeyboardButton("üéØ –†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞", callback_data="start_exam")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="search_topics")],
        [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º", callback_data="show_list")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="show_progress")],
        [InlineKeyboardButton("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏", callback_data="show_criteria")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="reset_progress")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="export_progress")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_progress_keyboard(practiced_indices: Set[int], total: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    completed = len(practiced_indices)
    progress = int(completed / total * 100) if total > 0 else 0
    
    # –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    filled = "‚ñà" * (progress // 10)
    empty = "‚ñë" * (10 - progress // 10)
    progress_bar = f"{filled}{empty}"
    
    keyboard = [
        [InlineKeyboardButton(
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%",
            callback_data="show_detailed_progress"
        )],
        [
            InlineKeyboardButton(
                f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {completed}",
                callback_data="show_completed"
            ),
            InlineKeyboardButton(
                f"üìù –û—Å—Ç–∞–ª–æ—Å—å: {total - completed}",
                callback_data="show_remaining"
            )
        ],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="export_progress")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_button")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

def build_initial_choice_keyboard(mode: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–º—ã."""
    keyboard = [
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫–∞–º", callback_data=f"nav:choose_block:{mode}")],
        [InlineKeyboardButton("üóÇÔ∏è –í—Å–µ —Ç–µ–º—ã —Å–ø–∏—Å–∫–æ–º", callback_data=f"nav:show_all:{mode}")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data=f"nav:random:{mode}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_button")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_block_selection_keyboard(mode: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞ —Ç–µ–º."""
    # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ JSON)
    THEORY_BLOCKS = [
        "–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ", 
        "–≠–∫–æ–Ω–æ–º–∏–∫–∞", 
        "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "–ü–æ–ª–∏—Ç–∏–∫–∞", 
        "–ü—Ä–∞–≤–æ"
    ]
    
    keyboard = []
    for block_name in THEORY_BLOCKS:
        keyboard.append([InlineKeyboardButton(
            f"üìÅ {block_name}", 
            callback_data=f"nav:select_block:{mode}:{block_name}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav:back_to_main:{mode}")])
    return InlineKeyboardMarkup(keyboard)

def build_topic_page_keyboard(
    mode: str,
    page: int,
    bot_data,
    practiced_indices: Set[int],
    block_name: Optional[str] = None
) -> Tuple[str, Optional[InlineKeyboardMarkup]]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–º."""
    ITEMS_PER_PAGE = 8  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    if block_name:
        topic_list = bot_data.topics_by_block.get(block_name, [])
        list_source = "block"
    else:
        topic_list = bot_data.get_all_topics_list()
        list_source = "all"
    
    if not topic_list:
        title_suffix = f" (–±–ª–æ–∫: {html.escape(block_name)})" if block_name else " (–≤—Å–µ —Ç–µ–º—ã)"
        return f"‚ùå –¢–µ–º—ã{title_suffix} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", None
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_items = len(topic_list)
    total_pages = math.ceil(total_items / ITEMS_PER_PAGE)
    page = max(0, min(page, total_pages - 1))
    
    start_index = page * ITEMS_PER_PAGE
    end_index = min(start_index + ITEMS_PER_PAGE, total_items)
    page_items = topic_list[start_index:end_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    action_text = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" if mode == "train" else "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–∞–ª–æ–Ω–∞"
    title_suffix = f"\nüìÅ –ë–ª–æ–∫: <b>{html.escape(block_name)}</b>" if block_name else ""
    
    message_text = f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è {action_text}</b>{title_suffix}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    completed = len([idx for idx, _ in topic_list if idx in practiced_indices])
    total = len(topic_list)
    progress = int(completed / total * 100) if total > 0 else 0
    message_text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total} ({progress}%)\n"
    message_text += "‚îÅ" * 25 + "\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º
    keyboard_rows = []
    for index, topic_name in page_items:
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = topic_name if len(topic_name) < 45 else topic_name[:42] + "..."
        marker = "‚úÖ" if index in practiced_indices else "üìÑ"
        
        keyboard_rows.append([InlineKeyboardButton(
            f"{marker} {display_name}", 
            callback_data=f"topic:{mode}:{index}"
        )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            "‚¨ÖÔ∏è", 
            callback_data=f"nav:{list_source}:{mode}:{page-1}" + (f":{block_name}" if block_name else "")
        ))
    
    nav_buttons.append(InlineKeyboardButton(
        f"{page + 1}/{total_pages}", 
        callback_data="noop"
    ))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            "‚û°Ô∏è", 
            callback_data=f"nav:{list_source}:{mode}:{page+1}" + (f":{block_name}" if block_name else "")
        ))
    
    if nav_buttons and len(nav_buttons) > 1:
        keyboard_rows.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if block_name:
        keyboard_rows.append([InlineKeyboardButton(
            "‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–∞", 
            callback_data=f"nav:choose_block:{mode}"
        )])
    else:
        keyboard_rows.append([InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=f"nav:back_to_main:{mode}"
        )])
    
    if not page_items:
        return f"–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Ç–µ–º{title_suffix}.", InlineKeyboardMarkup(keyboard_rows[-1:])
    
    return message_text, InlineKeyboardMarkup(keyboard_rows)

def build_search_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="start_button")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_feedback_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∞."""
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # score –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return AdaptiveKeyboards.create_result_keyboard(
        score=context.user_data.get('last_score', 0),
        max_score=4,
        module_code="task24"
    )

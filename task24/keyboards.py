import math
import html
from typing import List, Tuple, Optional, Set, Dict, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from core.universal_ui import AdaptiveKeyboards

def build_main_menu_keyboard(user_stats: Optional[Dict[str, Any]] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é task24."""
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é
    if user_stats is None:
        user_stats = {
            'total_attempts': 0,
            'average_score': 0,
            'streak': 0,
            'weak_topics_count': 0,
            'progress_percent': 0
        }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ core
    base_kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="task24")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ callback_data –¥–ª—è task24
    new_buttons = []
    
    for row in base_kb.inline_keyboard:
        new_row = []
        for button in row:
            # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö callback –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è task24
            if button.callback_data == "task24_practice":
                new_row.append(InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="t24_train"))
            elif button.callback_data == "task24_theory":
                new_row.append(InlineKeyboardButton("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏", callback_data="t24_criteria"))
            elif button.callback_data == "task24_examples":
                new_row.append(InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–∞–ª–æ–Ω—ã", callback_data="t24_show"))
            elif button.callback_data == "task24_progress":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_progress"))
            elif button.callback_data == "task24_settings":
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ —Ç–µ–º—ã –≤–º–µ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                new_row.append(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="t24_search"))
            elif button.callback_data == "task24_mistakes":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
                continue
            elif button.callback_data == "task24_achievements":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                continue
            elif button.callback_data == "to_main_menu":
                new_row.append(button)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            else:
                new_row.append(button)
        
        if new_row:
            new_buttons.append(new_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è task24 –∫–Ω–æ–ø–∫–∏
    additional_row = [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º", callback_data="t24_show_list")]
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π (–≥–¥–µ –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
    if new_buttons and "to_main_menu" in str(new_buttons[-1]):
        new_buttons.insert(-1, additional_row)
    else:
        new_buttons.append(additional_row)
    
    return InlineKeyboardMarkup(new_buttons)

def build_progress_keyboard(practiced_indices: Set[int], total: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    completed = len(practiced_indices)
    progress = int(completed / total * 100) if total > 0 else 0
    
    # –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    filled = "‚ñà" * (progress // 10)
    empty = "‚ñë" * (10 - progress // 10)
    progress_bar = f"{filled}{empty}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è task24
    custom_buttons = [
        [InlineKeyboardButton(
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%",
            callback_data="show_detailed_progress"
        )],
        [
            InlineKeyboardButton(
                f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {completed}",
                callback_data="show_completed"
            ),
            InlineKeyboardButton(
                f"üìù –û—Å—Ç–∞–ª–æ—Å—å: {total - completed}",
                callback_data="show_remaining"
            )
        ]
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    base_kb = AdaptiveKeyboards.create_progress_keyboard(
        has_detailed_stats=True,
        can_export=True,
        module_code="task24"
    )
    
    # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ callback_data
    new_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∞—á–∞–ª–µ
    new_buttons.extend(custom_buttons)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    for row in base_kb.inline_keyboard:
        new_row = []
        for button in row:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data
            if button.callback_data == "task24_detailed_progress":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                continue
            elif button.callback_data == "task24_export":
                new_row.append(InlineKeyboardButton(button.text, callback_data="export_progress"))
            elif button.callback_data == "task24_menu":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_menu"))
            elif button.callback_data == "task24_reset_confirm":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_reset_progress"))
            elif button.callback_data == "task24_practice":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_train"))
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                new_row.append(InlineKeyboardButton(button.text, callback_data=button.callback_data))
        
        if new_row:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            new_buttons.append(new_row)
    
    return InlineKeyboardMarkup(new_buttons)

def build_initial_choice_keyboard(mode: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–º—ã."""
    keyboard = [
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫–∞–º", callback_data=f"t24_nav_choose_block:{mode}")],
        [InlineKeyboardButton("üóÇÔ∏è –í—Å–µ —Ç–µ–º—ã —Å–ø–∏—Å–∫–æ–º", callback_data=f"t24_nav_show_all:{mode}")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data=f"t24_nav_random:{mode}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t24_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_block_selection_keyboard(mode: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞ —Ç–µ–º —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ callback_data."""
    buttons = []
    
    if not plan_bot_data or not plan_bot_data.topics_by_block:
        return InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", callback_data="noop")
        ]])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
    for block_name in plan_bot_data.topics_by_block.keys():
        # –°–æ–∫—Ä–∞—â–∞–µ–º –±–ª–æ–∫ –¥–æ –ø–µ—Ä–≤—ã—Ö 20 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è callback_data
        short_block = block_name[:20] if len(block_name) > 20 else block_name
        buttons.append([InlineKeyboardButton(
            block_name, 
            callback_data=f"t24_blk:{mode}:{short_block}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", 
        callback_data=f"t24_nav_bc:{mode}"  # back_to_choice -> bc
    )])
    
    return InlineKeyboardMarkup(buttons)

def build_topic_page_keyboard(
    mode: str,
    page: int,
    data_source,
    practiced_set: Set[int],
    block_name: Optional[str] = None
) -> Tuple[str, InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–º —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ callback_data."""
    per_page = 8
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    if block_name:
        topics = data_source.topics_by_block.get(block_name, [])
        header = f"üìö <b>–ë–ª–æ–∫: {block_name}</b>\n\n"
    else:
        topics = data_source.topic_list_for_pagination
        header = "üìö <b>–í—Å–µ —Ç–µ–º—ã –¥–ª—è –ø–ª–∞–Ω–æ–≤</b>\n\n"
    
    if not topics:
        return "‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"t24_nav_bc:{mode}")
        ]])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = math.ceil(len(topics) / per_page)
    page = max(0, min(page, total_pages - 1))
    
    start_idx = page * per_page
    end_idx = min(start_idx + per_page, len(topics))
    page_topics = topics[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = header
    for i, (idx, topic_name) in enumerate(page_topics, 1):
        marker = "‚úÖ " if idx in practiced_set else "‚ñ´Ô∏è "
        text += f"{marker}{start_idx + i}. {topic_name}\n"
    
    text += f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    
    # –ö–Ω–æ–ø–∫–∏ —Ç–µ–º
    buttons = []
    for idx, topic_name in page_topics:
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_name = topic_name[:40] + "..." if len(topic_name) > 40 else topic_name
        callback_data = f"t24_t:{mode}:{idx}"  # topic -> t
        buttons.append([InlineKeyboardButton(display_name, callback_data=callback_data)])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_row = []
    if page > 0:
        # –°–æ–∫—Ä–∞—â–∞–µ–º callback_data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if block_name:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –∏–º—è –±–ª–æ–∫–∞
            short_block = block_name[:20]
            cb = f"t24_pg:b:{mode}:{page-1}:{short_block}"  # page:block
        else:
            cb = f"t24_pg:a:{mode}:{page-1}"  # page:all
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=cb))
    
    nav_row.append(InlineKeyboardButton(
        f"{page + 1}/{total_pages}", 
        callback_data="noop"
    ))
    
    if page < total_pages - 1:
        if block_name:
            short_block = block_name[:20]
            cb = f"t24_pg:b:{mode}:{page+1}:{short_block}"
        else:
            cb = f"t24_pg:a:{mode}:{page+1}"
        nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=cb))
    
    if nav_row:
        buttons.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", 
        callback_data=f"t24_nav_bc:{mode}"
    )])
    
    return text, InlineKeyboardMarkup(buttons)

def build_search_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t24_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_feedback_keyboard(score: int = 0, max_score: int = 4) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∞."""
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    base_kb = AdaptiveKeyboards.create_result_keyboard(
        score=score,
        max_score=max_score,
        module_code="task24"
    )
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º callback_data –¥–ª—è task24
    new_buttons = []
    
    for row in base_kb.inline_keyboard:
        new_row = []
        for button in row:
            # –ú–∞–ø–ø–∏–Ω–≥ callback_data
            if button.callback_data == "task24_retry":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_retry"))
            elif button.callback_data == "task24_new":
                new_row.append(InlineKeyboardButton(button.text, callback_data="next_topic"))
            elif button.callback_data == "task24_show_ideal":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω
                continue
            elif button.callback_data == "task24_progress":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_progress"))
            elif button.callback_data == "task24_menu":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_menu"))
            elif button.callback_data == "task24_theory":
                new_row.append(InlineKeyboardButton("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏", callback_data="t24_criteria"))
            elif button.callback_data == "task24_examples":
                new_row.append(InlineKeyboardButton("üëÄ –≠—Ç–∞–ª–æ–Ω—ã", callback_data="t24_show"))
            else:
                new_row.append(button)
        
        if new_row:
            new_buttons.append(new_row)
    
    return InlineKeyboardMarkup(new_buttons)
import math
import html
from typing import List, Tuple, Optional, Set, Dict, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from core.universal_ui import AdaptiveKeyboards

def build_main_menu_keyboard(user_stats: Optional[Dict[str, Any]] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é task24."""
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é
    if user_stats is None:
        user_stats = {
            'total_attempts': 0,
            'average_score': 0,
            'streak': 0,
            'weak_topics_count': 0,
            'progress_percent': 0
        }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ core
    base_kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="task24")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ callback_data –¥–ª—è task24
    new_buttons = []
    
    for row in base_kb.inline_keyboard:
        new_row = []
        for button in row:
            # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö callback –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è task24
            if button.callback_data == "task24_practice":
                new_row.append(InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="t24_train"))
            elif button.callback_data == "task24_theory":
                new_row.append(InlineKeyboardButton("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏", callback_data="t24_criteria"))
            elif button.callback_data == "task24_examples":
                new_row.append(InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–∞–ª–æ–Ω—ã", callback_data="t24_show"))
            elif button.callback_data == "task24_progress":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_progress"))
            elif button.callback_data == "task24_settings":
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ —Ç–µ–º—ã –≤–º–µ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                new_row.append(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="t24_search"))
            elif button.callback_data == "task24_mistakes":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
                continue
            elif button.callback_data == "task24_achievements":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                continue
            elif button.callback_data == "to_main_menu":
                new_row.append(button)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            else:
                new_row.append(button)
        
        if new_row:
            new_buttons.append(new_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è task24 –∫–Ω–æ–ø–∫–∏
    additional_row = [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º", callback_data="t24_show_list")]
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π (–≥–¥–µ –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
    if new_buttons and "to_main_menu" in str(new_buttons[-1]):
        new_buttons.insert(-1, additional_row)
    else:
        new_buttons.append(additional_row)
    
    return InlineKeyboardMarkup(new_buttons)

def build_progress_keyboard(practiced_indices: Set[int], total: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    completed = len(practiced_indices)
    progress = int(completed / total * 100) if total > 0 else 0
    
    # –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    filled = "‚ñà" * (progress // 10)
    empty = "‚ñë" * (10 - progress // 10)
    progress_bar = f"{filled}{empty}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è task24
    custom_buttons = [
        [InlineKeyboardButton(
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%",
            callback_data="show_detailed_progress"
        )],
        [
            InlineKeyboardButton(
                f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {completed}",
                callback_data="show_completed"
            ),
            InlineKeyboardButton(
                f"üìù –û—Å—Ç–∞–ª–æ—Å—å: {total - completed}",
                callback_data="show_remaining"
            )
        ]
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    base_kb = AdaptiveKeyboards.create_progress_keyboard(
        has_detailed_stats=True,
        can_export=True,
        module_code="task24"
    )
    
    # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ callback_data
    new_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∞—á–∞–ª–µ
    new_buttons.extend(custom_buttons)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    for row in base_kb.inline_keyboard:
        new_row = []
        for button in row:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data
            if button.callback_data == "task24_detailed_progress":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                continue
            elif button.callback_data == "task24_export":
                new_row.append(InlineKeyboardButton(button.text, callback_data="export_progress"))
            elif button.callback_data == "task24_menu":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_menu"))
            elif button.callback_data == "task24_reset_confirm":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_reset_progress"))
            elif button.callback_data == "task24_practice":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_train"))
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                new_row.append(InlineKeyboardButton(button.text, callback_data=button.callback_data))
        
        if new_row:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            new_buttons.append(new_row)
    
    return InlineKeyboardMarkup(new_buttons)

def build_initial_choice_keyboard(mode: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–º—ã."""
    keyboard = [
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫–∞–º", callback_data=f"t24_nav_choose_block:{mode}")],
        [InlineKeyboardButton("üóÇÔ∏è –í—Å–µ —Ç–µ–º—ã —Å–ø–∏—Å–∫–æ–º", callback_data=f"t24_nav_show_all:{mode}")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data=f"t24_nav_random:{mode}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t24_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_block_selection_keyboard(mode: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞ —Ç–µ–º."""
    # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ JSON)
    THEORY_BLOCKS = [
        "–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ", 
        "–≠–∫–æ–Ω–æ–º–∏–∫–∞", 
        "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "–ü–æ–ª–∏—Ç–∏–∫–∞", 
        "–ü—Ä–∞–≤–æ"
    ]
    
    keyboard = []
    for block_name in THEORY_BLOCKS:
        keyboard.append([InlineKeyboardButton(
            f"üìÅ {block_name}", 
            callback_data=f"t24_nav_select_block:{mode}:{block_name}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"t24_nav_back_to_main:{mode}")])
    return InlineKeyboardMarkup(keyboard)

def build_topic_page_keyboard(
    mode: str,
    page: int,
    bot_data,
    practiced_indices: Set[int],
    block_name: Optional[str] = None
) -> Tuple[str, Optional[InlineKeyboardMarkup]]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–º."""
    ITEMS_PER_PAGE = 8  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    if block_name:
        topic_list = bot_data.topics_by_block.get(block_name, [])
        list_source = "block"
    else:
        topic_list = bot_data.get_all_topics_list()
        list_source = "all"
    
    if not topic_list:
        title_suffix = f" (–±–ª–æ–∫: {html.escape(block_name)})" if block_name else " (–≤—Å–µ —Ç–µ–º—ã)"
        return f"‚ùå –¢–µ–º—ã{title_suffix} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", None
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = math.ceil(len(topic_list) / ITEMS_PER_PAGE)
    page = max(0, min(page, total_pages - 1))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_topics = topic_list[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    title_suffix = f" (–±–ª–æ–∫: {html.escape(block_name)})" if block_name else " (–≤—Å–µ —Ç–µ–º—ã)"
    message_text = f"<b>–°–ø–∏—Å–æ–∫ —Ç–µ–º{title_suffix}</b>\n"
    message_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    
    keyboard_rows = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for i, (topic_idx, topic_title) in enumerate(page_topics):
        display_number = start_idx + i + 1
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
        if topic_idx in practiced_indices:
            mark = "‚úÖ"
        else:
            mark = "üìÑ"
        
        # –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        escaped_title = html.escape(topic_title[:100])
        if len(topic_title) > 100:
            escaped_title += "..."
        message_text += f"{display_number}. {mark} {escaped_title}\n"
        
        # –ö–Ω–æ–ø–∫–∞
        button_text = f"{mark} {topic_title[:50]}{'...' if len(topic_title) > 50 else ''}"
        callback_data = f"t24_topic_{mode}:{topic_idx}"
        
        keyboard_rows.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"t24_nav_page:{mode}:{list_source}:{page-1}:{block_name or ''}"))
    nav_row.append(InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="noop"))
    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"t24_nav_page:{mode}:{list_source}:{page+1}:{block_name or ''}"))
    
    if nav_row:
        keyboard_rows.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"t24_nav_back_to_main:{mode}")])
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if len(keyboard_rows) > 12:
        return message_text + "\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã</i>", InlineKeyboardMarkup(keyboard_rows[-2:])
    
    return message_text, InlineKeyboardMarkup(keyboard_rows)

def build_search_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t24_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_feedback_keyboard(score: int = 0, max_score: int = 4) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∞."""
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    base_kb = AdaptiveKeyboards.create_result_keyboard(
        score=score,
        max_score=max_score,
        module_code="task24"
    )
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º callback_data –¥–ª—è task24
    new_buttons = []
    
    for row in base_kb.inline_keyboard:
        new_row = []
        for button in row:
            # –ú–∞–ø–ø–∏–Ω–≥ callback_data
            if button.callback_data == "task24_retry":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_retry"))
            elif button.callback_data == "task24_new":
                new_row.append(InlineKeyboardButton(button.text, callback_data="next_topic"))
            elif button.callback_data == "task24_show_ideal":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω
                continue
            elif button.callback_data == "task24_progress":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_progress"))
            elif button.callback_data == "task24_menu":
                new_row.append(InlineKeyboardButton(button.text, callback_data="t24_menu"))
            elif button.callback_data == "task24_theory":
                new_row.append(InlineKeyboardButton("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏", callback_data="t24_criteria"))
            elif button.callback_data == "task24_examples":
                new_row.append(InlineKeyboardButton("üëÄ –≠—Ç–∞–ª–æ–Ω—ã", callback_data="t24_show"))
            else:
                new_row.append(button)
        
        if new_row:
            new_buttons.append(new_row)
    
    return InlineKeyboardMarkup(new_buttons)
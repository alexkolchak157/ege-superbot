import logging
import json
import os
import telegram
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from datetime import datetime
from typing import Set, Dict, List, Optional
from core import states
from core import utils as core_utils
from .checker import PlanBotData, evaluate_plan, FEEDBACK_KB
from . import keyboards
from core.document_processor import DocumentProcessor, DocumentHandlerMixin
from core.admin_tools import admin_manager, admin_only, get_admin_keyboard_extension

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
plan_bot_data = None

async def delete_previous_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int, keep_message_id: Optional[int] = None):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    if not hasattr(context, 'bot') or not context.bot:
        logger.warning("Bot instance not available for message deletion")
        return
    
    # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_keys = [
        'task24_topic_msg_id',      # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º/—Ç–µ–º–æ–π
        'task24_plan_msg_id',       # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        'task24_thinking_msg_id',   # –°–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
        'task24_result_msg_id'      # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    ]
    
    messages_to_delete = []
    deleted_count = 0
    
    for key in message_keys:
        msg_id = context.user_data.get(key)
        if msg_id and msg_id != keep_message_id:
            messages_to_delete.append((key, msg_id))
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for key, msg_id in messages_to_delete:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            deleted_count += 1
            logger.debug(f"Deleted {key}: {msg_id}")
        except Exception as e:
            logger.debug(f"Failed to delete {key} {msg_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    for key in message_keys:
        context.user_data.pop(key, None)
    
    logger.info(f"Task24: Deleted {deleted_count}/{len(messages_to_delete)} messages")

def get_user_stats(context: ContextTypes.DEFAULT_TYPE) -> Dict[str, any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    practiced = context.user_data.get('practiced_topics', set())
    total_topics = len(plan_bot_data.topic_list_for_pagination) if plan_bot_data else 0
    
    # –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫
    scores_history = context.user_data.get('scores_history', [])
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    start_time = context.user_data.get('session_start', None)
    total_time = context.user_data.get('total_time_minutes', 0)
    
    return {
        'practiced_count': len(practiced),
        'total_topics': total_topics,
        'progress_percent': int(len(practiced) / total_topics * 100) if total_topics > 0 else 0,
        'scores_history': scores_history,
        'average_score': sum(s['total'] for s in scores_history) / len(scores_history) if scores_history else 0,
        'total_time_minutes': total_time
    }
    
def get_user_stats_from_data(user_data: dict, plan_bot_data) -> Dict[str, any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ user_data –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)."""
    practiced = user_data.get('practiced_topics', set())
    total_topics = len(plan_bot_data.topic_list_for_pagination) if plan_bot_data else 0
    
    scores_history = user_data.get('scores_history', [])
    
    return {
        'practiced_count': len(practiced),
        'total_topics': total_topics,
        'progress_percent': int(len(practiced) / total_topics * 100) if total_topics > 0 else 0,
        'scores_history': scores_history,
        'average_score': sum(s['total'] for s in scores_history) / len(scores_history) if scores_history else 0,
        'total_time_minutes': user_data.get('total_time_minutes', 0)
    }

def save_score_to_history(context: ContextTypes.DEFAULT_TYPE, topic: str, k1: int, k2: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
    if 'scores_history' not in context.user_data:
        context.user_data['scores_history'] = []
    
    context.user_data['scores_history'].append({
        'topic': topic,
        'k1': k1,
        'k2': k2,
        'total': k1 + k2,
        'timestamp': datetime.now().isoformat()
    })

def init_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    global plan_bot_data
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    possible_paths = [
        os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "data", "plans_data_with_blocks.json"),
        os.path.join(os.path.dirname(__file__), "data", "plans_data_with_blocks.json"),
        os.path.join(os.path.dirname(__file__), "plans_data_with_blocks.json"),
        "plans_data_with_blocks.json",
        "data/plans_data_with_blocks.json"
    ]
    
    data_loaded = False
    for data_file in possible_paths:
        try:
            if os.path.exists(data_file):
                logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑: {data_file}")
                with open(data_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if isinstance(data, dict) and ("plans" in data or "blocks" in data):
                    plan_bot_data = PlanBotData(data)
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–∑ {data_file}")
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ–º: {len(plan_bot_data.topic_list_for_pagination)}")
                    data_loaded = True
                    break
                elif isinstance(data, list):
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ —Ç–µ–º
                    plan_bot_data = PlanBotData(data)
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {data_file}")
                    data_loaded = True
                    break
                else:
                    logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ {data_file}")
                    
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –≤ {data_file}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {data_file}: {e}")
    
    if not data_loaded:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π")
        logger.error(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏: {possible_paths}")
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        plan_bot_data = PlanBotData({"plans": {}, "blocks": {}})
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_manager._load_admin_ids()
    
    return data_loaded  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏

async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    if not plan_bot_data or not plan_bot_data.topic_list_for_pagination:
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
            ]]),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if hasattr(core_utils, 'check_subscription'):
        from core.config import REQUIRED_CHANNEL
        if not await core_utils.check_subscription(query.from_user.id, context.bot):
            await core_utils.send_subscription_required(query, REQUIRED_CHANNEL)
            return ConversationHandler.END
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
    if 'session_start' not in context.user_data:
        context.user_data['session_start'] = datetime.now()
    
    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    kb = keyboards.build_main_menu_keyboard()
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if admin_manager.is_admin(user_id):
        admin_buttons = get_admin_keyboard_extension(user_id)
        # InlineKeyboardMarkup.inline_keyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∫–æ—Ä—Ç–µ–∂–µ–π, –ø–æ—ç—Ç–æ–º—É
        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
        keyboard_rows = [list(row) for row in kb.inline_keyboard]
        keyboard_rows.extend(admin_buttons)
        kb = InlineKeyboardMarkup(keyboard_rows)
    
    await query.edit_message_text(
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 24 - —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def cmd_start_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start_plan."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
    if 'session_start' not in context.user_data:
        context.user_data['session_start'] = datetime.now()
    
    user_id = update.effective_user.id
    kb = keyboards.build_main_menu_keyboard()
    
    await update.message.reply_text(
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 24 - —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE

async def train_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if not plan_bot_data or not plan_bot_data.topic_list_for_pagination:
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
            ]])
        )
        return ConversationHandler.END  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    context.user_data['mode'] = 'train'
    
    kb = keyboards.build_initial_choice_keyboard('train')
    await query.edit_message_text(
        "üéØ <b>–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É?",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_TOPIC  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def show_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–∞–ª–æ–Ω–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    if not plan_bot_data or not plan_bot_data.topic_list_for_pagination:
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
            ]])
        )
        return ConversationHandler.END  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    context.user_data['mode'] = 'show'
    
    kb = keyboards.build_initial_choice_keyboard('show')
    await query.edit_message_text(
        "üëÅ <b>–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–∞–ª–æ–Ω–æ–≤</b>\n\n"
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É?",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_TOPIC  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def exam_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ - —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    if not plan_bot_data or not plan_bot_data.topic_list_for_pagination:
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
            ]])
        )
        return ConversationHandler.END
    
    import random
    all_topics = plan_bot_data.get_all_topics_list()
    practiced = context.user_data.get('practiced_topics', set())
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º
    unpracticed = [(idx, topic) for idx, topic in all_topics if idx not in practiced]
    
    if not unpracticed and not all_topics:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_button")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É
    topics_pool = unpracticed if unpracticed else all_topics
    idx, topic = random.choice(topics_pool)
    
    context.user_data['current_topic_index'] = idx
    context.user_data['current_topic'] = topic
    context.user_data['exam_mode'] = True
    
    status = "üÜï –Ω–æ–≤–∞—è —Ç–µ–º–∞" if idx not in practiced else "üîÅ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"
    
    await query.edit_message_text(
        f"üéØ <b>–†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞</b> ({status})\n\n"
        f"üìù <b>–¢–µ–º–∞:</b> {topic}\n\n"
        "–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω. –£ –≤–∞—Å –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!\n\n"
        "<b>üí° –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤:</b>\n"
        "‚Ä¢ <code>–í–∏–¥—ã: —Ñ—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è; —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è; —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è</code>\n"
        "‚Ä¢ <code>–∞) –ø–µ—Ä–≤—ã–π –ø–æ–¥–ø—É–Ω–∫—Ç –±) –≤—Ç–æ—Ä–æ–π –≤) —Ç—Ä–µ—Ç–∏–π</code>\n"
        "‚Ä¢ <code>- –ø–æ–¥–ø—É–Ω–∫—Ç 1\n- –ø–æ–¥–ø—É–Ω–∫—Ç 2</code>\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.</i>",
        parse_mode=ParseMode.HTML
    )
    
    return states.AWAITING_PLAN

async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ–º."""
    query = update.callback_query
    await query.answer()
    
    if not plan_bot_data:
        await query.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        return states.CHOOSING_MODE
    
    all_topics = plan_bot_data.get_all_topics_list()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
    text = "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –ø–ª–∞–Ω–æ–≤:</b>\n\n"
    practiced = context.user_data.get('practiced_topics', set())
    
    current_block = None
    for idx, topic_name in all_topics:
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –¥–ª—è —Ç–µ–º—ã
        topic_block = None
        for block, topics in plan_bot_data.topics_by_block.items():
            if any(t[1] == topic_name for t in topics):
                topic_block = block
                break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if topic_block != current_block:
            current_block = topic_block
            text += f"\n<b>{current_block}:</b>\n"
        
        marker = "‚úÖ " if idx in practiced else "‚ñ´Ô∏è "
        text += f"{marker}{idx + 1}. {topic_name}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = len(all_topics)
    completed = len(practiced)
    text += f"\nüìä –ü—Ä–æ–π–¥–µ–Ω–æ: {completed}/{total} ({int(completed/total*100) if total > 0 else 0}%)"
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start_button")
    ]])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if len(text) > 4000:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
        from io import BytesIO
        file_data = BytesIO(text.encode('utf-8'))
        file_data.name = "topics_list.txt"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except:
            pass
        
        await query.message.reply_document(
            document=file_data,
            caption="üìö –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º (—Ñ–∞–π–ª –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)",
            reply_markup=kb
        )
    else:
        try:
            await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        except telegram.error.BadRequest as e:
            if "There is no text in the message to edit" in str(e) or "Message can't be edited" in str(e):
                try:
                    await query.message.delete()
                except:
                    pass
                
                await query.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
            else:
                raise
    
    return states.CHOOSING_MODE

async def select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split(":")
    if len(parts) < 3:
        logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
        return
    
    mode = parts[1]
    topic_idx = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
    topic_name = plan_bot_data.topic_index_map.get(topic_idx)
    if not topic_name:
        await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['current_topic_index'] = topic_idx
    context.user_data['current_topic'] = topic_name
    
    if mode == 'train':
        # –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –ø–ª–∞–Ω
        await query.edit_message_text(
            f"üìù <b>–¢–µ–º–∞:</b> {topic_name}\n\n"
            "–°–æ—Å—Ç–∞–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–ª–∞–Ω –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.\n\n"
            "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ï–ì–≠ 2025:</b>\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 –ø—É–Ω–∫—Ç–∞, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–º—É\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 –∏–∑ –Ω–∏—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n"
            "‚Ä¢ –í –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ –º–∏–Ω–∏–º—É–º 3 –ø–æ–¥–ø—É–Ω–∫—Ç–∞\n\n"
            "<b>–§–æ—Ä–º–∞—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤:</b>\n"
            "‚úÖ <code>1. –í–∏–¥—ã: —Ñ—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è; —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è; —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è</code>\n"
            "‚úÖ <code>2. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:\n   –∞) –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏\n   –±) –¥–ª—è –æ–±—â–µ—Å—Ç–≤–∞</code>\n"
            "‚úÖ <code>3. –ú–µ—Ä—ã –±–æ—Ä—å–±—ã:\n   - –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏\n   - –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è</code>\n\n"
            "<i>üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</i>\n\n"
            "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
            parse_mode=ParseMode.HTML
        )
        
        # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
        context.user_data['task24_topic_msg_id'] = query.message.message_id
        
        return states.AWAITING_PLAN
    
    elif mode == 'show':
        # –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω
        return await show_etalon_plan(query, context, topic_idx)

async def show_etalon_plan(query, context, topic_idx):
    """–ü–æ–∫–∞–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""
    topic_name = plan_bot_data.topic_index_map.get(topic_idx)
    if not topic_name:
        await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    plan_data = plan_bot_data.get_plan_data(topic_name)
    if not plan_data:
        await query.answer("–î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —ç—Ç–∞–ª–æ–Ω–∞
    text = f"üìã <b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø–ª–∞–Ω</b>\n<b>–¢–µ–º–∞:</b> {topic_name}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if 'full_plan' in plan_data:
        text += plan_data['full_plan']
    elif 'etalon_plan_text' in plan_data:
        text += plan_data['etalon_plan_text']
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ points_data
        points_data = plan_data.get('points_data', [])
        for i, point in enumerate(points_data, 1):
            if isinstance(point, dict):
                point_text = point.get('point_text', '')
                is_key = "‚≠ê " if point.get('is_potentially_key') else ""
                text += f"{i}. {is_key}{point_text}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø—É–Ω–∫—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                subpoints = point.get('sub_points', point.get('subpoints', []))
                for j, subpoint in enumerate(subpoints):
                    text += f"   {chr(ord('–∞') + j)}) {subpoint}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –ø–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º
    obligatory_count = sum(1 for p in plan_data.get('points_data', []) 
                          if isinstance(p, dict) and p.get('is_potentially_key'))
    if obligatory_count > 0:
        text += f"\n‚≠ê <i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤: {obligatory_count}</i>"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"topic:train:{topic_idx}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É —Ç–µ–º—ã", callback_data=f"nav:back_to_choice:{context.user_data.get('mode')}")],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="start_button")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return states.CHOOSING_TOPIC

async def navigate_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if not plan_bot_data or not hasattr(plan_bot_data, 'topic_list_for_pagination'):
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
            ]])
        )
        return ConversationHandler.END
    
    parts = query.data.split(":")
    action = parts[1]
    
    if action == "choose_block":
        mode = parts[2]
        kb = keyboards.build_block_selection_keyboard(mode)
        await query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    
    elif action == "show_all":
        mode = parts[2]
        page = 0
        practiced = context.user_data.get('practiced_topics', set())
        text, kb = keyboards.build_topic_page_keyboard(
            mode, page, plan_bot_data, practiced
        )
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    
    elif action == "random":
        mode = parts[2]
        import random
        all_topics = plan_bot_data.get_all_topics_list()
        practiced = context.user_data.get('practiced_topics', set())
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º
        unpracticed = [(idx, topic) for idx, topic in all_topics if idx not in practiced]
        topics_pool = unpracticed if unpracticed else all_topics
        
        if topics_pool:
            idx, topic_name = random.choice(topics_pool)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['current_topic_index'] = idx
            context.user_data['current_topic'] = topic_name
            
            if mode == 'train':
                # –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –ø–ª–∞–Ω
                await query.edit_message_text(
                    f"üìù <b>–¢–µ–º–∞:</b> {topic_name}\n\n"
                    "–°–æ—Å—Ç–∞–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–ª–∞–Ω –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.\n\n"
                    "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ï–ì–≠ 2025:</b>\n"
                    "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 –ø—É–Ω–∫—Ç–∞, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–º—É\n"
                    "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 –∏–∑ –Ω–∏—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n"
                    "‚Ä¢ –í –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ –º–∏–Ω–∏–º—É–º 3 –ø–æ–¥–ø—É–Ω–∫—Ç–∞\n\n"
                    "<b>–§–æ—Ä–º–∞—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤:</b>\n"
                    "‚úÖ <code>1. –í–∏–¥—ã: —Ñ—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è; —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è; —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è</code>\n"
                    "‚úÖ <code>2. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:\n   –∞) –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏\n   –±) –¥–ª—è –æ–±—â–µ—Å—Ç–≤–∞</code>\n"
                    "‚úÖ <code>3. –ú–µ—Ä—ã –±–æ—Ä—å–±—ã:\n   - –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏\n   - –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è</code>\n\n"
                    "<i>üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</i>\n\n"
                    "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
                    parse_mode=ParseMode.HTML
                )
                return states.AWAITING_PLAN
            
            elif mode == 'show':
                # –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω
                return await show_etalon_plan(query, context, idx)
        else:
            await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º", show_alert=True)
    
    elif action in ["all", "block"]:
        mode = parts[2]
        page = int(parts[3])
        block_name = parts[4] if len(parts) > 4 else None
        
        practiced = context.user_data.get('practiced_topics', set())
        text, kb = keyboards.build_topic_page_keyboard(
            mode, page, plan_bot_data, practiced, block_name
        )
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    
    elif action == "select_block":
        mode = parts[2]
        block_name = ":".join(parts[3:])
        
        practiced = context.user_data.get('practiced_topics', set())
        text, kb = keyboards.build_topic_page_keyboard(
            mode, 0, plan_bot_data, practiced, block_name
        )
        await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    
    elif action == "back_to_main":
        mode = parts[2] if len(parts) > 2 else 'train'
        kb = keyboards.build_initial_choice_keyboard(mode)
        await query.edit_message_text(
            f"üéØ <b>–†–µ–∂–∏–º {'—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' if mode == 'train' else '–ø—Ä–æ—Å–º–æ—Ç—Ä–∞'}</b>\n\n"
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É?",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    
    elif action == "back_to_choice":
        return await train_mode(update, context) if context.user_data.get('mode') == 'train' else await show_mode(update, context)
    
    return states.CHOOSING_TOPIC



async def handle_plan_enhanced(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)."""
    
    # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
    if update.message.document:
        return await handle_plan_document(update, context)
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ handle_plan
    user_plan_text = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['task24_plan_msg_id'] = update.message.message_id
    
    if not user_plan_text:
        await update.message.reply_text(
            "‚ùå –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–ª–∞–Ω —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (PDF, DOCX, TXT)."
        )
        return states.AWAITING_PLAN
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(user_plan_text) < 50:
        await update.message.reply_text(
            "‚ùå –ü–ª–∞–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø–ª–∞–Ω.\n\n"
            "üí° –°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, –µ—Å–ª–∏ —É–¥–æ–±–Ω–µ–µ."
        )
        return states.AWAITING_PLAN
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    topic_index = context.user_data.get('current_topic_index')
    topic_name = context.user_data.get('current_topic')
    
    if not topic_name:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_plan"
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ideal_plan_data = plan_bot_data.get_plan_data(topic_name)
    if not ideal_plan_data:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–º—ã."
        )
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
    thinking_msg = await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø–ª–∞–Ω...")
    context.user_data['task24_thinking_msg_id'] = thinking_msg.message_id
    
    # –ù–ï –£–î–ê–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å! –£–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ AI-–ø—Ä–æ–≤–µ—Ä–∫–∞
        use_ai = context.bot_data.get('use_ai_checking', True)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–ª–∞–Ω —Å AI
        if 'evaluate_plan_with_ai' in globals():
            feedback = await evaluate_plan_with_ai(
                user_plan_text,
                ideal_plan_data,
                plan_bot_data,
                topic_name,
                use_ai=use_ai
            )
        else:
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            feedback = evaluate_plan(
                user_plan_text,
                ideal_plan_data,
                plan_bot_data,
                topic_name
            )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–ª—ã –∏–∑ —Ñ–∏–¥–±–µ–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        import re
        k1_match = re.search(r'–ö1.*?(\d+)/3', feedback)
        k2_match = re.search(r'–ö2.*?(\d+)/3', feedback)
        
        k1_score = int(k1_match.group(1)) if k1_match else 0
        k2_score = int(k2_match.group(1)) if k2_match else 0
        total_score = k1_score + k2_score
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        context.user_data['last_plan_result'] = {
            'topic': topic_name,
            'k1': k1_score,
            'k2': k2_score,
            'total': total_score,
            'timestamp': datetime.now()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ –∏–∑—É—á–µ–Ω–Ω—ã–µ
        if 'practiced_topics' not in context.user_data:
            context.user_data['practiced_topics'] = set()
        context.user_data['practiced_topics'].add(topic_name)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
        try:
            await thinking_msg.delete()
        except Exception as e:
            logger.debug(f"Failed to delete thinking message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–µ–π—Å—Ç–≤–∏–π
        result_msg = await update.message.reply_text(
            feedback,
            reply_markup=FEEDBACK_KB,
            parse_mode=ParseMode.HTML
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        context.user_data['task24_result_msg_id'] = result_msg.message_id
        
        return states.AWAITING_FEEDBACK
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
        try:
            await thinking_msg.delete()
        except Exception as e2:
            logger.debug(f"Failed to delete thinking message: {e2}")
        
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_plan"),
                InlineKeyboardButton("üìã –ö —Ç–µ–º–∞–º", callback_data="back_to_choice")
            ]])
        )
        
        return states.AWAITING_FEEDBACK

async def handle_plan_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∞, –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    topic_name = context.user_data.get('current_topic')
    if not topic_name:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_plan"
        )
        return ConversationHandler.END
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–∫—Å–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    extracted_text = await DocumentHandlerMixin.handle_document_answer(
        update, 
        context,
        task_name="–ø–ª–∞–Ω"
    )
    
    if not extracted_text:
        # –û—à–∏–±–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return states.AWAITING_PLAN
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø–ª–∞–Ω–∞
    is_valid, error_msg = DocumentHandlerMixin.validate_document_content(
        extracted_text,
        task_type="plan"
    )
    
    if not is_valid:
        await update.message.reply_text(f"‚ùå {error_msg}")
        return states.AWAITING_PLAN
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    update.message.text = extracted_text
    
    # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–æ–≤
    return await handle_plan(update, context)

async def next_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ."""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–µ–º—ã
    await delete_previous_messages(context, query.message.chat_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã –≤ —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    context.user_data['mode'] = 'train'
    kb = keyboards.build_initial_choice_keyboard('train')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
    await query.message.chat.send_message(
        "üéØ <b>–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_TOPIC

async def show_criteria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏."""
    criteria_text = """<b>üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è 24 (–ï–ì–≠ 2025)</b>

<b>–ö1 - –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã –ø–æ —Å—É—â–µ—Å—Ç–≤—É</b> (–º–∞–∫—Å. 3 –±–∞–ª–ª–∞):

<b>3 –±–∞–ª–ª–∞:</b>
‚Ä¢ –ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –º–µ–Ω–µ–µ 3 –ø—É–Ω–∫—Ç–æ–≤, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–º—É
‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ–¥–ø—É–Ω–∫—Ç–∞—Ö
‚Ä¢ –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 3 –ø–æ–¥–ø—É–Ω–∫—Ç–∞

<b>2 –±–∞–ª–ª–∞:</b>
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–∞
‚Ä¢ –¢–æ–ª—å–∫–æ 2 –∏–∑ –Ω–∏—Ö –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ

<b>1 –±–∞–ª–ª:</b>
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–∞
‚Ä¢ –¢–æ–ª—å–∫–æ 1 –∏–∑ –Ω–∏—Ö –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ

<b>0 –±–∞–ª–ª–æ–≤:</b>
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–µ 3 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–º—É
‚Ä¢ –ò–ª–∏ –ø–ª–∞–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

<b>–ö2 - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫</b> (–º–∞–∫—Å. 1 –±–∞–ª–ª):
‚Ä¢ 1 –±–∞–ª–ª –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ö1 = 3
‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫

<i>‚ö†Ô∏è –í–∞–∂–Ω–æ: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ú–ò–ù–ò–ú–£–ú 3 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–∞ –∏–∑ —ç—Ç–∞–ª–æ–Ω–∞!</i>"""
    
    query = update.callback_query
    if query:
        await query.answer()
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
        ]])
        await query.edit_message_text(
            criteria_text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(criteria_text, parse_mode=ParseMode.HTML)
    
    return states.CHOOSING_MODE

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø–æ–º–æ—â–∏."""
    help_text = """<b>‚ùì –ü–æ–º–æ—â—å –ø–æ –∑–∞–¥–∞–Ω–∏—é 24</b>

<b>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ üí™ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</b> - —Å–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω, –ø–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫—É
‚Ä¢ üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä</b> - –∏–∑—É—á–∞–π—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã
‚Ä¢ üéØ <b>–≠–∫–∑–∞–º–µ–Ω</b> - —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ üîç <b>–ü–æ–∏—Å–∫</b> - –Ω–∞–π–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

<b>–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</b>
1. –í–∫–ª—é—á–∏—Ç–µ –í–°–ï –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã
2. –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 3 –ø—É–Ω–∫—Ç–∞ –ø–æ–¥–ø—É–Ω–∫—Ç–∞–º–∏
3. –ú–∏–Ω–∏–º—É–º 3 –ø–æ–¥–ø—É–Ω–∫—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏

<b>–§–æ—Ä–º–∞—Ç—ã –ø–ª–∞–Ω–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π!):</b>

<b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π:</b>
<code>1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
   –∞) –ø–æ–¥–ø—É–Ω–∫—Ç
   –±) –ø–æ–¥–ø—É–Ω–∫—Ç  
   –≤) –ø–æ–¥–ø—É–Ω–∫—Ç</code>

<b>–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π:</b>
<code>1. –í–∏–¥—ã –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã: —Ñ—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è; —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è; —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è; —Å–µ–∑–æ–Ω–Ω–∞—è
2. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è: —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤; —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å; —Ä–æ—Å—Ç –ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏</code>

<b>–°–º–µ—à–∞–Ω–Ω—ã–π:</b>
<code>1. –ü–æ–Ω—è—Ç–∏–µ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã
2. –í–∏–¥—ã: —Ñ—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è; —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è; —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è
3. –ú–µ—Ä—ã –±–æ—Ä—å–±—ã:
   - –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
   - –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
   - –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</code>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start_plan - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/criteria - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
    
    query = update.callback_query
    await query.answer()
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_button")
    ]])
    
    await safe_edit_or_reply(query, help_text, kb, ParseMode.HTML)
    return states.CHOOSING_MODE

async def show_block_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–ª–æ–∫–∞–º –∏ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    practiced = context.user_data.get('practiced_topics', set())
    stats = get_user_stats(context)
    
    text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ–º: {stats['practiced_count']}/{stats['total_topics']} ({stats['progress_percent']}%)\n"
    
    # –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    filled = "‚ñà" * (stats['progress_percent'] // 10)
    empty = "‚ñë" * (10 - stats['progress_percent'] // 10)
    text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {filled}{empty}\n"
    
    # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    if stats['scores_history']:
        text += f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['average_score']:.1f}/4\n"
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        score_dist = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}
        for score in stats['scores_history']:
            score_dist[score['total']] += 1
        
        text += "\n<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:</b>\n"
        for score, count in sorted(score_dist.items(), reverse=True):
            if count > 0:
                text += f"{'‚≠ê' * score if score > 0 else 'üòî'} {score} –±–∞–ª–ª–∞: {count} —Ä–∞–∑\n"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if stats['total_time_minutes'] > 0:
        hours = int(stats['total_time_minutes'] // 60)
        minutes = int(stats['total_time_minutes'] % 60)
        text += f"\n‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º–∏–Ω\n"
    
    text += "\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º:</b>\n"
    
    for block_name, topics in plan_bot_data.topics_by_block.items():
        total = len(topics)
        completed = sum(1 for idx, _ in topics if idx in practiced)
        progress = int(completed / total * 100) if total > 0 else 0
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        emoji = "‚úÖ" if progress == 100 else "üü°" if progress >= 50 else "üî¥"
        
        text += f"\n{emoji} <b>{block_name}:</b> {completed}/{total} ({progress}%)"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if stats['progress_percent'] < 100:
        text += "\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> "
        if stats['progress_percent'] < 30:
            text += "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è."
        elif stats['progress_percent'] < 70:
            text += "–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å."
        else:
            text += "–í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ."
    else:
        text += "\n\nüéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã!"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="export_progress")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_button")]
    ])
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return states.CHOOSING_MODE

async def reset_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if context.user_data.get('confirm_reset'):
        # –°–±—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        context.user_data['practiced_topics'] = set()
        context.user_data['scores_history'] = []
        context.user_data['total_time_minutes'] = 0
        context.user_data.pop('confirm_reset', None)
        
        await query.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        kb = keyboards.build_main_menu_keyboard()
        await query.edit_message_text(
            "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 24 - —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞</b>\n\n"
            "–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        context.user_data['confirm_reset'] = True
        
        stats = get_user_stats(context)
        warning_text = f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>\n\n"
        warning_text += f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n"
        warning_text += f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ {stats['practiced_count']} —Ç–µ–º–∞–º\n"
        warning_text += f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–∑ {len(stats['scores_history'])} –æ—Ü–µ–Ω–æ–∫\n"
        warning_text += f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏\n\n"
        warning_text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚ùå –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_progress"),
                InlineKeyboardButton("‚úÖ –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
            ]
        ])
        
        await query.edit_message_text(
            warning_text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    
    return states.CHOOSING_MODE

async def cancel_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    await query.answer("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
    
    context.user_data.pop('confirm_reset', None)
    
    user_id = query.from_user.id
    kb = keyboards.build_main_menu_keyboard()
    
    menu_text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 24 - —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    try:
        await query.edit_message_text(
            menu_text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    except telegram.error.BadRequest as e:
        if "There is no text in the message to edit" in str(e) or "Message can't be edited" in str(e):
            try:
                await query.message.delete()
            except:
                pass
            
            await query.message.reply_text(
                menu_text,
                reply_markup=kb,
                parse_mode=ParseMode.HTML
            )
        else:
            raise
    
    return states.CHOOSING_MODE

async def export_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    username = query.from_user.username or "Unknown"
    practiced = context.user_data.get('practiced_topics', set())
    stats = get_user_stats(context)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
    progress_data = {
        'user_info': {
            'user_id': user_id,
            'username': username,
            'export_date': datetime.now().isoformat()
        },
        'statistics': {
            'practiced_topics': list(practiced),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ list
            'total_topics': stats['total_topics'],
            'progress_percent': stats['progress_percent'],
            'average_score': stats['average_score'],
            'total_time_minutes': stats['total_time_minutes']
        },
        'scores_history': stats['scores_history'],
        'topics_by_block': {}
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –±–ª–æ–∫–∞–º
    for block_name, topics in plan_bot_data.topics_by_block.items():
        block_data = {
            'total': len(topics),
            'completed': sum(1 for idx, _ in topics if idx in practiced),
            'topics': []
        }
        
        for idx, topic in topics:
            topic_data = {
                'index': idx,
                'name': topic,
                'completed': idx in practiced,
                'scores': [s for s in stats['scores_history'] if s['topic'] == topic]
            }
            block_data['topics'].append(topic_data)
        
        progress_data['topics_by_block'][block_name] = block_data
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    from io import BytesIO
    file_data = BytesIO(json.dumps(progress_data, indent=2, ensure_ascii=False).encode('utf-8'))
    file_data.name = f"my_progress_task24_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
    try:
        await query.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    kb = keyboards.build_main_menu_keyboard()
    
    await query.message.reply_document(
        document=file_data,
        caption=(
            f"üì§ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            f"–ü—Ä–æ–π–¥–µ–Ω–æ: {stats['progress_percent']}%\n"
            f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['average_score']:.1f}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
        ),
        reply_markup=kb
    )
    
    return states.CHOOSING_MODE

async def search_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Ç–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üîç <b>–ü–æ–∏—Å–∫ —Ç–µ–º—ã</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ø–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–∏</i>",
        reply_markup=keyboards.build_search_keyboard(),
        parse_mode=ParseMode.HTML
    )
    return states.AWAITING_SEARCH

async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    search_text = update.message.text.lower()
    results = []
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ç–µ–º
    for idx, topic in plan_bot_data.topic_list_for_pagination:
        if search_text in topic.lower():
            results.append((idx, topic, "exact"))
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    search_words = search_text.split()
    for word in search_words:
        if word in plan_bot_data.search_index:
            for idx in plan_bot_data.search_index[word]:
                topic = plan_bot_data.topic_index_map[idx]
                if (idx, topic, "exact") not in results:
                    results.append((idx, topic, "partial"))
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = results[:15]
    
    if not results:
        await update.message.reply_text(
            "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_topics"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_button")
            ]]),
            parse_mode=ParseMode.HTML
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ —Ç–µ–º: {len(results)}</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    exact_matches = [(idx, topic) for idx, topic, match_type in results if match_type == "exact"]
    partial_matches = [(idx, topic) for idx, topic, match_type in results if match_type == "partial"]
    
    kb_buttons = []
    
    if exact_matches:
        text += "üìå <b>–¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:</b>\n"
        for idx, topic in exact_matches[:5]:
            kb_buttons.append([
                InlineKeyboardButton(
                    f"üìÑ {topic[:50]}{'...' if len(topic) > 50 else ''}",
                    callback_data=f"topic:{context.user_data.get('mode', 'train')}:{idx}"
                )
            ])
    
    if partial_matches and len(kb_buttons) < 10:
        if exact_matches:
            text += "\nüìé <b>–ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:</b>\n"
        for idx, topic in partial_matches[:5]:
            if len(kb_buttons) >= 10:
                break
            kb_buttons.append([
                InlineKeyboardButton(
                    f"üìÑ {topic[:50]}{'...' if len(topic) > 50 else ''}",
                    callback_data=f"topic:{context.user_data.get('mode', 'train')}:{idx}"
                )
            ])
    
    kb_buttons.extend([
        [InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_topics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_button")]
    ])
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_TOPIC
    
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–ª–∞–≥–∏–Ω–∞."""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
    await delete_previous_messages(context, query.message.chat_id)
    
    user_id = query.from_user.id
    kb = keyboards.build_main_menu_keyboard()
    
    menu_text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 24 - —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await query.message.chat.send_message(
        menu_text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('current_topic_index', None)
    context.user_data.pop('current_topic', None)
    context.user_data.pop('exam_mode', None)
    
    return states.CHOOSING_MODE

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è task24 –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await delete_previous_messages(context, query.message.chat_id)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        from core.plugin_loader import build_main_menu
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –¥–∞–Ω–Ω—ã—Ö task24
        keys_to_remove = [
            'current_topic_index', 'current_topic', 'exam_mode',
            'mode', 'practiced_topics', 'last_plan_result',
            'task24_topic_msg_id', 'task24_plan_msg_id',
            'task24_thinking_msg_id', 'task24_result_msg_id'
        ]
        for key in keys_to_remove:
            context.user_data.pop(key, None)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        kb = build_main_menu()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await query.message.chat.send_message(
            "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=kb
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return ConversationHandler.END

async def retry_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è —Ç–æ–π –∂–µ —Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(context, query.message.chat_id)
    
    topic_name = context.user_data.get('current_topic')
    topic_index = context.user_data.get('current_topic_index')
    
    if not topic_name:
        await query.message.chat.send_message(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=keyboards.build_initial_choice_keyboard('train')
        )
        return states.CHOOSING_TOPIC
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
    task_text = f"""üìù <b>–ó–∞–¥–∞–Ω–∏–µ 24</b>

<b>–¢–µ–º–∞:</b> {topic_name}

–ò—Å–ø–æ–ª—å–∑—É—è –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è, —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–ª–∞–Ω, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É —Ç–µ–º—É ¬´{topic_name}¬ª.

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 –ø—É–Ω–∫—Ç–∞ (–∏–∑ –Ω–∏—Ö 2 –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
‚Ä¢ –í –∫–∞–∂–¥–æ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –º–∏–Ω–∏–º—É–º 3 –ø–æ–¥–ø—É–Ω–∫—Ç–∞

<b>–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:</b>
<code>1. –ü–æ–Ω—è—Ç–∏–µ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã
2. –í–∏–¥—ã –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã:
   –∞) —Ñ—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è
   –±) —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è
   –≤) —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è
3. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã:
   –∞) –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏
   –±) –¥–ª—è –æ–±—â–µ—Å—Ç–≤–∞
   –≤) –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–∏</code>

üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–ª–∞–Ω –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"""
    
    await query.message.chat.send_message(
        task_text,
        parse_mode=ParseMode.HTML
    )
    
    return states.AWAITING_PLAN

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    user_id = update.effective_user.id
    
    # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î
    kb = keyboards.build_main_menu_keyboard()
    if admin_manager.is_admin(user_id):
        admin_buttons = get_admin_keyboard_extension(user_id)
        keyboard_rows = [list(row) for row in kb.inline_keyboard]
        keyboard_rows.extend(admin_buttons)
        kb = InlineKeyboardMarkup(keyboard_rows)
    
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('current_topic_index', None)
    context.user_data.pop('current_topic', None)
    context.user_data.pop('exam_mode', None)
    
    return states.CHOOSING_MODE


async def cmd_criteria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /criteria - –ø–æ–∫–∞–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏."""
    await show_criteria(update, context)
    return states.CHOOSING_MODE

@admin_only
async def force_reset_user_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    user_id = int(update.callback_query.data.split(":")[-1])
    
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in context.application.user_data:
        context.application.user_data[user_id].clear()
        await update.callback_query.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω", show_alert=True)
    else:
        await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤–Ω—É—Ç—Ä–∏
async def export_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –û–±—ã—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    stats = get_user_stats(context)
    practiced = context.user_data.get('practiced_topics', set())
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    progress_data = {
        'user_info': {
            'user_id': user_id,
            'export_date': datetime.now().isoformat()
        },
        'statistics': {
            'practiced_topics': list(practiced),
            'total_topics': stats['total_topics'],
            'progress_percent': stats['progress_percent'],
            'average_score': stats['average_score'],
            'total_time_minutes': stats['total_time_minutes']
        },
        'scores_history': stats['scores_history']
    }
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if admin_manager.is_admin(user_id):
        progress_data['admin_export'] = True
        progress_data['detailed_topics'] = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –±–ª–æ–∫–∞–º –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        for block_name, topics in plan_bot_data.topics_by_block.items():
            block_data = {
                'total': len(topics),
                'completed': sum(1 for idx, _ in topics if idx in practiced),
                'topics': []
            }
            
            for idx, topic in topics:
                topic_data = {
                    'index': idx,
                    'name': topic,
                    'completed': idx in practiced,
                    'scores': [s for s in stats['scores_history'] if s['topic'] == topic]
                }
                block_data['topics'].append(topic_data)
            
            progress_data['detailed_topics'][block_name] = block_data
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    from io import BytesIO
    file_data = BytesIO(json.dumps(progress_data, indent=2, ensure_ascii=False).encode('utf-8'))
    file_data.name = f"progress_task24_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    await query.message.reply_document(
        document=file_data,
        caption=(
            f"üì§ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            f"–ü—Ä–æ–π–¥–µ–Ω–æ: {stats['progress_percent']}%\n"
            f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['average_score']:.1f}\n"
            + ("\nüîß –ê–¥–º–∏–Ω—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏" if admin_manager.is_admin(user_id) else "")
        )
    )
    
    return states.CHOOSING_MODE

async def safe_edit_or_reply(query, text: str, reply_markup=None, parse_mode=ParseMode.HTML):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
    
    Args:
        query: CallbackQuery –æ–±—ä–µ–∫—Ç
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é HTML)
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except telegram.error.BadRequest as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if "There is no text in the message to edit" in str(e) or "Message can't be edited" in str(e):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
            raise
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ noop
async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    return None

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–∞–ª–æ–± —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Ü–µ–Ω–∫–∏ AI –¥–ª—è Task24.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç workflow –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±:
1. –£—á–µ–Ω–∏–∫ –Ω–∞–∂–∏–º–∞–µ—Ç "–û—Å–ø–æ—Ä–∏—Ç—å –æ—Ü–µ–Ω–∫—É"
2. –í—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã
3. –û–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ
4. –ñ–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""

import logging
import aiosqlite
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from core.config import DATABASE_FILE

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler –¥–ª—è –∂–∞–ª–æ–±
COMPLAINT_CHOOSING_REASON = "complaint_choosing_reason"
COMPLAINT_AWAITING_DETAILS = "complaint_awaiting_details"


async def initiate_complaint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã.

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å–ø–æ—Ä–∏—Ç—å –æ—Ü–µ–Ω–∫—É".
    """
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    last_result = context.user_data.get('last_plan_result')
    if not last_result:
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –µ—â—ë —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="t24_menu")
            ]])
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∂–∞–ª–æ–± (–Ω–µ –±–æ–ª–µ–µ 3 –≤ –¥–µ–Ω—å)
    user_id = update.effective_user.id
    if not await check_complaint_limit(user_id):
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–õ–∏–º–∏—Ç –∂–∞–ª–æ–± –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –∂–∞–ª–æ–± –≤ –¥–µ–Ω—å.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="t24_menu")
            ]]),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã
    topic_name = last_result.get('topic')
    context.user_data['complaint_context'] = {
        'topic': topic_name,
        'task_type': 'task24',
        'user_answer': last_result.get('user_answer'),
        'ai_feedback': last_result.get('ai_feedback'),
        'k1_score': last_result.get('k1'),
        'k2_score': last_result.get('k2'),
        'timestamp': datetime.now().isoformat()
    }

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∂–∞–ª–æ–±—ã
    keyboard = [
        [InlineKeyboardButton("‚ùå –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ", callback_data="cr_factual")],
        [InlineKeyboardButton("üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞ –æ—Ü–µ–Ω–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data="cr_structure")],
        [InlineKeyboardButton("üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", callback_data="cr_criteria")],
        [InlineKeyboardButton("üí≠ –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", callback_data="cr_other")],
        [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="t24_cancel_complaint")]
    ]

    await query.edit_message_text(
        f"‚ö†Ô∏è <b>–û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏</b>\n\n"
        f"–¢–µ–º–∞: <i>{topic_name}</i>\n"
        f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {last_result.get('k1')} + {last_result.get('k2')} = {last_result.get('total')}/4\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

    return COMPLAINT_CHOOSING_REASON


async def handle_complaint_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã.
    """
    query = update.callback_query
    await query.answer()

    # –û—Ç–º–µ–Ω–∞ –∂–∞–ª–æ–±—ã
    if query.data == "t24_cancel_complaint":
        await query.edit_message_text(
            "‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="t24_menu")
            ]])
        )
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('complaint_context', None)
        return ConversationHandler.END

    # –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏—á–∏–Ω
    reason_map = {
        "cr_factual": "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ",
        "cr_structure": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞ –æ—Ü–µ–Ω–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
        "cr_criteria": "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "cr_other": "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"
    }

    complaint_reason = reason_map.get(query.data, "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    context.user_data['complaint_reason'] = complaint_reason

    await query.edit_message_text(
        "üìù <b>–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ</b>\n\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: <i>{complaint_reason}</i>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –æ—Ü–µ–Ω–∫—É –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π. "
        "–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã:\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –ø—É–Ω–∫—Ç –∏–ª–∏ –æ—à–∏–±–∫—É –≤—ã –æ—Å–ø–∞—Ä–∏–≤–∞–µ—Ç–µ\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É —Å—á–∏—Ç–∞–µ—Ç–µ –æ—Ü–µ–Ω–∫—É AI –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π\n"
        "‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫—É—Ä—Å–∞ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.</i>",
        parse_mode=ParseMode.HTML
    )

    return COMPLAINT_AWAITING_DETAILS


async def handle_complaint_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∂–∞–ª–æ–±—ã –≤ –ë–î.
    """
    user_id = update.effective_user.id
    complaint_details = update.message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(complaint_details) < 20:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤).",
            parse_mode=ParseMode.HTML
        )
        return COMPLAINT_AWAITING_DETAILS

    complaint_ctx = context.user_data.get('complaint_context', {})
    complaint_reason = context.user_data.get('complaint_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ –ë–î
        async with aiosqlite.connect(DATABASE_FILE) as db:
            cursor = await db.execute(
                """
                INSERT INTO user_feedback
                (user_id, feedback_type, category, message,
                 task_type, topic_name, user_answer, ai_feedback,
                 k1_score, k2_score, complaint_reason, status)
                VALUES (?, 'complaint', ?, ?, ?, ?, ?, ?, ?, ?, ?, 'new')
                """,
                (
                    user_id,
                    complaint_reason,
                    complaint_details,
                    complaint_ctx.get('task_type'),
                    complaint_ctx.get('topic'),
                    complaint_ctx.get('user_answer'),
                    complaint_ctx.get('ai_feedback'),
                    complaint_ctx.get('k1_score'),
                    complaint_ctx.get('k2_score'),
                    complaint_reason
                )
            )
            complaint_id = cursor.lastrowid
            await db.commit()

        logger.info(f"Complaint #{complaint_id} created by user {user_id} for topic '{complaint_ctx.get('topic')}'")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å ID –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
        await notify_admin_about_complaint(context, complaint_id, user_id, complaint_ctx, complaint_details)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ <b>–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: <code>#{complaint_id}</code>\n"
            f"–¢–µ–º–∞: <i>{complaint_ctx.get('topic')}</i>\n\n"
            "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é", callback_data="t24_menu")
            ]])
        )

    except Exception as e:
        logger.error(f"Failed to save complaint: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode=ParseMode.HTML
        )

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('complaint_context', None)
    context.user_data.pop('complaint_reason', None)

    return ConversationHandler.END


async def check_complaint_limit(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∂–∞–ª–æ–± –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É, False –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
    """
    COMPLAINT_DAILY_LIMIT = 3

    try:
        async with aiosqlite.connect(DATABASE_FILE) as db:
            cursor = await db.execute(
                """
                SELECT COUNT(*) FROM user_feedback
                WHERE user_id = ?
                  AND feedback_type = 'complaint'
                  AND DATE(created_at) = DATE('now')
                """,
                (user_id,)
            )
            count = (await cursor.fetchone())[0]
            return count < COMPLAINT_DAILY_LIMIT
    except Exception as e:
        logger.error(f"Error checking complaint limit: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É


async def notify_admin_about_complaint(
    context: ContextTypes.DEFAULT_TYPE,
    complaint_id: int,
    user_id: int,
    complaint_ctx: dict,
    complaint_details: str
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ.

    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        complaint_id: ID –∂–∞–ª–æ–±—ã
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        complaint_ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        complaint_details: –î–µ—Ç–∞–ª–∏ –∂–∞–ª–æ–±—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        # TODO: –î–æ–±–∞–≤–∏—Ç—å admin_id –≤ –∫–æ–Ω—Ñ–∏–≥
        # admin_id = context.bot_data.get('admin_id')
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π ID –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        admin_id = None

        if not admin_id:
            logger.info("Admin ID not configured, skipping notification")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        topic = complaint_ctx.get('topic', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        k1 = complaint_ctx.get('k1_score', '?')
        k2 = complaint_ctx.get('k2_score', '?')

        notification_text = f"""
üÜï <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ #{complaint_id}</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id}
üìö <b>–ó–∞–¥–∞–Ω–∏–µ:</b> Task24 (–ü–ª–∞–Ω)
üìñ <b>–¢–µ–º–∞:</b> {topic}
üìä <b>–û—Ü–µ–Ω–∫–∞:</b> K1={k1}, K2={k2}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{complaint_details[:300]}{'...' if len(complaint_details) > 300 else ''}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /review_complaint {complaint_id} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
"""

        await context.bot.send_message(
            chat_id=admin_id,
            text=notification_text,
            parse_mode=ParseMode.HTML
        )

        logger.info(f"Admin notification sent for complaint #{complaint_id}")

    except Exception as e:
        logger.error(f"Failed to notify admin about complaint #{complaint_id}: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –¥–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

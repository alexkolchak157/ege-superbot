# plugins/task25/handlers.py

import logging
from typing import Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes

from .evaluator import Task25Evaluator
from .plugin import Task25Plugin

logger = logging.getLogger(__name__)

class Task25Handler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 25 –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é"""
    
    def __init__(self, evaluator: Task25Evaluator, plugin: Task25Plugin):
        self.evaluator = evaluator
        self.plugin = plugin
        
    async def handle_task_submission(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        task_data: Dict[str, Any],
        student_answer: str
    ) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ 25"""
        try:
            user_id = update.effective_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ 25")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if not student_answer or len(student_answer.strip()) < 50:
                return "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ó–∞–¥–∞–Ω–∏–µ 25 —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º, –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏."
            
            if len(student_answer) > 5000:
                return "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤."
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è
            task_text = task_data.get('text', '')
            if not task_text:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è task_id: {task_data.get('id')}")
                return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            processing_msg = await update.message.reply_text(
                "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É —á–µ—Ä–µ–∑ YandexGPT
            evaluation = await self.evaluator.evaluate_answer(
                task_text=task_text,
                student_answer=student_answer,
                task_id=task_data.get('id', 'unknown')
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            await processing_msg.delete()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if evaluation.get("success"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                await self._save_result(context, user_id, task_data, evaluation)
                return self.plugin.format_feedback(evaluation)
            else:
                error_msg = evaluation.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞: {error_msg}")
                return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {error_msg}"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_task_submission: {e}", exc_info=True)
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    
    async def _save_result(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        user_id: int,
        task_data: Dict[str, Any],
        evaluation: Dict[str, Any]
    ):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'task_results' not in context.user_data:
                context.user_data['task_results'] = {}
            
            if 'task25' not in context.user_data['task_results']:
                context.user_data['task_results']['task25'] = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'task_id': task_data.get('id'),
                'task_text': task_data.get('text', '')[:100] + '...',  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–¥–∞–Ω–∏—è
                'scores': evaluation.get('scores', {}),
                'total_score': evaluation.get('total_score', 0),
                'max_score': self.plugin.max_score,
                'timestamp': context.application.bot_data.get('current_time', None)
            }
            
            context.user_data['task_results']['task25'].append(result)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if len(context.user_data['task_results']['task25']) > 50:
                context.user_data['task_results']['task25'].pop(0)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    def get_task_preview(self, task_data: Dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–≤—å—é –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        task_text = task_data.get('text', '–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        task_id = task_data.get('id', 'unknown')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–µ–≤—å—é
        if len(task_text) > 500:
            task_text = task_text[:500] + "..."
            
        return (
            f"üìù **–ó–∞–¥–∞–Ω–∏–µ 25** (ID: {task_id})\n\n"
            f"{task_text}\n\n"
            f"üí° –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:\n"
            f"1) –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)\n"
            f"2) –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—É–Ω–∫—Ç–æ–º)\n"
            f"3) –ü—Ä–∏–º–µ—Ä—ã (—Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞)\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {self.plugin.max_score}"
        )
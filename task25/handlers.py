# –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ task25/handlers.py
import logging
import os
import json
import random
from typing import Optional, Dict, List
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

from core import states
from core.plugin_loader import build_main_menu

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
task25_data = {}
evaluator = None
topic_selector = None

# –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π –ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
try:
    from .evaluator import Task25AIEvaluator, StrictnessLevel, EvaluationResult, AI_EVALUATOR_AVAILABLE
except ImportError as e:
    logger.error(f"Failed to import evaluator: {e}")
    AI_EVALUATOR_AVAILABLE = False
    StrictnessLevel = None
    EvaluationResult = None

try:
    from .cache import cache
except ImportError as e:
    logger.error(f"Failed to import cache: {e}")
    cache = None

try:
    from .utils import TopicSelector
except ImportError as e:
    logger.error(f"Failed to import utils: {e}")
    TopicSelector = None


async def init_task25_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 25."""
    global task25_data, evaluator, topic_selector
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cache:
        cached_data = await cache.get('task25_data')
        if cached_data:
            task25_data = cached_data
            topic_selector = TopicSelector(task25_data['topics']) if TopicSelector else None
            logger.info("Loaded task25 data from cache")
            return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    data_file = os.path.join(os.path.dirname(__file__), "task25_topics.json")
    
    try:
        with open(data_file, "r", encoding="utf-8") as f:
            raw = json.load(f)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        all_topics = []
        topic_by_id = {}
        topics_by_block = {}
        
        for block_name, block in raw.get("blocks", {}).items():
            topics_by_block[block_name] = []
            for topic in block.get("topics", []):
                topic["block"] = block_name
                all_topics.append(topic)
                topic_by_id[topic["id"]] = topic
                topics_by_block[block_name].append(topic)
        
        task25_data = {
            "topics": all_topics,
            "topic_by_id": topic_by_id,
            "topics_by_block": topics_by_block,
            "blocks": raw.get("blocks", {})
        }
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ–ª–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
        if TopicSelector:
            topic_selector = TopicSelector(all_topics)
        
        logger.info(f"Loaded {len(all_topics)} topics for task25")
        logger.info(f"Blocks: {list(topics_by_block.keys())}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if cache:
            await cache.set('task25_data', task25_data)
            
    except Exception as e:
        logger.error(f"Failed to load task25 data: {e}")
        task25_data = {"topics": [], "blocks": {}, "topics_by_block": {}}
        topic_selector = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI evaluator
    if AI_EVALUATOR_AVAILABLE:
        try:
            strictness_level = StrictnessLevel[os.getenv('TASK25_STRICTNESS', 'STANDARD').upper()]
            logger.info(f"Using strictness level: {strictness_level.value}")
        except (KeyError, AttributeError):
            strictness_level = StrictnessLevel.STANDARD if StrictnessLevel else None
            logger.info("Using default strictness level: STANDARD")
        
        if strictness_level:
            try:
                evaluator = Task25AIEvaluator(strictness=strictness_level)
                logger.info(f"Task25 AI evaluator initialized successfully")
            except Exception as e:
                logger.error(f"Failed to initialize AI evaluator: {e}", exc_info=True)
                evaluator = None
    else:
        logger.warning("AI evaluator not available for task25")
        evaluator = None


async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –∑–∞–¥–∞–Ω–∏–µ 25 –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 25 - –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç</b>\n\n"
        "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–º–µ–Ω–∏–µ:\n"
        "‚Ä¢ –û–±–æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ü—Ä–∏–≤–æ–¥–∏—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã\n\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: <b>6</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t25_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t25_theory")],
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –æ—Ç–≤–µ—Ç–æ–≤", callback_data="t25_examples")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t25_progress")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="t25_settings")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –±–ª–æ–∫", callback_data="t25_select_block")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t25_random_all")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º", callback_data="t25_list_topics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        "üí™ <b>–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def theory_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    text = """üìö <b>–¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é 25</b>

<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è:</b>
–ó–∞–¥–∞–Ω–∏–µ 25 —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä—ë—Ö —á–∞—Å—Ç–µ–π:
1Ô∏è‚É£ <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</b> (2 –±–∞–ª–ª–∞)
2Ô∏è‚É£ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å</b> (1 –±–∞–ª–ª)
3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä—ã</b> (3 –±–∞–ª–ª–∞)

<b>–ß–∞—Å—Ç—å 1 - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –û–ø–æ—Ä–∞ –Ω–∞ —Ç–µ–æ—Ä–∏—é –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è
‚Ä¢ –ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤

<b>–ß–∞—Å—Ç—å 2 - –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:</b>
‚Ä¢ –¢–æ—á–Ω—ã–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)

<b>–ß–∞—Å—Ç—å 3 - –ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –¢—Ä–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞)
‚Ä¢ –†–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –†–§

<b>üí° –°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–º–µ—Ä–∞—Ü–∏—é
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

<b>‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:</b>
‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∏–∑ —á–∞—Å—Ç–µ–π
‚Ä¢ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ä–µ–∞–ª–∏—è–º"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±–ª–æ–∫–∞ —Ç–µ–º."""
    query = update.callback_query
    await query.answer()
    
    blocks = list(task25_data.get("blocks", {}).keys())
    
    if not blocks:
        await query.edit_message_text(
            "‚ùå –ë–ª–æ–∫–∏ —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")
            ]])
        )
        return states.CHOOSING_MODE
    
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:</b>"
    
    kb_buttons = []
    for block in blocks:
        topics_count = len(task25_data["topics_by_block"].get(block, []))
        kb_buttons.append([
            InlineKeyboardButton(
                f"{block} ({topics_count} —Ç–µ–º)",
                callback_data=f"t25_block:{block}"
            )
        ])
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_BLOCK


async def block_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    block_name = query.data.split(":", 1)[1]
    context.user_data["selected_block"] = block_name
    
    topics = task25_data.get("topics_by_block", {}).get(block_name, [])
    
    text = f"üìö <b>–ë–ª–æ–∫: {block_name}</b>\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–º: {len(topics)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data=f"t25_list_topics:page:0")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t25_random_block")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫–∞–º", callback_data="t25_select_block")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_BLOCK


def _build_topic_message(topic: Dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ —Ç–µ–º–µ."""
    return (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 25</b>\n\n"
        f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        f"<b>–ë–ª–æ–∫:</b> {topic['block']}\n\n"
        f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{topic['task_text']}\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:</b>\n"
        "1Ô∏è‚É£ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞)\n"
        "2Ô∏è‚É£ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª)\n"
        "3Ô∏è‚É£ –¢—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞ (3 –±–∞–ª–ª–∞)\n\n"
        "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"
    )


async def random_topic_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—Å–µ—Ö."""
    query = update.callback_query
    await query.answer()
    
    topics = task25_data.get("topics", [])
    if not topics:
        await query.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return states.CHOOSING_MODE
    
    topic = random.choice(topics)
    context.user_data['current_topic'] = topic
    
    text = _build_topic_message(topic)
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t25_random_all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É", callback_data="t25_practice")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_answer = update.message.text
    topic = context.user_data.get('current_topic')
    user_id = update.effective_user.id
    
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t25_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    thinking_msg = await update.message.reply_text(
        "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
    )
    
    result = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ evaluator
        if evaluator and AI_EVALUATOR_AVAILABLE:
            logger.info(f"Using AI evaluator for user {user_id}")
            result = await evaluator.evaluate(
                answer=user_answer,
                topic=topic,
                user_id=user_id
            )
        else:
            logger.warning("AI evaluator not available, using basic evaluation")
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ AI
            parts = user_answer.split('\n\n')
            
            feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
            feedback += f"<b>–ß–∞—Å—Ç–µ–π –≤ –æ—Ç–≤–µ—Ç–µ:</b> {len(parts)}\n\n"
            
            if len(parts) >= 3:
                feedback += "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n"
                feedback += "üìå <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:</b> 3-4 –±–∞–ª–ª–∞\n\n"
            else:
                feedback += "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç—Ä–∏ —á–∞—Å—Ç–∏: –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –æ—Ç–≤–µ—Ç, –ø—Ä–∏–º–µ—Ä—ã.\n"
                feedback += "üìå <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:</b> 0-2 –±–∞–ª–ª–∞\n\n"
            
            feedback += "‚ö†Ô∏è <i>AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.</i>"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            if 'example_answers' in topic:
                feedback += "\n\nüìö <b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n"
                
                example = topic['example_answers']
                if 'part1' in example:
                    feedback += f"<b>1. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>\n{example['part1']['answer']}\n\n"
                if 'part2' in example:
                    feedback += f"<b>2. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:</b>\n{example['part2']['answer']}\n\n"
                if 'part3' in example:
                    feedback += "<b>3. –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                    for i, ex in enumerate(example['part3'], 1):
                        feedback += f"{i}) <i>{ex['type']}:</i> {ex['example']}\n"
    
    except Exception as e:
        logger.error(f"Error during evaluation: {e}", exc_info=True)
        feedback = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    try:
        await thinking_msg.delete()
    except:
        pass
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if result and isinstance(result, EvaluationResult):
        feedback = _format_evaluation_result(result, topic)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if 'practice_stats' not in context.user_data:
        context.user_data['practice_stats'] = {}
    
    topic_id = topic['id']
    if topic_id not in context.user_data['practice_stats']:
        context.user_data['practice_stats'][topic_id] = {
            'attempts': 0,
            'scores': []
        }
    
    context.user_data['practice_stats'][topic_id]['attempts'] += 1
    if result:
        context.user_data['practice_stats'][topic_id]['scores'].append(
            result.total_score if hasattr(result, 'total_score') else 0
        )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="t25_retry"),
            InlineKeyboardButton("‚û°Ô∏è –ù–æ–≤–∞—è —Ç–µ–º–∞", callback_data="t25_new_topic")
        ],
        [
            InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t25_progress"),
            InlineKeyboardButton("üìù –í –º–µ–Ω—é", callback_data="t25_menu")
        ]
    ])
    
    await update.message.reply_text(
        feedback,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.AWAITING_FEEDBACK


def _format_evaluation_result(result: EvaluationResult, topic: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    feedback = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
    feedback += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n\n"
    
    # –ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    feedback += "<b>–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:</b>\n"
    if hasattr(result, 'scores') and result.scores:
        for criterion, score in result.scores.items():
            max_score = 2 if criterion == "–ö1" else 1 if criterion == "–ö2" else 3
            feedback += f"{criterion}: {score}/{max_score}\n"
    
    feedback += f"\n<b>–ò—Ç–æ–≥–æ:</b> {result.total_score}/{result.max_score} –±–∞–ª–ª–æ–≤\n\n"
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if hasattr(result, 'feedback') and result.feedback:
        feedback += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{result.feedback}\n\n"
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    if hasattr(result, 'suggestions') and result.suggestions:
        feedback += "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        for suggestion in result.suggestions:
            feedback += f"‚Ä¢ {suggestion}\n"
    
    return feedback


async def handle_result_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    action = query.data.split("_")[1]
    
    if action == "retry":
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ –∂–µ –∑–∞–¥–∞–Ω–∏–µ
        topic = context.user_data.get('current_topic')
        if topic:
            text = _build_topic_message(topic)
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="t25_practice")]
            ])
            await query.edit_message_text(
                text,
                reply_markup=kb,
                parse_mode=ParseMode.HTML
            )
            return states.ANSWERING
    
    elif action == "new":
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        return await random_topic_all(update, context)
    
    return states.CHOOSING_MODE


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
async def examples_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–Ω–∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã
    await show_example_topic(query, context, 0)
    return states.CHOOSING_MODE


async def show_example_topic(query, context: ContextTypes.DEFAULT_TYPE, topic_idx: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–º—ã."""
    topics = task25_data.get('topics', [])
    
    if not topics or topic_idx >= len(topics):
        await query.edit_message_text("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    topic = topics[topic_idx]
    context.user_data['bank_current_idx'] = topic_idx
    
    text = f"üè¶ <b>–ë–∞–Ω–∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</b>\n\n"
    text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
    text += f"<b>–ë–ª–æ–∫:</b> {topic['block']}\n\n"
    text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{topic['task_text']}\n\n"
    
    if 'example_answers' in topic:
        text += "<b>üìö –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n"
        
        example = topic['example_answers']
        
        # –ß–∞—Å—Ç—å 1 - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        if 'part1' in example:
            text += f"<b>1. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += f"{example['part1']['answer']}\n\n"
        
        # –ß–∞—Å—Ç—å 2 - –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if 'part2' in example:
            text += f"<b>2. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:</b>\n"
            text += f"{example['part2']['answer']}\n\n"
        
        # –ß–∞—Å—Ç—å 3 - –ü—Ä–∏–º–µ—Ä—ã
        if 'part3' in example:
            text += "<b>3. –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            for i, ex in enumerate(example['part3'], 1):
                text += f"\n{i}) <i>{ex['type']}:</i>\n"
                text += f"{ex['example']}\n"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    kb_buttons = []
    nav_row = []
    
    if topic_idx > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t25_bank_nav:{topic_idx-1}"))
    
    nav_row.append(InlineKeyboardButton(f"{topic_idx+1}/{len(topics)}", callback_data="noop"))
    
    if topic_idx < len(topics) - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t25_bank_nav:{topic_idx+1}"))
    
    kb_buttons.append(nav_row)
    kb_buttons.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã", callback_data="t25_bank_search")])
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t25_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )


async def bank_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    topic_idx = int(query.data.split(":")[1])
    await show_example_topic(query, context, topic_idx)
    return states.CHOOSING_MODE


async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    stats = context.user_data.get('practice_stats', {})
    
    if not stats:
        text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        text += "–í—ã –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è 25.\n"
        text += "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    else:
        text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é 25</b>\n\n"
        
        total_attempts = sum(s['attempts'] for s in stats.values())
        total_topics = len(stats)
        
        all_scores = []
        for topic_stats in stats.values():
            all_scores.extend(topic_stats.get('scores', []))
        
        if all_scores:
            avg_score = sum(all_scores) / len(all_scores)
            max_achieved = max(all_scores)
            text += f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"‚Ä¢ –†–µ—à–µ–Ω–æ —Ç–µ–º: {total_topics}\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/6\n"
            text += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max_achieved}/6\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –±–ª–æ–∫–∞–º
            block_stats = {}
            for topic_id, topic_stat in stats.items():
                topic = task25_data.get('topic_by_id', {}).get(int(topic_id))
                if topic:
                    block = topic.get('block', '–î—Ä—É–≥–æ–µ')
                    if block not in block_stats:
                        block_stats[block] = {'topics': 0, 'scores': []}
                    block_stats[block]['topics'] += 1
                    block_stats[block]['scores'].extend(topic_stat.get('scores', []))
            
            if block_stats:
                text += "üìö <b>–ü–æ –±–ª–æ–∫–∞–º:</b>\n"
                for block, data in block_stats.items():
                    if data['scores']:
                        avg = sum(data['scores']) / len(data['scores'])
                        text += f"‚Ä¢ {block}: {data['topics']} —Ç–µ–º, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª {avg:.1f}\n"
        else:
            text += "–ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="t25_detailed_progress")],
        [InlineKeyboardButton("üéØ –ö –ø—Ä–∞–∫—Ç–∏–∫–µ", callback_data="t25_practice")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def settings_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è."""
    query = update.callback_query
    await query.answer()
    
    current_strictness = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if evaluator and hasattr(evaluator, 'strictness'):
        current_strictness = evaluator.strictness.value
    
    text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏—è 25</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_strictness}
‚Ä¢ AI-–ø—Ä–æ–≤–µ—Ä–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if AI_EVALUATOR_AVAILABLE else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}

<b>–£—Ä–æ–≤–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
üü¢ <b>–ú—è–≥–∫–∏–π</b> - –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
üü° <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b> - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
üî¥ <b>–°—Ç—Ä–æ–≥–∏–π</b> - –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ï–ì–≠
üü£ <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å"""
    
    kb_buttons = []
    
    if AI_EVALUATOR_AVAILABLE and StrictnessLevel:
        kb_buttons.extend([
            [InlineKeyboardButton("üü¢ –ú—è–≥–∫–∏–π", callback_data="t25_strictness:lenient")],
            [InlineKeyboardButton("üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="t25_strictness:standard")],
            [InlineKeyboardButton("üî¥ –°—Ç—Ä–æ–≥–∏–π", callback_data="t25_strictness:strict")],
            [InlineKeyboardButton("üü£ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", callback_data="t25_strictness:expert")]
        ])
    
    kb_buttons.extend([
        [InlineKeyboardButton("üóë –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t25_reset_progress")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def cmd_task25(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /task25."""
    text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 25 - –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t25_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è", callback_data="t25_theory")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task25 –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
    )
    return ConversationHandler.END


async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è 25."""
    return await entry_from_menu(update, context)


async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=build_main_menu()
    )
    
    return ConversationHandler.END


async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
    query = update.callback_query
    await query.answer()
    return None


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...
    pass


async def random_topic_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    pass


async def bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –≤ –±–∞–Ω–∫–µ –æ—Ç–≤–µ—Ç–æ–≤."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    pass


async def handle_bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    pass


async def handle_settings_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    pass


async def set_strictness(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    pass


async def show_block_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    pass


async def detailed_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    pass
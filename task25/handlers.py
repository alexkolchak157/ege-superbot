import logging
import os
import io
import csv
import json
import random
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime
from core.document_processor import DocumentHandlerMixin
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from core.admin_tools import admin_manager
from core import states
from core.plugin_loader import build_main_menu
from core.universal_ui import UniversalUIComponents, AdaptiveKeyboards, MessageFormatter
from core.states import (
    CHOOSING_MODE, 
    CHOOSING_BLOCK_T25,
    ANSWERING,
    ANSWERING_PARTS,
    SEARCHING,
    AWAITING_FEEDBACK,
    TASK25_WAITING
)
from .data_loader import get_data
from core.ui_helpers import (
    show_thinking_animation,
    show_extended_thinking_animation,
    show_ai_evaluation_animation,
    show_streak_notification,
    get_personalized_greeting,
    get_motivational_message,
    create_visual_progress
)
from core.error_handler import safe_handler, auto_answer_callback
from core.state_validator import validate_state_transition, state_validator
from telegram.ext import ConversationHandler
from core.migration import ensure_module_migration
from core.utils import safe_menu_transition

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
task25_data = get_data()
topic_selector = None
evaluator = None


if task25_data and task25_data.get('topics'):
    logger.info(f"‚úÖ task25_data initialized with {len(task25_data['topics'])} topics")
else:
    logger.error("‚ùå task25_data is empty after import!")
# –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π –ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
try:
    from .evaluator import Task25AIEvaluator, StrictnessLevel, EvaluationResult, AI_EVALUATOR_AVAILABLE
except ImportError as e:
    logger.error(f"Failed to import evaluator: {e}")
    AI_EVALUATOR_AVAILABLE = False
    StrictnessLevel = None
    EvaluationResult = None

try:
    from .cache import cache
except ImportError as e:
    logger.error(f"Failed to import cache: {e}")
    cache = None

try:
    from .utils import TopicSelector
except ImportError as e:
    logger.error(f"Failed to import utils: {e}")
    TopicSelector = None

def check_data_loaded():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö."""
    global task25_data
    if not task25_data or not task25_data.get('topics'):
        logger.error("task25_data is empty or not loaded!")
        return False
    return True

async def init_task25_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 25."""
    global task25_data, evaluator, topic_selector
    
    logger.info("Starting init_task25_data...")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ data_loader, –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if task25_data and task25_data.get('topics'):
        logger.info(f"Data already loaded: {len(task25_data['topics'])} topics")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
        if TopicSelector and task25_data['topics']:
            try:
                topic_selector = TopicSelector(task25_data['topics'])
                logger.info("TopicSelector initialized")
            except Exception as e:
                logger.warning(f"Failed to init TopicSelector: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º evaluator
        _init_evaluator()
        
        return True
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
    logger.warning("Data not pre-loaded, attempting to load...")
    from .data_loader import load_data_sync
    
    task25_data = load_data_sync()
    
    if task25_data and task25_data.get('topics'):
        logger.info(f"‚úÖ Loaded {len(task25_data['topics'])} topics")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if TopicSelector:
            try:
                topic_selector = TopicSelector(task25_data['topics'])
            except Exception as e:
                logger.warning(f"Failed to init TopicSelector: {e}")
        
        _init_evaluator()
        return True
    else:
        logger.error("‚ùå Failed to load data")
        return False

def _init_evaluator():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI evaluator."""
    global evaluator
    
    if AI_EVALUATOR_AVAILABLE:
        try:
            strictness_level = StrictnessLevel[os.getenv('TASK25_STRICTNESS', 'STANDARD').upper()]
            logger.info(f"Using strictness level: {strictness_level.value}")
        except (KeyError, AttributeError):
            strictness_level = StrictnessLevel.STANDARD if StrictnessLevel else None
            logger.info("Using default strictness level: STANDARD")
        
        if strictness_level:
            try:
                evaluator = Task25AIEvaluator(strictness=strictness_level)
                logger.info(f"Task25 AI evaluator initialized successfully")
            except Exception as e:
                logger.error(f"Failed to initialize AI evaluator: {e}", exc_info=True)
                evaluator = None
    else:
        logger.warning("AI evaluator not available for task25")
        evaluator = None

def _determine_block(title: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–ª–æ–∫ —Ç–µ–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    if not title:
        return "–û–±—â–∏–µ —Ç–µ–º—ã"
    
    title_lower = title.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
    if any(w in title_lower for w in ['—á–µ–ª–æ–≤–µ–∫', '–ª–∏—á–Ω–æ—Å—Ç—å', '–æ–±—â–µ—Å—Ç–≤–æ', '–∫—É–ª—å—Ç—É—Ä', '–º–æ—Ä–∞–ª—å', '–ø–æ–∑–Ω–∞–Ω–∏']):
        return "–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ"
    elif any(w in title_lower for w in ['—ç–∫–æ–Ω–æ–º–∏–∫', '—Ä—ã–Ω–æ–∫', '–¥–µ–Ω—å–≥', '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç', '–±–∏–∑–Ω–µ—Å', '–Ω–∞–ª–æ–≥']):
        return "–≠–∫–æ–Ω–æ–º–∏–∫–∞"
    elif any(w in title_lower for w in ['—Å–æ—Ü–∏–∞–ª—å–Ω', '—Å–µ–º—å', '–≥—Ä—É–ø–ø–∞', '—Å—Ç—Ä–∞—Ç', '–∫–ª–∞—Å—Å', '–º–æ–ª–æ–¥–µ–∂']):
        return "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞"
    elif any(w in title_lower for w in ['–ø–æ–ª–∏—Ç–∏–∫', '–≤–ª–∞—Å—Ç—å', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤', '–¥–µ–º–æ–∫—Ä–∞—Ç', '–≤—ã–±–æ—Ä', '–ø–∞—Ä—Ç–∏–∏']):
        return "–ü–æ–ª–∏—Ç–∏–∫–∞"
    elif any(w in title_lower for w in ['–ø—Ä–∞–≤', '–∑–∞–∫–æ–Ω', '—é—Ä–∏–¥', '—Å—É–¥', '–ø—Ä–µ—Å—Ç—É–ø', '–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü']):
        return "–ü—Ä–∞–≤–æ"
    
    return "–û–±—â–∏–µ —Ç–µ–º—ã"

async def cmd_t25status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è task25."""
    global task25_data, topic_selector, evaluator
    
    text = "üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è Task25:</b>\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if task25_data:
        text += "‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ–º: {len(task25_data.get('topics', []))}\n"
        text += f"‚Ä¢ –ë–ª–æ–∫–æ–≤: {len(task25_data.get('blocks', {}))}\n"
        text += f"‚Ä¢ –ü–æ ID: {len(task25_data.get('topic_by_id', {}))}\n"
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º
        if task25_data.get('topics'):
            text += f"\n<b>–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º:</b>\n"
            for topic in task25_data['topics'][:3]:
                text += f"‚Ä¢ {topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    else:
        text += "‚ùå <b>–î–∞–Ω–Ω—ã–µ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    text += f"\n<b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>\n"
    text += f"‚Ä¢ TopicSelector: {'‚úÖ' if topic_selector else '‚ùå'}\n"
    text += f"‚Ä¢ Evaluator: {'‚úÖ' if evaluator else '‚ùå'}\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

async def cmd_debug_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    global task25_data
    
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
    if user_id not in [YOUR_ADMIN_ID]:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    text = "üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ task25_data:</b>\n\n"
    
    if task25_data:
        text += f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ–º: {len(task25_data.get('topics', []))}\n"
        text += f"‚Ä¢ –ë–ª–æ–∫–æ–≤: {len(task25_data.get('blocks', {}))}\n"
        text += f"‚Ä¢ –ü–æ ID: {len(task25_data.get('topic_by_id', {}))}\n"
        text += f"‚Ä¢ –ö–ª—é—á–∏: {list(task25_data.keys())}\n"
        
        if task25_data.get('blocks'):
            text += f"\n<b>–ë–ª–æ–∫–∏:</b>\n"
            for block_name in list(task25_data['blocks'].keys())[:5]:
                count = len(task25_data['blocks'][block_name]['topics'])
                text += f"‚Ä¢ {block_name}: {count} —Ç–µ–º\n"
    else:
        text += "‚ùå –î–∞–Ω–Ω—ã–µ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
        text += "task25_data is None –∏–ª–∏ –ø—É—Å—Ç–æ–π dict\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

@safe_handler()
@validate_state_transition({ConversationHandler.END, None})
async def entry_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –∑–∞–¥–∞–Ω–∏–µ 25 –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query

    results = context.user_data.get('task25_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r.get('topic_id') for r in results)) / 100 * 100) if results else 0
    }

    greeting = get_personalized_greeting(user_stats)
    text = greeting + (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 25 - –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç</b>\n\n"
        "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–º–µ–Ω–∏–µ:\n"
        "‚Ä¢ –û–±–æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ü—Ä–∏–≤–æ–¥–∏—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã\n\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: <b>6</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí™ –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="t25_practice")],
        [InlineKeyboardButton("üìö –¢–µ–æ—Ä–∏—è –∏ —Å–æ–≤–µ—Ç—ã", callback_data="t25_theory")],
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –æ—Ç–≤–µ—Ç–æ–≤", callback_data="t25_examples")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t25_progress")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="t25_settings")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def cmd_task25(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /task25 - –≤—Ö–æ–¥ –≤ –∑–∞–¥–∞–Ω–∏–µ 25."""
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    from core.migration import ensure_module_migration
    ensure_module_migration(context, 'task25', task25_data)
    
    text = (
        "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 25</b>\n\n"
        "–†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: 6\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    results = context.user_data.get('task25_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r.get('topic_id') for r in results)) / 100 * 100) if results else 0
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="t25")
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def list_by_difficulty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    query = update.callback_query
    
    # –ü–∞—Ä—Å–∏–º callback_data: t25_list_by_diff:easy
    parts = query.data.split(':')
    difficulty = parts[1]
    page = int(parts[2]) if len(parts) > 2 else 0
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–º—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    all_topics = task25_data.get('topics', [])
    topics = [t for t in all_topics if t.get('difficulty', 'medium') == difficulty]
    
    if not topics:
        return states.CHOOSING_MODE
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - 10 —Ç–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    items_per_page = 10
    total_pages = (len(topics) + items_per_page - 1) // items_per_page
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(topics))
    
    # –ù–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
    difficulty_names = {
        'easy': 'üü¢ –õ–µ–≥–∫–∏–µ —Ç–µ–º—ã',
        'medium': 'üü° –°—Ä–µ–¥–Ω–∏–µ —Ç–µ–º—ã',
        'hard': 'üî¥ –°–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"<b>{difficulty_names.get(difficulty, '–¢–µ–º—ã')}</b>\n"
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = context.user_data.get('task25_stats', {})
    completed_topics = set(user_stats.get('topics_completed', []))
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    buttons = []
    for i in range(start_idx, end_idx):
        topic = topics[i]
        topic_id = topic.get('id')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        if topic_id in completed_topics:
            status = "‚úÖ"
        else:
            status = "üìù"
        
        # –ë–ª–æ–∫ —Ç–µ–º—ã
        block = topic.get('block', '–û–±—â–∏–µ')
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        title = topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        if len(title) > 30:
            title = title[:27] + "..."
        
        button_text = f"{status} {title}"
        buttons.append([InlineKeyboardButton(
            button_text,
            callback_data=f"t25_topic:{topic_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t25_list_by_diff:{difficulty}:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t25_list_by_diff:{difficulty}:{page+1}"))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —É—Ä–æ–≤–Ω—è–º", callback_data="t25_all_topics_list")])
    
    kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    if not task25_data or not task25_data.get('topics'):
        logger.warning("Task25 data not loaded when accessing practice mode")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        await query.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...", show_alert=False)
        await init_task25_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        if not task25_data or not task25_data.get('topics'):
            text = """üí™ <b>–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</b>

<b>–ü—Ä–æ–±–ª–µ–º–∞:</b>
–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏.

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª task25/task25_topics.json
‚Ä¢ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª—É

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."""
            
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t25_practice")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
            ])
            
            await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
            return states.CHOOSING_MODE
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    return await choose_practice_mode(update, context)


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def theory_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ç–µ–æ—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    
    text = (
        "üìö <b>–¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é 25</b>\n\n"
        "<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:</b>\n"
        "1Ô∏è‚É£ <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ö1)</b> - 2 –±–∞–ª–ª–∞\n"
        "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π\n"
        "‚Ä¢ –û–ø–æ—Ä–∞ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è\n\n"
        
        "2Ô∏è‚É£ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–ö2)</b> - 1 –±–∞–ª–ª\n"
        "‚Ä¢ –ß—ë—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É\n\n"
        
        "3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä—ã (–ö3)</b> - 3 –±–∞–ª–ª–∞\n"
        "‚Ä¢ –¢—Ä–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞ (–ø–æ 1 –±–∞–ª–ª—É)\n"
        "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–∑ –∂–∏–∑–Ω–∏ –†–§\n"
        "‚Ä¢ –î–µ—Ç–∞–ª–∏: –∏–º–µ–Ω–∞, –¥–∞—Ç—ã, –º–µ—Å—Ç–∞\n\n"
        
        "<b>üí° –°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∏–∫–æ–π –∏–∑–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ä–º–∏–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤", callback_data="t25_example_answers")],
        [InlineKeyboardButton("‚ö†Ô∏è –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏", callback_data="t25_common_mistakes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å CHOOSING_BLOCK
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±–ª–æ–∫–∞ —Ç–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    if not task25_data or not task25_data.get('topics_by_block'):
        logger.warning("No blocks data available")
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        return await practice_mode(update, context)
    
    blocks_data = task25_data.get('topics_by_block', {})
    
    if not blocks_data:
        text = "üìö <b>–í—ã–±–æ—Ä –±–ª–æ–∫–∞</b>\n\n‚ùå –ë–ª–æ–∫–∏ —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")]
        ])
    else:
        text = "üìö <b>–í—ã–±–æ—Ä –±–ª–æ–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:"
        
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
        for block_name, topics in blocks_data.items():
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–ª–æ–∫—É
            user_stats = context.user_data.get('task25_stats', {})
            completed_topics = set(user_stats.get('topics_completed', []))
            completed_in_block = len([t for t in topics if t.get('id') in completed_topics])
            
            button_text = f"{block_name} ({completed_in_block}/{len(topics)})"
            buttons.append([InlineKeyboardButton(
                button_text,
                callback_data=f"t25_block:{block_name}"
            )])
        
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")])
        kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_BLOCK_T25

@safe_handler()
async def by_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–ª–∏–∞—Å –¥–ª—è select_block."""
    return await select_block(update, context)

@safe_handler()
async def another_topic_from_current(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î—Ä—É–≥–∞—è —Ç–µ–º–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–±–ª–æ–∫, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –≤—Å–µ)."""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    selected_block = context.user_data.get("selected_block")
    selected_difficulty = context.user_data.get("selected_difficulty")
    
    if selected_block:
        # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –±–ª–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ –±–ª–æ–∫–∞
        return await random_topic_block(update, context)
    elif selected_difficulty:
        # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É —Ç–æ–π –∂–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if topic_selector:
            user_id = update.effective_user.id
            topic = topic_selector.get_topic_by_difficulty(user_id, selected_difficulty)
        else:
            topics = [t for t in task25_data.get('topics', []) 
                     if t.get('difficulty', 'medium') == selected_difficulty]
            topic = random.choice(topics) if topics else None
        
        if not topic:
            return states.CHOOSING_MODE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
        context.user_data['current_topic'] = topic
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É
        from .utils import format_topic_for_display
        topic_text = format_topic_for_display(topic)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        kb = InlineKeyboardMarkup(_get_navigation_buttons(context))
        
        await query.edit_message_text(
            f"{topic_text}\n\n"
            "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        return states.ANSWERING
    else:
        # –ò–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ –≤—Å–µ—Ö
        return await random_topic_all(update, context)

def _get_navigation_buttons(context: ContextTypes.DEFAULT_TYPE) -> List[List[InlineKeyboardButton]]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∞—è —Ç–µ–º–∞" –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    buttons.append([InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t25_another_topic")])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    selected_block = context.user_data.get("selected_block")
    selected_difficulty = context.user_data.get("selected_difficulty")
    
    if selected_block:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –±–ª–æ–∫
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫—É", callback_data=f"t25_block:{selected_block}")])
    elif selected_difficulty:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", callback_data="t25_by_difficulty")])
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")])
    
    return buttons



@safe_handler()
async def block_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    query = update.callback_query
    
    block_name = query.data.split(":", 1)[1]
    context.user_data["selected_block"] = block_name
    
    topics = task25_data.get("topics_by_block", {}).get(block_name, [])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫—É
    user_stats = context.user_data.get('task25_stats', {})
    completed_topics = set(user_stats.get('topics_completed', []))
    completed_in_block = len([t for t in topics if t.get('id') in completed_topics])
    
    text = f"üìö <b>–ë–ª–æ–∫: {block_name}</b>\n"
    text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_in_block}/{len(topics)} —Ç–µ–º\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data=f"t25_list_topics:page:0")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t25_random_block")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫–∞–º", callback_data="t25_select_block")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_BLOCK_T25


def _build_topic_message(topic: Dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ —Ç–µ–º–µ."""
    text = "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 25</b>\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
    text += f"<b>–¢–µ–º–∞:</b> {topic.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"<b>–ë–ª–æ–∫:</b> {topic.get('block', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    # –°–ª–æ–∂–Ω–æ—Å—Ç—å
    if 'difficulty' in topic:
        diff_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}.get(topic['difficulty'], "‚ö™")
        diff_text = {"easy": "–õ—ë–≥–∫–∞—è", "medium": "–°—Ä–µ–¥–Ω—è—è", "hard": "–°–ª–æ–∂–Ω–∞—è"}.get(topic['difficulty'], topic['difficulty'])
        text += f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {diff_emoji} {diff_text}\n"
    
    text += "\n"
    
    # –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    if 'parts' in topic:
        parts = topic['parts']
        text += "<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n"
        
        if 'part1' in parts:
            text += f"<b>1.</b> {parts['part1']}\n\n"
        
        if 'part2' in parts:
            text += f"<b>2.</b> {parts['part2']}\n\n"
        
        if 'part3' in parts:
            text += f"<b>3.</b> {parts['part3']}\n\n"
    else:
        text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{topic.get('task_text', '–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
    text += "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:</b>\n"
    text += "1Ô∏è‚É£ –†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞)\n"
    text += "2Ô∏è‚É£ –¢–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª)\n"
    text += "3Ô∏è‚É£ –¢—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞ (3 –±–∞–ª–ª–∞)\n\n"
    
    text += "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"
    
    return text


@safe_handler()
async def random_topic_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—Å–µ—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    query = update.callback_query
    
    topics = task25_data.get("topics", [])
    if not topics:
        return states.CHOOSING_MODE
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º
    user_stats = context.user_data.get('task25_stats', {})
    completed = set(user_stats.get('topics_completed', []))
    
    uncompleted = [t for t in topics if t.get('id') not in completed]
    topic_pool = uncompleted if uncompleted else topics
    
    topic = random.choice(topic_pool)
    context.user_data['current_topic'] = topic
    
    # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫, —Ç–∞–∫ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—Å–µ—Ö
    context.user_data.pop('selected_block', None)
    
    text = _build_topic_message(topic)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
    settings = context.user_data.get('task25_settings', {})
    
    if settings.get('answer_mode') == 'parts':
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —á–∞—Å—Ç—è–º
        context.user_data['current_part'] = 1
        context.user_data['part_answers'] = {}
        
        parts = topic.get('parts', {})
        part1_text = parts.get('part1', '')
        
        text = (
            f"üìù <b>–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º</b>\n\n"
            f"<b>–¢–µ–º–∞:</b> {topic['title']}\n\n"
            f"<b>–ß–∞—Å—Ç—å 1: –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞)</b>\n\n"
            f"{part1_text}\n\n"
            f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</i>"
        )
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t25_practice")]
        ])
        
        await query.edit_message_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        return ANSWERING_PARTS
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t25_another_topic")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É", callback_data="t25_practice")]
        ])
        
        await query.edit_message_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        return states.ANSWERING

def _get_fallback_feedback(user_answer: str, topic: Dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –±–µ–∑ AI."""
    score = _estimate_score(user_answer)
    
    text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
    text += f"<b>–¢–µ–º–∞:</b> {topic.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"{'‚îÄ' * 30}\n\n"
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    text += f"<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:</b> {score}/6 –±–∞–ª–ª–æ–≤\n\n"
    
    if score >= 5:
        text += "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–ª–Ω—ã–º –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º.\n"
    elif score >= 3:
        text += "‚ö° –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω.\n"
    else:
        text += "üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.\n"
    
    text += "\n<b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    text += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n"
    text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n"
    text += "‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ 3 –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
    text += "\n‚ö†Ô∏è <i>–≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –î–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.</i>"
    
    return text

async def safe_handle_answer_task25(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ 25."""
    
    topic = context.user_data.get('current_topic')
    if not topic:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t25_menu")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if 'document_text' in context.user_data:
        user_answer = context.user_data.pop('document_text')
        logger.info("Using text from document")
    else:
        user_answer = update.message.text.strip()
        logger.info("Using text from message")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if len(user_answer) < 100:
        await update.message.reply_text(
            "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ó–∞–¥–∞–Ω–∏–µ 25 —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="t25_menu")
            ]])
        )
        return states.ANSWERING
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    thinking_msg = await show_ai_evaluation_animation(
        update.message,
        duration=45  # 45 —Å–µ–∫—É–Ω–¥ –¥–ª—è task25 (—Å–ª–æ–∂–Ω–µ–µ)
    )
    
    try:    
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º evaluator –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        global evaluator
        if evaluator is None and AI_EVALUATOR_AVAILABLE:
            try:
                strictness = StrictnessLevel.STANDARD
                evaluator = Task25AIEvaluator(strictness=strictness)
                logger.info("Task25 evaluator initialized")
            except Exception as e:
                logger.error(f"Failed to initialize evaluator: {e}")
                evaluator = None
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if evaluator and AI_EVALUATOR_AVAILABLE:
            try:
                result = await evaluator.evaluate(
                    answer=user_answer,
                    topic=topic,
                    user_id=update.effective_user.id
                )
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if hasattr(result, 'format_feedback'):
                    feedback_text = result.format_feedback()
                else:
                    feedback_text = _format_evaluation_result(result, topic)
                
                score = result.total_score
                
            except Exception as e:
                logger.error(f"Evaluation error: {e}")
                # Fallback –æ—Ü–µ–Ω–∫–∞
                feedback_text = _get_fallback_feedback(user_answer, topic)
                score = _estimate_score(user_answer)
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ AI
            feedback_text = _get_fallback_feedback(user_answer, topic)
            score = _estimate_score(user_answer)
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        await thinking_msg.delete()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_data = {
            'topic_title': topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'),  # –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á
            'topic_id': topic.get('id'),
            'block': topic.get('block', '–û–±—â–∏–µ —Ç–µ–º—ã'),  # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'score': score,
            'max_score': 6,
            'timestamp': datetime.now().isoformat()
        }
        
        if 'task25_results' not in context.user_data:
            context.user_data['task25_results'] = []
        context.user_data['task25_results'].append(result_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if score >= 5:  # –°—á–∏—Ç–∞–µ–º —Ö–æ—Ä–æ—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 5+ –±–∞–ª–ª–æ–≤
            context.user_data['correct_streak'] = context.user_data.get('correct_streak', 0) + 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ—Ä–∏–∏
            if context.user_data['correct_streak'] % 3 == 0:
                await show_streak_notification(
                    update.message,
                    context.user_data['correct_streak']
                )
        else:
            context.user_data['correct_streak'] = 0
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        kb = AdaptiveKeyboards.create_result_keyboard(
            score=score,
            max_score=6,
            module_code="t25"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            feedback_text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ AWAITING_FEEDBACK –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        return states.AWAITING_FEEDBACK
        
    except Exception as e:
        logger.error(f"Error in handle_answer: {e}")
        await thinking_msg.delete()
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="t25_retry"),
                InlineKeyboardButton("üìù –í –º–µ–Ω—é", callback_data="t25_menu")
            ]])
        )
        return states.CHOOSING_MODE


def _estimate_score(user_answer: str) -> int:
    """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ AI."""
    parts = user_answer.split('\n\n')
    if len(parts) >= 3:
        return 3  # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    elif len(parts) >= 2:
        return 2
    else:
        return 1
        
@safe_handler()
@validate_state_transition({ANSWERING_PARTS})
async def handle_answer_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if 'document_text' in context.user_data:
        user_answer = context.user_data.pop('document_text')
    else:
        user_answer = update.message.text
    
    topic = context.user_data.get('current_topic')
    current_part = context.user_data.get('current_part', 1)
    answers = context.user_data.get('part_answers', {})
    
    if not topic:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
    answers[f'part{current_part}'] = user_answer
    context.user_data['part_answers'] = answers
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    if current_part < 3:
        current_part += 1
        context.user_data['current_part'] = current_part
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å
        parts = topic.get('parts', {})
        part_text = parts.get(f'part{current_part}', '')
        
        part_names = {
            2: "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
            3: "–ü—Ä–∏–º–µ—Ä—ã"
        }
        
        text = (
            f"‚úÖ –ß–∞—Å—Ç—å {current_part - 1} –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"<b>–ß–∞—Å—Ç—å {current_part}: {part_names.get(current_part, '')}</b>\n\n"
            f"{part_text}\n\n"
            f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç</i>"
        )
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML
        )
        
        return ANSWERING_PARTS  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ states
    
    else:
        # –í—Å–µ —á–∞—Å—Ç–∏ —Å–æ–±—Ä–∞–Ω—ã, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        full_answer = "\n\n".join([
            f"–ß–∞—Å—Ç—å 1 (–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ):\n{answers.get('part1', '')}",
            f"–ß–∞—Å—Ç—å 2 (–û—Ç–≤–µ—Ç):\n{answers.get('part2', '')}",
            f"–ß–∞—Å—Ç—å 3 (–ü—Ä–∏–º–µ—Ä—ã):\n{answers.get('part3', '')}"
        ])
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('part_answers', None)
        context.user_data.pop('current_part', None)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ context –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è message.text
        context.user_data['document_text'] = full_answer
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
        return await safe_handle_answer_task25(update, context)


def _format_evaluation_result(result: EvaluationResult, topic: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç AI-–æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    score = result.total_score
    max_score = result.max_score
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if score >= 5:
        header = "üéâ <b>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>"
    elif score >= 3:
        header = "üëç <b>–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç!</b>"
    else:
        header = "üìù <b>–ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å</b>"
    
    text = f"{header}\n\n"
    text += f"<b>–í–∞—à –±–∞–ª–ª:</b> {score} –∏–∑ {max_score}\n\n"
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    if hasattr(result, 'criteria_scores') and result.criteria_scores:
        text += "<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:</b>\n"
        text += f"‚Ä¢ –ö1 (–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ): {result.criteria_scores.get('k1_score', 0)}/2\n"
        text += f"‚Ä¢ –ö2 (–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å): {result.criteria_scores.get('k2_score', 0)}/1\n"
        text += f"‚Ä¢ –ö3 (–ü—Ä–∏–º–µ—Ä—ã): {result.criteria_scores.get('k3_score', 0)}/3\n\n"
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if result.feedback:
        text += f"<b>üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{result.feedback}\n\n"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∞—Ç—Ä–∏–±—É—Ç–∞ detailed_feedback
    if hasattr(result, 'detailed_feedback') and result.detailed_feedback:
        detail = result.detailed_feedback
        if isinstance(detail, dict):
            if detail.get('k1_comment'):
                text += f"<b>üìå –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b> {detail['k1_comment']}\n"
            if detail.get('k2_comment'):
                text += f"<b>üìå –û—Ç–≤–µ—Ç:</b> {detail['k2_comment']}\n"
            if detail.get('k3_comment'):
                text += f"<b>üìå –ü—Ä–∏–º–µ—Ä—ã:</b> {detail['k3_comment']}\n"
            
            # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            if detail.get('k3_examples_found'):
                examples = detail['k3_examples_found']
                if examples and isinstance(examples, list):
                    text += "\n<b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
                    for i, ex in enumerate(examples[:3], 1):
                        text += f"{i}. {ex}\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if hasattr(result, 'suggestions') and result.suggestions:
        text += "\n<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        for suggestion in result.suggestions[:3]:
            text += f"‚Ä¢ {suggestion}\n"
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if hasattr(result, 'factual_errors') and result.factual_errors:
        text += "\n<b>‚ö†Ô∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:</b>\n"
        for error in result.factual_errors[:3]:
            text += f"‚Ä¢ {error}\n"
    
    return text.strip()


@safe_handler()
async def handle_result_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    query = update.callback_query
    
    action = query.data.split('_')[-1]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ callback_data
    if action == 'retry':
        return await handle_retry(update, context)
    elif action == 'new':
        return await random_topic_all(update, context)
    elif action == 'theory':
        return await theory_mode(update, context)
    elif action == 'examples':
        return await bank_examples(update, context)
    elif action == 'menu':
        return await return_to_menu(update, context)
    
    return states.CHOOSING_MODE


@safe_handler()
async def search_examples(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    text = (
        "üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>—Å–µ–º—å—è, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –ø—Ä–∞–≤–æ</i>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t25_examples")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
    context.user_data['waiting_for_search'] = True
    
    return states.SEARCHING

@safe_handler()
async def examples_by_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ—Ä—ã –ø–æ –±–ª–æ–∫–∞–º."""
    query = update.callback_query
    
    if not check_data_loaded():
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_examples")
            ]])
        )
        return states.CHOOSING_MODE
    
    blocks = task25_data.get("topics_by_block", {})
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª–æ–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    blocks_with_examples = {}
    for block_name, topics in blocks.items():
        topics_with_ex = [t for t in topics if 'example_answers' in t]
        if topics_with_ex:
            blocks_with_examples[block_name] = topics_with_ex
    
    if not blocks_with_examples:
        text = "üìö <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ –±–ª–æ–∫–∞–º</b>\n\n"
        text += "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —Ç–µ–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        text += "<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ.</i>"
        
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_examples")
        ]])
    else:
        text = "üìö <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ –±–ª–æ–∫–∞–º</b>\n\n"
        text += f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤: {len(blocks_with_examples)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:"
        
        buttons = []
        for block_name, topics in blocks_with_examples.items():
            buttons.append([InlineKeyboardButton(
                f"{block_name} ({len(topics)} —Ç–µ–º)",
                callback_data=f"t25_examples_block:{block_name}"
            )])
        
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_examples")])
        kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return states.CHOOSING_MODE


@safe_handler()
async def best_examples(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ª—É—á—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    if not check_data_loaded():
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_examples")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–º—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    import random
    topics_with_examples = [
        t for t in task25_data.get('topics', [])
        if 'example_answers' in t
    ]
    
    if not topics_with_examples:
        text = "‚≠ê <b>–õ—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤</b>\n\n"
        text += "‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.\n\n"
        text += "<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ.</i>"
        
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_examples")
        ]])
    else:
        sample_topics = random.sample(
            topics_with_examples,
            min(5, len(topics_with_examples))
        )
        
        text = "‚≠ê <b>–õ—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤</b>\n\n"
        text += f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(sample_topics)} –∏–∑ {len(topics_with_examples)}:\n\n"
        
        buttons = []
        for i, topic in enumerate(sample_topics, 1):
            text += f"{i}. {topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}\n"
            buttons.append([InlineKeyboardButton(
                f"üëÅ –ü—Ä–∏–º–µ—Ä {i}",
                callback_data=f"t25_show_example:{topic['id']}"
            )])
        
        buttons.append([InlineKeyboardButton("üîÑ –î—Ä—É–≥–∏–µ", callback_data="t25_best_examples")])
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_examples")])
        
        kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return states.CHOOSING_MODE

@safe_handler()
async def show_example(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã
    topic_id = query.data.split(':')[1]
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–º—É –ø–æ ID
    topic = None
    for t in task25_data.get('topics', []):
        if str(t.get('id')) == str(topic_id):
            topic = t
            break
    
    if not topic or 'example_answers' not in topic:
        await query.answer("–ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return states.CHOOSING_MODE
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞
    text = f"üìù <b>–ü—Ä–∏–º–µ—Ä —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>\n\n"
    text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
    text += f"<b>–ë–ª–æ–∫:</b> {topic.get('block', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    if 'task_text' in topic:
        text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{topic['task_text']}\n\n"
    elif 'parts' in topic:
        text += "<b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n"
        parts = topic['parts']
        if parts.get('part1'):
            text += f"1) {parts['part1']}\n"
        if parts.get('part2'):
            text += f"2) {parts['part2']}\n"
        if parts.get('part3'):
            text += f"3) {parts['part3']}\n"
        text += "\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    example = topic['example_answers']
    text += "<b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    if isinstance(example, dict):
        if 'part1' in example:
            if isinstance(example['part1'], dict):
                text += f"<b>1. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞):</b>\n{example['part1'].get('answer', example['part1'])}\n\n"
            else:
                text += f"<b>1. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞):</b>\n{example['part1']}\n\n"
        
        if 'part2' in example:
            if isinstance(example['part2'], dict):
                text += f"<b>2. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª):</b>\n{example['part2'].get('answer', example['part2'])}\n\n"
            else:
                text += f"<b>2. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª):</b>\n{example['part2']}\n\n"
        
        if 'part3' in example:
            text += "<b>3. –ü—Ä–∏–º–µ—Ä—ã (3 –±–∞–ª–ª–∞):</b>\n"
            if isinstance(example['part3'], list):
                for i, ex in enumerate(example['part3'], 1):
                    if isinstance(ex, dict):
                        text += f"\n{i}) <b>{ex.get('type', '–ü—Ä–∏–º–µ—Ä')}:</b>\n{ex.get('example', ex)}\n"
                    else:
                        text += f"\n{i}) {ex}\n"
            else:
                text += f"{example['part3']}\n"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É"
    buttons.append([InlineKeyboardButton(
        "üìù –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É",
        callback_data=f"t25_topic:{topic['id']}"
    )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–ª–æ–∫—É
    block_name = topic.get('block')
    if block_name:
        buttons.append([InlineKeyboardButton(
            f"üìö –î—Ä—É–≥–∏–µ —Ç–µ–º—ã –∏–∑ –±–ª–æ–∫–∞ ¬´{block_name}¬ª",
            callback_data=f"t25_examples_block:{block_name}"
        )])
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    buttons.extend([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t25_search_examples")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t25_examples")]
    ])
    
    kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def example_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ–æ—Ä–∏–∏ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è CHOOSING_MODE."""
    query = update.callback_query
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é best_examples –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
    return await best_examples(update, context)


@safe_handler()
async def common_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏."""
    query = update.callback_query
    
    text = """‚ö†Ô∏è <b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏ 25</b>

<b>1. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ö1)</b>
‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–Ω—è—Ç–∏–π
‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å—É
‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—ã—Ç–æ–≤—ã—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π

<b>2. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–ö2)</b>
‚ùå –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞
‚ùå –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

<b>3. –ü—Ä–∏–º–µ—Ä—ã (–ö3)</b>
‚ùå –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
‚ùå –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–µ–∑–∏—Å—É

<b>–ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫:</b>
‚úÖ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
‚úÖ –ü—Ä–∏–≤–æ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å –¥–µ—Ç–∞–ª—è–º–∏
‚úÖ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å"""
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìö –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤", callback_data="t25_best_examples")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ç–µ–æ—Ä–∏–∏", callback_data="t25_theory")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
    query = update.callback_query
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    return states.CHOOSING_MODE


@safe_handler()
async def recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."""
    query = update.callback_query
    
    stats = context.user_data.get('task25_stats', {})
    
    text = "üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–∞–µ–º —Å–æ–≤–µ—Ç—ã
    if not stats.get('total_attempts'):
        text += "üìù –ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤\n"
        text += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —á–∞—Å—Ç—è–º\n"
        text += "üü¢ –ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ–º –ª–µ–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è\n"
    else:
        avg_score = sum(stats.get('scores', [0])) / max(len(stats.get('scores', [1])), 1)
        
        if avg_score < 3:
            text += "üìö –ò–∑—É—á–∏—Ç–µ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏\n"
            text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –ø–æ —á–∞—Å—Ç—è–º\n"
            text += "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        elif avg_score < 5:
            text += "‚úèÔ∏è –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç—å—é –ø—Ä–∏–º–µ—Ä–æ–≤\n"
            text += "üéØ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö\n"
        else:
            text += "‚≠ê –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n"
            text += "üî¥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
    blocks_progress = stats.get('blocks_progress', {})
    weak_blocks = [b for b, p in blocks_progress.items() if p < 50]
    
    if weak_blocks:
        text += f"\n<b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏:</b>\n"
        for block in weak_blocks[:3]:
            text += f"‚Ä¢ {block}\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="t25_progress")],
        [InlineKeyboardButton("üí™ –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="t25_practice")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
@safe_handler()
async def examples_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    text = (
        "üè¶ <b>–ë–∞–Ω–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", callback_data="t25_search_examples")],
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫–∞–º", callback_data="t25_examples_by_block")],
        [InlineKeyboardButton("‚≠ê –õ—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã", callback_data="t25_best_examples")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def show_example_topic(query, context: ContextTypes.DEFAULT_TYPE, topic_idx: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–º—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
    topics_with_examples = [t for t in task25_data.get('topics', []) 
                           if 'example_answers' in t]
    
    if topic_idx >= len(topics_with_examples) or topic_idx < 0:
        topic_idx = 0
    
    topic = topics_with_examples[topic_idx]
    total = len(topics_with_examples)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìö <b>–ë–∞–Ω–∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</b>\n"
    text += f"–ü—Ä–∏–º–µ—Ä {topic_idx + 1} –∏–∑ {total}\n"
    text += "‚îÅ" * 35 + "\n\n"
    
    text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
    text += f"<b>–ë–ª–æ–∫:</b> {topic.get('block', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    # –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    if 'task_text' in topic:
        text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{topic['task_text']}\n\n"
    elif 'parts' in topic:
        text += "<b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n"
        parts = topic['parts']
        if 'part1' in parts:
            text += f"1. {parts['part1']}\n"
        if 'part2' in parts:
            text += f"2. {parts['part2']}\n"
        if 'part3' in parts:
            text += f"3. {parts['part3']}\n"
        text += "\n"
    
    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    text += _format_example_answer(topic)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    kb_buttons = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–∏–º–µ—Ä–∞–º–∏
    nav_row = []
    if topic_idx > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t25_example_nav:{topic_idx-1}"))
    nav_row.append(InlineKeyboardButton(f"{topic_idx+1}/{total}", callback_data="t25_noop"))
    if topic_idx < total - 1:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t25_example_nav:{topic_idx+1}"))
    
    kb_buttons.append(nav_row)
    
    # –î–µ–π—Å—Ç–≤–∏—è
    kb_buttons.extend([
        [InlineKeyboardButton("üìù –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É", callback_data=f"t25_try_topic:{topic['id']}")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º", callback_data="t25_bank_search")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )

@safe_handler()
async def handle_example_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º –æ—Ç–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    action = query.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–º–µ—Ä–∞
    current_idx = context.user_data.get('example_index', 0)
    topics_with_examples = [
        t for t in task25_data.get('topics', [])
        if 'example_answers' in t
    ]
    
    if not topics_with_examples:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤", show_alert=True)
        return states.CHOOSING_MODE
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if action == 'next':
        current_idx = (current_idx + 1) % len(topics_with_examples)
    elif action == 'prev':
        current_idx = (current_idx - 1) % len(topics_with_examples)
    elif action == 'random':
        current_idx = random.randint(0, len(topics_with_examples) - 1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
    context.user_data['example_index'] = current_idx
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
    topic = topics_with_examples[current_idx]
    
    text = f"üìö <b>–ü—Ä–∏–º–µ—Ä {current_idx + 1} –∏–∑ {len(topics_with_examples)}</b>\n\n"
    text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
    text += f"<b>–ë–ª–æ–∫:</b> {topic.get('block', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"{'‚îÄ' * 30}\n\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
    if 'example_answers' in topic:
        example = topic['example_answers']
        
        if 'part1' in example:
            text += "<b>1. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += f"{example['part1']}\n\n"
        
        if 'part2' in example:
            text += "<b>2. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:</b>\n"
            text += f"{example['part2']}\n\n"
        
        if 'part3' in example:
            text += "<b>3. –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            if isinstance(example['part3'], list):
                for i, ex in enumerate(example['part3'], 1):
                    if isinstance(ex, dict):
                        text += f"{i}) {ex.get('type', '–ü—Ä–∏–º–µ—Ä')}: {ex.get('example', ex)}\n"
                    else:
                        text += f"{i}) {ex}\n"
            else:
                text += f"{example['part3']}\n"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="t25_example_nav:prev"),
            InlineKeyboardButton(f"{current_idx + 1}/{len(topics_with_examples)}", callback_data="t25_noop"),
            InlineKeyboardButton("‚û°Ô∏è", callback_data="t25_example_nav:next")
        ],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="t25_example_nav:random")],
        [InlineKeyboardButton("üìù –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É", callback_data=f"t25_topic:{topic['id']}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_examples")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def bank_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    topic_idx = int(query.data.split(":")[1])
    await show_example_topic(query, context, topic_idx)
    return states.CHOOSING_MODE


@safe_handler()
async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º task25_practice_stats
    results = context.user_data.get('task25_results', [])
    task25_stats = context.user_data.get('task25_practice_stats', {})
    
    if not task25_stats and not results:
        text = (
            "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
            "–í—ã –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É!"
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí™ –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="t25_practice")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
        ])
    else:
        text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –û–ë–û–ò–• –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        total_attempts = 0
        total_score = 0
        topics_tried = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ task25_practice_stats (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
        for topic_id, topic_stats in task25_stats.items():  # –ë—ã–ª–æ: stats.items()
            if topic_stats.get('attempts', 0) > 0:
                topics_tried += 1
                total_attempts += topic_stats['attempts']
                if topic_stats.get('scores'):
                    # –ë–µ—Ä—ë–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–º–µ
                    best_score = max(topic_stats['scores'])
                    total_score += best_score
        
        # –ï—Å–ª–∏ task25_stats –ø—É—Å—Ç–æ–π, –Ω–æ –µ—Å—Ç—å results - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
        if not task25_stats and results:  # –ë—ã–ª–æ: if not stats and results
            total_attempts = len(results)
            total_score = sum(r['score'] for r in results)
            topics_tried = len(set(r.get('topic_id') for r in results if r.get('topic_id')))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ task25_stats –∏ results - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
        elif task25_stats and results:  # –ë—ã–ª–æ: elif stats and results
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ results —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ task25_stats
            for result in results:
                topic_id_str = str(result.get('topic_id', 0))
                if topic_id_str not in task25_stats:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –∏–∑ results
                    if 'task25_practice_stats' not in context.user_data:
                        context.user_data['task25_practice_stats'] = {}
                    
                    context.user_data['task25_practice_stats'][topic_id_str] = {
                        'attempts': 1,
                        'scores': [result['score']],
                        'topic_title': result.get('topic_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'),
                        'topic_id': result.get('topic_id'),
                        'module': 'task25'
                    }
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    task25_stats = context.user_data['task25_practice_stats']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if topics_tried > 0:
            avg_score = total_score / topics_tried
            text += f"<b>–¢–µ–º –∏–∑—É—á–µ–Ω–æ:</b> {topics_tried}\n"
            text += f"<b>–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {total_attempts}\n"
            text += f"<b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {avg_score:.1f}/6\n\n"
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if task25_stats:
                text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã:</b>\n"
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å timestamp)
                sorted_topics = sorted(
                    task25_stats.items(),
                    key=lambda x: x[1].get('last_attempt', ''),
                    reverse=True
                )[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–µ–º
                
                for topic_id_str, topic_data in sorted_topics:
                    topic_title = topic_data.get('topic_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')[:30]
                    if topic_data.get('scores'):
                        best = max(topic_data['scores'])
                        attempts = topic_data.get('attempts', 0)
                        text += f"‚Ä¢ {topic_title}: {best}/6 (–ø–æ–ø—ã—Ç–æ–∫: {attempts})\n"
        else:
            text += "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!"
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="t25_detailed_progress")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t25_reset_confirm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
        ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

def save_result(context: ContextTypes.DEFAULT_TYPE, topic: Dict, score: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    from datetime import datetime
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'task25_results' not in context.user_data:
        context.user_data['task25_results'] = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
    result = {
        'topic_id': topic.get('id'),
        'topic_title': topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'),
        'block': topic.get('block', '–û–±—â–∏–µ —Ç–µ–º—ã'),
        'score': score,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    context.user_data['task25_results'].append(result)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ practice_stats –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if 'practice_stats' not in context.user_data:
        context.user_data['practice_stats'] = {}
    
    topic_id_str = str(topic.get('id', 0))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–µ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if topic_id_str not in context.user_data['task25_practice_stats']:
        context.user_data['task25_practice_stats'][topic_id_str] = {
            'attempts': 0,
            'scores': [],
            'last_attempt': None,
            'best_score': 0,
            'topic_title': topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'),
            'topic_id': topic.get('id')
        }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    topic_stats = context.user_data['task25_practice_stats'][topic_id_str]
    topic_stats['attempts'] += 1
    topic_stats['scores'].append(score)
    topic_stats['last_attempt'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    topic_stats['best_score'] = max(topic_stats.get('best_score', 0), score)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if score >= 5:  # –î–ª—è task25 —Ö–æ—Ä–æ—à–∏–º —Å—á–∏—Ç–∞–µ—Ç—Å—è 5+ –±–∞–ª–ª–æ–≤ –∏–∑ 6
        context.user_data['correct_streak'] = context.user_data.get('correct_streak', 0) + 1
    else:
        context.user_data['correct_streak'] = 0
    
    return result

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def settings_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏—è 25."""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
    settings = context.user_data.get('task25_settings', {
        'answer_mode': 'full',  # full –∏–ª–∏ parts
        'show_examples': True,
        'strictness': 'standard'
    })
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ settings —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    if not isinstance(settings, dict):
        settings = {
            'answer_mode': 'full',
            'show_examples': True,
            'strictness': 'standard'
        }
        context.user_data['task25_settings'] = settings
    
    text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏—è 25</b>\n\n"
    
    # –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
    answer_mode_text = "—Ü–µ–ª–∏–∫–æ–º" if settings.get('answer_mode', 'full') == 'full' else "–ø–æ —á–∞—Å—Ç—è–º"
    text += f"üìù –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞: <b>{answer_mode_text}</b>\n"
    
    # –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
    examples_text = "–¥–∞" if settings.get('show_examples', True) else "–Ω–µ—Ç"
    text += f"üìö –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã: <b>{examples_text}</b>\n"
    
    # –°—Ç—Ä–æ–≥–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
    strictness_map = {
        'lenient': '–º—è–≥–∫–∞—è',
        'standard': '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è',
        'strict': '—Å—Ç—Ä–æ–≥–∞—è',
        'expert': '—ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è'
    }
    text += f"üéØ –°—Ç—Ä–æ–≥–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{strictness_map.get(settings.get('strictness', 'standard'), '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è')}</b>\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            f"{'‚úÖ' if settings.get('answer_mode', 'full') == 'full' else '‚ö™'} –û—Ç–≤–µ—á–∞—Ç—å —Ü–µ–ª–∏–∫–æ–º",
            callback_data="t25_set_mode:full"
        )],
        [InlineKeyboardButton(
            f"{'‚úÖ' if settings.get('answer_mode', 'full') == 'parts' else '‚ö™'} –û—Ç–≤–µ—á–∞—Ç—å –ø–æ —á–∞—Å—Ç—è–º",
            callback_data="t25_set_mode:parts"
        )],
        [InlineKeyboardButton(
            f"{'‚úÖ' if settings.get('show_examples', True) else '‚ùå'} –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤",
            callback_data="t25_toggle_examples"
        )],
        [InlineKeyboardButton("üéØ –°—Ç—Ä–æ–≥–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="t25_strictness_menu")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é task25."""
    query = update.callback_query
    
    if query:
        await query.answer()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    from core.migration import ensure_module_migration
    ensure_module_migration(context, 'task25', task25_data)
    
    results = context.user_data.get('task25_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r.get('topic_id') for r in results)) / 100 * 100) if results else 0
    }

    greeting = get_personalized_greeting(user_stats)
    text = greeting + MessageFormatter.format_welcome_message(
        "–∑–∞–¥–∞–Ω–∏–µ 25",
        is_new_user=user_stats['total_attempts'] == 0
    )
    
    kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="t25")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞
    await safe_menu_transition(query, text, kb)
    
    return states.CHOOSING_MODE


async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="t25_menu")
        ]])
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é task25."""
    query = update.callback_query
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    from core.migration import ensure_module_migration
    ensure_module_migration(context, 'task25', task25_data)
    
    results = context.user_data.get('task25_results', [])
    user_stats = {
        'total_attempts': len(results),
        'average_score': sum(r['score'] for r in results) / len(results) if results else 0,
        'streak': context.user_data.get('correct_streak', 0),
        'weak_topics_count': 0,
        'progress_percent': int(len(set(r.get('topic_id') for r in results)) / 100 * 100) if results else 0
    }

    greeting = get_personalized_greeting(user_stats)
    text = greeting + MessageFormatter.format_welcome_message(
        "–∑–∞–¥–∞–Ω–∏–µ 25",
        is_new_user=user_stats['total_attempts'] == 0
    )
    
    kb = AdaptiveKeyboards.create_menu_keyboard(user_stats, module_code="t25")
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    from core.menu_handlers import handle_to_main_menu
    return await handle_to_main_menu(update, context)


@safe_handler()
async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()  # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
    return None  # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@safe_handler()
async def handle_noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    return None

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    parts = query.data.split(":")
    page = int(parts[2]) if len(parts) > 2 else 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –±–ª–æ–∫–∞
    block_name = context.user_data.get("selected_block", "")
    topics = task25_data.get("topics_by_block", {}).get(block_name, [])
    
    if not topics:
        await query.edit_message_text(
            "‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"t25_block:{block_name}")
            ]])
        )
        return states.CHOOSING_MODE
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    topics_per_page = 5
    total_pages = (len(topics) + topics_per_page - 1) // topics_per_page
    start_idx = page * topics_per_page
    end_idx = min(start_idx + topics_per_page, len(topics))
    
    text = f"üìö <b>–¢–µ–º—ã –±–ª–æ–∫–∞: {block_name}</b>\n"
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    
    kb_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(start_idx, end_idx):
        topic = topics[i]
        difficulty = topic.get('difficulty', 'medium')
        diff_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}.get(difficulty, "‚ö™")
        
        kb_buttons.append([InlineKeyboardButton(
            f"{diff_emoji} {topic['title'][:40]}...",
            callback_data=f"t25_select_topic:{topic['id']}"
        )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t25_list_topics:page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t25_list_topics:page:{page+1}"))
    
    if nav_buttons:
        kb_buttons.append(nav_buttons)
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫—É", callback_data=f"t25_block:{block_name}")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_BLOCK_T25

@safe_handler()
async def show_topic_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–º—ã –ø–æ ID - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ callback_data
    action_type = "show_example"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
    if "try_topic" in query.data:
        action_type = "practice"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã
    topic_id = query.data.split(':')[1]
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–º—É –ø–æ ID
    topic = None
    for t in task25_data.get('topics', []):
        if str(t.get('id')) == str(topic_id):
            topic = t
            break
    
    if not topic:
        await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return states.CHOOSING_MODE
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏ (–Ω–∞–∂–∞–ª–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É")
    if action_type == "practice":
        context.user_data['current_topic'] = topic
        context.user_data['mode'] = 'practice'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
        text = "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 25</b>\n\n"
        text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        text += f"<b>–ë–ª–æ–∫:</b> {topic.get('block', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        
        text += "<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n"
        if 'parts' in topic:
            parts = topic['parts']
            if parts.get('part1'):
                text += f"1. {parts['part1']}\n"
            if parts.get('part2'):
                text += f"2. {parts['part2']}\n"
            if parts.get('part3'):
                text += f"3. {parts['part3']}\n"
        else:
            text += f"{topic.get('task_text', '')}\n"
        
        text += "\nüìå <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:</b>\n"
        text += "1Ô∏è‚É£ –†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞)\n"
        text += "2Ô∏è‚É£ –¢–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª)\n"
        text += "3Ô∏è‚É£ –¢—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞ (3 –±–∞–ª–ª–∞)\n\n"
        text += "üí¨ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"
        
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t25_menu")
        ]])
        
        await query.edit_message_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        return states.TASK25_WAITING
    
    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä (–Ω–∞–∂–∞–ª–∏ "–ü—Ä–∏–º–µ—Ä 1-5")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if 'example_answers' not in topic:
            await query.answer("–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω", show_alert=True)
            return states.CHOOSING_MODE
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞
        text = f"üìù <b>–ü—Ä–∏–º–µ—Ä —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>\n"
        text += "‚îÅ" * 35 + "\n\n"
        text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
        text += f"<b>–ë–ª–æ–∫:</b> {topic.get('block', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> "
        
        difficulty = topic.get('difficulty', 'medium')
        diff_map = {
            'easy': 'üü¢ –õ—ë–≥–∫–∞—è',
            'medium': 'üü° –°—Ä–µ–¥–Ω—è—è', 
            'hard': 'üî¥ –°–ª–æ–∂–Ω–∞—è'
        }
        text += f"{diff_map.get(difficulty, difficulty)}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        text += "<b>üìã –ó–∞–¥–∞–Ω–∏–µ:</b>\n"
        if 'task_text' in topic:
            text += f"{topic['task_text']}\n\n"
        elif 'parts' in topic:
            parts = topic['parts']
            if parts.get('part1'):
                text += f"1. {parts['part1']}\n"
            if parts.get('part2'):
                text += f"2. {parts['part2']}\n"
            if parts.get('part3'):
                text += f"3. {parts['part3']}\n"
            text += "\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        text += _format_example_answer(topic)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–µ—à–∏—Ç—å
        buttons.append([InlineKeyboardButton(
            "üìù –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É",
            callback_data=f"t25_try_topic:{topic['id']}"
        )])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–ª–æ–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        block_name = topic.get('block')
        if block_name:
            buttons.append([InlineKeyboardButton(
                f"üìö –î—Ä—É–≥–∏–µ —Ç–µ–º—ã –∏–∑ –±–ª–æ–∫–∞ ¬´{block_name}¬ª",
                callback_data=f"t25_examples_block:{block_name}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.extend([
            [InlineKeyboardButton("üîç –î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã", callback_data="t25_best_examples")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t25_examples")]
        ])
        
        kb = InlineKeyboardMarkup(buttons)
        
        await query.edit_message_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        return states.CHOOSING_MODE

@safe_handler()
async def show_topic_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    query = update.callback_query
    
    # –ü–∞—Ä—Å–∏–º callback_data: t25_list_topics:page:0
    parts = query.data.split(':')
    page = int(parts[2]) if len(parts) > 2 else 0
    
    block_name = context.user_data.get("selected_block")
    topics = task25_data.get("topics_by_block", {}).get(block_name, [])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - 10 —Ç–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    items_per_page = 10
    total_pages = (len(topics) + items_per_page - 1) // items_per_page
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(topics))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìö <b>{block_name}</b>\n"
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = context.user_data.get('task25_stats', {})
    completed_topics = user_stats.get('topics_completed', set())
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    buttons = []
    for i in range(start_idx, end_idx):
        topic = topics[i]
        topic_id = topic.get('id')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        if topic_id in completed_topics:
            status = "‚úÖ"
        else:
            status = "üìù"
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        title = topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        if len(title) > 40:
            title = title[:37] + "..."
        
        button_text = f"{status} {title}"
        buttons.append([InlineKeyboardButton(
            button_text,
            callback_data=f"t25_topic:{topic_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"t25_list_topics:page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"t25_list_topics:page:{page+1}"))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫–∞–º", callback_data="t25_select_block")])
    
    kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def random_topic_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    query = update.callback_query
    
    block_name = context.user_data.get("selected_block")
    if not block_name:
        return states.CHOOSING_MODE
    
    topics = task25_data.get("topics_by_block", {}).get(block_name, [])
    
    if not topics:
        return states.CHOOSING_MODE
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º
    user_stats = context.user_data.get('task25_stats', {})
    completed = set(user_stats.get('topics_completed', []))
    
    uncompleted = [t for t in topics if t.get('id') not in completed]
    topic_pool = uncompleted if uncompleted else topics
    
    topic = random.choice(topic_pool)
    context.user_data['current_topic'] = topic
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
    settings = context.user_data.get('task25_settings', {})
    
    text = _build_topic_message(topic)
    
    if settings.get('answer_mode') == 'parts':
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —á–∞—Å—Ç—è–º
        context.user_data['current_part'] = 1
        context.user_data['part_answers'] = {}
        
        parts = topic.get('parts', {})
        part1_text = parts.get('part1', '')
        
        text = (
            f"üìù <b>–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º</b>\n\n"
            f"<b>–¢–µ–º–∞:</b> {topic['title']}\n\n"
            f"<b>–ß–∞—Å—Ç—å 1: –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞)</b>\n\n"
            f"{part1_text}\n\n"
            f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</i>"
        )
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"t25_block:{block_name}")]
        ])
        
        await query.edit_message_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        return ANSWERING_PARTS
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t25_random_block")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫—É", callback_data=f"t25_block:{block_name}")]
        ])
        
        await query.edit_message_text(
            text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        
        return states.ANSWERING


@safe_handler()
async def bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –≤ –±–∞–Ω–∫–µ –æ—Ç–≤–µ—Ç–æ–≤."""
    query = update.callback_query
    
    text = (
        "üîç <b>–ü–æ–∏—Å–∫ –≤ –±–∞–Ω–∫–µ –æ—Ç–≤–µ—Ç–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–¥–µ–º–æ–∫—Ä–∞—Ç–∏—è</i>, <i>—Ä—ã–Ω–æ—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞</i>\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã", callback_data="t25_all_examples")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.SEARCHING

@safe_handler()
async def list_all_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ–º –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –±–ª–æ–∫–∞–º."""
    query = update.callback_query
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–º—ã
    all_topics = task25_data.get('topics', [])
    
    if not all_topics:
        return states.CHOOSING_MODE
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    topics_by_difficulty = {
        'easy': [],
        'medium': [],
        'hard': []
    }
    
    for topic in all_topics:
        difficulty = topic.get('difficulty', 'medium')
        topics_by_difficulty[difficulty].append(topic)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìö <b>–í—Å–µ —Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏—è 25</b>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    user_stats = context.user_data.get('task25_stats', {})
    completed_topics = set(user_stats.get('topics_completed', []))
    
    text += f"‚úÖ –ò–∑—É—á–µ–Ω–æ: {len(completed_topics)}/{len(all_topics)}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_names = {
        'easy': 'üü¢ –õ–µ–≥–∫–∏–µ —Ç–µ–º—ã',
        'medium': 'üü° –°—Ä–µ–¥–Ω–∏–µ —Ç–µ–º—ã',
        'hard': 'üî¥ –°–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã'
    }
    
    buttons = []
    
    for difficulty in ['easy', 'medium', 'hard']:
        topics = topics_by_difficulty[difficulty]
        if topics:
            completed_in_level = len([t for t in topics if t.get('id') in completed_topics])
            buttons.append([InlineKeyboardButton(
                f"{difficulty_names[difficulty]} ({completed_in_level}/{len(topics)})",
                callback_data=f"t25_list_by_diff:{difficulty}"
            )])
    
    buttons.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t25_random_all")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")])
    
    kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def handle_settings_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∂–∏–º –∏–∑ callback_data: t25_set_mode:full
    mode = query.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = context.user_data.get('task25_settings', {})
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    if not isinstance(settings, dict):
        settings = {}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings['answer_mode'] = mode
    context.user_data['task25_settings'] = settings
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return await settings_mode(update, context)


@safe_handler()
async def toggle_examples(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    settings = context.user_data.get('task25_settings', {})
    settings['show_examples'] = not settings.get('show_examples', True)
    context.user_data['task25_settings'] = settings
    
    return await settings_mode(update, context)


@safe_handler()
async def strictness_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    query = update.callback_query
    
    current_strictness = context.user_data.get('task25_settings', {}).get('strictness', 'standard')
    
    text = (
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
        "üü¢ <b>–ú—è–≥–∫–∞—è</b> - –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "üü° <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è</b> - –æ–±—ã—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ï–ì–≠\n"
        "üî¥ <b>–°—Ç—Ä–æ–≥–∞—è</b> - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
        "‚ö´ <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å\n"
    )
    
    buttons = []
    strictness_levels = [
        ('lenient', 'üü¢ –ú—è–≥–∫–∞—è'),
        ('standard', 'üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'),
        ('strict', 'üî¥ –°—Ç—Ä–æ–≥–∞—è'),
        ('expert', '‚ö´ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è')
    ]
    
    for level, name in strictness_levels:
        check = '‚úÖ ' if level == current_strictness else ''
        buttons.append([InlineKeyboardButton(
            f"{check}{name}",
            callback_data=f"t25_strictness:{level}"
        )])
    
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_settings")])
    
    kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def handle_bank_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if not context.user_data.get('waiting_for_search'):
        return states.CHOOSING_MODE
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data['waiting_for_search'] = False
    
    search_query = update.message.text.lower()
    
    # –ò—â–µ–º —Ç–µ–º—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    found_topics = []
    for topic in task25_data.get('topics', []):
        if 'example_answers' not in topic:
            continue
            
        if (search_query in topic.get('title', '').lower() or
            search_query in topic.get('task_text', '').lower() or
            search_query in topic.get('block', '').lower() or
            any(search_query in str(part).lower() for part in topic.get('parts', {}).values())):
            found_topics.append(topic)
    
    if not found_topics:
        text = "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
        text += f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{update.message.text}¬ª –ø—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
        text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="t25_search_examples")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t25_examples")]
        ])
    else:
        text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(found_topics)}</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 7 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        buttons = []
        for i, topic in enumerate(found_topics[:7]):
            text += f"{i+1}. {topic['title']}\n"
            buttons.append([InlineKeyboardButton(
                f"üëÅ –ü—Ä–∏–º–µ—Ä {i+1}",
                callback_data=f"t25_show_example:{topic['id']}"
            )])
        
        if len(found_topics) > 7:
            text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 7 –∏–∑ {len(found_topics)} —Ç–µ–º</i>"
        
        buttons.extend([
            [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="t25_search_examples")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t25_examples")]
        ])
        
        kb = InlineKeyboardMarkup(buttons)
    
    await update.message.reply_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def cancel_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤."""
    query = update.callback_query
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞
    context.user_data['waiting_for_search'] = False
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤
    return await examples_bank(update, context)

@safe_handler()
async def show_examples_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–ª–æ–∫—É."""
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–∑ callback_data
    block_name = query.data.split(':', 1)[1]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –±–ª–æ–∫—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    topics_in_block = [
        t for t in task25_data.get('topics', [])
        if t.get('block') == block_name and 'example_answers' in t
    ]
    
    if not topics_in_block:
        await query.answer("–í —ç—Ç–æ–º –±–ª–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤", show_alert=True)
        return states.CHOOSING_MODE
    
    text = f"üìö <b>{block_name}</b>\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(topics_in_block)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:\n\n"
    
    buttons = []
    for i, topic in enumerate(topics_in_block[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ç–µ–º–∞–º–∏
        buttons.append([InlineKeyboardButton(
            f"{i}. {topic['title'][:45]}...",
            callback_data=f"t25_show_example:{topic['id']}"
        )])
    
    if len(topics_in_block) > 10:
        text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(topics_in_block)} —Ç–µ–º</i>"
    
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_examples_by_block")])
    
    kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
async def handle_settings_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    pass


@safe_handler()
async def set_strictness(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    query = update.callback_query
    
    level = query.data.split(':')[1]
    
    settings = context.user_data.get('task25_settings', {})
    settings['strictness'] = level
    context.user_data['task25_settings'] = settings
    
    return await settings_mode(update, context)


@safe_handler()
async def show_block_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º —Ç–µ–º."""
    query = update.callback_query
    
    task25_stats = context.user_data.get('task25_practice_stats', {})
    
    if not stats:
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º</b>\n\n"
        text += "–í—ã –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è.\n"
        text += "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
    else:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–ª–æ–∫–∞–º
        block_data = {}
        
        for topic_id, topic_stats in stats.items():
            topic = task25_data.get('topic_by_id', {}).get(int(topic_id))
            if topic:
                block = topic.get('block', '–î—Ä—É–≥–æ–µ')
                if block not in block_data:
                    block_data[block] = {
                        'topics_tried': 0,
                        'total_attempts': 0,
                        'scores': []
                    }
                
                block_data[block]['topics_tried'] += 1
                block_data[block]['total_attempts'] += topic_stats.get('attempts', 0)
                block_data[block]['scores'].extend(topic_stats.get('scores', []))
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º</b>\n\n"
        
        for block, data in sorted(block_data.items()):
            total_topics = len(task25_data.get('topics_by_block', {}).get(block, []))
            coverage = (data['topics_tried'] / total_topics * 100) if total_topics > 0 else 0
            
            text += f"<b>{block}</b>\n"
            text += f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {data['topics_tried']}/{total_topics} ({coverage:.0f}%)\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {data['total_attempts']}\n"
            
            if data['scores']:
                avg_score = sum(data['scores']) / len(data['scores'])
                max_score = max(data['scores'])
                text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/6\n"
                text += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max_score}/6\n"
            
            text += "\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t25_progress")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


async def detailed_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º."""
    query = update.callback_query
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º task25_practice_stats
    task25_stats = context.user_data.get('task25_practice_stats', {})
    
    if not task25_stats:
        return states.CHOOSING_MODE
    
    sorted_topics = sorted(
        task25_stats.items(),
        key=lambda x: x[1].get('attempts', 0),
        reverse=True
    )
    
    text = "üìà <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
    
    for topic_id, topic_stats in sorted_topics[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        topic = task25_data.get('topic_by_id', {}).get(int(topic_id))
        if topic:
            topic_name = topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')[:40]
            attempts = topic_stats.get('attempts', 0)
            scores = topic_stats.get('scores', [])
            
            text += f"<b>{topic_name}</b>\n"
            text += f"‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫: {attempts}\n"
            
            if scores:
                avg_score = sum(scores) / len(scores)
                last_score = scores[-1]
                best_score = max(scores)
                
                text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {last_score}/6\n"
                text += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score}/6\n"
                text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/6\n"
                
                # –¢—Ä–µ–Ω–¥
                if len(scores) > 1:
                    if scores[-1] > scores[-2]:
                        text += "‚Ä¢ –¢—Ä–µ–Ω–¥: üìà –£–ª—É—á—à–µ–Ω–∏–µ\n"
                    elif scores[-1] < scores[-2]:
                        text += "‚Ä¢ –¢—Ä–µ–Ω–¥: üìâ –°–Ω–∏–∂–µ–Ω–∏–µ\n"
                    else:
                        text += "‚Ä¢ –¢—Ä–µ–Ω–¥: ‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ\n"
            
            text += "\n"
    
    if len(sorted_topics) > 10:
        text += f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã 10 –∏–∑ {len(sorted_topics)} –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ–º</i>"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ü–æ –±–ª–æ–∫–∞–º", callback_data="t25_block_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_progress")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

async def _save_user_stats(context: ContextTypes.DEFAULT_TYPE, topic: Dict, score: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º."""
    from datetime import datetime
    
    if 'task25_results' not in context.user_data:
        context.user_data['task25_results'] = []
    
    result = {
        'topic_id': topic.get('id'),
        'topic_title': topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'),
        'block': topic.get('block', '–û–±—â–∏–µ —Ç–µ–º—ã'),
        'score': score,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    context.user_data['task25_results'].append(result)
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º task25_practice_stats –≤–º–µ—Å—Ç–æ practice_stats
    if 'task25_practice_stats' not in context.user_data:
        context.user_data['task25_practice_stats'] = {}
    
    topic_id_str = str(topic.get('id', 0))
    
    if topic_id_str not in context.user_data['task25_practice_stats']:
        context.user_data['task25_practice_stats'][topic_id_str] = {
            'attempts': 0,
            'scores': [],
            'last_attempt': None,
            'best_score': 0,
            'topic_title': topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'),
            'topic_id': topic.get('id'),
            'module': 'task25'
        }
    
    topic_stats = context.user_data['task25_practice_stats'][topic_id_str]
    topic_stats['attempts'] += 1
    topic_stats['scores'].append(score)
    topic_stats['last_attempt'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    if score > topic_stats.get('best_score', 0):
        topic_stats['best_score'] = score
    
    if topic.get('title'):
        topic_stats['topic_title'] = topic.get('title')
    
    if score >= 5:
        context.user_data['correct_streak'] = context.user_data.get('correct_streak', 0) + 1
    else:
        context.user_data['correct_streak'] = 0
    
    return result

def _format_evaluation_result(result: EvaluationResult, topic: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–º–æ–π
    formatted = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
    formatted += f"<b>–¢–µ–º–∞:</b> {topic.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    formatted += f"{'‚îÄ' * 30}\n\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç AI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if hasattr(result, 'feedback') and result.feedback:
        formatted += result.feedback
    else:
        # –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
        scores = result.scores if hasattr(result, 'scores') else {}
        
        # –ö1 - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        k1_score = scores.get('k1', 0)
        formatted += f"<b>–ö1 (–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ):</b> {k1_score}/2\n"
        if k1_score == 2:
            formatted += "‚úÖ –†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ç–µ–æ—Ä–∏—é\n"
        elif k1_score == 1:
            formatted += "‚ö†Ô∏è –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ\n"
        else:
            formatted += "‚ùå –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ\n"
        
        # –ö2 - –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        k2_score = scores.get('k2', 0)
        formatted += f"\n<b>–ö2 (–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å):</b> {k2_score}/1\n"
        if k2_score == 1:
            formatted += "‚úÖ –î–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
        else:
            formatted += "‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        
        # –ö3 - –ü—Ä–∏–º–µ—Ä—ã
        k3_score = scores.get('k3', 0)
        formatted += f"\n<b>–ö3 (–ü—Ä–∏–º–µ—Ä—ã):</b> {k3_score}/3\n"
        if k3_score == 3:
            formatted += "‚úÖ –ü—Ä–∏–≤–µ–¥–µ–Ω—ã —Ç—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞\n"
        elif k3_score > 0:
            formatted += f"‚ö†Ô∏è –ó–∞—Å—á–∏—Ç–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {k3_score}\n"
        else:
            formatted += "‚ùå –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
        total = result.total_score if hasattr(result, 'total_score') else sum(scores.values())
        formatted += f"\n{'‚îÄ' * 30}\n"
        formatted += f"<b>–ò—Ç–æ–≥–æ:</b> {total}/6 –±–∞–ª–ª–æ–≤\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    total = result.total_score if hasattr(result, 'total_score') else 0
    if total >= 5:
        formatted += "\nüéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    elif total >= 3:
        formatted += "\nüëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    elif total >= 1:
        formatted += "\nüí™ –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!"
    else:
        formatted += "\nüìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã!"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∑–∫–∏–π
    if total < 4 and 'example_answers' in topic:
        formatted += "\n\n" + _format_example_answer(topic)
    
    return formatted


def _format_example_answer(topic: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    example = topic.get('example_answers', {})
    if not example:
        return "\n‚ö†Ô∏è <i>–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</i>"
    
    text = "\n" + "‚îÅ" * 35 + "\n"
    text += "‚ú® <b>–≠–¢–ê–õ–û–ù–ù–´–ô –û–¢–í–ï–¢:</b>\n\n"
    
    # –ß–∞—Å—Ç—å 1 - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    if 'part1' in example:
        text += "1Ô∏è‚É£ <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞):</b>\n"
        if isinstance(example['part1'], dict):
            content = example['part1'].get('answer', example['part1'].get('text', str(example['part1'])))
        else:
            content = str(example['part1'])
        text += f"<i>{content}</i>\n\n"
    
    # –ß–∞—Å—Ç—å 2 - –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if 'part2' in example:
        text += "2Ô∏è‚É£ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª):</b>\n"
        if isinstance(example['part2'], dict):
            content = example['part2'].get('answer', example['part2'].get('text', str(example['part2'])))
        else:
            content = str(example['part2'])
        text += f"<i>{content}</i>\n\n"
    
    # –ß–∞—Å—Ç—å 3 - –ü—Ä–∏–º–µ—Ä—ã
    if 'part3' in example:
        text += "3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä—ã (3 –±–∞–ª–ª–∞):</b>\n\n"
        
        if isinstance(example['part3'], list):
            # –ï—Å–ª–∏ –ø—Ä–∏–º–µ—Ä—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
            for i, ex in enumerate(example['part3'], 1):
                text += f"üìå <b>–ü—Ä–∏–º–µ—Ä {i}:</b>\n"
                if isinstance(ex, dict):
                    # –ï—Å–ª–∏ –ø—Ä–∏–º–µ—Ä - —Å–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
                    if 'type' in ex:
                        text += f"<b>{ex['type']}</b>\n"
                    example_text = ex.get('example', ex.get('text', str(ex)))
                    text += f"<i>{example_text}</i>\n\n"
                else:
                    # –ï—Å–ª–∏ –ø—Ä–∏–º–µ—Ä - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    text += f"<i>{ex}</i>\n\n"
        elif isinstance(example['part3'], str):
            # –ï—Å–ª–∏ –ø—Ä–∏–º–µ—Ä—ã - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            text += f"<i>{example['part3']}</i>\n"
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞
    text += "‚îÅ" * 35 + "\n"
    text += "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:</i>\n"
    text += "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ª–æ–≥–∏–∫—É –∏–∑–ª–æ–∂–µ–Ω–∏—è\n"
    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
    text += "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤\n"
    text += "‚Ä¢ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤"
    
    return text

@safe_handler()
async def handle_strictness_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
    query = update.callback_query
    
    # –ü–∞—Ä—Å–∏–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
    _, level_str = query.data.split(':')
    
    global evaluator
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        new_level = StrictnessLevel[level_str.upper()]
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º evaluator —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º
        if AI_EVALUATOR_AVAILABLE:
            evaluator = Task25AIEvaluator(strictness=new_level)
            
            logger.info(f"Changed strictness level to {new_level.value}")
            
    except Exception as e:
        logger.error(f"Error changing strictness: {e}")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return await show_settings(update, context)


@safe_handler()
async def handle_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    
    task25_stats = context.user_data.get('task25_practice_stats', {})
    
    if not stats:
        text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        text += "–í—ã –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É!"
    else:
        text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        
        total_attempts = 0
        total_score = 0
        topics_tried = 0
        
        for topic_id, topic_stats in stats.items():
            if topic_stats['attempts'] > 0:
                topics_tried += 1
                total_attempts += topic_stats['attempts']
                if topic_stats['scores']:
                    # –ë–µ—Ä—ë–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–º–µ
                    best_score = max(topic_stats['scores'])
                    total_score += best_score
        
        if topics_tried > 0:
            avg_score = total_score / topics_tried
            text += f"<b>–¢–µ–º –∏–∑—É—á–µ–Ω–æ:</b> {topics_tried}\n"
            text += f"<b>–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {total_attempts}\n"
            text += f"<b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {avg_score:.1f}/6\n\n"
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º
            text += "<b>–ü–æ —Ç–µ–º–∞–º:</b>\n"
            for topic_id, topic_stats in stats.items():
                if topic_stats['attempts'] > 0:
                    topic = task25_data.get('topic_by_id', {}).get(topic_id, {})
                    topic_title = topic.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')[:30]
                    
                    if topic_stats['scores']:
                        best = max(topic_stats['scores'])
                        last = topic_stats['scores'][-1]
                        text += f"‚Ä¢ {topic_title}: {best}/6 (–ø–æ–ø—ã—Ç–æ–∫: {topic_stats['attempts']})\n"
        else:
            text += "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def handle_reset_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ task25."""
    query = update.callback_query
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ task25
    context.user_data.pop('task25_results', None)
    context.user_data.pop('task25_practice_stats', None)
    context.user_data.pop('task25_achievements', None)
    
    await query.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é 25 —Å–±—Ä–æ—à–µ–Ω!", show_alert=True)
    return await settings_mode(update, context)

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def choose_practice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    
    text = "üí™ <b>–†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t25_random_all")],  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å t25_random –Ω–∞ t25_random_all
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫–∞–º", callback_data="t25_by_block")],
        [InlineKeyboardButton("üìà –ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", callback_data="t25_by_difficulty")],
        [InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è", callback_data="t25_recommended")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def handle_random_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    
    if topic_selector:
        user_id = update.effective_user.id
        topic = topic_selector.get_random_topic(user_id)
    else:
        # Fallback - –ø—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        if task25_data.get('topics'):
            topic = random.choice(task25_data['topics'])
        else:
            topic = None
    
    if not topic:
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
    context.user_data['current_topic'] = topic
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    from .utils import format_topic_for_display
    topic_text = format_topic_for_display(topic)
    
    await query.edit_message_text(
        f"{topic_text}\n\n"
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>",
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING


@safe_handler()
async def choose_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±–ª–æ–∫–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.callback_query
    
    blocks = list(task25_data.get("blocks", {}).keys())
    
    if not blocks:
        await query.edit_message_text(
            "‚ùå –ë–ª–æ–∫–∏ —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")
            ]])
        )
        return states.CHOOSING_MODE
    
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–º:</b>"
    
    kb_buttons = []
    for block in blocks:
        topics_count = len(task25_data["topics_by_block"].get(block, []))
        kb_buttons.append([
            InlineKeyboardButton(
                f"{block} ({topics_count} —Ç–µ–º)",
                callback_data=f"t25_block:{block}"
            )
        ])
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def by_difficulty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    query = update.callback_query
    
    text = "üìà <b>–í—ã–±–æ—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–µ", callback_data="t25_diff:easy")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–µ", callback_data="t25_diff:medium")],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–µ", callback_data="t25_diff:hard")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_practice")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def handle_difficulty_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    _, difficulty = query.data.split(':')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data['selected_difficulty'] = difficulty
    
    if topic_selector:
        user_id = update.effective_user.id
        topic = topic_selector.get_topic_by_difficulty(user_id, difficulty)
    else:
        # Fallback
        topics = [t for t in task25_data.get('topics', []) 
                 if t.get('difficulty', 'medium') == difficulty]
        topic = random.choice(topics) if topics else None
    
    if not topic:
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
    context.user_data['current_topic'] = topic
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É
    from .utils import format_topic_for_display
    topic_text = format_topic_for_display(topic)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data="t25_another_topic")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_by_difficulty")]
    ])
    
    await query.edit_message_text(
        f"{topic_text}\n\n"
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING

@safe_handler()
async def recommended_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
    await query.answer("üéØ –ü–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é...", show_alert=False)
    return await random_topic_all(update, context)

@safe_handler()
async def handle_recommended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º task25_practice_stats –≤–º–µ—Å—Ç–æ practice_stats
    user_stats = context.user_data.get('task25_practice_stats', {})
    
    if topic_selector and user_stats:
        user_id = update.effective_user.id
        topic = topic_selector.get_recommended_topic(user_id, user_stats)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        topics = [t for t in task25_data.get('topics', []) 
                 if t.get('difficulty', 'medium') == 'medium']
        topic = random.choice(topics) if topics else None
    
    if not topic:
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–º—É", show_alert=True)
        return states.CHOOSING_MODE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
    context.user_data['current_topic'] = topic
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
    from .utils import format_topic_for_display
    topic_text = format_topic_for_display(topic)
    
    recommendation_text = "üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞</b>\n"
    if user_stats:
        # –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω–∞ —ç—Ç–∞ —Ç–µ–º–∞
        topics_tried = len(user_stats)
        if topics_tried > 0:
            recommendation_text += f"<i>–í—ã–±—Ä–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ {topics_tried} –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ–º</i>\n\n"
        else:
            recommendation_text += "<i>–ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ–º—ã —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</i>\n\n"
    else:
        recommendation_text += "<i>–ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ–º—ã —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</i>\n\n"
    
    await query.edit_message_text(
        recommendation_text + topic_text + "\n\n"
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>",
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING

@safe_handler()
async def handle_topic_by_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–∑ –±–ª–æ–∫–∞."""
    query = update.callback_query
    
    block_name = query.data.split(":", 1)[1]
    context.user_data["selected_block"] = block_name
    
    topics = task25_data.get("topics_by_block", {}).get(block_name, [])
    
    text = f"üìö <b>–ë–ª–æ–∫: {block_name}</b>\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–º: {len(topics)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data=f"t25_list_topics:page:0")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", callback_data="t25_random_block")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–ª–æ–∫–∞–º", callback_data="t25_by_block")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_BLOCK_T25


@safe_handler()
async def handle_retry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ –∂–µ –∑–∞–¥–∞–Ω–∏–µ."""
    query = update.callback_query
    
    topic = context.user_data.get('current_topic')
    if not topic:
        return await choose_practice_mode(update, context)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ –∂–µ –∑–∞–¥–∞–Ω–∏–µ
    from .utils import format_topic_for_display
    topic_text = format_topic_for_display(topic)
    
    await query.edit_message_text(
        f"{topic_text}\n\n"
        "üìù <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:</b>\n\n"
        "<i>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ —Ç—Ä–∏ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è</i>",
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING

@safe_handler()
async def handle_new_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞."""
    query = update.callback_query
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
    if topic_selector:
        user_id = update.effective_user.id
        topic = topic_selector.get_random_topic(user_id)
    else:
        topics = task25_data.get('topics', [])
        topic = random.choice(topics) if topics else None
    
    if not topic:
        return states.CHOOSING_MODE
    
    context.user_data['current_topic'] = topic
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    from .utils import format_topic_for_display
    topic_text = format_topic_for_display(topic)
    
    await query.edit_message_text(
        f"{topic_text}\n\n"
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>",
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    
    current_strictness = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if evaluator and hasattr(evaluator, 'strictness'):
        current_strictness = evaluator.strictness.value
    
    text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏—è 25</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_strictness}
‚Ä¢ AI-–ø—Ä–æ–≤–µ—Ä–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if AI_EVALUATOR_AVAILABLE else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}

<b>–£—Ä–æ–≤–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
üü¢ <b>–ú—è–≥–∫–∏–π</b> - –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
üü° <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b> - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
üî¥ <b>–°—Ç—Ä–æ–≥–∏–π</b> - –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ï–ì–≠
üü£ <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å"""
    
    kb_buttons = []
    
    if AI_EVALUATOR_AVAILABLE and StrictnessLevel:
        kb_buttons.extend([
            [InlineKeyboardButton("üü¢ –ú—è–≥–∫–∏–π", callback_data="t25_strictness:lenient")],
            [InlineKeyboardButton("üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="t25_strictness:standard")],
            [InlineKeyboardButton("üî¥ –°—Ç—Ä–æ–≥–∏–π", callback_data="t25_strictness:strict")],
            [InlineKeyboardButton("üü£ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", callback_data="t25_strictness:expert")]
        ])
    
    kb_buttons.extend([
        [InlineKeyboardButton("üóë –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="t25_reset_progress")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE
    

@safe_handler()
async def confirm_reset_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    context.user_data['practice_stats'] = {}
    
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    return await show_settings(update, context)


@safe_handler()
async def show_example_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã
    _, topic_id = query.data.split(':')
    topic = task25_data.get('topic_by_id', {}).get(int(topic_id))
    
    if not topic:
        await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return states.CHOOSING_MODE
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    text = f"üìö <b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç</b>\n\n"
    text += f"<b>–¢–µ–º–∞:</b> {topic['title']}\n"
    text += f"{'‚îÄ' * 30}\n\n"
    
    if 'example_answers' in topic:
        example = topic['example_answers']
        
        # –ß–∞—Å—Ç—å 1 - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        if 'part1' in example:
            text += "<b>1. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞):</b>\n"
            if isinstance(example['part1'], dict):
                text += f"{example['part1'].get('answer', example['part1'])}\n\n"
            else:
                text += f"{example['part1']}\n\n"
        
        # –ß–∞—Å—Ç—å 2 - –û—Ç–≤–µ—Ç
        if 'part2' in example:
            text += "<b>2. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª):</b>\n"
            if isinstance(example['part2'], dict):
                text += f"{example['part2'].get('answer', example['part2'])}\n\n"
            else:
                text += f"{example['part2']}\n\n"
        
        # –ß–∞—Å—Ç—å 3 - –ü—Ä–∏–º–µ—Ä—ã
        if 'part3' in example:
            text += "<b>3. –ü—Ä–∏–º–µ—Ä—ã (3 –±–∞–ª–ª–∞):</b>\n"
            if isinstance(example['part3'], list):
                for i, ex in enumerate(example['part3'], 1):
                    if isinstance(ex, dict):
                        text += f"\n{i}) <b>{ex.get('type', '–ü—Ä–∏–º–µ—Ä')}:</b>\n"
                        text += f"{ex.get('example', ex)}\n"
                    else:
                        text += f"\n{i}) {ex}\n"
            else:
                text += f"{example['part3']}\n"
    else:
        text += "<i>–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω</i>"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É"
    buttons.append([InlineKeyboardButton(
        "üìù –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É",
        callback_data=f"t25_topic:{topic['id']}"
    )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–ª–æ–∫—É
    block_name = topic.get('block')
    if block_name:
        buttons.append([InlineKeyboardButton(
            f"üìö –î—Ä—É–≥–∏–µ —Ç–µ–º—ã –∏–∑ –±–ª–æ–∫–∞ ¬´{block_name}¬ª",
            callback_data=f"t25_examples_block:{block_name}"
        )])
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    buttons.extend([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t25_search_examples")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –±–∞–Ω–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤", callback_data="t25_examples")]
    ])
    
    kb = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def handle_select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞."""
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã
    _, topic_id = query.data.split(':')
    topic = task25_data.get('topic_by_id', {}).get(int(topic_id))
    
    if not topic:
        return states.CHOOSING_MODE
    
    context.user_data['current_topic'] = topic
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    from .utils import format_topic_for_display
    topic_text = format_topic_for_display(topic)
    
    await query.edit_message_text(
        f"{topic_text}\n\n"
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>",
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING


@safe_handler()
async def handle_try_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–µ—à–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–∞."""
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã
    _, topic_id = query.data.split(':')
    topic = task25_data.get('topic_by_id', {}).get(int(topic_id))
    
    if not topic:
        return states.CHOOSING_MODE
    
    context.user_data['current_topic'] = topic
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    from .utils import format_topic_for_display
    topic_text = format_topic_for_display(topic)
    
    await query.edit_message_text(
        f"{topic_text}\n\n"
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n"
        "<i>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã</i>",
        parse_mode=ParseMode.HTML
    )
    
    return states.ANSWERING

@safe_handler()
async def handle_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV."""
    query = update.callback_query
    user_id = query.from_user.id
    
    results = context.user_data.get('task25_results', [])
    
    if not results:
        await query.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return states.CHOOSING_MODE
    
    # –°–æ–∑–¥–∞–µ–º CSV
    import io
    import csv
    
    output = io.StringIO()
    writer = csv.writer(output, delimiter=';')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    writer.writerow(["–î–∞—Ç–∞", "–¢–µ–º–∞", "–ë–ª–æ–∫", "–ë–∞–ª–ª", "–ú–∞–∫—Å.–±–∞–ª–ª", "–ü—Ä–æ—Ü–µ–Ω—Ç"])
    
    for result in results:
        timestamp = result.get('timestamp', '')
        topic_title = result.get('topic_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')
        block = result.get('block', '–û–±—â–∏–µ —Ç–µ–º—ã')
        score = result.get('score', 0)
        max_score = 6
        percentage = f"{(score/max_score*100):.0f}%"
        
        writer.writerow([timestamp, topic_title, block, score, max_score, percentage])
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    total_score = sum(r.get('score', 0) for r in results)
    total_max = len(results) * 6
    avg_percentage = f"{(total_score/total_max*100):.0f}%" if total_max > 0 else "0%"
    
    writer.writerow([])
    writer.writerow(["–ò–¢–û–ì–û", "", "", total_score, total_max, avg_percentage])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    output.seek(0)
    await query.message.reply_document(
        document=io.BytesIO(output.getvalue().encode('utf-8-sig')),
        filename=f"task25_results_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
        caption="üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é 25\n\n–§–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ Excel –∏–ª–∏ Google Sheets"
    )
    
    await query.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    
    return states.CHOOSING_MODE
    
@safe_handler()
async def handle_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º."""
    query = update.callback_query
    
    results = context.user_data.get('task25_results', [])
    
    if not results:
        text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ–º–∞–º
        topic_stats = {}
        for result in results:
            topic_id = result.get('topic_id')
            topic_title = result.get('topic_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')
            
            if topic_id not in topic_stats:
                topic_stats[topic_id] = {
                    'title': topic_title,
                    'scores': [],
                    'block': result.get('block', '–û–±—â–∏–µ —Ç–µ–º—ã')
                }
            
            topic_stats[topic_id]['scores'].append(result.get('score', 0))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É
        sorted_topics = sorted(
            topic_stats.items(),
            key=lambda x: sum(x[1]['scores']) / len(x[1]['scores']),
            reverse=True
        )
        
        text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º</b>\n\n"
        
        for topic_id, data in sorted_topics[:10]:  # –¢–æ–ø-10 —Ç–µ–º
            avg_score = sum(data['scores']) / len(data['scores'])
            max_score = max(data['scores'])
            attempts = len(data['scores'])
            
            text += f"<b>{data['title']}</b>\n"
            text += f"–ë–ª–æ–∫: {data['block']}\n"
            text += f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/6\n"
            text += f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max_score}/6\n"
            text += f"–ü–æ–ø—ã—Ç–æ–∫: {attempts}\n\n"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ö –ø—Ä–æ–≥—Ä–µ—Å—Å—É", callback_data="t25_progress")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="t25_menu")]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def handle_reset_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    
    text = (
        "‚ö†Ô∏è <b>–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é 25?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="t25_do_reset"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="t25_progress")
        ]
    ])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE


@safe_handler()
async def handle_do_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data['task25_results'] = []
    context.user_data['task25_stats'] = {
        'total_attempts': 0,
        'topics_completed': [],
        'scores': [],
        'blocks_progress': {}
    }
    context.user_data['practice_stats'] = {}
    context.user_data.pop('correct_streak', None)
    
    await query.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    return await return_to_menu(update, context)

@safe_handler()
@validate_state_transition({states.ANSWERING})
async def handle_answer_document_task25(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è task25."""
    
    topic = context.user_data.get('current_topic')
    if not topic:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return states.CHOOSING_MODE
    
    extracted_text = await DocumentHandlerMixin.handle_document_answer(
        update, 
        context,
        task_name="—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç"
    )
    
    if not extracted_text:
        return states.ANSWERING
    
    # –î–ª—è task25 –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏
    current_part = context.user_data.get('current_part', 0)
    
    if current_part > 0:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ context
        context.user_data['document_text'] = extracted_text
        return await handle_answer_parts(update, context)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ context
        context.user_data['document_text'] = extracted_text
        return await safe_handle_answer_task25(update, context)
        
@safe_handler()
async def handle_all_examples(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã."""
    query = update.callback_query
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–º—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    topics_with_examples = [t for t in task25_data.get('topics', []) 
                           if 'example_answers' in t]
    
    if not topics_with_examples:
        await query.edit_message_text(
            "‚ùå –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_bank_search")
            ]])
        )
        return states.CHOOSING_MODE
    
    text = f"üìö <b>–ë–∞–Ω–∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</b>\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(topics_with_examples)}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º
    by_block = {}
    for topic in topics_with_examples:
        block = topic.get('block', '–î—Ä—É–≥–æ–µ')
        if block not in by_block:
            by_block[block] = []
        by_block[block].append(topic)
    
    kb_buttons = []
    for block, topics in sorted(by_block.items()):
        kb_buttons.append([InlineKeyboardButton(
            f"{block} ({len(topics)} —Ç–µ–º)",
            callback_data=f"t25_examples_block:{block}"
        )])
    
    kb_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_bank_search")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb_buttons),
        parse_mode=ParseMode.HTML
    )
    
    return states.CHOOSING_MODE

@safe_handler()
@validate_state_transition({states.CHOOSING_MODE})
async def show_theory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—é 25."""
    query = update.callback_query
    
    text = """üìö <b>–¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é 25</b>

<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:</b>

1Ô∏è‚É£ <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ö1 - 2 –±–∞–ª–ª–∞)</b>
‚Ä¢ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–∑–∏—Å–∞
‚Ä¢ –û–ø–æ—Ä–∞ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è
‚Ä¢ –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å —Å –≤–æ–ø—Ä–æ—Å–æ–º

2Ô∏è‚É£ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–ö2 - 1 –±–∞–ª–ª)</b>
‚Ä¢ –ß–µ—Ç–∫–∏–π –∏ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É

3Ô∏è‚É£ <b>–ü—Ä–∏–º–µ—Ä—ã (–ö3 - 3 –±–∞–ª–ª–∞)</b>
‚Ä¢ –¢—Ä–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞
‚Ä¢ –ò–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —Å –¥–µ—Ç–∞–ª—è–º–∏

<b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>
‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
‚ùå –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä—ã
‚ùå –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–µ–∑–∏—Å—É"""
    
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("üéØ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", callback_data="t25_practice"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="t25_menu")
    ]])
    
    await query.edit_message_text(
        text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    return states.CHOOSING_MODE
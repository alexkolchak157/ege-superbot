"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º 25."""

import random
import logging
from typing import List, Dict, Optional, Set
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class TopicSelector:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–º."""
    
    def __init__(self, topics: List[Dict]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ç–µ–º.
        
        Args:
            topics: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
        """
        self.topics = topics
        self.topic_by_id = {topic['id']: topic for topic in topics}
        self.used_topics: Dict[int, Set[str]] = {}  # user_id -> set of topic_ids
        self.topic_history: Dict[int, List[Dict]] = {}  # user_id -> list of attempts
        
    def get_random_topic(self, user_id: int, exclude_recent: int = 5) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            exclude_recent: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–º –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–º—ã –∏–ª–∏ None
        """
        if not self.topics:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_history = self.topic_history.get(user_id, [])
        recent_topic_ids = [h['topic_id'] for h in user_history[-exclude_recent:]]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
        available_topics = [
            topic for topic in self.topics 
            if topic['id'] not in recent_topic_ids
        ]
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–º—ã –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, –±–µ—Ä—ë–º –∏–∑ –≤—Å–µ—Ö
        if not available_topics:
            available_topics = self.topics
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
        selected = random.choice(available_topics)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._add_to_history(user_id, selected['id'])
        
        return selected
    
    def get_topic_by_difficulty(self, user_id: int, difficulty: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            difficulty: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (easy, medium, hard)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–º—ã –∏–ª–∏ None
        """
        filtered_topics = [
            topic for topic in self.topics
            if topic.get('difficulty', 'medium') == difficulty
        ]
        
        if not filtered_topics:
            logger.warning(f"No topics found for difficulty: {difficulty}")
            return self.get_random_topic(user_id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        return random.choice(filtered_topics)
    
    def get_topic_by_block(self, user_id: int, block_name: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –∏–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            block_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–º—ã –∏–ª–∏ None
        """
        filtered_topics = [
            topic for topic in self.topics
            if topic.get('block') == block_name
        ]
        
        if not filtered_topics:
            logger.warning(f"No topics found for block: {block_name}")
            return None
        
        return random.choice(filtered_topics)
    
    def get_recommended_topic(self, user_id: int, user_stats: Dict) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–º—ã –∏–ª–∏ None
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        weak_blocks = self._analyze_weak_areas(user_stats)
        
        if weak_blocks:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –∏–∑ —Å–ª–∞–±–æ–≥–æ –±–ª–æ–∫–∞
            block = random.choice(weak_blocks)
            return self.get_topic_by_block(user_id, block)
        
        # –ï—Å–ª–∏ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç, –¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        return self.get_topic_by_difficulty(user_id, 'hard')
    
    def _add_to_history(self, user_id: int, topic_id: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id not in self.topic_history:
            self.topic_history[user_id] = []
        
        self.topic_history[user_id].append({
            'topic_id': topic_id,
            'timestamp': datetime.now()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.topic_history[user_id]) > 50:
            self.topic_history[user_id] = self.topic_history[user_id][-50:]
    
    def _analyze_weak_areas(self, user_stats: Dict) -> List[str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–±—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
            
        Returns:
            –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤, –≥–¥–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∑–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        weak_blocks = []
        block_scores = {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –±–ª–æ–∫–∞–º
        for topic_id, stats in user_stats.items():
            if topic_id in self.topic_by_id and stats.get('scores'):
                topic = self.topic_by_id[topic_id]
                block = topic.get('block', 'unknown')
                
                if block not in block_scores:
                    block_scores[block] = []
                
                # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                block_scores[block].append(stats['scores'][-1])
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫–∏ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º < 3
        for block, scores in block_scores.items():
            if scores:
                avg_score = sum(scores) / len(scores)
                if avg_score < 3:
                    weak_blocks.append(block)
        
        return weak_blocks
    
    def get_statistics(self, user_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–µ–º.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        user_history = self.topic_history.get(user_id, [])
        
        # –°—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –±–ª–æ–∫–∞–º
        block_usage = {}
        for record in user_history:
            topic_id = record['topic_id']
            if topic_id in self.topic_by_id:
                topic = self.topic_by_id[topic_id]
                block = topic.get('block', 'unknown')
                block_usage[block] = block_usage.get(block, 0) + 1
        
        return {
            'total_attempts': len(user_history),
            'unique_topics': len(set(r['topic_id'] for r in user_history)),
            'block_usage': block_usage,
            'last_attempt': user_history[-1]['timestamp'] if user_history else None
        }


def format_topic_for_display(topic: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    text = "üìù <b>–ó–∞–¥–∞–Ω–∏–µ 25</b>\n\n"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã
    text += f"<b>–¢–µ–º–∞:</b> {topic.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    
    # –ë–ª–æ–∫
    if 'block' in topic:
        text += f"<b>–ë–ª–æ–∫:</b> {topic['block']}\n"
    
    # –°–ª–æ–∂–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if 'difficulty' in topic:
        diff_map = {
            'easy': 'üü¢ –õ—ë–≥–∫–∞—è',
            'medium': 'üü° –°—Ä–µ–¥–Ω—è—è',
            'hard': 'üî¥ –°–ª–æ–∂–Ω–∞—è'
        }
        text += f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {diff_map.get(topic['difficulty'], topic['difficulty'])}\n"
    
    text += "\n"
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏
    if 'parts' in topic:
        parts = topic['parts']
        
        if 'part1' in parts:
            text += f"<b>1. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞):</b>\n{parts['part1']}\n\n"
        
        if 'part2' in parts:
            text += f"<b>2. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª):</b>\n{parts['part2']}\n\n"
        
        if 'part3' in parts:
            text += f"<b>3. –ü—Ä–∏–º–µ—Ä—ã (3 –±–∞–ª–ª–∞):</b>\n{parts['part3']}\n\n"
    else:
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        text += f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{topic.get('task_text', '–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É
    text += "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:</b>\n"
    text += "1Ô∏è‚É£ –†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (2 –±–∞–ª–ª–∞)\n"
    text += "2Ô∏è‚É£ –¢–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (1 –±–∞–ª–ª)\n"
    text += "3Ô∏è‚É£ –¢—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞ (3 –±–∞–ª–ª–∞)\n"
    text += "\n<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: 6</i>"
    
    return text


def validate_answer_structure(answer: str) -> Dict[str, any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
    
    Args:
        answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
    paragraphs = [p.strip() for p in answer.split('\n\n') if p.strip()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    min_length = 150  # —Å–∏–º–≤–æ–ª–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    part1_keywords = ['–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ', '–ø–æ—Ç–æ–º—É —á—Ç–æ', '—Ç–∞–∫ –∫–∞–∫', '–ø–æ—Å–∫–æ–ª—å–∫—É']
    part2_keywords = ['–æ—Ç–≤–µ—Ç', '–¥–∞', '–Ω–µ—Ç', '—Å—á–∏—Ç–∞—é', '–ø–æ–ª–∞–≥–∞—é']
    part3_keywords = ['–ø—Ä–∏–º–µ—Ä', '–Ω–∞–ø—Ä–∏–º–µ—Ä', '–≤–æ-–ø–µ—Ä–≤—ã—Ö', '–≤–æ-–≤—Ç–æ—Ä—ã—Ö', '–≤-—Ç—Ä–µ—Ç—å–∏—Ö', '1)', '2)', '3)']
    
    has_part1 = any(keyword in answer.lower() for keyword in part1_keywords)
    has_part2 = len(paragraphs) >= 2
    has_part3 = any(keyword in answer.lower() for keyword in part3_keywords)
    
    # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    example_count = 0
    for marker in ['1)', '2)', '3)', '–≤–æ-–ø–µ—Ä–≤—ã—Ö', '–≤–æ-–≤—Ç–æ—Ä—ã—Ö', '–≤-—Ç—Ä–µ—Ç—å–∏—Ö', '–ø—Ä–∏–º–µ—Ä']:
        example_count += answer.lower().count(marker)
    
    return {
        'total_length': len(answer),
        'paragraph_count': len(paragraphs),
        'meets_min_length': len(answer) >= min_length,
        'has_reasoning': has_part1,
        'has_answer': has_part2,
        'has_examples': has_part3,
        'example_count': min(example_count, 3),
        'structure_ok': len(paragraphs) >= 3 and len(answer) >= min_length
    }
"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è task25."""

import random
from typing import List, Dict, Optional, Set
from difflib import SequenceMatcher

class TopicSelector:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–º."""
    
    def __init__(self, topics: List[Dict]):
        self.topics = topics
        self.topic_by_id = {t['id']: t for t in topics}
        self.topics_by_block = self._group_by_block(topics)
    
    def _group_by_block(self, topics: List[Dict]) -> Dict[str, List[Dict]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–µ–º—ã –ø–æ –±–ª–æ–∫–∞–º."""
        grouped = {}
        for topic in topics:
            block = topic.get('block', '–î—Ä—É–≥–æ–µ')
            if block not in grouped:
                grouped[block] = []
            grouped[block].append(topic)
        return grouped
    
    def get_random_topic(
        self, 
        block: Optional[str] = None,
        exclude_ids: Optional[Set[int]] = None
    ) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É."""
        if block:
            pool = self.topics_by_block.get(block, [])
        else:
            pool = self.topics
        
        if exclude_ids:
            pool = [t for t in pool if t['id'] not in exclude_ids]
        
        return random.choice(pool) if pool else None
    
    def search_topics(self, query: str, threshold: float = 0.6) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
        query_lower = query.lower()
        results = []
        
        for topic in self.topics:
            # –ò—â–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            title_score = SequenceMatcher(
                None, 
                query_lower, 
                topic.get('title', '').lower()
            ).ratio()
            
            # –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞–Ω–∏—è
            task_score = 0
            task_text = topic.get('task_text', '').lower()
            if query_lower in task_text:
                task_score = 0.8
            else:
                task_score = SequenceMatcher(
                    None, 
                    query_lower, 
                    task_text[:200]  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                ).ratio() * 0.5
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á—ë—Ç
            score = max(title_score, task_score)
            
            if score >= threshold:
                results.append((score, topic))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x[0], reverse=True)
        
        return [topic for _, topic in results[:10]]  # –¢–æ–ø-10
    
    def get_recommended_topics(
        self, 
        completed_ids: Set[int],
        last_topic_id: Optional[int] = None,
        limit: int = 3
    ) -> List[Dict]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        # –ù–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
        not_completed = [
            t for t in self.topics 
            if t['id'] not in completed_ids
        ]
        
        if not not_completed:
            # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ
            return random.sample(self.topics, min(limit, len(self.topics)))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
        if last_topic_id and last_topic_id in self.topic_by_id:
            last_topic = self.topic_by_id[last_topic_id]
            last_block = last_topic.get('block')
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ–º–∞–º –∏–∑ —Ç–æ–≥–æ –∂–µ –±–ª–æ–∫–∞
            same_block = [
                t for t in not_completed 
                if t.get('block') == last_block
            ]
            
            if same_block:
                recommendations = random.sample(
                    same_block, 
                    min(limit, len(same_block))
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if len(recommendations) < limit:
                    other_blocks = [
                        t for t in not_completed 
                        if t.get('block') != last_block
                    ]
                    if other_blocks:
                        additional = random.sample(
                            other_blocks,
                            min(limit - len(recommendations), len(other_blocks))
                        )
                        recommendations.extend(additional)
                
                return recommendations
        
        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ
        return random.sample(not_completed, min(limit, len(not_completed)))


def format_score_emoji(score: int, max_score: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    percentage = (score / max_score) * 100 if max_score > 0 else 0
    
    if percentage >= 90:
        return "üèÜ"
    elif percentage >= 75:
        return "‚ú®"
    elif percentage >= 60:
        return "üëç"
    elif percentage >= 40:
        return "üí™"
    else:
        return "üìö"


def split_answer_parts(answer: str) -> Dict[str, str]:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏."""
    # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã —á–∞—Å—Ç–µ–π
    lines = answer.strip().split('\n')
    
    parts = {
        'part1': '',
        'part2': '',
        'part3': ''
    }
    
    current_part = None
    current_text = []
    
    for line in lines:
        line_lower = line.lower().strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —á–∞—Å—Ç–∏
        if any(marker in line_lower for marker in ['–æ–±–æ—Å–Ω–æ–≤–∞–Ω', '1)', '1.', '—á–∞—Å—Ç—å 1']):
            if current_part and current_text:
                parts[current_part] = '\n'.join(current_text).strip()
            current_part = 'part1'
            current_text = []
            # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
            if len(line.strip()) < 20:
                continue
        
        elif any(marker in line_lower for marker in ['–æ—Ç–≤–µ—Ç', '2)', '2.', '—á–∞—Å—Ç—å 2']):
            if current_part and current_text:
                parts[current_part] = '\n'.join(current_text).strip()
            current_part = 'part2'
            current_text = []
            if len(line.strip()) < 20:
                continue
        
        elif any(marker in line_lower for marker in ['–ø—Ä–∏–º–µ—Ä', '3)', '3.', '—á–∞—Å—Ç—å 3']):
            if current_part and current_text:
                parts[current_part] = '\n'.join(current_text).strip()
            current_part = 'part3'
            current_text = []
            if len(line.strip()) < 20:
                continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
        if current_part:
            current_text.append(line)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part and current_text:
        parts[current_part] = '\n'.join(current_text).strip()
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º
    if not any(parts.values()):
        sections = answer.strip().split('\n\n')
        if len(sections) >= 3:
            parts['part1'] = sections[0]
            parts['part2'] = sections[1]
            parts['part3'] = '\n\n'.join(sections[2:])
    
    return parts


def validate_topic_data(topic: Dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ç–µ–º—ã."""
    required_fields = ['id', 'title', 'task_text', 'block']
    
    for field in required_fields:
        if field not in topic or not topic[field]:
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    if 'example_answers' in topic:
        examples = topic['example_answers']
        if not isinstance(examples, dict):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–º–µ—Ä–æ–≤
        if 'part1' in examples and not isinstance(examples['part1'], dict):
            return False
        if 'part2' in examples and not isinstance(examples['part2'], dict):
            return False
        if 'part3' in examples and not isinstance(examples['part3'], list):
            return False
    
    return True
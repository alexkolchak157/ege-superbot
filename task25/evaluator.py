"""AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 25 —á–µ—Ä–µ–∑ YandexGPT."""

import logging
import os
import json
from enum import Enum
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
try:
    from core.ai_evaluator import (
        BaseAIEvaluator,
        EvaluationResult,
        TaskRequirements,
    )
    from core.ai_service import YandexGPTService, YandexGPTConfig, YandexGPTModel
    AI_EVALUATOR_AVAILABLE = True
except ImportError as e:
    logger.warning(f"AI evaluator components not available: {e}")
    AI_EVALUATOR_AVAILABLE = False
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ AI
    @dataclass
    class TaskRequirements:
        task_number: int
        task_name: str
        max_score: int
        criteria: List[Dict]
        description: str
    
    
    class BaseAIEvaluator:
        def __init__(self, requirements: TaskRequirements):
            self.requirements = requirements
    
    class YandexGPTService:
        pass
    
    class YandexGPTConfig:
        pass
    
class YandexGPTModel:
    LITE = "yandexgpt-lite"
    PRO = "yandexgpt"


class Task25EvaluationResult(EvaluationResult if AI_EVALUATOR_AVAILABLE else object):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 25."""

    def format_feedback(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"

        # –ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        text += "<b>–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:</b>\n"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏ –∏–∑ scores, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å k1_score, k2_score, k3_score –∏–ª–∏ –ö1, –ö2, –ö3
        scores = self.scores if hasattr(self, 'scores') and self.scores else {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–ª—é—á–µ–π
        k1_score = scores.get('k1_score', scores.get('–ö1', 0))
        k2_score = scores.get('k2_score', scores.get('–ö2', 0))
        k3_score = scores.get('k3_score', scores.get('–ö3', 0))

        text += f"–ö1 (–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ): {k1_score}/2\n"
        text += f"–ö2 (–û—Ç–≤–µ—Ç): {k2_score}/1\n"
        text += f"–ö3 (–ü—Ä–∏–º–µ—Ä—ã): {k3_score}/3\n"

        # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
        text += f"\n<b>–ò—Ç–æ–≥–æ: {self.total_score}/{self.max_score} –±–∞–ª–ª–æ–≤</b>\n\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        if self.feedback:
            text += f"{self.feedback}\n"

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.detailed_analysis:
            text += "\n<b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>\n"

            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            if 'k1_comment' in self.detailed_analysis:
                text += f"\n<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b> {self.detailed_analysis['k1_comment']}\n"

            if 'k2_comment' in self.detailed_analysis:
                text += f"\n<b>–û—Ç–≤–µ—Ç:</b> {self.detailed_analysis['k2_comment']}\n"

            if 'k3_comment' in self.detailed_analysis:
                text += f"\n<b>–ü—Ä–∏–º–µ—Ä—ã:</b> {self.detailed_analysis['k3_comment']}\n"

                # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
                if 'k3_examples_found' in self.detailed_analysis:
                    examples = self.detailed_analysis['k3_examples_found']
                    if examples and isinstance(examples, list):
                        text += "\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
                        for i, ex in enumerate(examples[:3], 1):
                            text += f"{i}. {ex}\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.suggestions:
            text += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for suggestion in self.suggestions:
                text += f"‚Ä¢ {suggestion}\n"

        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if self.factual_errors:
            text += "\n‚ö†Ô∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
            for error in self.factual_errors:
                if isinstance(error, dict):
                    text += f"‚Ä¢ {error.get('error', error)}"
                    if 'correction' in error:
                        text += f" ‚Üí {error['correction']}"
                    text += "\n"
                else:
                    text += f"‚Ä¢ {error}\n"

        return text

class StrictnessLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    LENIENT = "–ú—è–≥–∫–∏–π"
    STANDARD = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" 
    STRICT = "–°—Ç—Ä–æ–≥–∏–π"
    EXPERT = "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π"


class Task25AIEvaluator(BaseAIEvaluator if AI_EVALUATOR_AVAILABLE else object):
    """AI-–ø—Ä–æ–≤–µ—Ä—â–∏–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 25 —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—Ç—Ä–æ–≥–æ—Å—Ç—å—é."""
    
    def __init__(self, strictness: StrictnessLevel = StrictnessLevel.STANDARD):
        self.strictness = strictness
        
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–¥–∞–Ω–∏—é 25
        requirements = TaskRequirements(
            task_number=25,
            task_name="–†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç",
            max_score=6,
            criteria=[
                {
                    "code": "–ö1",
                    "name": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
                    "max_score": 2,
                    "description": "–ü—Ä–∏–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ç–µ–æ—Ä–∏—é"
                },
                {
                    "code": "–ö2", 
                    "name": "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
                    "max_score": 1,
                    "description": "–î–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
                },
                {
                    "code": "–ö3",
                    "name": "–ü—Ä–∏–º–µ—Ä—ã",
                    "max_score": 3,
                    "description": "–ü—Ä–∏–≤–µ–¥–µ–Ω—ã —Ç—Ä–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞ (–ø–æ 1 –±–∞–ª–ª—É –∑–∞ –∫–∞–∂–¥—ã–π)"
                }
            ],
            description="–û–±–æ—Å–Ω—É–π—Ç–µ, –æ—Ç–≤–µ—Ç—å—Ç–µ –∏ –ø—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã"
        )
        
        if AI_EVALUATOR_AVAILABLE:
            super().__init__(requirements)
            self._init_ai_service()
        else:
            self.requirements = requirements
            self.ai_service = None
    
    def _init_ai_service(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-—Å–µ—Ä–≤–∏—Å–∞."""
        if not AI_EVALUATOR_AVAILABLE:
            return
            
        try:
            config = YandexGPTConfig(
                api_key=os.getenv('YANDEX_GPT_API_KEY'),
                folder_id=os.getenv('YANDEX_GPT_FOLDER_ID'),
                model=YandexGPTModel.PRO,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º PRO –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                temperature=self._get_temperature(),
                max_tokens=3000
            )
            self.ai_service = YandexGPTService(config)
            logger.info(f"Task25 AI service initialized with {self.strictness.value} strictness")
        except Exception as e:
            logger.error(f"Failed to initialize AI service: {e}")
            self.ai_service = None
    
    def get_temperature(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è AI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏."""
        temps = {
            StrictnessLevel.LENIENT: 0.3,
            StrictnessLevel.STANDARD: 0.2,
            StrictnessLevel.STRICT: 0.1,
            StrictnessLevel.EXPERT: 0.05
        }
        return temps.get(self.strictness, 0.2)

    def _get_temperature(self) -> float:
        """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        return self.get_temperature()
    
    def get_system_prompt(self, mode='full') -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è 25."""
        
        if mode == 'parts':
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            base_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –æ—Ç–¥–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è 25.

    –í–ê–ñ–ù–û: –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –û–î–ù–ê –ß–ê–°–¢–¨ –∑–∞–¥–∞–Ω–∏—è, –Ω–µ –≤–µ—Å—å –æ—Ç–≤–µ—Ç.

    –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Å—Ç–∏ –ö1 (–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ):
    - 2 –±–∞–ª–ª–∞: —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–æ—Ä–∏–µ–π, –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    - 1 –±–∞–ª–ª: –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏
    - 0 –±–∞–ª–ª–æ–≤: –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ

    –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Å—Ç–∏ –ö2 (–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å):
    - 1 –±–∞–ª–ª: –¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    - 0 –±–∞–ª–ª–æ–≤: –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Å—Ç–∏ –ö3 (–ø—Ä–∏–º–µ—Ä—ã):
    - –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ (0-1 –±–∞–ª–ª)
    - –ú–∞–∫—Å–∏–º—É–º 3 –±–∞–ª–ª–∞ –∑–∞ —Ç—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞
    - –ü—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º
    """
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            base_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∑–∞–¥–∞–Ω–∏–µ 25.

    –ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ò–í–ê–ù–ò–Ø:

    –ö1 - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (0-2 –±–∞–ª–ª–∞):
    - 2 –±–∞–ª–ª–∞: —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ç–µ–æ—Ä–∏—é, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    - 1 –±–∞–ª–ª: –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏
    - 0 –±–∞–ª–ª–æ–≤: –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ

    –ö2 - –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (0-1 –±–∞–ª–ª):
    - 1 –±–∞–ª–ª: –¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    - 0 –±–∞–ª–ª–æ–≤: –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    –ö3 - –ü—Ä–∏–º–µ—Ä—ã (0-3 –±–∞–ª–ª–∞):
    - –ü–æ 1 –±–∞–ª–ª—É –∑–∞ –∫–∞–∂–¥—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä (–º–∞–∫—Å–∏–º—É–º 3)
    - –ü—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, —Å –¥–µ—Ç–∞–ª—è–º–∏
    - –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã

    –í–ê–ñ–ù–û:
    - –£—á–∏—Ç—ã–≤–∞–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    - –ü—Ä–æ–≤–µ—Ä—è–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
    - –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –∂–∏–∑–Ω–∏ –†–§ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    """
        
        # –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏
        if self.strictness == StrictnessLevel.LENIENT:
            base_prompt += "\n–ë—É–¥—å –ú–Ø–ì–ö–ò–ú –≤ –æ—Ü–µ–Ω–∫–µ. –ó–∞—Å—á–∏—Ç—ã–≤–∞–π —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
        elif self.strictness == StrictnessLevel.STRICT:
            base_prompt += "\n–ü—Ä–∏–º–µ–Ω—è–π –°–¢–†–û–ì–ò–ï –∫—Ä–∏—Ç–µ—Ä–∏–∏ –§–ò–ü–ò. –¢—Ä–µ–±—É–π –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è."
        elif self.strictness == StrictnessLevel.EXPERT:
            base_prompt += "\n–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø —Å—Ç—Ä–æ–≥–æ—Å—Ç—å. –õ—é–±—ã–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–Ω–∏–∂–∞—é—Ç –±–∞–ª–ª."
        
        return base_prompt
    
    async def evaluate(
        self, 
        answer: str, 
        topic: Dict[str, Any],
        user_id: Optional[int] = None
    ) -> EvaluationResult:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ 25."""
        
        if not self.ai_service:
            return self._get_fallback_result()
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            eval_prompt = self._build_evaluation_prompt(answer, topic)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º async with –¥–ª—è ai_service
            async with self.ai_service as service:
                result = await service.get_completion(
                    prompt=eval_prompt,
                    system_prompt=self.get_system_prompt(),
                    temperature=self.get_temperature()
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            if not result["success"]:
                logger.error(f"AI service error: {result.get('error', 'Unknown error')}")
                return self._get_fallback_result()
            
            response = result["text"]
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            parsed_result = self._parse_ai_response(response)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏
            validated_result = self._validate_scores(parsed_result)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return self._create_evaluation_result(validated_result, topic)
            
        except Exception as e:
            logger.error(f"Error during AI evaluation: {e}", exc_info=True)
            return self._get_fallback_result()
    
    def _build_evaluation_prompt(self, answer: str, topic: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞."""
        task_text = topic.get('task_text', '')
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        parts = topic.get('parts', {})
        part1 = parts.get('part1', '')
        part2 = parts.get('part2', '')
        part3 = parts.get('part3', '')
        
        prompt = f"""–û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ 25.

–ó–ê–î–ê–ù–ò–ï:
{task_text}

–ß–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è:
1) {part1}
2) {part2}
3) {part3}

–û–¢–í–ï–¢ –£–ß–ï–ù–ò–ö–ê:
{answer}

–û—Ü–µ–Ω–∏ –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "k1_score": 0-2,
    "k1_comment": "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—é",
    "k2_score": 0-1,
    "k2_comment": "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –≤–æ–ø—Ä–æ—Å",
    "k3_score": 0-3,
    "k3_comment": "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º",
    "k3_examples_found": ["–ø—Ä–∏–º–µ—Ä 1", "–ø—Ä–∏–º–µ—Ä 2", "–ø—Ä–∏–º–µ—Ä 3"],
    "total_score": 0-6,
    "general_feedback": "–æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
    "suggestions": ["—Å–æ–≤–µ—Ç 1", "—Å–æ–≤–µ—Ç 2"],
    "factual_errors": ["–æ—à–∏–±–∫–∞ 1", "–æ—à–∏–±–∫–∞ 2"]
}}"""
        
        return prompt
    
    def _parse_ai_response(self, response: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI."""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            import re
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            else:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç
                return self._parse_text_response(response)
        except Exception as e:
            logger.error(f"Failed to parse AI response: {e}")
            return {}
    
    def _validate_scores(self, result: Dict) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –æ—Ü–µ–Ω–∫–∏."""
        validated = result.copy()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö1 (0-2)
        k1 = validated.get('k1_score', 0)
        validated['k1_score'] = max(0, min(2, int(k1)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö2 (0-1)
        k2 = validated.get('k2_score', 0)
        validated['k2_score'] = max(0, min(1, int(k2)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö3 (0-3)
        k3 = validated.get('k3_score', 0)
        validated['k3_score'] = max(0, min(3, int(k3)))
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        validated['total_score'] = (
            validated['k1_score'] + 
            validated['k2_score'] + 
            validated['k3_score']
        )
        
        return validated
    
    def _create_evaluation_result(self, result: Dict, topic: Dict) -> Task25EvaluationResult:
        """–°–æ–∑–¥–∞—ë—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π format_feedback."""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–ª—ã
        scores = {
            'k1_score': result.get('k1_score', 0),
            'k2_score': result.get('k2_score', 0),
            'k3_score': result.get('k3_score', 0)
        }
        
        total_score = result.get('total_score', sum(scores.values()))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if total_score >= 5:
            feedback = "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –û—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
        elif total_score >= 3:
            feedback = "üëç –•–æ—Ä–æ—à–æ! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–¥–æ—á—ë—Ç—ã."
        else:
            feedback = "üìù –ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.get('general_feedback'):
            feedback = result['general_feedback']
        
        # –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        detailed_analysis = {
            'k1_comment': result.get('k1_comment', ''),
            'k2_comment': result.get('k2_comment', ''),
            'k3_comment': result.get('k3_comment', ''),
            'k3_examples_found': result.get('k3_examples_found', [])
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        eval_result = Task25EvaluationResult(
            scores=scores,
            total_score=total_score,
            max_score=6,
            feedback=feedback,
            detailed_analysis=detailed_analysis,
            suggestions=result.get('suggestions', []),
            factual_errors=result.get('factual_errors', [])
        )
        
        return eval_result
    
    def _get_fallback_result(self) -> EvaluationResult:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ AI."""
        return EvaluationResult(
            scores={'k1_score': 0, 'k2_score': 0, 'k3_score': 0},
            total_score=0,
            max_score=6,
            feedback="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.",
            detailed_analysis=None,
            suggestions=["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–∑–∂–µ"],
            factual_errors=None
        )

    def _parse_text_response(self, response: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç AI –µ—Å–ª–∏ JSON –Ω–µ —É–¥–∞–ª—Å—è."""
        result = {
            'k1_score': 0,
            'k2_score': 0,
            'k3_score': 0,
            'total_score': 0,
            'general_feedback': '',
            'k1_comment': '',
            'k2_comment': '',
            'k3_comment': '',
            'k3_examples_found': [],
            'suggestions': [],
            'factual_errors': []
        }
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–∞–ª–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            import re
            
            # –ö1 (0-2 –±–∞–ª–ª–∞)
            k1_match = re.search(r'–ö1.*?(\d+)\s*–±–∞–ª–ª', response, re.IGNORECASE)
            if k1_match:
                result['k1_score'] = min(2, int(k1_match.group(1)))
            
            # –ö2 (0-1 –±–∞–ª–ª)
            k2_match = re.search(r'–ö2.*?(\d+)\s*–±–∞–ª–ª', response, re.IGNORECASE)
            if k2_match:
                result['k2_score'] = min(1, int(k2_match.group(1)))
            
            # –ö3 (0-3 –±–∞–ª–ª–∞)
            k3_match = re.search(r'–ö3.*?(\d+)\s*–±–∞–ª–ª', response, re.IGNORECASE)
            if k3_match:
                result['k3_score'] = min(3, int(k3_match.group(1)))
            
            # –û–±—â–∏–π –±–∞–ª–ª
            total_match = re.search(r'(?:–ò—Ç–æ–≥|–û–±—â|–í—Å–µ–≥–æ).*?(\d+).*?–±–∞–ª–ª', response, re.IGNORECASE)
            if total_match:
                result['total_score'] = int(total_match.group(1))
            else:
                result['total_score'] = result['k1_score'] + result['k2_score'] + result['k3_score']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏
            lines = response.split('\n')
            current_section = None
            
            for line in lines:
                line = line.strip()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é
                if re.search(r'–ö1|–æ–±–æ—Å–Ω–æ–≤–∞–Ω', line, re.IGNORECASE):
                    current_section = 'k1'
                elif re.search(r'–ö2|–æ—Ç–≤–µ—Ç', line, re.IGNORECASE):
                    current_section = 'k2'
                elif re.search(r'–ö3|–ø—Ä–∏–º–µ—Ä', line, re.IGNORECASE):
                    current_section = 'k3'
                elif re.search(r'—Ä–µ–∫–æ–º–µ–Ω–¥|—Å–æ–≤–µ—Ç', line, re.IGNORECASE):
                    current_section = 'suggestions'
                elif re.search(r'–æ—à–∏–±–∫|–Ω–µ—Ç–æ—á–Ω–æ—Å—Ç', line, re.IGNORECASE):
                    current_section = 'errors'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é
                if current_section == 'k1' and len(line) > 10:
                    result['k1_comment'] += line + ' '
                elif current_section == 'k2' and len(line) > 10:
                    result['k2_comment'] += line + ' '
                elif current_section == 'k3' and len(line) > 10:
                    result['k3_comment'] += line + ' '
                elif current_section == 'suggestions' and line.startswith(('‚Ä¢', '-', '*')):
                    result['suggestions'].append(line.lstrip('‚Ä¢-* '))
                elif current_section == 'errors' and line.startswith(('‚Ä¢', '-', '*')):
                    result['factual_errors'].append(line.lstrip('‚Ä¢-* '))
            
            # –û–±—â–∏–π —Ñ–∏–¥–±–µ–∫
            result['general_feedback'] = f"–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω—ë–Ω –Ω–∞ {result['total_score']} –∏–∑ 6 –±–∞–ª–ª–æ–≤."
            
        except Exception as e:
            logger.error(f"Error parsing text response: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ
            result['general_feedback'] = "–û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        return result
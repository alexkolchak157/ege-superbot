from typing import List, Optional
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å "—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º"
try:
    from .topic_data import TOPIC_NAMES
except ImportError:      # –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—â—ë –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª –≤ –ø–∞–∫–µ—Ç ‚Äì –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å id —Ç–µ–º
    logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª topic_data.py –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å TOPIC_NAMES –≤ –Ω—ë–º.")
    TOPIC_NAMES: dict = {}

# ---------------------------------------------------------------------------
# 1. –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ü–õ–ê–ì–ò–ù–û–í
# ---------------------------------------------------------------------------

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–î–≤–µ –∫–Ω–æ–ø–∫–∏ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥—ã –∫ –ø–ª–∞–≥–∏–Ω–∞–º —á–µ—Ä–µ–∑ callback_data choose_<code>."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å", callback_data="choose_test_part"),
            InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 24",   callback_data="choose_task24"),
        ]
    ])

# ---------------------------------------------------------------------------
# 2. –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –î–õ–Ø –¢–ï–°–¢-–ë–û–¢–ê
# ---------------------------------------------------------------------------

def get_initial_choice_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –≤—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî¢ –ü–æ –Ω–æ–º–µ—Ä—É –ï–ì–≠",          callback_data="mode:choose_exam_num")],
        [InlineKeyboardButton("üìö –ü–æ –±–ª–æ–∫—É —Ç–µ–º",            callback_data="mode:choose_topic")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≤—Å–µ)", callback_data="mode:random")],
    ])

# ---------------------------------------------------------------------------
# 3. –ë–õ–û–ö–ò, –†–ï–ñ–ò–ú–´, –¢–ï–ú–´
# ---------------------------------------------------------------------------

def get_blocks_keyboard(blocks: List[str]) -> Optional[InlineKeyboardMarkup]:
    if not blocks:
        return None
    buttons, row = [], []
    for i, block in enumerate(blocks, 1):
        row.append(InlineKeyboardButton(block, callback_data=f"block:{block}"))
        if i % 2 == 0:
            buttons.append(row); row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_menu")])
    return InlineKeyboardMarkup(buttons)

def get_mode_keyboard(block_name: str) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ *–≤–Ω—É—Ç—Ä–∏* –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –±–ª–æ–∫–∞", callback_data="mode:random")],
        [InlineKeyboardButton("üìö –ü–æ —Ç–µ–º–µ –±–ª–æ–∫–∞",      callback_data="mode:choose_topic")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –±–ª–æ–∫–∞–º",     callback_data="to_blocks")],
    ])

def get_topics_keyboard(block_name: str, topics: List[str]) -> Optional[InlineKeyboardMarkup]:
    if not topics:
        return None
    buttons = [[InlineKeyboardButton(TOPIC_NAMES.get(t, t), callback_data=f"topic:{t}")]
               for t in topics]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∂–∏–º—É", callback_data="to_mode")])
    return InlineKeyboardMarkup(buttons)

def get_exam_number_keyboard(numbers: List[int]) -> Optional[InlineKeyboardMarkup]:
    if not numbers:
        return None
    buttons, row = [], []
    for i, n in enumerate(sorted(numbers), 1):
        row.append(InlineKeyboardButton(str(n), callback_data=f"examnum:{n}"))
        if i % 6 == 0:
            buttons.append(row); row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_menu")])
    return InlineKeyboardMarkup(buttons)

# ---------------------------------------------------------------------------
# 4. –ü–û–°–õ–ï –û–¢–í–ï–¢–ê ‚Äì –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï?
# ---------------------------------------------------------------------------

def get_after_answer_keyboard(last_mode: str = "random") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞.
    last_mode –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–∑ quiz_handlers, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é
    –ø–æ–¥–ø–∏—Å—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (–µ—â—ë –≤–æ–ø—Ä–æ—Å / –µ—â—ë –ø–æ —Ç–µ–º–µ –∏ —Ç.–¥.)."""

    main_button: InlineKeyboardButton
    if last_mode == "topic":
        main_button = InlineKeyboardButton("‚û°Ô∏è –ï—â—ë –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ", callback_data="next_topic")
    elif last_mode == "exam_num":
        main_button = InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä", callback_data="next_random")
    else:  # random
        main_button = InlineKeyboardButton("‚û°Ô∏è –ï—â—ë —Å–ª—É—á–∞–π–Ω—ã–π", callback_data="next_random")

    return InlineKeyboardMarkup([
        [main_button],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É / —Ä–µ–∂–∏–º", callback_data="change_topic")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",          callback_data="to_menu")],
    ])

# ---------------------------------------------------------------------------
# 5. –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –û–®–ò–ë–ö–ê–ú (—Ä–∞–∑–±–æ—Ä)
# ---------------------------------------------------------------------------

def get_mistakes_nav_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞", callback_data="mistake:next")],
        [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",        callback_data="mistake:skip")],
        [InlineKeyboardButton("üö™ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä",  callback_data="mistake:exit")],
    ])
